/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // import * as d3 from 'd3'\n\n// import newsroom from './newsroom'\n\n\n__webpack_require__(13);\n\nvar _graphic = __webpack_require__(5);\n\nvar _graphic2 = _interopRequireDefault(_graphic);\n\nvar _histogram = __webpack_require__(6);\n\nvar _histogram2 = _interopRequireDefault(_histogram);\n\nvar _table = __webpack_require__(12);\n\nvar _table2 = _interopRequireDefault(_table);\n\nvar _slope = __webpack_require__(9);\n\nvar _slope2 = _interopRequireDefault(_slope);\n\nvar _swarm = __webpack_require__(11);\n\nvar _swarm2 = _interopRequireDefault(_swarm);\n\nvar _scatters = __webpack_require__(8);\n\nvar _scatters2 = _interopRequireDefault(_scatters);\n\nvar _arrowScatter = __webpack_require__(3);\n\nvar _arrowScatter2 = _interopRequireDefault(_arrowScatter);\n\nvar _swarmLeader = __webpack_require__(10);\n\nvar _swarmLeader2 = _interopRequireDefault(_swarmLeader);\n\nvar _maps = __webpack_require__(7);\n\nvar _maps2 = _interopRequireDefault(_maps);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction cleanTk(d) {\n\treturn _extends({}, d);\n}\n\nfunction init() {\n\treturn new Promise(function (resolve, reject) {\n\t\td3.queue().defer(d3.csv, 'assets/map_data_3.csv').defer(d3.csv, 'assets/lats.csv').defer(d3.csv, 'assets/newsidsunique_2.csv').defer(d3.csv, 'assets/news_ids.csv').defer(d3.json, 'assets/usJson.json').defer(d3.csv, 'assets/top_3.csv').defer(d3.csv, 'assets/census.csv').awaitAll(function (err, result) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t_maps2.default.init(result[0], result[1], result[2], result[3], result[4]);\n\t\t\t\t_arrowScatter2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_scatters2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_swarm2.default.init(result[0], result[1], result[2], result[3], result[5], result[6]);\n\t\t\t\t_swarmLeader2.default.init(result[0], result[1], result[2], result[3], result[5]);\n\t\t\t\t_graphic2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_histogram2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_table2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_slope2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t// newsroom.init();\n\t\t\t}\n\t\t});\n\t});\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvbG9hZC1kYXRhLmpzPzdhZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnXG5pbXBvcnQgJ3Byb21pcydcbmltcG9ydCBncmFwaGljIGZyb20gJy4vZ3JhcGhpYydcbmltcG9ydCBoaXN0b2dyYW0gZnJvbSAnLi9oaXN0b2dyYW0nXG5pbXBvcnQgdGFibGUgZnJvbSAnLi90YWJsZSdcbi8vIGltcG9ydCBuZXdzcm9vbSBmcm9tICcuL25ld3Nyb29tJ1xuaW1wb3J0IHNsb3BlIGZyb20gJy4vc2xvcGUnXG5pbXBvcnQgc3dhcm0gZnJvbSAnLi9zd2FybSdcbmltcG9ydCBzY2F0dGVyIGZyb20gJy4vc2NhdHRlcnMnXG5pbXBvcnQgYXJyb3dTY2F0dGVyIGZyb20gJy4vYXJyb3ctc2NhdHRlcidcbmltcG9ydCBzd2FybUxlYWRlciBmcm9tICcuL3N3YXJtLWxlYWRlcidcbmltcG9ydCBtYXBzIGZyb20gJy4vbWFwcydcblxuXG5mdW5jdGlvbiBjbGVhblRrKGQpIHtcblx0cmV0dXJuIHtcblx0XHQuLi5kLFxuXHR9XG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0ZDMucXVldWUoKVxuXHRcdFx0LmRlZmVyKGQzLmNzdiwnYXNzZXRzL21hcF9kYXRhXzMuY3N2Jylcblx0XHRcdC5kZWZlcihkMy5jc3YsJ2Fzc2V0cy9sYXRzLmNzdicpXG5cdFx0XHQuZGVmZXIoZDMuY3N2LCdhc3NldHMvbmV3c2lkc3VuaXF1ZV8yLmNzdicpXG5cdFx0XHQuZGVmZXIoZDMuY3N2LCdhc3NldHMvbmV3c19pZHMuY3N2Jylcblx0XHRcdC5kZWZlcihkMy5qc29uLCdhc3NldHMvdXNKc29uLmpzb24nKVxuXHRcdFx0LmRlZmVyKGQzLmNzdiwnYXNzZXRzL3RvcF8zLmNzdicpXG5cdFx0XHQuZGVmZXIoZDMuY3N2LCdhc3NldHMvY2Vuc3VzLmNzdicpXG5cdFx0XHQuYXdhaXRBbGwoKGVyciwgcmVzdWx0KSA9PiB7XG5cdFx0XHRcdGlmIChlcnIpe1xuXHRcdFx0XHRcdHJlamVjdChlcnIpXG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0bWFwcy5pbml0KHJlc3VsdFswXSxyZXN1bHRbMV0scmVzdWx0WzJdLHJlc3VsdFszXSxyZXN1bHRbNF0pO1xuXHRcdFx0XHRcdGFycm93U2NhdHRlci5pbml0KHJlc3VsdFswXSxyZXN1bHRbMV0scmVzdWx0WzJdLHJlc3VsdFszXSk7XG5cdFx0XHRcdFx0c2NhdHRlci5pbml0KHJlc3VsdFswXSxyZXN1bHRbMV0scmVzdWx0WzJdLHJlc3VsdFszXSk7XG5cdFx0XHRcdFx0c3dhcm0uaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10scmVzdWx0WzVdLHJlc3VsdFs2XSk7XG5cdFx0XHRcdFx0c3dhcm1MZWFkZXIuaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10scmVzdWx0WzVdKTtcblx0XHRcdFx0XHRncmFwaGljLmluaXQocmVzdWx0WzBdLHJlc3VsdFsxXSxyZXN1bHRbMl0scmVzdWx0WzNdKTtcblx0XHRcdFx0XHRoaXN0b2dyYW0uaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10pO1xuXHRcdFx0XHRcdHRhYmxlLmluaXQocmVzdWx0WzBdLHJlc3VsdFsxXSxyZXN1bHRbMl0scmVzdWx0WzNdKTtcblx0XHRcdFx0XHRzbG9wZS5pbml0KHJlc3VsdFswXSxyZXN1bHRbMV0scmVzdWx0WzJdLHJlc3VsdFszXSk7XG5cdFx0XHRcdFx0Ly8gbmV3c3Jvb20uaW5pdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHR9KVxufVxuXG5leHBvcnQgZGVmYXVsdCB7IGluaXQgfVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9sb2FkLWRhdGEuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFOQTtBQUNBO0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n// device sniffing for mobile\n\nvar isMobile = {\n\tandroid: function android() {\n\t\treturn navigator.userAgent.match(/Android/i);\n\t},\n\n\tblackberry: function blackberry() {\n\t\treturn navigator.userAgent.match(/BlackBerry/i);\n\t},\n\n\tios: function ios() {\n\t\treturn navigator.userAgent.match(/iPhone|iPad|iPod/i);\n\t},\n\n\topera: function opera() {\n\t\treturn navigator.userAgent.match(/Opera Mini/i);\n\t},\n\n\twindows: function windows() {\n\t\treturn navigator.userAgent.match(/IEMobile/i);\n\t},\n\n\tany: function any() {\n\t\treturn isMobile.android() || isMobile.blackberry() || isMobile.ios() || isMobile.opera() || isMobile.windows();\n\t}\n};\n\nexports.default = isMobile;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdXRpbHMvaXMtbW9iaWxlLmpzPzY1NGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZGV2aWNlIHNuaWZmaW5nIGZvciBtb2JpbGVcblxuY29uc3QgaXNNb2JpbGUgPSB7XG5cdGFuZHJvaWQ6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSksXG5cblx0YmxhY2tiZXJyeTogKCkgPT4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQmxhY2tCZXJyeS9pKSxcblxuXHRpb3M6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZXxpUGFkfGlQb2QvaSksXG5cblx0b3BlcmE6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL09wZXJhIE1pbmkvaSksXG5cblx0d2luZG93czogKCkgPT4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvSUVNb2JpbGUvaSksXG5cblx0YW55OiAoKSA9PiAoXG5cdFx0aXNNb2JpbGUuYW5kcm9pZCgpIHx8XG5cdFx0aXNNb2JpbGUuYmxhY2tiZXJyeSgpIHx8XG5cdFx0aXNNb2JpbGUuaW9zKCkgfHxcblx0XHRpc01vYmlsZS5vcGVyYSgpIHx8XG5cdFx0aXNNb2JpbGUud2luZG93cygpXG5cdCksXG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTW9iaWxlXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL3V0aWxzL2lzLW1vYmlsZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBWEE7QUFDQTtBQW1CQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vbG9kYXNoLmRlYm91bmNlL2luZGV4LmpzPzNiZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC5kZWJvdW5jZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  var countMin = 99;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +(data.total_num - data.male_num) / data.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +data.white_sup_num / data.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +data.white_num / data.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, data) {\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 600 - margin.left - margin.right;\n  var height = 400 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".arrow-scatter\");\n\n  container.append(\"p\").attr(\"class\", \"chart-title\").text(\"Change in Gender Break-down from 2002 - 2017\");\n\n  function buildToggles() {\n    var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n    var sizeCats = [0, 20, 50, 100, 500];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == sizeCats.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      countMin = d;\n      buildChart();\n    });\n\n    var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == raceGenderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"race\") {\n        return \"Race\";\n      }\n      return \"Gender\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      cut = d;\n      buildChart();\n    });\n\n    var leaderToggleData = [\"all\", \"leader\"];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(leaderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == leaderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"all\") {\n        return \"All Staff\";\n      }\n      return \"Leadership\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      group = d;\n      buildChart();\n    });\n  }\n  buildToggles();\n\n  function buildChart() {\n\n    d3.selectAll(\".arrow-scatter-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"arrow-scatter-chart-wrapper\").style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var chartSvgDoubleChange = chartDiv.append(\"svg\").attr(\"class\", \"arrow-scatter-chart-wrapper-svg-double-change\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n\n    // var searchDiv = container.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-div\")\n    //\n    // searchDiv\n    //   .append(\"input\")\n    //   .attr(\"class\",\"swarm-chart-search\")\n    //   .attr(\"placeholder\",\"Find a Newsroom\")\n    //   ;\n\n    var chartDivText = chartDiv.append(\"div\").attr(\"class\", \"arrow-scatter-chart-wrapper-text-div\").style(\"transform\", \"translate(\" + margin.left + \"px\" + \",\" + margin.top + \"px\" + \")\").style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var miniMultiple = container.append(\"div\").attr(\"class\", \"slope-mini-multiple-div\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      if (cut == \"gender\") {\n        return d.total_num > countMin && +d.Year > 2000;\n      }\n      return d.total_num > countMin;\n    });\n\n    var maxPercentArray = [];\n    var diffArray = [];\n    var raceDiffArray = [];\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      var maxPercent = d3.max(leaves, function (d) {\n        return getPercent(d);\n      });\n      maxPercentArray.push(maxPercent);\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014) && d.value.values.length > 1) {\n        return d;\n      }\n      return null;\n    });\n\n    var newsNestAverageT0 = d3.mean(newsNest, function (d) {\n      return getPercent(d.value.values[0]);\n    });\n    var newsNestAverageT1 = d3.mean(newsNest, function (d) {\n      return getPercent(d.value.yearMap.get(2014));\n    });\n\n    for (var item in newsNest) {\n      var diff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"supGender\";\n      var raceDiff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"gender\";\n      diffArray.push(diff);\n      raceDiffArray.push(raceDiff);\n      newsNest[item].value.diff = diff;\n      newsNest[item].value.raceDiff = raceDiff;\n    }\n    ;\n\n    newsNest = newsNest.sort(function (a, b) {\n      return b.value.diff - a.value.diff;\n    });\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n    var percentExtent = d3.extent(maxPercentArray, function (d) {\n      return d;\n    });\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var raceDiffExtent = d3.extent(raceDiffArray, function (d) {\n      return d;\n    });\n    var diffScale = d3.scaleLinear().domain([diffExtent[0], diffExtent[1]]).range([0, width]);\n    var raceDiffScale = d3.scaleLinear().domain([raceDiffExtent[0], raceDiffExtent[1]]).range([height, 0]);\n\n    var totalScale = d3.scaleLinear().domain(totalExtent).range([height, 0]);\n    var totalXScale = d3.scaleLinear().domain(totalExtent).range([0, width]);\n\n    var colorScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"white\", \"green\"]);\n    var strokeScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"grey\", \"green\"]);\n\n    var xScale = d3.scaleLinear().domain([0, .7]).range([0, width]);\n    var yScale = d3.scaleLinear().domain([.25, .5]).range([height, 0]);\n\n    var linearGradientDown = chartSvgDoubleChange.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"gradient\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 1);\n\n    var linearGradientAverage = chartSvgDoubleChange.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"gradient-average\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 1);\n\n    var linearGradientUp = chartSvgDoubleChange.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"gradient-up\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 1);\n\n    var chartSvgDoubleChangeG = chartSvgDoubleChange.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    linearGradientUp.append(\"stop\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", 1);\n\n    linearGradientUp.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", .3);\n\n    linearGradientAverage.append(\"stop\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", 1);\n\n    linearGradientAverage.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", .3);\n\n    linearGradientDown.append(\"stop\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", .3);\n\n    linearGradientDown.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", 1);\n\n    chartSvgDoubleChangeG.append(\"marker\").attr(\"id\", \"triangle-up\").attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 0).attr(\"refY\", 5).attr(\"markerUnits\", \"strokeWidth\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").append(\"path\").attr(\"fill\", \"blue\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\");\n\n    chartSvgDoubleChangeG.append(\"marker\").attr(\"id\", \"triangle-down\").attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 0).attr(\"refY\", 5).attr(\"markerUnits\", \"strokeWidth\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").append(\"path\").attr(\"fill\", \"red\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\");\n\n    function drawArrow(t0, t1) {\n      var d = t1 > t0 ? \"M0,\" + (t1 - 2) + \" L4,\" + (t1 - 8) + \" L1.5,\" + (t1 - 8) + \" L0,\" + t0 + \" L-1.5,\" + (t1 - 8) + \" L-4,\" + (t1 - 8) + \" Z\" : \"M0,\" + (t1 + 2) + \" L4,\" + (t1 + 8) + \" L1.5,\" + (t1 + 8) + \" L0,\" + t0 + \" L-1.5,\" + (t1 + 8) + \" L-4,\" + (t1 + 8) + \" Z\";\n      return d;\n    }\n    function drawDiamond(t0, t1) {\n      return \"M0,\" + (t1 - 4) + \" L4,\" + (t1 - 8)\n      // + \" L1.5,\" + (t1-8)\n      + \" L0,\" + (t1 - 12) + \" L-4,\" + (t1 - 8) + \" Z\";\n    }\n\n    var arrowXScale = d3.scaleLinear().domain([0, newsNest.length - 1]).range([0, width]);\n\n    var arrowsGs = chartSvgDoubleChangeG.selectAll(\"g\").data(newsNest).enter().append(\"g\").attr(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale(i) + \",0)\";\n    }).on(\"mouseover\", function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company;\n      console.log(d.value.diff);\n      console.log(getPercentType(\"gender\", d.value.yearMap.get(2014)), getPercentType(\"gender\", d.value.values[0]));\n    });\n\n    chartSvgDoubleChangeG.append(\"g\").attr(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \",0)\";\n    }).append(\"path\").attr(\"class\", \"arrow-scatter-line arrow-scatter-line-average\").attr(\"d\", function (d) {\n      var t0 = yScale(newsNestAverageT0);\n      var t1 = yScale(newsNestAverageT1);\n      return drawArrow(t0, t1);\n    }).attr(\"fill\", function (d) {\n      if (newsNestAverageT1 - newsNestAverageT0 > 0) {\n        return \"url(#gradient-average)\";\n      }\n      return \"url(#gradient)\";\n    }).attr(\"stroke\", \"none\").attr(\"fill-opacity\", 1);\n\n    var arrows = arrowsGs.append(\"path\").attr(\"class\", \"arrow-scatter-line\").attr(\"d\", function (d) {\n      var t0 = yScale(getPercentType(\"gender\", d.value.values[0]));\n      var t1 = yScale(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n\n      if (Math.abs(d.value.diff) < .008) {\n        return drawDiamond(t0, t1);\n      }\n      return drawArrow(t0, t1);\n    }).attr(\"fill\", function (d) {\n      if (d.value.diff > 0) {\n        return \"url(#gradient-up)\";\n      }\n      if (Math.abs(d.value.diff) < .015) {\n        return \"#888888\";\n      }\n      return \"url(#gradient)\";\n    }).attr(\"stroke\", \"none\").attr(\"fill-opacity\", 1);\n\n    var arrowText = arrowsGs.append(\"text\").attr(\"class\", \"arrow-scatter-line-text\").attr(\"transform\", function (d, i) {\n      return \"rotate(-90 \" + yScale(getPercentType(\"gender\", d.value.values[0])) / 2 + \" \" + yScale(getPercentType(\"gender\", d.value.values[0])) / 2 + \")\";\n    }).text(function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company;\n      if (company == \"the new york times\") {\n        return company;\n      }\n      return null;\n    });\n\n    var arrowTextDiv = chartDivText.selectAll(\"div\").data(newsNest).enter().append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale(i) + \"px,\" + yScale(getPercentType(\"gender\", d.value.yearMap.get(2014))) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-logo\").style(\"background-image\", function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company;\n      if (company == \"the new york times\") {\n        return \"url(assets/ny-times-logo.svg)\";\n      }\n    });\n\n    chartDivText.append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \"px,\" + yScale(newsNestAverageT1) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-text-average\").text(function (d) {\n      return \"Overall\";\n    });\n\n    chartDivText.append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \"px,\" + yScale(newsNestAverageT1) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-text-average arrow-scatter-line-text-average-num-top\").text(function (d) {\n      return Math.floor(100 * newsNestAverageT1) + \"%\";\n    });\n\n    chartDivText.append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \"px,\" + yScale(newsNestAverageT0) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-text-average arrow-scatter-line-text-average-num-bottom\").text(function (d) {\n      return Math.floor(100 * newsNestAverageT0) + \"%\";\n    });\n\n    var axisGs = chartSvgDoubleChangeG.append(\"g\").selectAll(\"g\").data([.3, .4, .5]).enter().append(\"g\");\n\n    axisGs.append(\"text\").attr(\"x\", function (d) {\n      return -12;\n    }).attr(\"y\", function (d) {\n      return yScale(d) + 2;\n    }).attr(\"dominant-baseline\", \"middle\").attr(\"class\", \"arrow-scatter-axis-text\").text(function (d) {\n      if (d == .5) {\n        return \"50/50 Gender Split\";\n      }\n      return Math.floor((1 - d) * 100) + \"% Male\";\n    }).style(\"fill\", function (d) {\n      if (d == .5) {\n        return \"rgb(136, 136, 136)\";\n      }\n      return null;\n    });\n\n    axisGs.append(\"line\").attr(\"class\", \"arrow-scatter-line-axis\").attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"x2\", function (d) {\n      return width;\n    }).attr(\"y1\", function (d) {\n      return yScale(d);\n    }).attr(\"y2\", function (d) {\n      return yScale(d);\n    }).style(\"stroke-width\", function (d) {\n      if (d == .5) {\n        return \"2px\";\n      }\n      return null;\n    }).style(\"stroke\", function (d) {\n      if (d != .5) {\n        return \"#a7a7a7\";\n      }\n      return null;\n    }).style(\"stroke-dasharray\", function (d) {\n      if (d != .5) {\n        return \"3,1\";\n      }\n      return null;\n    });\n\n    // chartSvgDoubleChangeG\n    //   .selectAll(\"line\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"line\")\n    //   .attr(\"class\",\"arrow-scatter-line\")\n    //   .style(\"stroke-width\",function(d){\n    //     if(+d.value.yearMap.get(2014).total_num > 100){\n    //       return \"2px\"\n    //     }\n    //     if(+d.value.yearMap.get(2014).total_num > 50){\n    //       return \"1px\"\n    //     }\n    //     if(+d.value.yearMap.get(2014).total_num > 10){\n    //       return \".5px\"\n    //     }\n    //   })\n    //   .style(\"stroke\",function(d){\n    //     if(d.value.diff > 0){\n    //       return \"blue\"\n    //     }\n    //     return \"red\"\n    //   })\n    //   .attr(\"x1\",function(d){\n    //     return xScale(getPercentType(\"supGender\",d.value.values[0]));\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n    //     // return diffScale(d.value.diff);\n    //   })\n    //   .attr(\"y1\",function(d){\n    //     return totalScale(d.value.yearMap.get(2014).total_num)\n    //     // return yScale(getPercentType(\"supGender\",d.value.values[0]));\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return totalScale(d.value.yearMap.get(2014).total_num)\n    //     // return yScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n    //     // return raceDiffScale(d.value.raceDiff)\n    //   })\n    //   .attr(\"marker-end\",function(d){\n    //     if(d.value.diff > 0){\n    //       return \"url(#triangle-up)\";\n    //     }\n    //     return \"url(#triangle-down)\";\n    //   })\n    //   // .style(\"stroke\",\"url(#gradient)\")\n    //   .on(\"mouseover\",function(d){\n    //     console.log(getPercentType(\"supGender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",d.value.yearMap.get(2014)));\n    //   })\n    //   ;\n\n    // chartSvgDoubleChangeG\n    //   .append(\"line\")\n    //   .attr(\"class\",\"arrow-scatter-line-axis\")\n    //   .attr(\"x1\",function(d){\n    //     return xScale(.5);\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(.5);\n    //   })\n    //   .attr(\"y1\",function(d){\n    //     return 0;\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return height;\n    //   })\n\n\n    // function buildAverage(){\n    //   var chartAverage = chartDiv.append(\"g\")\n    //      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //      .attr(\"class\",\"swarm-average\")\n    //      ;\n    //\n    //  chartAverage.append(\"text\")\n    //    .attr(\"class\",\"swarm-average-text swarm-average-text-label\")\n    //    .attr(\"x\",xScale(dataToMap.average))\n    //    .attr(\"y\",height*.33-19)\n    //    .text(\"Overall\")\n    //\n    //   chartAverage.append(\"text\")\n    //     .attr(\"class\",\"swarm-average-text\")\n    //     .attr(\"x\",xScale(dataToMap.average))\n    //     .attr(\"y\",height*.33-5)\n    //     .text(Math.round(dataToMap.average*100)+\"% Male\")\n    //\n    //   chartAverage.append(\"line\")\n    //     .attr(\"class\",\"swarm-average-line\")\n    //     .attr(\"x1\",xScale(dataToMap.average))\n    //     .attr(\"x2\",xScale(dataToMap.average))\n    //     .attr(\"y1\",height*.33)\n    //     .attr(\"y2\",height*.66)\n    //     ;\n    // }\n    // buildAverage();\n\n    // var topRowCircle = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return 3\n    //   })\n    //   .attr(\"cx\", function(d) {\n    //     return xScale(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"cy\", function(d) {\n    //     return 0;\n    //   })\n    //   .style(\"fill\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d);\n    //   })\n    //   ;\n    //\n    // var bottomRowCircle = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return 3\n    //   })\n    //   .attr(\"cx\", function(d) {\n    //     return xScale(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"cy\", function(d) {\n    //     return 100;\n    //   })\n    //   .style(\"fill\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    // var rowLines = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"line\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"line\")\n    //   .attr(\"class\",\"slope-line\")\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return 100;\n    //   })\n    //   .attr(\"x1\", function(d) {\n    //     return xScale(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"y1\", function(d) {\n    //     return 0;\n    //   })\n    //   .style(\"stroke\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    var miniMargin = { top: 0, right: 10, bottom: 0, left: 10 };\n    var miniWidth = 50 - miniMargin.left - miniMargin.right;\n    var miniHeight = 80 - miniMargin.top - miniMargin.bottom;\n    var genderColorScale = d3.scaleLinear().domain([.2, .5, .8]).range([\"#2161fa\", \"#dddddd\", \"#ff3333\"]);\n\n    var multipleY = d3.scaleLinear().domain([.2, .5]).range([miniHeight, 0]);\n\n    miniMultiple.append(\"p\").attr(\"class\", \"chart-title\").text(\"Change in Break-down of Female Staff, 2001 - 2016\");\n\n    var miniMultipleWrapper = miniMultiple.append(\"div\").attr(\"class\", \"mini-multiple-div-container\").selectAll(\"div\").data(newsNest.sort(function (a, b) {\n      return +b.value.maxTotal - +a.value.maxTotal;\n    }).slice(0, 25)).enter().append(\"div\").attr(\"class\", \"mini-multiple-div\");\n\n    // var searchDivMini = miniMultiple.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-div\")\n    //\n    // searchDivMini\n    //   .append(\"input\")\n    //   .attr(\"class\",\"swarm-chart-search\")\n    //   .attr(\"placeholder\",\"Find a Newsroom\")\n    //   ;\n\n    miniMultipleWrapper.append(\"div\").attr(\"class\", \"mini-multiple-text-container\").append(\"p\").attr(\"class\", \"mini-multiple-text\").style(\"margin-top\", 20).text(function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company.replace(\"the\", \"\");\n      if (company.length > 20) {\n        return company.slice(0, 17) + \"...\";\n      }\n      return company;\n    });\n\n    var miniMultipleWrapperSvg = miniMultipleWrapper.append(\"svg\").attr(\"class\", \"slope-mini-svg\").attr(\"width\", miniWidth + miniMargin.left + miniMargin.right).attr(\"height\", miniHeight + miniMargin.top + miniMargin.bottom);\n\n    var miniMultipleWrapperG = miniMultipleWrapperSvg.append(\"g\").style(\"transform\", \"translate(\" + miniMargin.left + \"px\" + \",\" + miniMargin.top + \"px\" + \")\");\n\n    var miniMultipleWrapperAxis = miniMultipleWrapperG.append(\"g\").attr(\"class\", \"slope-line-axis-container\");\n\n    miniMultipleWrapperG.append(\"circle\").attr(\"cx\", function (d) {\n      return 0;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.values[0]));\n    }).attr(\"r\", 3).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      if (d.value.diff > 0) {\n        return \"blue\";\n      }\n      return \"red\";\n      // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return 0;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.values[0])) + 27;\n      }\n      return multipleY(getPercentType(\"gender\", d.value.values[0])) + 15;\n    }).attr(\"class\", \"slope-small-text\").text(function (d, i) {\n      if (i == 0) {\n        return Math.floor(100 * getPercentType(\"gender\", d.value.values[0])) + \"%\";\n      }\n      return Math.floor(100 * getPercentType(\"gender\", d.value.values[0]));\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return 0;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.values[0])) + 15;\n      }\n      return null;\n    }).attr(\"class\", \"slope-small-text slope-small-text-bold\").text(function (d, i) {\n      if (i == 0) {\n        return \"2001\";\n      }\n      return null;\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return miniWidth;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014))) + 15;\n      }\n      return null;\n    }).attr(\"class\", \"slope-small-text slope-small-text-bold\").text(function (d, i) {\n      if (i == 0) {\n        return \"2016\";\n      }\n      return null;\n    }).style(\"text-anchor\", function (d, i) {\n      if (i == 0) {\n        return \"start\";\n      }\n      return null;\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return miniWidth;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014))) + 27;\n      }\n      return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014))) + 15;\n    }).attr(\"class\", \"slope-small-text\").text(function (d, i) {\n      if (i == 0) {\n        return Math.floor(100 * getPercentType(\"gender\", d.value.yearMap.get(2014))) + \"%\";\n      }\n      return Math.floor(100 * getPercentType(\"gender\", d.value.yearMap.get(2014)));\n    }).style(\"text-anchor\", function (d, i) {\n      if (i == 0) {\n        return \"start\";\n      }\n      return null;\n    });\n\n    miniMultipleWrapperG.append(\"circle\").attr(\"cx\", function (d) {\n      return miniWidth;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n    }).attr(\"r\", 3).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      if (d.value.diff > 0) {\n        return \"blue\";\n      }\n      return \"red\";\n      // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n    });\n    //\n    //\n    miniMultipleWrapperG.append(\"line\").attr(\"class\", \"slope-line\").attr(\"y1\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.values[0]));\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    }).attr(\"stroke-linecap\", \"round\").attr(\"stroke-linejoin\", \"round\").attr(\"stroke-width\", 1.8).style(\"stroke\", function (d) {\n      if (d.value.diff > 0) {\n        return \"blue\";\n      }\n      return \"red\";\n      // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n    });\n\n    miniMultipleWrapperAxis.selectAll(\"line\").data([.2, .3, .4, .5]).enter().append(\"line\").attr(\"class\", \"slope-line-axis\").attr(\"y1\", function (d, i) {\n      return multipleY(d);\n      // return i*20+\"%\";\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d, i) {\n      return multipleY(d);\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    }).style(\"stroke\", function (d) {\n      if (d == .5) {\n        return \"black\";\n      }\n    });\n    //\n\n    // cell\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return d.radius\n    //   })\n    //   // .attr(\"cx\", function(d) { return d.x; })\n    //   // .attr(\"cy\", function(d) { return d.y; })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d.male_num/d.total_num);\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n\n    // dataToMap.values = d3.nest()\n    //   .key(function(d){\n    //     return Math.round(getPercent(d)*50)/50;\n    //   })\n    //   .sortKeys(function(a,b){\n    //     return a-b;\n    //   })\n    //   .entries(dataToMap.values)\n    //   ;\n    //\n    // chartDiv.append(\"div\")\n    //   .attr(\"class\",\"histogram-avg-div\")\n    //   .style(\"left\",function(d){\n    //     return (dataToMap.average*width+1)+\"px\"\n    //   })\n    //   .append(\"p\")\n    //   .text(Math.round(dataToMap.average*100)+\"%\")\n    //   ;\n    //\n    // var yearsColumn = chartDiv\n    //   .selectAll(\".histogram-year-container\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-year-container\")\n    //   .style(\"left\",function(d){\n    //     return (d.key*width+1)+\"px\"\n    //   })\n    //   ;\n    //\n    // yearsColumn\n    //   .selectAll(\"div\")\n    //   .data(function(d){\n    //     return d.values\n    //   })\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",function(d){\n    //     var state = null;\n    //     var region = null;\n    //     if(newsIdMap.has(d.NewsID)){\n    //       state = newsIdMap.get(d.NewsID).State;\n    //     }\n    //     if(regionMap.has(state)){\n    //       region = regionMap.get(state)[3];\n    //     }\n    //\n    //     if(region ==\"West\"){\n    //       region = \"green\"\n    //     }\n    //     if(region ==\"South\"){\n    //       region = \"blue\"\n    //     }\n    //     if(region ==\"Midwest\"){\n    //       region = \"purple\"\n    //     }\n    //     if(region ==\"Northeast\"){\n    //       region = \"yellow\"\n    //     }\n    //     return \"histogram-year-item \"+region\n    //   })\n    //   .style(\"background-color\",function(d){\n    //     // return backgroundFunction(d)\n    //     return null\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n    //\n    // yearsColumn.append(\"p\")\n    //   .text(function(d,i){\n    //     if(i%5 == 0 || i==0 || i==yearsColumn.size()-1){\n    //       return Math.round(d.key*100)+\"%\";\n    //     }\n    //     return null;\n    //\n    //   })\n    //   ;\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _lodash = __webpack_require__(2);\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _isMobile = __webpack_require__(1);\n\nvar _isMobile2 = _interopRequireDefault(_isMobile);\n\nvar _loadData = __webpack_require__(0);\n\nvar _loadData2 = _interopRequireDefault(_loadData);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bodySel = d3.select('body');\n// import graphic from './graphic'\n// D3 is included by globally by default\n\nvar previousWidth = 0;\n\n// function resize() {\n// \tconst width = bodySel.node().offsetWidth\n// \tif (previousWidth !== width) {\n// \t\tpreviousWidth = width\n// \t\tgraphic.resize()\n// \t}\n// }\n\nfunction init() {\n\t// add mobile class to body tag\n\tbodySel.classed('is-mobile', _isMobile2.default.any());\n\t// setup resize event\n\t// window.addEventListener('resize', debounce(resize, 150))\n\t_loadData2.default.init();\n}\n\ninit();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvZW50cnkuanM/YjE2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEMyBpcyBpbmNsdWRlZCBieSBnbG9iYWxseSBieSBkZWZhdWx0XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoLmRlYm91bmNlJ1xuaW1wb3J0IGlzTW9iaWxlIGZyb20gJy4vdXRpbHMvaXMtbW9iaWxlJ1xuLy8gaW1wb3J0IGdyYXBoaWMgZnJvbSAnLi9ncmFwaGljJ1xuaW1wb3J0IGxvYWREYXRhIGZyb20gJy4vbG9hZC1kYXRhJ1xuXG5jb25zdCBib2R5U2VsID0gZDMuc2VsZWN0KCdib2R5JylcbmxldCBwcmV2aW91c1dpZHRoID0gMFxuXG4vLyBmdW5jdGlvbiByZXNpemUoKSB7XG4vLyBcdGNvbnN0IHdpZHRoID0gYm9keVNlbC5ub2RlKCkub2Zmc2V0V2lkdGhcbi8vIFx0aWYgKHByZXZpb3VzV2lkdGggIT09IHdpZHRoKSB7XG4vLyBcdFx0cHJldmlvdXNXaWR0aCA9IHdpZHRoXG4vLyBcdFx0Z3JhcGhpYy5yZXNpemUoKVxuLy8gXHR9XG4vLyB9XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG5cdC8vIGFkZCBtb2JpbGUgY2xhc3MgdG8gYm9keSB0YWdcblx0Ym9keVNlbC5jbGFzc2VkKCdpcy1tb2JpbGUnLCBpc01vYmlsZS5hbnkoKSlcblx0Ly8gc2V0dXAgcmVzaXplIGV2ZW50XG5cdC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZShyZXNpemUsIDE1MCkpXG5cdGxvYWREYXRhLmluaXQoKVxufVxuXG5pbml0KClcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvZW50cnkuanMiXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQ0E7QUFDQTs7Ozs7QUFDQTtBQUhBO0FBSEE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n// D3 is included by globally by default\n// import * as d3 from 'd3'\n// import loadData from './load-data'\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation) {\n\n\tvar cut = \"gender\";\n\t// var cut = \"supGender\"\n\n\tfunction getAverage(data) {\n\t\tif (cut == \"gender\") {\n\t\t\treturn d3.mean(data, function (d) {\n\t\t\t\treturn +d.male_num / d.total_num;\n\t\t\t});\n\t\t}\n\t\tif (cut == \"supWhite\") {\n\t\t\treturn d3.mean(data, function (d) {\n\t\t\t\treturn +d.white_sup_num / d.total_sup_num;\n\t\t\t});\n\t\t}\n\t\tif (cut == \"supGender\") {\n\t\t\treturn d3.mean(data, function (d) {\n\t\t\t\treturn +d.male_sup_num / d.total_sup_num;\n\t\t\t});\n\t\t}\n\t\treturn d3.mean(data, function (d) {\n\t\t\treturn +d.white_num / d.total_num;\n\t\t});\n\t}\n\t//\n\tfunction getPercent(data) {\n\t\tif (cut == \"gender\") {\n\t\t\treturn +data.male_num / data.total_num;\n\t\t}\n\t\tif (cut == \"supWhite\") {\n\t\t\treturn +data.white_sup_num / data.total_sup_num;\n\t\t}\n\t\tif (cut == \"supGender\") {\n\t\t\treturn +data.male_sup_num / data.total_sup_num;\n\t\t}\n\t\treturn +data.white_num / data.total_num;\n\t}\n\t//\n\tvar latLongMap = d3.map(latLongData, function (d) {\n\t\treturn d.NewsID;\n\t});\n\tvar newsIdMap = d3.map(newsIDLocation, function (d) {\n\t\treturn d.NewsID;\n\t});\n\n\tvar regionMap = d3.map(states, function (d) {\n\t\treturn d[1];\n\t});\n\n\tvar width = 500;\n\tvar horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n\tvar container = d3.select(\".line-scatter\");\n\n\tvar yearNest = d3.nest().key(function (d) {\n\t\tvar state = null;\n\t\tvar region = null;\n\t\tif (newsIdMap.has(d.NewsID)) {\n\t\t\tstate = newsIdMap.get(d.NewsID).State;\n\t\t}\n\t\tif (regionMap.has(state)) {\n\t\t\tregion = regionMap.get(state)[3];\n\t\t}\n\t\treturn region;\n\t}).key(function (d) {\n\t\treturn +d.Year;\n\t}).sortKeys(function (a, b) {\n\t\treturn a - b;\n\t}).rollup(function (leaves) {\n\t\tvar average = getAverage(leaves);\n\t\treturn { average: average, values: leaves };\n\t}).entries(mapData);\n\n\t//\n\tvar region = container.selectAll(\"div\").data(yearNest).enter().append(\"div\").attr(\"class\", \"year-container\");\n\n\tregion.append(\"p\").text(function (d) {\n\t\treturn d.key;\n\t});\n\n\tvar years = region.selectAll(\"div\").data(function (d) {\n\t\treturn d.values;\n\t}).enter().append(\"div\").attr(\"class\", \"region-container\");\n\n\tyears.selectAll(\"div\").data(function (d) {\n\t\treturn d.value.values;\n\t}).enter().append(\"div\").attr(\"class\", \"line\").style(\"left\", function (d) {\n\t\tvar percent = getPercent(d);\n\t\treturn horzScale(percent) + \"px\";\n\t}).style(\"background-color\", function (d) {\n\t\treturn null;\n\t});\n\tyears.append(\"div\").style(\"left\", function (d) {\n\t\treturn horzScale(.5) + \"px\";\n\t}).attr(\"class\", \"line line-half\");\n\t//\n\tyears.append(\"div\").datum(function (d) {\n\t\treturn d.value.average;\n\t}).style(\"left\", function (d) {\n\t\treturn horzScale(d) + \"px\";\n\t}).attr(\"class\", \"line line-average\").append(\"p\").text(function (d) {\n\t\treturn Math.round(d * 100) + \"%\";\n\t});\n\n\tyears.append(\"p\").text(function (d) {\n\t\treturn d.key;\n\t});\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// D3 is included by globally by default\n// import * as d3 from 'd3'\n// import loadData from './load-data'\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 50;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_num / d.total_num;\n      });\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +d.white_sup_num / d.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_sup_num / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +d.white_num / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +data.male_num / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return +data.white_num / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var width = 1000;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".histogram\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data([0, 20, 50, 100, 500]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    countMin = d;\n    buildChart();\n  });\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data([\"race\", \"gender\", \"supWhite\", \"supGender\"]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    cut = d;\n    buildChart();\n  });\n\n  function buildChart() {\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    d3.selectAll(\".histogram-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"histogram-chart-wrapper\");\n\n    var yearNest = d3.nest().key(function (d) {\n      return +d.Year;\n    }).rollup(function (leaves) {\n      var average = getAverage(leaves);\n      return { average: average, values: leaves };\n    }).entries(filteredMapData);\n\n    var dataToMap = yearNest.filter(function (d) {\n      return d.key == 2014;\n    })[0].value;\n\n    dataToMap.values = d3.nest().key(function (d) {\n      return Math.round(getPercent(d) * 50) / 50;\n    }).sortKeys(function (a, b) {\n      return a - b;\n    })\n    // .rollup(function(leaves){\n    //   var average = getAverage(leaves);\n    //   return {average:average,values:leaves};\n    // })\n    .entries(dataToMap.values);\n\n    chartDiv.append(\"div\").attr(\"class\", \"histogram-avg-div\").style(\"left\", function (d) {\n      return dataToMap.average * width + 1 + \"px\";\n    }).append(\"p\").text(Math.round(dataToMap.average * 100) + \"%\");\n\n    var yearsColumn = chartDiv.selectAll(\".histogram-year-container\").data(dataToMap.values).enter().append(\"div\").attr(\"class\", \"histogram-year-container\").style(\"left\", function (d) {\n      return d.key * width + 1 + \"px\";\n    });\n    //\n    yearsColumn.selectAll(\"div\").data(function (d) {\n      return d.values;\n    }).enter().append(\"div\").attr(\"class\", function (d) {\n      var state = null;\n      var region = null;\n      if (newsIdMap.has(d.NewsID)) {\n        state = newsIdMap.get(d.NewsID).State;\n      }\n      if (regionMap.has(state)) {\n        region = regionMap.get(state)[3];\n      }\n\n      if (region == \"West\") {\n        region = \"green\";\n      }\n      if (region == \"South\") {\n        region = \"blue\";\n      }\n      if (region == \"Midwest\") {\n        region = \"purple\";\n      }\n      if (region == \"Northeast\") {\n        region = \"yellow\";\n      }\n      return \"histogram-year-item \" + region;\n    }).style(\"background-color\", function (d) {\n      // return backgroundFunction(d)\n      return null;\n    }).on(\"mouseover\", function (d) {\n      console.log(newsIDName.get(d.NewsID).Company);\n    });\n\n    yearsColumn.append(\"p\").text(function (d, i) {\n      if (i % 5 == 0 || i == 0 || i == yearsColumn.size() - 1) {\n        return Math.round(d.key * 100) + \"%\";\n      }\n      return null;\n    });\n  }\n  function backgroundFunction(d) {\n    var state = null;\n    var region = null;\n    if (newsIdMap.has(d.NewsID)) {\n      state = newsIdMap.get(d.NewsID).State;\n    }\n    if (regionMap.has(state)) {\n      region = regionMap.get(state)[3];\n    }\n    if (region == \"West\") {\n      return \"green\";\n    }\n    if (region == \"South\") {\n      return \"blue\";\n    }\n    if (region == \"Midwest\") {\n      return \"purple\";\n    }\n    if (region == \"Northeast\") {\n      return \"yellow\";\n    }\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo, stateTopo) {\n\n  var projection = d3.geoAlbersUsa();\n  // .scale(1280)\n  // .translate([width / 2, height / 2]);\n\n  var path = d3.geoPath().projection(projection)\n  // .pointRadius(1.5)\n  ;\n\n  // var projection = d3.geoAlbersUsa();\n  // var path = d3.geoPath().projection(projection);\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 19;\n\n  mapData = mapData.filter(function (d) {\n    return +d.Year > 2000;\n  });\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +(data.total_num - data.male_num) / data.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +data.white_sup_num / data.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +data.white_num / data.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, data) {\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 600 - margin.left - margin.right;\n  var height = 300 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".maps\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data([0, 20, 50, 100, 500]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    countMin = d;\n    buildChart();\n  });\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data([\"race\", \"gender\", \"supWhite\", \"supGender\"]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    cut = d;\n    buildChart();\n  });\n\n  function buildChart() {\n\n    d3.selectAll(\".maps-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"maps-chart-wrapper\");\n\n    var mapSvg = chartDiv.append(\"svg\").attr(\"class\", \"maps-chart-svg\").attr(\"viewBox\", \"0 0 960 600\");\n\n    mapSvg.append(\"g\").attr(\"class\", \"states\").selectAll(\"path\")\n    // .data(topojson.feature(stateTopo, stateTopo.objects.states))\n    .data(topojson.feature(stateTopo, stateTopo.objects.states).features).enter().append(\"path\").attr(\"d\", path);\n\n    mapSvg.append(\"g\").append(\"path\").attr(\"class\", \"state-borders\").attr(\"d\", path(topojson.mesh(stateTopo, stateTopo.objects.states, function (a, b) {\n      return a !== b;\n    })));\n\n    var chartSvgDoubleChange = chartDiv.append(\"svg\").attr(\"class\", \"maps-chart-wrapper-svg-double-change\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var miniMultiple = container.append(\"div\").attr(\"class\", \"slope-mini-multiple-div\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var maxPercentArray = [];\n    var diffArray = [];\n    var raceDiffArray = [];\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      var maxPercent = d3.max(leaves, function (d) {\n        return getPercent(d);\n      });\n      maxPercentArray.push(maxPercent);\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014)) {\n        return d;\n      }\n      return null;\n    });\n\n    for (var item in newsNest) {\n      var diff = getPercentType(\"gender\", newsNest[item].value.yearMap.get(2014)) - getPercentType(\"gender\", newsNest[item].value.values[0]);\n      cut = \"supGender\";\n      var raceDiff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"gender\";\n      diffArray.push(diff);\n      raceDiffArray.push(raceDiff);\n\n      newsNest[item].value.diff = diff;\n      newsNest[item].value.raceDiff = raceDiff;\n      if (latLongMap.has(newsNest[item].key)) {\n        newsNest[item].value.location = latLongMap.get(newsNest[item].key);\n        newsNest[item].value.hasLocation = true;\n      } else {\n        newsNest[item].value.hasLocation = false;\n      }\n    }\n    ;\n\n    newsNest = newsNest.filter(function (d) {\n      var hasLat = false;\n      if (d.value.hasLocation) {\n        if (d.value.location.lat != \"NULL\") {\n          hasLat = true;\n        }\n      }\n      return d.value.hasLocation && hasLat;\n    });\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([3, 40]);\n    var percentExtent = d3.extent(maxPercentArray, function (d) {\n      return d;\n    });\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var raceDiffExtent = d3.extent(raceDiffArray, function (d) {\n      return d;\n    });\n    var diffScale = d3.scaleLinear().domain([diffExtent[0], diffExtent[1]]).range([0, width]);\n    var raceDiffScale = d3.scaleLinear().domain([raceDiffExtent[0], raceDiffExtent[1]]).range([height, 0]);\n\n    var totalScale = d3.scaleLinear().domain(totalExtent).range([height, 0]);\n    var totalXScale = d3.scaleLinear().domain(totalExtent).range([0, width]);\n\n    var colorScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"white\", \"green\"]);\n\n    var colorScalePercent = d3.scaleLinear().domain([-1, 0, .30, .35, .4, .45, .5, .6]).range([\"#000000\", \"#000000\", \"rgb(8, 69, 148)\", \"rgb(33, 113, 181)\", \"rgb(204, 219, 163)\", \"rgb(253, 246, 163)\", \"#e2e1e1\", \"rgb(39, 108, 145)\"]);\n\n    var strokeScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"grey\", \"green\"]);\n\n    var xArrowLength = d3.scaleLinear().domain([0, .15]).range([1, 30]).clamp(true);\n\n    // newsNest = newsNest.filter(function(d){\n    //   var percent = getPercentType(\"gender\",d.value.yearMap.get(2014));\n    //   return percent > .50;\n    // })\n\n    var xScale = d3.scaleLinear().domain([0, .7]).range([0, width]);\n    var yScale = d3.scaleLinear().domain([.2, .5]).range([height, 0]);\n    var lineWidthScale = d3.scaleLinear().domain(totalExtent).range([1.4, 2.5]).clamp(true);\n    // var mapMarkers = mapSvg.append(\"g\")\n    //   .attr(\"class\",\"map-markers\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"map-marker\")\n    //   .attr(\"r\",function(d){\n    //     return radiusScale(+d.value.maxTotal);\n    //   })\n    //   // .style(\"fill\",function(d){\n    //   //   //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n    //   //   //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n    //   //   return \"rgb(169, 169, 169)\";\n    //   //   return colorScalePercent(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n    //   //   return \"red\"\n    //   // })\n    //   .attr(\"transform\",function(d){\n    //     var location = d.value.location;\n    //     return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     // console.log(d);\n    //     console.log(newsIDName.get(d.key).Company);\n    //     console.log(getPercentType(\"gender\",d.value.yearMap.get(2014)));\n    //   })\n    //   ;\n\n    var tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n    var arc = d3.arc().innerRadius(0).outerRadius(10).startAngle(0);\n\n    // radiusScale.range([10,20])\n\n    var theta1 = Math.PI * 0.75;\n    var theta2 = Math.PI * -0.75;\n    var sin1 = Math.sin(theta1);\n    var sin2 = Math.sin(theta2);\n    var cos1 = Math.cos(theta1);\n    var cos2 = Math.cos(theta2);\n\n    var arrowMaps = mapSvg.append(\"g\").selectAll(\"g\").data(newsNest).enter().append(\"g\").attr(\"transform\", function (d) {\n      var location = d.value.location;\n      return \"translate(\" + projection([+location.lng, location.lat]) + \")\";\n    }).append(\"path\").attr(\"class\", \"map-arrow-path\").attr(\"d\", function (d) {\n\n      // console.log(getPercentType(\"gender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",newsNest[item].value.values[0]));\n      var xVal = xArrowLength(Math.abs(d.value.diff));\n      var dx = 0;\n      if (d.value.diff > 0) {\n        dx = xVal;\n      } else {\n        dx = -xVal;\n      }\n      var dy = -3;\n\n      var stemLen = Math.sqrt(dx * dx + dy * dy);\n      var headLen = Math.min(stemLen * 0.7, 8);\n      var xn = dx / stemLen * headLen;\n      var yn = dy / stemLen * headLen;\n      var ax1 = xn * cos1 - yn * sin1 + dx;\n      var ay1 = xn * sin1 + yn * cos1 + dy;\n      var ax2 = xn * cos2 - yn * sin2 + dx;\n      var ay2 = xn * sin2 + yn * cos2 + dy;\n\n      var head = [[ax1, ay1], [dx, dy], [ax2, ay2]];\n\n      return \"M0,0\" + \"L\" + dx + \",\" + dy + \"L\" + head[0][0] + \",\" + head[0][1] + \"L\" + head[1][0] + \",\" + head[1][1] + \"L\" + head[2][0] + \",\" + head[2][1];\n      // arc.outerRadius(radiusScale(+d.value.maxTotal));\n      // return arc({endAngle: +getPercentType(\"gender\",d.value.yearMap.get(2014)) * tau});\n    }).attr(\"stroke-width\", function (d) {\n      // return lineWidthScale(d.value.maxTotal)\n      return 1.4;\n    }).attr(\"stroke\", function (d) {\n      if (d.value.diff > 0) {\n        return \"#3989cb\";\n      }\n      return \"rgb(214, 84, 84)\";\n    }).on(\"mouseover\", function (d) {\n      console.log(d.value.diff);\n      console.log(newsIDName.get(d.key).Company);\n    });\n\n    // var arrowMaps = mapSvg.append(\"g\")\n    //     .selectAll(\"g\")\n    //     .data(newsNest)\n    //     .enter()\n    //     .append(\"g\")\n    //     .attr(\"transform\",function(d){\n    //       var location = d.value.location;\n    //       return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n    //     })\n    //     .append(\"path\")\n    //     .attr(\"transform\",function(d){\n    //       return \"translate(\"+ Math.random()*5+\",\"+Math.random()*5+\")\";\n    //     })\n    //     .attr(\"class\",\"map-arrow-path-peak\")\n    //     .attr(\"d\", function(d){\n    //\n    //       //height = size\n    //       //left / right = margin\n    //\n    //       var offset = radiusScale(d.value.maxTotal);\n    //\n    //       // var xVal = xArrowLength(Math.abs(d.value.diff));\n    //\n    //       xArrowLength.range([0,offset*3])\n    //       var xVal = xArrowLength(Math.abs(d.value.diff));\n    //\n    //       var dx = 0;\n    //       if(d.value.diff > 0){\n    //         dx = xVal;\n    //       }\n    //       else{\n    //         dx = -xVal;\n    //       }\n    //       var dy = -3;\n    //\n    //       return \"M\"+ -offset +\",\"+ 0 + \"L\"+0+\",\"+ -dx +\"L\"+offset+\",\"+0// [-offset,0][0,dx][offset,0]\n    //\n    //       // return \"M0,\"+ -offset + \"L\"+dx+\",\"+\"0\"+\"L\"+0+\",\"+offset// [0,-offset][xVal,0][0,offset]\n    //\n    //\n    //       var stemLen = Math.sqrt(dx * dx + dy * dy);\n    //       var headLen = Math.min(stemLen * 0.7, 8);\n    //       var xn = dx / stemLen * headLen;\n    //       var yn = dy / stemLen * headLen;\n    //       var ax1 = xn * cos1 - yn * sin1 + dx\n    //       var ay1 = xn * sin1 + yn * cos1 + dy\n    //       var ax2 = xn * cos2 - yn * sin2 + dx\n    //       var ay2 = xn * sin2 + yn * cos2 + dy\n    //\n    //       var head = [[ax1,ay1],[dx,dy],[ax2,ay2]];\n    //\n    //       return \"M0,0\"+\"L\"+dx+\",\"+dy+\"L\"+head[0][0]+\",\"+head[0][1]+\"L\"+head[1][0]+\",\"+head[1][1]+\"L\"+head[2][0]+\",\"+head[2][1];\n    //       // arc.outerRadius(radiusScale(+d.value.maxTotal));\n    //       // return arc({endAngle: +getPercentType(\"gender\",d.value.yearMap.get(2014)) * tau});\n    //     })\n    //     .attr(\"stroke-width\",function(d){\n    //       return lineWidthScale(d.value.maxTotal)\n    //       // return 1.4;\n    //     })\n    //     .attr(\"stroke\",function(d){\n    //       if(d.value.diff > 0){\n    //         return \"#3989cb\"\n    //       }\n    //       return \"rgb(214, 84, 84)\";\n    //     })\n    //     .on(\"mouseover\",function(d){\n    //       console.log(d.value.diff);\n    //       console.log(newsIDName.get(d.key).Company);\n    //     })\n    //     ;\n\n\n    // var pieChartBackground = mapSvg.append(\"g\")\n    //   .attr(\"class\",\"map-markers\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"map-marker\")\n    //   .attr(\"r\",function(d){\n    //     return radiusScale(+d.value.maxTotal);\n    //   })\n    //   .style(\"fill\",function(d){\n    //     //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n    //     //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n    //\n    //     // return colorScalePercent(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n    //     return \"#72c1ff\"\n    //   })\n    //   .attr(\"transform\",function(d){\n    //     var location = d.value.location;\n    //     return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     // console.log(d);\n    //     console.log(newsIDName.get(d.key).Company);\n    //     console.log(getPercentType(\"gender\",d.value.yearMap.get(2014)));\n    //   })\n    //   ;\n\n    // var pieCharts = mapSvg.append(\"g\")\n    //     .selectAll(\"g\")\n    //     .data(newsNest)\n    //     .enter()\n    //     .append(\"g\")\n    //     .attr(\"transform\",function(d){\n    //       var location = d.value.location;\n    //       return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n    //     })\n    //     .append(\"path\")\n    //     .attr(\"class\",\"slice-arc\")\n    //     .style(\"fill\",function(d){\n    //       return \"blue\"\n    //       //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n    //       //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n    //       return colorScalePercent(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n    //       return \"red\"\n    //     })\n    //     .attr(\"d\", function(d){\n    //       arc.outerRadius(radiusScale(+d.value.maxTotal));\n    //       return arc({endAngle: +getPercentType(\"gender\",d.value.yearMap.get(2014)) * tau});\n    //     });\n\n    // function buildAxis(){\n    //  var chartAxis = chartDiv.append(\"g\")\n    //    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //    .attr(\"class\",\"swarm-axis\")\n    //    ;\n    //\n    //  chartAxis.append(\"g\")\n    //    .append(\"line\")\n    //    .attr(\"x1\",0)\n    //    .attr(\"x2\",\"100%\")\n    //    .attr(\"y1\",height/2)\n    //    .attr(\"y2\",height/2)\n    //    .attr(\"class\",\"swarm-axis-line\")\n    //\n    // }\n    // buildAxis();\n\n    // var linearGradientDown = chartSvgDoubleChange\n    //   .append(\"defs\")\n    //   .append(\"linearGradient\")\n    //   .attr(\"id\",\"gradient\")\n    //   .attr(\"x1\",0)\n    //   .attr(\"x2\",0)\n    //   .attr(\"y1\",0)\n    //   .attr(\"y2\",1)\n    //\n    // var linearGradientUp = chartSvgDoubleChange\n    //   .append(\"defs\")\n    //   .append(\"linearGradient\")\n    //   .attr(\"id\",\"gradient-up\")\n    //   .attr(\"x1\",0)\n    //   .attr(\"x2\",0)\n    //   .attr(\"y1\",0)\n    //   .attr(\"y2\",1)\n    //\n    // var chartSvgDoubleChangeG = chartSvgDoubleChange\n    //   .append(\"g\")\n    //   .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    //\n    // linearGradientUp\n    //   .append(\"stop\")\n    //   .attr(\"stop-color\",\"blue\")\n    //   .attr(\"stop-opacity\",1)\n    //\n    // linearGradientUp\n    //   .append(\"stop\")\n    //   .attr(\"offset\",\"100%\")\n    //   .attr(\"stop-color\",\"blue\")\n    //   .attr(\"stop-opacity\",0)\n    //\n    // linearGradientDown\n    //   .append(\"stop\")\n    //   .attr(\"stop-color\",\"red\")\n    //   .attr(\"stop-opacity\",0)\n    //\n    // linearGradientDown\n    //   .append(\"stop\")\n    //   .attr(\"offset\",\"100%\")\n    //   .attr(\"stop-color\",\"red\")\n    //   .attr(\"stop-opacity\",1)\n    //\n    // chartSvgDoubleChangeG.append(\"marker\")\n    //   .attr(\"id\",\"triangle-up\")\n    //   .attr(\"viewBox\",\"0 0 10 10\")\n    //   .attr(\"refX\",0)\n    //   .attr(\"refY\",5)\n    //   .attr(\"markerUnits\",\"strokeWidth\")\n    //   .attr(\"markerWidth\",6)\n    //   .attr(\"markerHeight\",8)\n    //   .attr(\"orient\",\"auto\")\n    //   .append(\"path\")\n    //   .attr(\"fill\",\"blue\")\n    //   .attr(\"d\",\"M 0 0 L 10 5 L 0 10 z\")\n    //\n    // chartSvgDoubleChangeG.append(\"marker\")\n    //   .attr(\"id\",\"triangle-down\")\n    //   .attr(\"viewBox\",\"0 0 10 10\")\n    //   .attr(\"refX\",0)\n    //   .attr(\"refY\",5)\n    //   .attr(\"markerUnits\",\"strokeWidth\")\n    //   .attr(\"markerWidth\",6)\n    //   .attr(\"markerHeight\",8)\n    //   .attr(\"orient\",\"auto\")\n    //   .append(\"path\")\n    //   .attr(\"fill\",\"red\")\n    //   .attr(\"d\",\"M 0 0 L 10 5 L 0 10 z\")\n    //\n    //\n    // function drawArrow (t0,t1) {\n    // \tvar d = t1 > t0 ?\n    // \t\t(\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n    // \t\t(\"M0,\" + (t1+2) + \" L4,\" + (t1+8) + \" L1.5,\" + (t1+8) + \" L0,\" + t0 + \" L-1.5,\" + (t1+8) + \" L-4,\" + (t1+8) + \" Z\");\n    //\n    // \treturn d;\n    // }\n    //\n    // var arrows = chartSvgDoubleChangeG\n    //   .selectAll(\"path\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"path\")\n    //   .attr(\"class\",\"arrow-scatter-line\")\n    //   .attr(\"d\",function(d){\n    //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n    //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n    //     // return null\n    //     //\n    //     return drawArrow(t0,t1)\n    //   })\n    //   .attr(\"fill\",function(d){\n    //     if(d.value.diff > 0){\n    //       return \"url(#gradient-up)\"\n    //     }\n    //     return \"url(#gradient)\";\n    //   })\n    //   .attr(\"stroke\",\"none\")\n    //   .attr(\"fill-opacity\",1)\n    //\n    // var arrowXScale = d3.scaleLinear().domain([0,arrows.size()-1]).range([0,width]);\n    //\n    // arrows\n    //   .sort(function(a,b){\n    //     // return getPercentType(\"gender\",b.value.values[0]) - getPercentType(\"gender\",a.value.values[0])\n    //     return b.value.diff - a.value.diff;\n    //   })\n    //   .attr(\"transform\",function(d,i){\n    //     return \"translate(\"+arrowXScale(i)+\",0)\"\n    //     // return \"translate(\"+totalXScale(d.value.yearMap.get(2014).total_num)+\",0)\"\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(getPercentType(\"supGender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",d.value.yearMap.get(2014)));\n    //   })\n    //   ;\n\n\n    // chartSvgDoubleChangeG\n    //   .selectAll(\"line\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"line\")\n    //   .attr(\"class\",\"arrow-scatter-line\")\n    //   .style(\"stroke-width\",function(d){\n    //     if(+d.value.yearMap.get(2014).total_num > 100){\n    //       return \"2px\"\n    //     }\n    //     if(+d.value.yearMap.get(2014).total_num > 50){\n    //       return \"1px\"\n    //     }\n    //     if(+d.value.yearMap.get(2014).total_num > 10){\n    //       return \".5px\"\n    //     }\n    //   })\n    //   .style(\"stroke\",function(d){\n    //     if(d.value.diff > 0){\n    //       return \"blue\"\n    //     }\n    //     return \"red\"\n    //   })\n    //   .attr(\"x1\",function(d){\n    //     return xScale(getPercentType(\"supGender\",d.value.values[0]));\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n    //     // return diffScale(d.value.diff);\n    //   })\n    //   .attr(\"y1\",function(d){\n    //     return totalScale(d.value.yearMap.get(2014).total_num)\n    //     // return yScale(getPercentType(\"supGender\",d.value.values[0]));\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return totalScale(d.value.yearMap.get(2014).total_num)\n    //     // return yScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n    //     // return raceDiffScale(d.value.raceDiff)\n    //   })\n    //   .attr(\"marker-end\",function(d){\n    //     if(d.value.diff > 0){\n    //       return \"url(#triangle-up)\";\n    //     }\n    //     return \"url(#triangle-down)\";\n    //   })\n    //   // .style(\"stroke\",\"url(#gradient)\")\n    //   .on(\"mouseover\",function(d){\n    //     console.log(getPercentType(\"supGender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",d.value.yearMap.get(2014)));\n    //   })\n    //   ;\n\n    // chartSvgDoubleChangeG\n    //   .append(\"line\")\n    //   .attr(\"class\",\"arrow-scatter-line-axis\")\n    //   .attr(\"x1\",function(d){\n    //     return xScale(.5);\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(.5);\n    //   })\n    //   .attr(\"y1\",function(d){\n    //     return 0;\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return height;\n    //   })\n\n    // chartSvgDoubleChangeG\n    //   .append(\"line\")\n    //   .attr(\"class\",\"arrow-scatter-line-axis\")\n    //   .attr(\"x1\",function(d){\n    //     return 0;\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return width;\n    //   })\n    //   .attr(\"y1\",function(d){\n    //     return yScale(.5);\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return yScale(.5);\n    //   })\n\n\n    // function buildAverage(){\n    //   var chartAverage = chartDiv.append(\"g\")\n    //      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //      .attr(\"class\",\"swarm-average\")\n    //      ;\n    //\n    //  chartAverage.append(\"text\")\n    //    .attr(\"class\",\"swarm-average-text swarm-average-text-label\")\n    //    .attr(\"x\",xScale(dataToMap.average))\n    //    .attr(\"y\",height*.33-19)\n    //    .text(\"Overall\")\n    //\n    //   chartAverage.append(\"text\")\n    //     .attr(\"class\",\"swarm-average-text\")\n    //     .attr(\"x\",xScale(dataToMap.average))\n    //     .attr(\"y\",height*.33-5)\n    //     .text(Math.round(dataToMap.average*100)+\"% Male\")\n    //\n    //   chartAverage.append(\"line\")\n    //     .attr(\"class\",\"swarm-average-line\")\n    //     .attr(\"x1\",xScale(dataToMap.average))\n    //     .attr(\"x2\",xScale(dataToMap.average))\n    //     .attr(\"y1\",height*.33)\n    //     .attr(\"y2\",height*.66)\n    //     ;\n    // }\n    // buildAverage();\n\n    // var topRowCircle = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return 3\n    //   })\n    //   .attr(\"cx\", function(d) {\n    //     return xScale(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"cy\", function(d) {\n    //     return 0;\n    //   })\n    //   .style(\"fill\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d);\n    //   })\n    //   ;\n    //\n    // var bottomRowCircle = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return 3\n    //   })\n    //   .attr(\"cx\", function(d) {\n    //     return xScale(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"cy\", function(d) {\n    //     return 100;\n    //   })\n    //   .style(\"fill\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    // var rowLines = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"line\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"line\")\n    //   .attr(\"class\",\"slope-line\")\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return 100;\n    //   })\n    //   .attr(\"x1\", function(d) {\n    //     return xScale(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"y1\", function(d) {\n    //     return 0;\n    //   })\n    //   .style(\"stroke\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    // var miniWidth = 40;\n    // var miniHeight = 100;\n    //\n    // var multipleY = d3.scaleLinear().domain([.3,1]).range([miniHeight,0]);\n    //\n    // var miniMultipleWrapper = miniMultiple.selectAll(\"div\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"mini-multiple-div\")\n    //   ;\n    //\n    // miniMultipleWrapper.append(\"p\")\n    //   .attr(\"class\",\"mini-multiple-text\")\n    //   .style(\"margin-top\",20)\n    //   .text(function(d){\n    //     return newsIDName.get(d.value.values[0].NewsID).Company;\n    //   })\n    //   ;\n    //\n    // var miniMultipleWrapperSvg = miniMultipleWrapper\n    //   .append(\"svg\")\n    //   .attr(\"class\",\"slope-mini-svg\")\n    //   .attr(\"height\",miniHeight)\n    //   .style(\"height\",miniHeight+\"px\")\n    //   ;\n    //\n    // miniMultipleWrapperSvg\n    //   .append(\"circle\")\n    //   .attr(\"cx\",function(d){\n    //     return 0;\n    //   })\n    //   .attr(\"cy\",function(d){\n    //     return multipleY(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"r\",2)\n    //   .attr(\"class\",\"slope-small-dot\")\n    //   .style(\"fill\",function(d){\n    //\n    //     console.log(newsIDName.get(d.key).Company);\n    //     console.log(getPercent(d.value.yearMap.get(2014)));\n    //     console.log(getPercent(d.value.values[0]));\n    //\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    // miniMultipleWrapperSvg\n    //   .append(\"circle\")\n    //   .attr(\"cx\",function(d){\n    //     return miniWidth;\n    //   })\n    //   .attr(\"cy\",function(d){\n    //     return multipleY(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"r\",2)\n    //   .attr(\"class\",\"slope-small-dot\")\n    //   .style(\"fill\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    // miniMultipleWrapperSvg\n    //   .selectAll(\"line\")\n    //   .data([0,1,2,4,5])\n    //   .enter()\n    //   .append(\"line\")\n    //   .attr(\"class\",\"slope-line-axis\")\n    //   .attr(\"y1\", function(d,i) {\n    //     return i*20+\"%\";\n    //   })\n    //   .attr(\"x1\", function(d) {\n    //     return 0;\n    //   })\n    //   .attr(\"y2\", function(d,i) {\n    //     return i*20+\"%\";\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return miniWidth;\n    //   })\n    //\n    // miniMultipleWrapperSvg\n    //   .append(\"line\")\n    //   .attr(\"class\",\"slope-line\")\n    //   .attr(\"y1\", function(d) {\n    //     return multipleY(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"x1\", function(d) {\n    //     return 0;\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return multipleY(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return miniWidth;\n    //   })\n    //   .style(\"stroke\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n\n    // cell\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return d.radius\n    //   })\n    //   // .attr(\"cx\", function(d) { return d.x; })\n    //   // .attr(\"cy\", function(d) { return d.y; })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d.male_num/d.total_num);\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n\n    // dataToMap.values = d3.nest()\n    //   .key(function(d){\n    //     return Math.round(getPercent(d)*50)/50;\n    //   })\n    //   .sortKeys(function(a,b){\n    //     return a-b;\n    //   })\n    //   .entries(dataToMap.values)\n    //   ;\n    //\n    // chartDiv.append(\"div\")\n    //   .attr(\"class\",\"histogram-avg-div\")\n    //   .style(\"left\",function(d){\n    //     return (dataToMap.average*width+1)+\"px\"\n    //   })\n    //   .append(\"p\")\n    //   .text(Math.round(dataToMap.average*100)+\"%\")\n    //   ;\n    //\n    // var yearsColumn = chartDiv\n    //   .selectAll(\".histogram-year-container\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-year-container\")\n    //   .style(\"left\",function(d){\n    //     return (d.key*width+1)+\"px\"\n    //   })\n    //   ;\n    //\n    // yearsColumn\n    //   .selectAll(\"div\")\n    //   .data(function(d){\n    //     return d.values\n    //   })\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",function(d){\n    //     var state = null;\n    //     var region = null;\n    //     if(newsIdMap.has(d.NewsID)){\n    //       state = newsIdMap.get(d.NewsID).State;\n    //     }\n    //     if(regionMap.has(state)){\n    //       region = regionMap.get(state)[3];\n    //     }\n    //\n    //     if(region ==\"West\"){\n    //       region = \"green\"\n    //     }\n    //     if(region ==\"South\"){\n    //       region = \"blue\"\n    //     }\n    //     if(region ==\"Midwest\"){\n    //       region = \"purple\"\n    //     }\n    //     if(region ==\"Northeast\"){\n    //       region = \"yellow\"\n    //     }\n    //     return \"histogram-year-item \"+region\n    //   })\n    //   .style(\"background-color\",function(d){\n    //     // return backgroundFunction(d)\n    //     return null\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n    //\n    // yearsColumn.append(\"p\")\n    //   .text(function(d,i){\n    //     if(i%5 == 0 || i==0 || i==yearsColumn.size()-1){\n    //       return Math.round(d.key*100)+\"%\";\n    //     }\n    //     return null;\n    //\n    //   })\n    //   ;\n  }\n  // function backgroundFunction(d){\n  //   var state = null;\n  //   var region = null;\n  //   if(newsIdMap.has(d.NewsID)){\n  //     state = newsIdMap.get(d.NewsID).State;\n  //   }\n  //   if(regionMap.has(state)){\n  //     region = regionMap.get(state)[3];\n  //   }\n  //   if(region ==\"West\"){\n  //     return \"green\"\n  //   }\n  //   if(region ==\"South\"){\n  //     return \"blue\"\n  //   }\n  //   if(region ==\"Midwest\"){\n  //     return \"purple\"\n  //   }\n  //   if(region ==\"Northeast\"){\n  //     return \"yellow\"\n  //   }\n  // }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvbWFwcy5qcz85OGM4Il0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIHN0YXRlcyA9IFtcbiAgW1wiTWFpbmVcIixcIk1FXCIsMSxcIk5vcnRoZWFzdFwiLDIzXSxcbiAgW1wiVmVybW9udFwiLFwiVlRcIiwyLFwiTm9ydGhlYXN0XCIsNTBdLFxuICBbXCJOZXcgSGFtcHNoaXJlXCIsXCJOSFwiLDMsXCJOb3J0aGVhc3RcIiwzM10sXG4gIFtcIlJob2RlIElzbGFuZFwiLFwiUklcIiw0LFwiTm9ydGhlYXN0XCIsNDRdLFxuICBbXCJNYXNzYWNodXNldHRzXCIsXCJNQVwiLDUsXCJOb3J0aGVhc3RcIiwyNV0sXG4gIFtcIkNvbm5lY3RpY3V0XCIsXCJDVFwiLDYsXCJOb3J0aGVhc3RcIiw5XSxcbiAgW1wiRGVsYXdhcmVcIixcIkRFXCIsNyxcIk5vcnRoZWFzdFwiLDEwXSxcbiAgW1wiTmV3IEplcnNleVwiLFwiTkpcIiw4LFwiTm9ydGhlYXN0XCIsMzRdLFxuICBbXCJOZXcgWW9ya1wiLFwiTllcIiw5LFwiTm9ydGhlYXN0XCIsMzZdLFxuICBbXCJQZW5uc3lsdmFuaWFcIixcIlBBXCIsMTAsXCJOb3J0aGVhc3RcIiw0Ml0sXG4gIFtcIkRpc3RyaWN0IG9mIENvbHVtYmlhXCIsXCJEQ1wiLDExLFwiTm9ydGhlYXN0XCIsMTFdLFxuICBbXCJNYXJ5bGFuZFwiLFwiTURcIiwxMixcIk5vcnRoZWFzdFwiLDI0XSxcbiAgW1wiVmlyZ2luaWFcIixcIlZBXCIsMTMsXCJTb3V0aFwiLDUxXSxcbiAgW1wiTm9ydGggQ2Fyb2xpbmFcIixcIk5DXCIsMTQsXCJTb3V0aFwiLDM3XSxcbiAgW1wiU291dGggQ2Fyb2xpbmFcIixcIlNDXCIsMTUsXCJTb3V0aFwiLDQ1XSxcbiAgW1wiR2VvcmdpYVwiLFwiR0FcIiwxNixcIlNvdXRoXCIsMTNdLFxuICBbXCJBbGFiYW1hXCIsXCJBTFwiLDE3LFwiU291dGhcIiwxXSxcbiAgW1wiTWlzc2lzc2lwcGlcIixcIk1TXCIsMTgsXCJTb3V0aFwiLDI4XSxcbiAgW1wiTG91aXNpYW5hXCIsXCJMQVwiLDE5LFwiU291dGhcIiwyMl0sXG4gIFtcIkFya2Fuc2FzXCIsXCJBUlwiLDIwLFwiU291dGhcIiw1XSxcbiAgW1wiVGVubmVzc2VlXCIsXCJUTlwiLDIxLFwiU291dGhcIiw0N10sXG4gIFtcIktlbnR1Y2t5XCIsXCJLWVwiLDIyLFwiU291dGhcIiwyMV0sXG4gIFtcIldlc3QgVmlyZ2luaWFcIixcIldWXCIsMjMsXCJTb3V0aFwiLDU0XSxcbiAgW1wiT2tsYWhvbWFcIixcIk9LXCIsMjQsXCJNaWR3ZXN0XCIsNDBdLFxuICBbXCJDb2xvcmFkb1wiLFwiQ09cIiwyNSxcIldlc3RcIiw4XSxcbiAgW1wiVXRhaFwiLFwiVVRcIiwyNixcIldlc3RcIiw0OV0sXG4gIFtcIklkYWhvXCIsXCJJRFwiLDI3LFwiV2VzdFwiLDE2XSxcbiAgW1wiV3lvbWluZ1wiLFwiV1lcIiwyOCxcIldlc3RcIiw1Nl0sXG4gIFtcIk1vbnRhbmFcIixcIk1UXCIsMjksXCJXZXN0XCIsMzBdLFxuICBbXCJOb3J0aCBEYWtvdGFcIixcIk5EXCIsMzAsXCJNaWR3ZXN0XCIsMzhdLFxuICBbXCJTb3V0aCBEYWtvdGFcIixcIlNEXCIsMzEsXCJNaWR3ZXN0XCIsNDZdLFxuICBbXCJOZWJyYXNrYVwiLFwiTkVcIiwzMixcIk1pZHdlc3RcIiwzMV0sXG4gIFtcIkthbnNhc1wiLFwiS1NcIiwzMyxcIk1pZHdlc3RcIiwyMF0sXG4gIFtcIklvd2FcIixcIklBXCIsMzQsXCJNaWR3ZXN0XCIsMTldLFxuICBbXCJNaW5uZXNvdGFcIixcIk1OXCIsMzUsXCJNaWR3ZXN0XCIsMjddLFxuICBbXCJXaXNjb25zaW5cIixcIldJXCIsMzYsXCJNaWR3ZXN0XCIsNTVdLFxuICBbXCJJbmRpYW5hXCIsXCJJTlwiLDM3LFwiTWlkd2VzdFwiLDE4XSxcbiAgW1wiTWlzc291cmlcIixcIk1PXCIsMzgsXCJNaWR3ZXN0XCIsMjldLFxuICBbXCJPaGlvXCIsXCJPSFwiLDM5LFwiTWlkd2VzdFwiLDM5XSxcbiAgW1wiTWljaGlnYW5cIixcIk1JXCIsNDAsXCJNaWR3ZXN0XCIsMjZdLFxuICBbXCJJbGxpbm9pc1wiLFwiSUxcIiw0MSxcIk1pZHdlc3RcIiwxN10sXG4gIFtcIkZsb3JpZGFcIixcIkZMXCIsNDIsXCJTb3V0aFwiLDEyXSxcbiAgW1wiQ2FsaWZvcm5pYVwiLFwiQ0FcIiw0MyxcIldlc3RcIiw2XSxcbiAgW1wiTmV2YWRhXCIsXCJOVlwiLDQ0LFwiV2VzdFwiLDMyXSxcbiAgW1wiVGV4YXNcIixcIlRYXCIsNDUsXCJTb3V0aFwiLDQ4XSxcbiAgW1wiQXJpem9uYVwiLFwiQVpcIiw0NixcIldlc3RcIiw0XSxcbiAgW1wiTmV3IE1leGljb1wiLFwiTk1cIiw0NyxcIldlc3RcIiwzNV0sXG4gIFtcIkFsYXNrYVwiLFwiQUtcIiw0OCxcIldlc3RcIiwyXSxcbiAgW1wiV2FzaGluZ3RvblwiLFwiV0FcIiw0OSxcIldlc3RcIiw1M10sXG4gIFtcIk9yZWdvblwiLFwiT1JcIiw1MCxcIldlc3RcIiw0MV0sXG4gIFtcIkhhd2FpaVwiLFwiSElcIiw1MSxcIldlc3RcIiwxNV0sXG4gIF1cbiAgO1xuXG5mdW5jdGlvbiBpbml0KG1hcERhdGEsbGF0TG9uZ0RhdGEsbmV3c0lETG9jYXRpb24sbmV3c0lESW5mbyxzdGF0ZVRvcG8pIHtcblxuICB2YXIgcHJvamVjdGlvbiA9IGQzLmdlb0FsYmVyc1VzYSgpXG4gICAgICAvLyAuc2NhbGUoMTI4MClcbiAgICAgIC8vIC50cmFuc2xhdGUoW3dpZHRoIC8gMiwgaGVpZ2h0IC8gMl0pO1xuXG4gIHZhciBwYXRoID0gZDMuZ2VvUGF0aCgpXG4gICAgICAucHJvamVjdGlvbihwcm9qZWN0aW9uKVxuICAgICAgLy8gLnBvaW50UmFkaXVzKDEuNSlcbiAgICAgIDtcblxuICAvLyB2YXIgcHJvamVjdGlvbiA9IGQzLmdlb0FsYmVyc1VzYSgpO1xuICAvLyB2YXIgcGF0aCA9IGQzLmdlb1BhdGgoKS5wcm9qZWN0aW9uKHByb2plY3Rpb24pO1xuXG5cdHZhciBjdXQgPSBcImdlbmRlclwiXG5cdC8vIHZhciBjdXQgPSBcInN1cEdlbmRlclwiXG4gIHZhciBjb3VudE1pbiA9ICAxOTtcblxuICBtYXBEYXRhID0gbWFwRGF0YS5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgcmV0dXJuICtkLlllYXIgPiAyMDAwO1xuICB9KVxuXG5cdGZ1bmN0aW9uIGdldEF2ZXJhZ2UoZGF0YSl7XG5cdFx0aWYoY3V0ID09IFwiZ2VuZGVyXCIpe1xuICAgICAgdmFyIG1lYW4gPSBkMy5tZWFuKGRhdGEsZnVuY3Rpb24oZCl7cmV0dXJuICsoZGF0YS50b3RhbF9udW0tZGF0YS5tYWxlX251bSkvZGF0YS50b3RhbF9udW19KTtcblx0XHRcdHJldHVybiBtZWFuO1xuXHRcdH1cblx0XHRpZihjdXQgPT0gXCJzdXBXaGl0ZVwiKXtcblx0XHRcdHJldHVybiBkMy5tZWFuKGRhdGEsZnVuY3Rpb24oZCl7cmV0dXJuICtkYXRhLndoaXRlX3N1cF9udW0vZGF0YS50b3RhbF9zdXBfbnVtfSk7XG5cdFx0fVxuXHRcdGlmKGN1dCA9PSBcInN1cEdlbmRlclwiKXtcblx0XHRcdHJldHVybiBkMy5tZWFuKGRhdGEsZnVuY3Rpb24oZCl7cmV0dXJuICgrZGF0YS50b3RhbF9zdXBfbnVtIC0gK2RhdGEubWFsZV9zdXBfbnVtKS9kYXRhLnRvdGFsX3N1cF9udW19KTtcblx0XHR9XG5cdFx0cmV0dXJuIGQzLm1lYW4oZGF0YSxmdW5jdGlvbihkKXtyZXR1cm4gK2RhdGEud2hpdGVfbnVtL2RhdGEudG90YWxfbnVtfSk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQZXJjZW50KGRhdGEpe1xuXHRcdGlmKGN1dCA9PSBcImdlbmRlclwiKXtcblx0XHRcdHJldHVybiArKGRhdGEudG90YWxfbnVtLWRhdGEubWFsZV9udW0pL2RhdGEudG90YWxfbnVtXG5cdFx0fVxuXHRcdGlmKGN1dCA9PSBcInN1cFdoaXRlXCIpe1xuXHRcdFx0cmV0dXJuICtkYXRhLndoaXRlX3N1cF9udW0vZGF0YS50b3RhbF9zdXBfbnVtO1xuXHRcdH1cblx0XHRpZihjdXQgPT0gXCJzdXBHZW5kZXJcIil7XG5cdFx0XHRyZXR1cm4gK2RhdGEubWFsZV9zdXBfbnVtL2RhdGEudG90YWxfc3VwX251bTtcblx0XHR9XG5cdFx0cmV0dXJuICgrZGF0YS50b3RhbF9udW0gLSArZGF0YS53aGl0ZV9udW0pL2RhdGEudG90YWxfbnVtXG5cdH1cblxuICBmdW5jdGlvbiBnZXRQZXJjZW50VHlwZShraW5kLGRhdGEpe1xuICAgIGlmKGtpbmQgPT0gXCJnZW5kZXJcIil7XG4gICAgICByZXR1cm4gKyhkYXRhLnRvdGFsX251bS1kYXRhLm1hbGVfbnVtKS9kYXRhLnRvdGFsX251bVxuICAgIH1cbiAgICBpZihraW5kID09IFwic3VwV2hpdGVcIil7XG4gICAgICByZXR1cm4gK2RhdGEud2hpdGVfc3VwX251bS9kYXRhLnRvdGFsX3N1cF9udW07XG4gICAgfVxuICAgIGlmKGtpbmQgPT0gXCJzdXBHZW5kZXJcIil7XG4gICAgICByZXR1cm4gKCtkYXRhLnRvdGFsX3N1cF9udW0gLSArZGF0YS5tYWxlX3N1cF9udW0pL2RhdGEudG90YWxfc3VwX251bTtcbiAgICB9XG4gICAgcmV0dXJuICgrZGF0YS50b3RhbF9udW0gLSArZGF0YS53aGl0ZV9udW0pL2RhdGEudG90YWxfbnVtXG4gIH1cblxuXHR2YXIgbGF0TG9uZ01hcCA9IGQzLm1hcChsYXRMb25nRGF0YSxmdW5jdGlvbihkKXsgcmV0dXJuIGQuTmV3c0lEfSk7XG5cdHZhciBuZXdzSWRNYXAgPSBkMy5tYXAobmV3c0lETG9jYXRpb24sZnVuY3Rpb24oZCl7IHJldHVybiBkLk5ld3NJRH0pO1xuICB2YXIgbmV3c0lETmFtZSA9IGQzLm1hcChuZXdzSURJbmZvLGZ1bmN0aW9uKGQpeyByZXR1cm4gZC5OZXdzSUR9KTtcblx0dmFyIHJlZ2lvbk1hcCA9IGQzLm1hcChzdGF0ZXMsZnVuY3Rpb24oZCl7XG5cdFx0cmV0dXJuIGRbMV07XG5cdH0pO1xuXG4gIHZhciBtYXJnaW4gPSB7dG9wOiA0MCwgcmlnaHQ6IDQwLCBib3R0b206IDQwLCBsZWZ0OiA0MH07XG5cdHZhciB3aWR0aCA9IDYwMCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICB2YXIgaGVpZ2h0ID0gMzAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cdHZhciBob3J6U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwxXSkucmFuZ2UoWzAsd2lkdGhdKVxuXHR2YXIgY29udGFpbmVyID0gZDMuc2VsZWN0KFwiLm1hcHNcIik7XG5cbiAgdmFyIHRvZ2dsZXMgPSBjb250YWluZXIuYXBwZW5kKFwiZGl2XCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwiaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS13cmFwcGVyXCIpO1xuXG4gIHRvZ2dsZXNcbiAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwiaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1zaXplXCIpXG4gICAgLnNlbGVjdEFsbChcInBcIilcbiAgICAuZGF0YShbMCwyMCw1MCwxMDAsNTAwXSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJwXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwiaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCIpXG4gICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICByZXR1cm4gZDtcbiAgICB9KVxuICAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICBjb3VudE1pbiA9IGQ7XG4gICAgICBidWlsZENoYXJ0KCk7XG4gICAgfSlcbiAgICA7XG5cbiAgdG9nZ2xlc1xuICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLXR5cGVcIilcbiAgICAuc2VsZWN0QWxsKFwicFwiKVxuICAgIC5kYXRhKFtcInJhY2VcIixcImdlbmRlclwiLFwic3VwV2hpdGVcIixcInN1cEdlbmRlclwiXSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJwXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwiaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCIpXG4gICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICByZXR1cm4gZDtcbiAgICB9KVxuICAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICBjdXQgPSBkO1xuICAgICAgYnVpbGRDaGFydCgpO1xuICAgIH0pXG4gICAgO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkQ2hhcnQoKXtcblxuXG5cbiAgICBkMy5zZWxlY3RBbGwoXCIubWFwcy1jaGFydC13cmFwcGVyXCIpLnJlbW92ZSgpO1xuXG4gICAgdmFyIGNoYXJ0RGl2ID0gY29udGFpbmVyXG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJtYXBzLWNoYXJ0LXdyYXBwZXJcIilcblxuICAgIHZhciBtYXBTdmcgPSBjaGFydERpdi5hcHBlbmQoXCJzdmdcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcIm1hcHMtY2hhcnQtc3ZnXCIpXG4gICAgICAuYXR0cihcInZpZXdCb3hcIixcIjAgMCA5NjAgNjAwXCIpXG4gICAgICA7XG5cbiAgICBtYXBTdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInN0YXRlc1wiKVxuICAgICAgLnNlbGVjdEFsbChcInBhdGhcIilcbiAgICAgIC8vIC5kYXRhKHRvcG9qc29uLmZlYXR1cmUoc3RhdGVUb3BvLCBzdGF0ZVRvcG8ub2JqZWN0cy5zdGF0ZXMpKVxuICAgICAgLmRhdGEodG9wb2pzb24uZmVhdHVyZShzdGF0ZVRvcG8sIHN0YXRlVG9wby5vYmplY3RzLnN0YXRlcykuZmVhdHVyZXMpXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAuYXR0cihcImRcIiwgcGF0aCk7XG5cbiAgICBtYXBTdmdcbiAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInN0YXRlLWJvcmRlcnNcIilcbiAgICAgIC5hdHRyKFwiZFwiLCBwYXRoKHRvcG9qc29uLm1lc2goc3RhdGVUb3BvLCBzdGF0ZVRvcG8ub2JqZWN0cy5zdGF0ZXMsIGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEgIT09IGI7IH0pKSk7XG5cbiAgICB2YXIgY2hhcnRTdmdEb3VibGVDaGFuZ2UgPSBjaGFydERpdlxuICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwibWFwcy1jaGFydC13cmFwcGVyLXN2Zy1kb3VibGUtY2hhbmdlXCIpXG4gICAgICAuYXR0cihcIndpZHRoXCIsd2lkdGgrbWFyZ2luLmxlZnQrbWFyZ2luLnJpZ2h0KVxuICAgICAgLmF0dHIoXCJoZWlnaHRcIixoZWlnaHQrbWFyZ2luLnRvcCttYXJnaW4uYm90dG9tKVxuICAgICAgLnN0eWxlKFwid2lkdGhcIix3aWR0aCttYXJnaW4ubGVmdCttYXJnaW4ucmlnaHQrXCJweFwiKVxuICAgICAgLnN0eWxlKFwiaGVpZ2h0XCIsaGVpZ2h0K21hcmdpbi50b3ArbWFyZ2luLmJvdHRvbStcInB4XCIpXG4gICAgICA7XG5cbiAgICB2YXIgbWluaU11bHRpcGxlID0gY29udGFpbmVyLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic2xvcGUtbWluaS1tdWx0aXBsZS1kaXZcIilcbiAgICAgIDtcblxuICAgIHZhciBmaWx0ZXJlZE1hcERhdGEgPSBtYXBEYXRhLmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgICAgaWYoY3V0ID09IFwic3VwV2hpdGVcIiB8fCBjdXQgPT0gXCJzdXBHZW5kZXJcIil7XG4gICAgICAgICAgcmV0dXJuIGQudG90YWxfbnVtID4gY291bnRNaW4gJiYgZC50b3RhbF9zdXBfbnVtID4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZC50b3RhbF9udW0gPiBjb3VudE1pbjtcbiAgICAgIH0pXG4gICAgICA7XG5cbiAgICB2YXIgbWF4UGVyY2VudEFycmF5ID0gW107XG4gICAgdmFyIGRpZmZBcnJheSA9IFtdO1xuICAgIHZhciByYWNlRGlmZkFycmF5ID0gW11cbiAgICB2YXIgbmV3c05lc3QgPSBkMy5uZXN0KClcbiAgICAgIC5rZXkoZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiArZC5OZXdzSURcbiAgICAgIH0pXG4gICAgICAucm9sbHVwKGZ1bmN0aW9uKGxlYXZlcyl7XG4gICAgICAgIHZhciBtYXAgPSBkMy5tYXAobGVhdmVzLGZ1bmN0aW9uKGQpe3JldHVybiBkLlllYXJ9KTtcbiAgICAgICAgdmFyIG1heFRvdGFsTnVtID0gZDMubWF4KGxlYXZlcyxmdW5jdGlvbihkKXtyZXR1cm4gZC50b3RhbF9udW19KTtcbiAgICAgICAgdmFyIG1heFBlcmNlbnQgPSBkMy5tYXgobGVhdmVzLGZ1bmN0aW9uKGQpeyByZXR1cm4gZ2V0UGVyY2VudChkKX0pO1xuICAgICAgICBtYXhQZXJjZW50QXJyYXkucHVzaChtYXhQZXJjZW50KVxuICAgICAgICByZXR1cm4ge3llYXJNYXA6bWFwLHZhbHVlczpsZWF2ZXMsbWF4VG90YWw6bWF4VG90YWxOdW19XG4gICAgICB9KVxuICAgICAgLmVudHJpZXMoZmlsdGVyZWRNYXBEYXRhKVxuICAgICAgO1xuXG4gICAgbmV3c05lc3QgPSBuZXdzTmVzdC5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICBpZihkLnZhbHVlLnllYXJNYXAuaGFzKDIwMTQpKXtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGl0ZW0gaW4gbmV3c05lc3Qpe1xuICAgICAgdmFyIGRpZmYgPSBnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKS1nZXRQZXJjZW50VHlwZShcImdlbmRlclwiLG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnZhbHVlc1swXSlcbiAgICAgIGN1dCA9IFwic3VwR2VuZGVyXCI7XG4gICAgICB2YXIgcmFjZURpZmYgPSBnZXRQZXJjZW50KG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKS1nZXRQZXJjZW50KG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnZhbHVlc1swXSk7XG4gICAgICBjdXQgPSBcImdlbmRlclwiXG4gICAgICBkaWZmQXJyYXkucHVzaChkaWZmKTtcbiAgICAgIHJhY2VEaWZmQXJyYXkucHVzaChyYWNlRGlmZik7XG5cbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLmRpZmYgPSBkaWZmO1xuICAgICAgbmV3c05lc3RbaXRlbV0udmFsdWUucmFjZURpZmYgPSByYWNlRGlmZjtcbiAgICAgIGlmKGxhdExvbmdNYXAuaGFzKG5ld3NOZXN0W2l0ZW1dLmtleSkpe1xuICAgICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5sb2NhdGlvbiA9IGxhdExvbmdNYXAuZ2V0KG5ld3NOZXN0W2l0ZW1dLmtleSlcbiAgICAgICAgbmV3c05lc3RbaXRlbV0udmFsdWUuaGFzTG9jYXRpb24gPSB0cnVlXG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5oYXNMb2NhdGlvbiA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIDtcblxuXG5cbiAgICBuZXdzTmVzdCA9IG5ld3NOZXN0LmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgIHZhciBoYXNMYXQgPSBmYWxzZTtcbiAgICAgIGlmKGQudmFsdWUuaGFzTG9jYXRpb24pe1xuICAgICAgICBpZihkLnZhbHVlLmxvY2F0aW9uLmxhdCAhPSBcIk5VTExcIil7XG4gICAgICAgICAgaGFzTGF0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGQudmFsdWUuaGFzTG9jYXRpb24gJiYgaGFzTGF0O1xuICAgIH0pXG5cbiAgICB2YXIgdG90YWxFeHRlbnQgPSBkMy5leHRlbnQobmV3c05lc3QsZnVuY3Rpb24oZCl7cmV0dXJuICtkLnZhbHVlLm1heFRvdGFsfSlcbiAgICB2YXIgcmFkaXVzU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbih0b3RhbEV4dGVudCkucmFuZ2UoWzMsNDBdKTtcbiAgICB2YXIgcGVyY2VudEV4dGVudCA9IGQzLmV4dGVudChtYXhQZXJjZW50QXJyYXksZnVuY3Rpb24oZCl7cmV0dXJuIGQ7fSk7XG4gICAgdmFyIGRpZmZFeHRlbnQgPSBkMy5leHRlbnQoZGlmZkFycmF5LGZ1bmN0aW9uKGQpe3JldHVybiBkOyB9KTtcbiAgICB2YXIgcmFjZURpZmZFeHRlbnQgPSBkMy5leHRlbnQocmFjZURpZmZBcnJheSxmdW5jdGlvbihkKXsgcmV0dXJuIGQ7IH0pO1xuICAgIHZhciBkaWZmU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbZGlmZkV4dGVudFswXSxkaWZmRXh0ZW50WzFdXSkucmFuZ2UoWzAsd2lkdGhdKVxuICAgIHZhciByYWNlRGlmZlNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oW3JhY2VEaWZmRXh0ZW50WzBdLHJhY2VEaWZmRXh0ZW50WzFdXSkucmFuZ2UoW2hlaWdodCwwXSlcblxuICAgIHZhciB0b3RhbFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4odG90YWxFeHRlbnQpLnJhbmdlKFtoZWlnaHQsMF0pO1xuICAgIHZhciB0b3RhbFhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKHRvdGFsRXh0ZW50KS5yYW5nZShbMCx3aWR0aF0pO1xuXG4gICAgdmFyIGNvbG9yU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbZGlmZkV4dGVudFswXSwwLGRpZmZFeHRlbnRbMV1dKS5yYW5nZShbXCJyZWRcIixcIndoaXRlXCIsXCJncmVlblwiXSk7XG5cbiAgICB2YXIgY29sb3JTY2FsZVBlcmNlbnQgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbLTEsMCwuMzAsLjM1LC40LC40NSwuNSwuNl0pLnJhbmdlKFtcIiMwMDAwMDBcIixcIiMwMDAwMDBcIixcInJnYig4LCA2OSwgMTQ4KVwiLFwicmdiKDMzLCAxMTMsIDE4MSlcIixcInJnYigyMDQsIDIxOSwgMTYzKVwiLFwicmdiKDI1MywgMjQ2LCAxNjMpXCIsXCIjZTJlMWUxXCIsXCJyZ2IoMzksIDEwOCwgMTQ1KVwiXSk7XG5cbiAgICB2YXIgc3Ryb2tlU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbZGlmZkV4dGVudFswXSwwLGRpZmZFeHRlbnRbMV1dKS5yYW5nZShbXCJyZWRcIixcImdyZXlcIixcImdyZWVuXCJdKTtcblxuICAgIHZhciB4QXJyb3dMZW5ndGggPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwuMTVdKS5yYW5nZShbMSwzMF0pLmNsYW1wKHRydWUpO1xuXG4gICAgLy8gbmV3c05lc3QgPSBuZXdzTmVzdC5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgLy8gICB2YXIgcGVyY2VudCA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSk7XG4gICAgLy8gICByZXR1cm4gcGVyY2VudCA+IC41MDtcbiAgICAvLyB9KVxuXG4gICAgdmFyIHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFswLC43XSkucmFuZ2UoWzAsd2lkdGhdKTtcbiAgICB2YXIgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy4yLC41XSkucmFuZ2UoW2hlaWdodCwwXSk7XG4gICAgdmFyIGxpbmVXaWR0aFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4odG90YWxFeHRlbnQpLnJhbmdlKFsxLjQsMi41XSkuY2xhbXAodHJ1ZSlcbiAgICAvLyB2YXIgbWFwTWFya2VycyA9IG1hcFN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJtYXAtbWFya2Vyc1wiKVxuICAgIC8vICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAgIC8vICAgLmRhdGEobmV3c05lc3QpXG4gICAgLy8gICAuZW50ZXIoKVxuICAgIC8vICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwibWFwLW1hcmtlclwiKVxuICAgIC8vICAgLmF0dHIoXCJyXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiByYWRpdXNTY2FsZSgrZC52YWx1ZS5tYXhUb3RhbCk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLy8gLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgLy8gICAvLyAgICAgdmFyIHQwID0geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS52YWx1ZXNbMF0pKVxuICAgIC8vICAgLy8gICAvLyAgICAgdmFyIHQxID0geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpXG4gICAgLy8gICAvLyAgIHJldHVybiBcInJnYigxNjksIDE2OSwgMTY5KVwiO1xuICAgIC8vICAgLy8gICByZXR1cm4gY29sb3JTY2FsZVBlcmNlbnQoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSlcbiAgICAvLyAgIC8vICAgcmV0dXJuIFwicmVkXCJcbiAgICAvLyAgIC8vIH0pXG4gICAgLy8gICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICB2YXIgbG9jYXRpb24gPSBkLnZhbHVlLmxvY2F0aW9uO1xuICAgIC8vICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIrcHJvamVjdGlvbihbK2xvY2F0aW9uLmxuZyxsb2NhdGlvbi5sYXRdKStcIilcIjtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgLy8gY29uc29sZS5sb2coZCk7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKG5ld3NJRE5hbWUuZ2V0KGQua2V5KS5Db21wYW55KTtcbiAgICAvLyAgICAgY29uc29sZS5sb2coZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgO1xuXG4gICAgdmFyIHRhdSA9IDIgKiBNYXRoLlBJOyAvLyBodHRwOi8vdGF1ZGF5LmNvbS90YXUtbWFuaWZlc3RvXG4gICAgdmFyIGFyYyA9IGQzLmFyYygpXG4gICAgICAuaW5uZXJSYWRpdXMoMClcbiAgICAgIC5vdXRlclJhZGl1cygxMClcbiAgICAgIC5zdGFydEFuZ2xlKDApO1xuXG4gICAgLy8gcmFkaXVzU2NhbGUucmFuZ2UoWzEwLDIwXSlcblxuICAgIHZhciB0aGV0YTEgPSBNYXRoLlBJICogMC43NTtcbiAgICB2YXIgdGhldGEyID0gTWF0aC5QSSAqIC0wLjc1O1xuICAgIHZhciBzaW4xID0gTWF0aC5zaW4odGhldGExKTtcbiAgICB2YXIgc2luMiA9IE1hdGguc2luKHRoZXRhMik7XG4gICAgdmFyIGNvczEgPSBNYXRoLmNvcyh0aGV0YTEpO1xuICAgIHZhciBjb3MyID0gTWF0aC5jb3ModGhldGEyKTtcblxuICAgIHZhciBhcnJvd01hcHMgPSBtYXBTdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgICAuZGF0YShuZXdzTmVzdClcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihkKXtcbiAgICAgICAgICB2YXIgbG9jYXRpb24gPSBkLnZhbHVlLmxvY2F0aW9uO1xuICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIitwcm9qZWN0aW9uKFsrbG9jYXRpb24ubG5nLGxvY2F0aW9uLmxhdF0pK1wiKVwiO1xuICAgICAgICB9KVxuICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJtYXAtYXJyb3ctcGF0aFwiKVxuICAgICAgICAuYXR0cihcImRcIiwgZnVuY3Rpb24oZCl7XG5cbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsbmV3c05lc3RbaXRlbV0udmFsdWUudmFsdWVzWzBdKSk7XG4gICAgICAgICAgdmFyIHhWYWwgPSB4QXJyb3dMZW5ndGgoTWF0aC5hYnMoZC52YWx1ZS5kaWZmKSk7XG4gICAgICAgICAgdmFyIGR4ID0gMDtcbiAgICAgICAgICBpZihkLnZhbHVlLmRpZmYgPiAwKXtcbiAgICAgICAgICAgIGR4ID0geFZhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGR4ID0gLXhWYWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBkeSA9IC0zO1xuXG4gICAgICAgICAgdmFyIHN0ZW1MZW4gPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgICAgICAgIHZhciBoZWFkTGVuID0gTWF0aC5taW4oc3RlbUxlbiAqIDAuNywgOCk7XG4gICAgICAgICAgdmFyIHhuID0gZHggLyBzdGVtTGVuICogaGVhZExlbjtcbiAgICAgICAgICB2YXIgeW4gPSBkeSAvIHN0ZW1MZW4gKiBoZWFkTGVuO1xuICAgICAgICAgIHZhciBheDEgPSB4biAqIGNvczEgLSB5biAqIHNpbjEgKyBkeFxuICAgICAgICAgIHZhciBheTEgPSB4biAqIHNpbjEgKyB5biAqIGNvczEgKyBkeVxuICAgICAgICAgIHZhciBheDIgPSB4biAqIGNvczIgLSB5biAqIHNpbjIgKyBkeFxuICAgICAgICAgIHZhciBheTIgPSB4biAqIHNpbjIgKyB5biAqIGNvczIgKyBkeVxuXG4gICAgICAgICAgdmFyIGhlYWQgPSBbW2F4MSxheTFdLFtkeCxkeV0sW2F4MixheTJdXTtcblxuICAgICAgICAgIHJldHVybiBcIk0wLDBcIitcIkxcIitkeCtcIixcIitkeStcIkxcIitoZWFkWzBdWzBdK1wiLFwiK2hlYWRbMF1bMV0rXCJMXCIraGVhZFsxXVswXStcIixcIitoZWFkWzFdWzFdK1wiTFwiK2hlYWRbMl1bMF0rXCIsXCIraGVhZFsyXVsxXTtcbiAgICAgICAgICAvLyBhcmMub3V0ZXJSYWRpdXMocmFkaXVzU2NhbGUoK2QudmFsdWUubWF4VG90YWwpKTtcbiAgICAgICAgICAvLyByZXR1cm4gYXJjKHtlbmRBbmdsZTogK2dldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkgKiB0YXV9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAvLyByZXR1cm4gbGluZVdpZHRoU2NhbGUoZC52YWx1ZS5tYXhUb3RhbClcbiAgICAgICAgICByZXR1cm4gMS40O1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQudmFsdWUuZGlmZiA+IDApe1xuICAgICAgICAgICAgcmV0dXJuIFwiIzM5ODljYlwiXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBcInJnYigyMTQsIDg0LCA4NClcIjtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgY29uc29sZS5sb2coZC52YWx1ZS5kaWZmKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhuZXdzSUROYW1lLmdldChkLmtleSkuQ29tcGFueSk7XG4gICAgICAgIH0pXG4gICAgICAgIDtcblxuICAgIC8vIHZhciBhcnJvd01hcHMgPSBtYXBTdmcuYXBwZW5kKFwiZ1wiKVxuICAgIC8vICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgIC8vICAgICAuZGF0YShuZXdzTmVzdClcbiAgICAvLyAgICAgLmVudGVyKClcbiAgICAvLyAgICAgLmFwcGVuZChcImdcIilcbiAgICAvLyAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgICB2YXIgbG9jYXRpb24gPSBkLnZhbHVlLmxvY2F0aW9uO1xuICAgIC8vICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIitwcm9qZWN0aW9uKFsrbG9jYXRpb24ubG5nLGxvY2F0aW9uLmxhdF0pK1wiKVwiO1xuICAgIC8vICAgICB9KVxuICAgIC8vICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgIC8vICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIisgTWF0aC5yYW5kb20oKSo1K1wiLFwiK01hdGgucmFuZG9tKCkqNStcIilcIjtcbiAgICAvLyAgICAgfSlcbiAgICAvLyAgICAgLmF0dHIoXCJjbGFzc1wiLFwibWFwLWFycm93LXBhdGgtcGVha1wiKVxuICAgIC8vICAgICAuYXR0cihcImRcIiwgZnVuY3Rpb24oZCl7XG4gICAgLy9cbiAgICAvLyAgICAgICAvL2hlaWdodCA9IHNpemVcbiAgICAvLyAgICAgICAvL2xlZnQgLyByaWdodCA9IG1hcmdpblxuICAgIC8vXG4gICAgLy8gICAgICAgdmFyIG9mZnNldCA9IHJhZGl1c1NjYWxlKGQudmFsdWUubWF4VG90YWwpO1xuICAgIC8vXG4gICAgLy8gICAgICAgLy8gdmFyIHhWYWwgPSB4QXJyb3dMZW5ndGgoTWF0aC5hYnMoZC52YWx1ZS5kaWZmKSk7XG4gICAgLy9cbiAgICAvLyAgICAgICB4QXJyb3dMZW5ndGgucmFuZ2UoWzAsb2Zmc2V0KjNdKVxuICAgIC8vICAgICAgIHZhciB4VmFsID0geEFycm93TGVuZ3RoKE1hdGguYWJzKGQudmFsdWUuZGlmZikpO1xuICAgIC8vXG4gICAgLy8gICAgICAgdmFyIGR4ID0gMDtcbiAgICAvLyAgICAgICBpZihkLnZhbHVlLmRpZmYgPiAwKXtcbiAgICAvLyAgICAgICAgIGR4ID0geFZhbDtcbiAgICAvLyAgICAgICB9XG4gICAgLy8gICAgICAgZWxzZXtcbiAgICAvLyAgICAgICAgIGR4ID0gLXhWYWw7XG4gICAgLy8gICAgICAgfVxuICAgIC8vICAgICAgIHZhciBkeSA9IC0zO1xuICAgIC8vXG4gICAgLy8gICAgICAgcmV0dXJuIFwiTVwiKyAtb2Zmc2V0ICtcIixcIisgMCArIFwiTFwiKzArXCIsXCIrIC1keCArXCJMXCIrb2Zmc2V0K1wiLFwiKzAvLyBbLW9mZnNldCwwXVswLGR4XVtvZmZzZXQsMF1cbiAgICAvL1xuICAgIC8vICAgICAgIC8vIHJldHVybiBcIk0wLFwiKyAtb2Zmc2V0ICsgXCJMXCIrZHgrXCIsXCIrXCIwXCIrXCJMXCIrMCtcIixcIitvZmZzZXQvLyBbMCwtb2Zmc2V0XVt4VmFsLDBdWzAsb2Zmc2V0XVxuICAgIC8vXG4gICAgLy9cbiAgICAvLyAgICAgICB2YXIgc3RlbUxlbiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgLy8gICAgICAgdmFyIGhlYWRMZW4gPSBNYXRoLm1pbihzdGVtTGVuICogMC43LCA4KTtcbiAgICAvLyAgICAgICB2YXIgeG4gPSBkeCAvIHN0ZW1MZW4gKiBoZWFkTGVuO1xuICAgIC8vICAgICAgIHZhciB5biA9IGR5IC8gc3RlbUxlbiAqIGhlYWRMZW47XG4gICAgLy8gICAgICAgdmFyIGF4MSA9IHhuICogY29zMSAtIHluICogc2luMSArIGR4XG4gICAgLy8gICAgICAgdmFyIGF5MSA9IHhuICogc2luMSArIHluICogY29zMSArIGR5XG4gICAgLy8gICAgICAgdmFyIGF4MiA9IHhuICogY29zMiAtIHluICogc2luMiArIGR4XG4gICAgLy8gICAgICAgdmFyIGF5MiA9IHhuICogc2luMiArIHluICogY29zMiArIGR5XG4gICAgLy9cbiAgICAvLyAgICAgICB2YXIgaGVhZCA9IFtbYXgxLGF5MV0sW2R4LGR5XSxbYXgyLGF5Ml1dO1xuICAgIC8vXG4gICAgLy8gICAgICAgcmV0dXJuIFwiTTAsMFwiK1wiTFwiK2R4K1wiLFwiK2R5K1wiTFwiK2hlYWRbMF1bMF0rXCIsXCIraGVhZFswXVsxXStcIkxcIitoZWFkWzFdWzBdK1wiLFwiK2hlYWRbMV1bMV0rXCJMXCIraGVhZFsyXVswXStcIixcIitoZWFkWzJdWzFdO1xuICAgIC8vICAgICAgIC8vIGFyYy5vdXRlclJhZGl1cyhyYWRpdXNTY2FsZSgrZC52YWx1ZS5tYXhUb3RhbCkpO1xuICAgIC8vICAgICAgIC8vIHJldHVybiBhcmMoe2VuZEFuZ2xlOiArZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSAqIHRhdX0pO1xuICAgIC8vICAgICB9KVxuICAgIC8vICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICAgIHJldHVybiBsaW5lV2lkdGhTY2FsZShkLnZhbHVlLm1heFRvdGFsKVxuICAgIC8vICAgICAgIC8vIHJldHVybiAxLjQ7XG4gICAgLy8gICAgIH0pXG4gICAgLy8gICAgIC5hdHRyKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgICAgaWYoZC52YWx1ZS5kaWZmID4gMCl7XG4gICAgLy8gICAgICAgICByZXR1cm4gXCIjMzk4OWNiXCJcbiAgICAvLyAgICAgICB9XG4gICAgLy8gICAgICAgcmV0dXJuIFwicmdiKDIxNCwgODQsIDg0KVwiO1xuICAgIC8vICAgICB9KVxuICAgIC8vICAgICAub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgICBjb25zb2xlLmxvZyhkLnZhbHVlLmRpZmYpO1xuICAgIC8vICAgICAgIGNvbnNvbGUubG9nKG5ld3NJRE5hbWUuZ2V0KGQua2V5KS5Db21wYW55KTtcbiAgICAvLyAgICAgfSlcbiAgICAvLyAgICAgO1xuXG5cbiAgICAvLyB2YXIgcGllQ2hhcnRCYWNrZ3JvdW5kID0gbWFwU3ZnLmFwcGVuZChcImdcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcIm1hcC1tYXJrZXJzXCIpXG4gICAgLy8gICAuc2VsZWN0QWxsKFwiY2lyY2xlXCIpXG4gICAgLy8gICAuZGF0YShuZXdzTmVzdClcbiAgICAvLyAgIC5lbnRlcigpXG4gICAgLy8gICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJtYXAtbWFya2VyXCIpXG4gICAgLy8gICAuYXR0cihcInJcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgcmV0dXJuIHJhZGl1c1NjYWxlKCtkLnZhbHVlLm1heFRvdGFsKTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIC8vICAgICB2YXIgdDAgPSB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnZhbHVlc1swXSkpXG4gICAgLy8gICAgIC8vICAgICB2YXIgdDEgPSB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSlcbiAgICAvL1xuICAgIC8vICAgICAvLyByZXR1cm4gY29sb3JTY2FsZVBlcmNlbnQoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSlcbiAgICAvLyAgICAgcmV0dXJuIFwiIzcyYzFmZlwiXG4gICAgLy8gICB9KVxuICAgIC8vICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgdmFyIGxvY2F0aW9uID0gZC52YWx1ZS5sb2NhdGlvbjtcbiAgICAvLyAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiK3Byb2plY3Rpb24oWytsb2NhdGlvbi5sbmcsbG9jYXRpb24ubGF0XSkrXCIpXCI7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKGQpO1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhuZXdzSUROYW1lLmdldChkLmtleSkuQ29tcGFueSk7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIDtcblxuICAgIC8vIHZhciBwaWVDaGFydHMgPSBtYXBTdmcuYXBwZW5kKFwiZ1wiKVxuICAgIC8vICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgIC8vICAgICAuZGF0YShuZXdzTmVzdClcbiAgICAvLyAgICAgLmVudGVyKClcbiAgICAvLyAgICAgLmFwcGVuZChcImdcIilcbiAgICAvLyAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgICB2YXIgbG9jYXRpb24gPSBkLnZhbHVlLmxvY2F0aW9uO1xuICAgIC8vICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIitwcm9qZWN0aW9uKFsrbG9jYXRpb24ubG5nLGxvY2F0aW9uLmxhdF0pK1wiKVwiO1xuICAgIC8vICAgICB9KVxuICAgIC8vICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgIC8vICAgICAuYXR0cihcImNsYXNzXCIsXCJzbGljZS1hcmNcIilcbiAgICAvLyAgICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICAgIHJldHVybiBcImJsdWVcIlxuICAgIC8vICAgICAgIC8vICAgICB2YXIgdDAgPSB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnZhbHVlc1swXSkpXG4gICAgLy8gICAgICAgLy8gICAgIHZhciB0MSA9IHlTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpKVxuICAgIC8vICAgICAgIHJldHVybiBjb2xvclNjYWxlUGVyY2VudChnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpKVxuICAgIC8vICAgICAgIHJldHVybiBcInJlZFwiXG4gICAgLy8gICAgIH0pXG4gICAgLy8gICAgIC5hdHRyKFwiZFwiLCBmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgICBhcmMub3V0ZXJSYWRpdXMocmFkaXVzU2NhbGUoK2QudmFsdWUubWF4VG90YWwpKTtcbiAgICAvLyAgICAgICByZXR1cm4gYXJjKHtlbmRBbmdsZTogK2dldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkgKiB0YXV9KTtcbiAgICAvLyAgICAgfSk7XG5cbiAgICAvLyBmdW5jdGlvbiBidWlsZEF4aXMoKXtcbiAgICAvLyAgdmFyIGNoYXJ0QXhpcyA9IGNoYXJ0RGl2LmFwcGVuZChcImdcIilcbiAgICAvLyAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gICAgLy8gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpc1wiKVxuICAgIC8vICAgIDtcbiAgICAvL1xuICAgIC8vICBjaGFydEF4aXMuYXBwZW5kKFwiZ1wiKVxuICAgIC8vICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgLy8gICAgLmF0dHIoXCJ4MVwiLDApXG4gICAgLy8gICAgLmF0dHIoXCJ4MlwiLFwiMTAwJVwiKVxuICAgIC8vICAgIC5hdHRyKFwieTFcIixoZWlnaHQvMilcbiAgICAvLyAgICAuYXR0cihcInkyXCIsaGVpZ2h0LzIpXG4gICAgLy8gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy1saW5lXCIpXG4gICAgLy9cbiAgICAvLyB9XG4gICAgLy8gYnVpbGRBeGlzKCk7XG5cbiAgICAvLyB2YXIgbGluZWFyR3JhZGllbnREb3duID0gY2hhcnRTdmdEb3VibGVDaGFuZ2VcbiAgICAvLyAgIC5hcHBlbmQoXCJkZWZzXCIpXG4gICAgLy8gICAuYXBwZW5kKFwibGluZWFyR3JhZGllbnRcIilcbiAgICAvLyAgIC5hdHRyKFwiaWRcIixcImdyYWRpZW50XCIpXG4gICAgLy8gICAuYXR0cihcIngxXCIsMClcbiAgICAvLyAgIC5hdHRyKFwieDJcIiwwKVxuICAgIC8vICAgLmF0dHIoXCJ5MVwiLDApXG4gICAgLy8gICAuYXR0cihcInkyXCIsMSlcbiAgICAvL1xuICAgIC8vIHZhciBsaW5lYXJHcmFkaWVudFVwID0gY2hhcnRTdmdEb3VibGVDaGFuZ2VcbiAgICAvLyAgIC5hcHBlbmQoXCJkZWZzXCIpXG4gICAgLy8gICAuYXBwZW5kKFwibGluZWFyR3JhZGllbnRcIilcbiAgICAvLyAgIC5hdHRyKFwiaWRcIixcImdyYWRpZW50LXVwXCIpXG4gICAgLy8gICAuYXR0cihcIngxXCIsMClcbiAgICAvLyAgIC5hdHRyKFwieDJcIiwwKVxuICAgIC8vICAgLmF0dHIoXCJ5MVwiLDApXG4gICAgLy8gICAuYXR0cihcInkyXCIsMSlcbiAgICAvL1xuICAgIC8vIHZhciBjaGFydFN2Z0RvdWJsZUNoYW5nZUcgPSBjaGFydFN2Z0RvdWJsZUNoYW5nZVxuICAgIC8vICAgLmFwcGVuZChcImdcIilcbiAgICAvLyAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG4gICAgLy9cbiAgICAvLyBsaW5lYXJHcmFkaWVudFVwXG4gICAgLy8gICAuYXBwZW5kKFwic3RvcFwiKVxuICAgIC8vICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsXCJibHVlXCIpXG4gICAgLy8gICAuYXR0cihcInN0b3Atb3BhY2l0eVwiLDEpXG4gICAgLy9cbiAgICAvLyBsaW5lYXJHcmFkaWVudFVwXG4gICAgLy8gICAuYXBwZW5kKFwic3RvcFwiKVxuICAgIC8vICAgLmF0dHIoXCJvZmZzZXRcIixcIjEwMCVcIilcbiAgICAvLyAgIC5hdHRyKFwic3RvcC1jb2xvclwiLFwiYmx1ZVwiKVxuICAgIC8vICAgLmF0dHIoXCJzdG9wLW9wYWNpdHlcIiwwKVxuICAgIC8vXG4gICAgLy8gbGluZWFyR3JhZGllbnREb3duXG4gICAgLy8gICAuYXBwZW5kKFwic3RvcFwiKVxuICAgIC8vICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsXCJyZWRcIilcbiAgICAvLyAgIC5hdHRyKFwic3RvcC1vcGFjaXR5XCIsMClcbiAgICAvL1xuICAgIC8vIGxpbmVhckdyYWRpZW50RG93blxuICAgIC8vICAgLmFwcGVuZChcInN0b3BcIilcbiAgICAvLyAgIC5hdHRyKFwib2Zmc2V0XCIsXCIxMDAlXCIpXG4gICAgLy8gICAuYXR0cihcInN0b3AtY29sb3JcIixcInJlZFwiKVxuICAgIC8vICAgLmF0dHIoXCJzdG9wLW9wYWNpdHlcIiwxKVxuICAgIC8vXG4gICAgLy8gY2hhcnRTdmdEb3VibGVDaGFuZ2VHLmFwcGVuZChcIm1hcmtlclwiKVxuICAgIC8vICAgLmF0dHIoXCJpZFwiLFwidHJpYW5nbGUtdXBcIilcbiAgICAvLyAgIC5hdHRyKFwidmlld0JveFwiLFwiMCAwIDEwIDEwXCIpXG4gICAgLy8gICAuYXR0cihcInJlZlhcIiwwKVxuICAgIC8vICAgLmF0dHIoXCJyZWZZXCIsNSlcbiAgICAvLyAgIC5hdHRyKFwibWFya2VyVW5pdHNcIixcInN0cm9rZVdpZHRoXCIpXG4gICAgLy8gICAuYXR0cihcIm1hcmtlcldpZHRoXCIsNilcbiAgICAvLyAgIC5hdHRyKFwibWFya2VySGVpZ2h0XCIsOClcbiAgICAvLyAgIC5hdHRyKFwib3JpZW50XCIsXCJhdXRvXCIpXG4gICAgLy8gICAuYXBwZW5kKFwicGF0aFwiKVxuICAgIC8vICAgLmF0dHIoXCJmaWxsXCIsXCJibHVlXCIpXG4gICAgLy8gICAuYXR0cihcImRcIixcIk0gMCAwIEwgMTAgNSBMIDAgMTAgelwiKVxuICAgIC8vXG4gICAgLy8gY2hhcnRTdmdEb3VibGVDaGFuZ2VHLmFwcGVuZChcIm1hcmtlclwiKVxuICAgIC8vICAgLmF0dHIoXCJpZFwiLFwidHJpYW5nbGUtZG93blwiKVxuICAgIC8vICAgLmF0dHIoXCJ2aWV3Qm94XCIsXCIwIDAgMTAgMTBcIilcbiAgICAvLyAgIC5hdHRyKFwicmVmWFwiLDApXG4gICAgLy8gICAuYXR0cihcInJlZllcIiw1KVxuICAgIC8vICAgLmF0dHIoXCJtYXJrZXJVbml0c1wiLFwic3Ryb2tlV2lkdGhcIilcbiAgICAvLyAgIC5hdHRyKFwibWFya2VyV2lkdGhcIiw2KVxuICAgIC8vICAgLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiw4KVxuICAgIC8vICAgLmF0dHIoXCJvcmllbnRcIixcImF1dG9cIilcbiAgICAvLyAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgLy8gICAuYXR0cihcImZpbGxcIixcInJlZFwiKVxuICAgIC8vICAgLmF0dHIoXCJkXCIsXCJNIDAgMCBMIDEwIDUgTCAwIDEwIHpcIilcbiAgICAvL1xuICAgIC8vXG5cdFx0Ly8gZnVuY3Rpb24gZHJhd0Fycm93ICh0MCx0MSkge1xuXHRcdC8vIFx0dmFyIGQgPSB0MSA+IHQwID9cblx0XHQvLyBcdFx0KFwiTTAsXCIgKyAodDEtMikgKyBcIiBMNCxcIiArICh0MS04KSArIFwiIEwxLjUsXCIgKyAodDEtOCkgKyBcIiBMMCxcIiArIHQwICsgXCIgTC0xLjUsXCIgKyAodDEtOCkgKyBcIiBMLTQsXCIgKyAodDEtOCkgKyBcIiBaXCIpIDpcblx0XHQvLyBcdFx0KFwiTTAsXCIgKyAodDErMikgKyBcIiBMNCxcIiArICh0MSs4KSArIFwiIEwxLjUsXCIgKyAodDErOCkgKyBcIiBMMCxcIiArIHQwICsgXCIgTC0xLjUsXCIgKyAodDErOCkgKyBcIiBMLTQsXCIgKyAodDErOCkgKyBcIiBaXCIpO1xuICAgIC8vXG5cdFx0Ly8gXHRyZXR1cm4gZDtcblx0XHQvLyB9XG4gICAgLy9cbiAgICAvLyB2YXIgYXJyb3dzID0gY2hhcnRTdmdEb3VibGVDaGFuZ2VHXG4gICAgLy8gICAuc2VsZWN0QWxsKFwicGF0aFwiKVxuICAgIC8vICAgLmRhdGEobmV3c05lc3QpXG4gICAgLy8gICAuZW50ZXIoKVxuICAgIC8vICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcImFycm93LXNjYXR0ZXItbGluZVwiKVxuICAgIC8vICAgLmF0dHIoXCJkXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHZhciB0MCA9IHlTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUudmFsdWVzWzBdKSlcbiAgICAvLyAgICAgdmFyIHQxID0geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpXG4gICAgLy8gICAgIC8vIHJldHVybiBudWxsXG4gICAgLy8gICAgIC8vXG4gICAgLy8gICAgIHJldHVybiBkcmF3QXJyb3codDAsdDEpXG4gICAgLy8gICB9KVxuICAgIC8vICAgLmF0dHIoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIGlmKGQudmFsdWUuZGlmZiA+IDApe1xuICAgIC8vICAgICAgIHJldHVybiBcInVybCgjZ3JhZGllbnQtdXApXCJcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICByZXR1cm4gXCJ1cmwoI2dyYWRpZW50KVwiO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwic3Ryb2tlXCIsXCJub25lXCIpXG4gICAgLy8gICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLDEpXG4gICAgLy9cbiAgICAvLyB2YXIgYXJyb3dYU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCxhcnJvd3Muc2l6ZSgpLTFdKS5yYW5nZShbMCx3aWR0aF0pO1xuICAgIC8vXG4gICAgLy8gYXJyb3dzXG4gICAgLy8gICAuc29ydChmdW5jdGlvbihhLGIpe1xuICAgIC8vICAgICAvLyByZXR1cm4gZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixiLnZhbHVlLnZhbHVlc1swXSkgLSBnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGEudmFsdWUudmFsdWVzWzBdKVxuICAgIC8vICAgICByZXR1cm4gYi52YWx1ZS5kaWZmIC0gYS52YWx1ZS5kaWZmO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAvLyAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiK2Fycm93WFNjYWxlKGkpK1wiLDApXCJcbiAgICAvLyAgICAgLy8gcmV0dXJuIFwidHJhbnNsYXRlKFwiK3RvdGFsWFNjYWxlKGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkudG90YWxfbnVtKStcIiwwKVwiXG4gICAgLy8gICB9KVxuICAgIC8vICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGdldFBlcmNlbnRUeXBlKFwic3VwR2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSksZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgO1xuXG5cbiAgICAvLyBjaGFydFN2Z0RvdWJsZUNoYW5nZUdcbiAgICAvLyAgIC5zZWxlY3RBbGwoXCJsaW5lXCIpXG4gICAgLy8gICAuZGF0YShuZXdzTmVzdClcbiAgICAvLyAgIC5lbnRlcigpXG4gICAgLy8gICAuYXBwZW5kKFwibGluZVwiKVxuICAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwiYXJyb3ctc2NhdHRlci1saW5lXCIpXG4gICAgLy8gICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgaWYoK2QudmFsdWUueWVhck1hcC5nZXQoMjAxNCkudG90YWxfbnVtID4gMTAwKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCIycHhcIlxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKCtkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpLnRvdGFsX251bSA+IDUwKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCIxcHhcIlxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKCtkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpLnRvdGFsX251bSA+IDEwKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCIuNXB4XCJcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfSlcbiAgICAvLyAgIC5zdHlsZShcInN0cm9rZVwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICBpZihkLnZhbHVlLmRpZmYgPiAwKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCJibHVlXCJcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICByZXR1cm4gXCJyZWRcIlxuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwieDFcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGQudmFsdWUudmFsdWVzWzBdKSk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLmF0dHIoXCJ4MlwiLCBmdW5jdGlvbihkKSB7XG4gICAgLy8gICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJzdXBHZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSk7XG4gICAgLy8gICAgIC8vIHJldHVybiBkaWZmU2NhbGUoZC52YWx1ZS5kaWZmKTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuYXR0cihcInkxXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiB0b3RhbFNjYWxlKGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkudG90YWxfbnVtKVxuICAgIC8vICAgICAvLyByZXR1cm4geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwic3VwR2VuZGVyXCIsZC52YWx1ZS52YWx1ZXNbMF0pKTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuYXR0cihcInkyXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAvLyAgICAgcmV0dXJuIHRvdGFsU2NhbGUoZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KS50b3RhbF9udW0pXG4gICAgLy8gICAgIC8vIHJldHVybiB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJzdXBHZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSk7XG4gICAgLy8gICAgIC8vIHJldHVybiByYWNlRGlmZlNjYWxlKGQudmFsdWUucmFjZURpZmYpXG4gICAgLy8gICB9KVxuICAgIC8vICAgLmF0dHIoXCJtYXJrZXItZW5kXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIGlmKGQudmFsdWUuZGlmZiA+IDApe1xuICAgIC8vICAgICAgIHJldHVybiBcInVybCgjdHJpYW5nbGUtdXApXCI7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgcmV0dXJuIFwidXJsKCN0cmlhbmdsZS1kb3duKVwiO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC8vIC5zdHlsZShcInN0cm9rZVwiLFwidXJsKCNncmFkaWVudClcIilcbiAgICAvLyAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIDtcblxuICAgIC8vIGNoYXJ0U3ZnRG91YmxlQ2hhbmdlR1xuICAgIC8vICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcImFycm93LXNjYXR0ZXItbGluZS1heGlzXCIpXG4gICAgLy8gICAuYXR0cihcIngxXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiB4U2NhbGUoLjUpO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4geFNjYWxlKC41KTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuYXR0cihcInkxXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiAwO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwieTJcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIC8vICAgfSlcblxuICAgIC8vIGNoYXJ0U3ZnRG91YmxlQ2hhbmdlR1xuICAgIC8vICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcImFycm93LXNjYXR0ZXItbGluZS1heGlzXCIpXG4gICAgLy8gICAuYXR0cihcIngxXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiAwO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4gd2lkdGg7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLmF0dHIoXCJ5MVwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICByZXR1cm4geVNjYWxlKC41KTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuYXR0cihcInkyXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAvLyAgICAgcmV0dXJuIHlTY2FsZSguNSk7XG4gICAgLy8gICB9KVxuXG5cbiAgICAvLyBmdW5jdGlvbiBidWlsZEF2ZXJhZ2UoKXtcbiAgICAvLyAgIHZhciBjaGFydEF2ZXJhZ2UgPSBjaGFydERpdi5hcHBlbmQoXCJnXCIpXG4gICAgLy8gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gICAgLy8gICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlXCIpXG4gICAgLy8gICAgICA7XG4gICAgLy9cbiAgICAvLyAgY2hhcnRBdmVyYWdlLmFwcGVuZChcInRleHRcIilcbiAgICAvLyAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLXRleHQgc3dhcm0tYXZlcmFnZS10ZXh0LWxhYmVsXCIpXG4gICAgLy8gICAgLmF0dHIoXCJ4XCIseFNjYWxlKGRhdGFUb01hcC5hdmVyYWdlKSlcbiAgICAvLyAgICAuYXR0cihcInlcIixoZWlnaHQqLjMzLTE5KVxuICAgIC8vICAgIC50ZXh0KFwiT3ZlcmFsbFwiKVxuICAgIC8vXG4gICAgLy8gICBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwidGV4dFwiKVxuICAgIC8vICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLXRleHRcIilcbiAgICAvLyAgICAgLmF0dHIoXCJ4XCIseFNjYWxlKGRhdGFUb01hcC5hdmVyYWdlKSlcbiAgICAvLyAgICAgLmF0dHIoXCJ5XCIsaGVpZ2h0Ki4zMy01KVxuICAgIC8vICAgICAudGV4dChNYXRoLnJvdW5kKGRhdGFUb01hcC5hdmVyYWdlKjEwMCkrXCIlIE1hbGVcIilcbiAgICAvL1xuICAgIC8vICAgY2hhcnRBdmVyYWdlLmFwcGVuZChcImxpbmVcIilcbiAgICAvLyAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZS1saW5lXCIpXG4gICAgLy8gICAgIC5hdHRyKFwieDFcIix4U2NhbGUoZGF0YVRvTWFwLmF2ZXJhZ2UpKVxuICAgIC8vICAgICAuYXR0cihcIngyXCIseFNjYWxlKGRhdGFUb01hcC5hdmVyYWdlKSlcbiAgICAvLyAgICAgLmF0dHIoXCJ5MVwiLGhlaWdodCouMzMpXG4gICAgLy8gICAgIC5hdHRyKFwieTJcIixoZWlnaHQqLjY2KVxuICAgIC8vICAgICA7XG4gICAgLy8gfVxuICAgIC8vIGJ1aWxkQXZlcmFnZSgpO1xuXG4gICAgLy8gdmFyIHRvcFJvd0NpcmNsZSA9IGNoYXJ0R1xuICAgIC8vICAgLmFwcGVuZChcImdcIilcbiAgICAvLyAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAvLyAgIC5kYXRhKG5ld3NOZXN0KVxuICAgIC8vICAgLmVudGVyKClcbiAgICAvLyAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNpcmNsZVwiKVxuICAgIC8vICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICByZXR1cm4gM1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnQoZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4gMDtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHZhciBkaWZmID0gZ2V0UGVyY2VudChkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKS1nZXRQZXJjZW50KGQudmFsdWUudmFsdWVzWzBdKVxuICAgIC8vICAgICBpZihkaWZmID4gLjAxKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCJyZWRcIlxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKGRpZmYgPCAuMDEpe1xuICAgIC8vICAgICAgIHJldHVybiBcImdyZWVuXCI7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH0pXG4gICAgLy8gICAub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgY29uc29sZS5sb2coZCk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgO1xuICAgIC8vXG4gICAgLy8gdmFyIGJvdHRvbVJvd0NpcmNsZSA9IGNoYXJ0R1xuICAgIC8vICAgLmFwcGVuZChcImdcIilcbiAgICAvLyAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAvLyAgIC5kYXRhKG5ld3NOZXN0KVxuICAgIC8vICAgLmVudGVyKClcbiAgICAvLyAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNpcmNsZVwiKVxuICAgIC8vICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICByZXR1cm4gM1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnQoZC52YWx1ZS52YWx1ZXNbMF0pKTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAvLyAgICAgcmV0dXJuIDEwMDtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHZhciBkaWZmID0gZ2V0UGVyY2VudChkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKS1nZXRQZXJjZW50KGQudmFsdWUudmFsdWVzWzBdKVxuICAgIC8vICAgICBpZihkaWZmID4gLjAxKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCJyZWRcIlxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKGRpZmYgPCAuMDEpe1xuICAgIC8vICAgICAgIHJldHVybiBcImdyZWVuXCI7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH0pXG4gICAgLy8gICA7XG4gICAgLy9cbiAgICAvLyB2YXIgcm93TGluZXMgPSBjaGFydEdcbiAgICAvLyAgIC5hcHBlbmQoXCJnXCIpXG4gICAgLy8gICAuc2VsZWN0QWxsKFwibGluZVwiKVxuICAgIC8vICAgLmRhdGEobmV3c05lc3QpXG4gICAgLy8gICAuZW50ZXIoKVxuICAgIC8vICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInNsb3BlLWxpbmVcIilcbiAgICAvLyAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnQoZC52YWx1ZS52YWx1ZXNbMF0pKTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuYXR0cihcInkyXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAvLyAgICAgcmV0dXJuIDEwMDtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuYXR0cihcIngxXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAvLyAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50KGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpKTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuYXR0cihcInkxXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAvLyAgICAgcmV0dXJuIDA7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHZhciBkaWZmID0gZ2V0UGVyY2VudChkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKS1nZXRQZXJjZW50KGQudmFsdWUudmFsdWVzWzBdKVxuICAgIC8vICAgICBpZihkaWZmID4gLjAxKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCJyZWRcIlxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKGRpZmYgPCAuMDEpe1xuICAgIC8vICAgICAgIHJldHVybiBcImdyZWVuXCI7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH0pXG4gICAgLy8gICA7XG4gICAgLy9cbiAgICAvLyB2YXIgbWluaVdpZHRoID0gNDA7XG4gICAgLy8gdmFyIG1pbmlIZWlnaHQgPSAxMDA7XG4gICAgLy9cbiAgICAvLyB2YXIgbXVsdGlwbGVZID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy4zLDFdKS5yYW5nZShbbWluaUhlaWdodCwwXSk7XG4gICAgLy9cbiAgICAvLyB2YXIgbWluaU11bHRpcGxlV3JhcHBlciA9IG1pbmlNdWx0aXBsZS5zZWxlY3RBbGwoXCJkaXZcIilcbiAgICAvLyAgIC5kYXRhKG5ld3NOZXN0KVxuICAgIC8vICAgLmVudGVyKClcbiAgICAvLyAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcIm1pbmktbXVsdGlwbGUtZGl2XCIpXG4gICAgLy8gICA7XG4gICAgLy9cbiAgICAvLyBtaW5pTXVsdGlwbGVXcmFwcGVyLmFwcGVuZChcInBcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcIm1pbmktbXVsdGlwbGUtdGV4dFwiKVxuICAgIC8vICAgLnN0eWxlKFwibWFyZ2luLXRvcFwiLDIwKVxuICAgIC8vICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiBuZXdzSUROYW1lLmdldChkLnZhbHVlLnZhbHVlc1swXS5OZXdzSUQpLkNvbXBhbnk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgO1xuICAgIC8vXG4gICAgLy8gdmFyIG1pbmlNdWx0aXBsZVdyYXBwZXJTdmcgPSBtaW5pTXVsdGlwbGVXcmFwcGVyXG4gICAgLy8gICAuYXBwZW5kKFwic3ZnXCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzbG9wZS1taW5pLXN2Z1wiKVxuICAgIC8vICAgLmF0dHIoXCJoZWlnaHRcIixtaW5pSGVpZ2h0KVxuICAgIC8vICAgLnN0eWxlKFwiaGVpZ2h0XCIsbWluaUhlaWdodCtcInB4XCIpXG4gICAgLy8gICA7XG4gICAgLy9cbiAgICAvLyBtaW5pTXVsdGlwbGVXcmFwcGVyU3ZnXG4gICAgLy8gICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgLy8gICAuYXR0cihcImN4XCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiAwO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwiY3lcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgcmV0dXJuIG11bHRpcGxlWShnZXRQZXJjZW50KGQudmFsdWUudmFsdWVzWzBdKSk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLmF0dHIoXCJyXCIsMilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInNsb3BlLXNtYWxsLWRvdFwiKVxuICAgIC8vICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKG5ld3NJRE5hbWUuZ2V0KGQua2V5KS5Db21wYW55KTtcbiAgICAvLyAgICAgY29uc29sZS5sb2coZ2V0UGVyY2VudChkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSk7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGdldFBlcmNlbnQoZC52YWx1ZS52YWx1ZXNbMF0pKTtcbiAgICAvL1xuICAgIC8vICAgICB2YXIgZGlmZiA9IGdldFBlcmNlbnQoZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSktZ2V0UGVyY2VudChkLnZhbHVlLnZhbHVlc1swXSlcbiAgICAvLyAgICAgaWYoZGlmZiA+IC4wMSl7XG4gICAgLy8gICAgICAgcmV0dXJuIFwicmVkXCJcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBpZihkaWZmIDwgLjAxKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCJncmVlblwiO1xuICAgIC8vICAgICB9XG4gICAgLy8gICB9KVxuICAgIC8vICAgO1xuICAgIC8vXG4gICAgLy8gbWluaU11bHRpcGxlV3JhcHBlclN2Z1xuICAgIC8vICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAgIC8vICAgLmF0dHIoXCJjeFwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICByZXR1cm4gbWluaVdpZHRoO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwiY3lcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgcmV0dXJuIG11bHRpcGxlWShnZXRQZXJjZW50KGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpKTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAuYXR0cihcInJcIiwyKVxuICAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwic2xvcGUtc21hbGwtZG90XCIpXG4gICAgLy8gICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHZhciBkaWZmID0gZ2V0UGVyY2VudChkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKS1nZXRQZXJjZW50KGQudmFsdWUudmFsdWVzWzBdKVxuICAgIC8vICAgICBpZihkaWZmID4gLjAxKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCJyZWRcIlxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKGRpZmYgPCAuMDEpe1xuICAgIC8vICAgICAgIHJldHVybiBcImdyZWVuXCI7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH0pXG4gICAgLy8gICA7XG4gICAgLy9cbiAgICAvLyBtaW5pTXVsdGlwbGVXcmFwcGVyU3ZnXG4gICAgLy8gICAuc2VsZWN0QWxsKFwibGluZVwiKVxuICAgIC8vICAgLmRhdGEoWzAsMSwyLDQsNV0pXG4gICAgLy8gICAuZW50ZXIoKVxuICAgIC8vICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInNsb3BlLWxpbmUtYXhpc1wiKVxuICAgIC8vICAgLmF0dHIoXCJ5MVwiLCBmdW5jdGlvbihkLGkpIHtcbiAgICAvLyAgICAgcmV0dXJuIGkqMjArXCIlXCI7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLmF0dHIoXCJ4MVwiLCBmdW5jdGlvbihkKSB7XG4gICAgLy8gICAgIHJldHVybiAwO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwieTJcIiwgZnVuY3Rpb24oZCxpKSB7XG4gICAgLy8gICAgIHJldHVybiBpKjIwK1wiJVwiO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4gbWluaVdpZHRoO1xuICAgIC8vICAgfSlcbiAgICAvL1xuICAgIC8vIG1pbmlNdWx0aXBsZVdyYXBwZXJTdmdcbiAgICAvLyAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzbG9wZS1saW5lXCIpXG4gICAgLy8gICAuYXR0cihcInkxXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAvLyAgICAgcmV0dXJuIG11bHRpcGxlWShnZXRQZXJjZW50KGQudmFsdWUudmFsdWVzWzBdKSk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLmF0dHIoXCJ4MVwiLCBmdW5jdGlvbihkKSB7XG4gICAgLy8gICAgIHJldHVybiAwO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwieTJcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4gbXVsdGlwbGVZKGdldFBlcmNlbnQoZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCkge1xuICAgIC8vICAgICByZXR1cm4gbWluaVdpZHRoO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5zdHlsZShcInN0cm9rZVwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICB2YXIgZGlmZiA9IGdldFBlcmNlbnQoZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSktZ2V0UGVyY2VudChkLnZhbHVlLnZhbHVlc1swXSlcbiAgICAvLyAgICAgaWYoZGlmZiA+IC4wMSl7XG4gICAgLy8gICAgICAgcmV0dXJuIFwicmVkXCJcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBpZihkaWZmIDwgLjAxKXtcbiAgICAvLyAgICAgICByZXR1cm4gXCJncmVlblwiO1xuICAgIC8vICAgICB9XG4gICAgLy8gICB9KVxuICAgIC8vICAgO1xuICAgIC8vXG5cbiAgICAvLyBjZWxsXG4gICAgLy8gICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaXJjbGVcIilcbiAgICAvLyAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgcmV0dXJuIGQucmFkaXVzXG4gICAgLy8gICB9KVxuICAgIC8vICAgLy8gLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLng7IH0pXG4gICAgLy8gICAvLyAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSlcbiAgICAvLyAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhkLm1hbGVfbnVtL2QudG90YWxfbnVtKTtcbiAgICAvLyAgICAgY29uc29sZS5sb2cobmV3c0lETmFtZS5nZXQoZC5OZXdzSUQpLkNvbXBhbnkpO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIDtcblxuICAgIC8vIGRhdGFUb01hcC52YWx1ZXMgPSBkMy5uZXN0KClcbiAgICAvLyAgIC5rZXkoZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiBNYXRoLnJvdW5kKGdldFBlcmNlbnQoZCkqNTApLzUwO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5zb3J0S2V5cyhmdW5jdGlvbihhLGIpe1xuICAgIC8vICAgICByZXR1cm4gYS1iO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5lbnRyaWVzKGRhdGFUb01hcC52YWx1ZXMpXG4gICAgLy8gICA7XG4gICAgLy9cbiAgICAvLyBjaGFydERpdi5hcHBlbmQoXCJkaXZcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcImhpc3RvZ3JhbS1hdmctZGl2XCIpXG4gICAgLy8gICAuc3R5bGUoXCJsZWZ0XCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiAoZGF0YVRvTWFwLmF2ZXJhZ2Uqd2lkdGgrMSkrXCJweFwiXG4gICAgLy8gICB9KVxuICAgIC8vICAgLmFwcGVuZChcInBcIilcbiAgICAvLyAgIC50ZXh0KE1hdGgucm91bmQoZGF0YVRvTWFwLmF2ZXJhZ2UqMTAwKStcIiVcIilcbiAgICAvLyAgIDtcbiAgICAvL1xuICAgIC8vIHZhciB5ZWFyc0NvbHVtbiA9IGNoYXJ0RGl2XG4gICAgLy8gICAuc2VsZWN0QWxsKFwiLmhpc3RvZ3JhbS15ZWFyLWNvbnRhaW5lclwiKVxuICAgIC8vICAgLmRhdGEoZGF0YVRvTWFwLnZhbHVlcylcbiAgICAvLyAgIC5lbnRlcigpXG4gICAgLy8gICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0teWVhci1jb250YWluZXJcIilcbiAgICAvLyAgIC5zdHlsZShcImxlZnRcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgcmV0dXJuIChkLmtleSp3aWR0aCsxKStcInB4XCJcbiAgICAvLyAgIH0pXG4gICAgLy8gICA7XG4gICAgLy9cbiAgICAvLyB5ZWFyc0NvbHVtblxuICAgIC8vICAgLnNlbGVjdEFsbChcImRpdlwiKVxuICAgIC8vICAgLmRhdGEoZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHJldHVybiBkLnZhbHVlc1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5lbnRlcigpXG4gICAgLy8gICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHZhciBzdGF0ZSA9IG51bGw7XG4gICAgLy8gICAgIHZhciByZWdpb24gPSBudWxsO1xuICAgIC8vICAgICBpZihuZXdzSWRNYXAuaGFzKGQuTmV3c0lEKSl7XG4gICAgLy8gICAgICAgc3RhdGUgPSBuZXdzSWRNYXAuZ2V0KGQuTmV3c0lEKS5TdGF0ZTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBpZihyZWdpb25NYXAuaGFzKHN0YXRlKSl7XG4gICAgLy8gICAgICAgcmVnaW9uID0gcmVnaW9uTWFwLmdldChzdGF0ZSlbM107XG4gICAgLy8gICAgIH1cbiAgICAvL1xuICAgIC8vICAgICBpZihyZWdpb24gPT1cIldlc3RcIil7XG4gICAgLy8gICAgICAgcmVnaW9uID0gXCJncmVlblwiXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgaWYocmVnaW9uID09XCJTb3V0aFwiKXtcbiAgICAvLyAgICAgICByZWdpb24gPSBcImJsdWVcIlxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKHJlZ2lvbiA9PVwiTWlkd2VzdFwiKXtcbiAgICAvLyAgICAgICByZWdpb24gPSBcInB1cnBsZVwiXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgaWYocmVnaW9uID09XCJOb3J0aGVhc3RcIil7XG4gICAgLy8gICAgICAgcmVnaW9uID0gXCJ5ZWxsb3dcIlxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHJldHVybiBcImhpc3RvZ3JhbS15ZWFyLWl0ZW0gXCIrcmVnaW9uXG4gICAgLy8gICB9KVxuICAgIC8vICAgLnN0eWxlKFwiYmFja2dyb3VuZC1jb2xvclwiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICAvLyByZXR1cm4gYmFja2dyb3VuZEZ1bmN0aW9uKGQpXG4gICAgLy8gICAgIHJldHVybiBudWxsXG4gICAgLy8gICB9KVxuICAgIC8vICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKG5ld3NJRE5hbWUuZ2V0KGQuTmV3c0lEKS5Db21wYW55KTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICA7XG4gICAgLy9cbiAgICAvLyB5ZWFyc0NvbHVtbi5hcHBlbmQoXCJwXCIpXG4gICAgLy8gICAudGV4dChmdW5jdGlvbihkLGkpe1xuICAgIC8vICAgICBpZihpJTUgPT0gMCB8fCBpPT0wIHx8IGk9PXllYXJzQ29sdW1uLnNpemUoKS0xKXtcbiAgICAvLyAgICAgICByZXR1cm4gTWF0aC5yb3VuZChkLmtleSoxMDApK1wiJVwiO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHJldHVybiBudWxsO1xuICAgIC8vXG4gICAgLy8gICB9KVxuICAgIC8vICAgO1xuICB9XG4gIC8vIGZ1bmN0aW9uIGJhY2tncm91bmRGdW5jdGlvbihkKXtcbiAgLy8gICB2YXIgc3RhdGUgPSBudWxsO1xuICAvLyAgIHZhciByZWdpb24gPSBudWxsO1xuICAvLyAgIGlmKG5ld3NJZE1hcC5oYXMoZC5OZXdzSUQpKXtcbiAgLy8gICAgIHN0YXRlID0gbmV3c0lkTWFwLmdldChkLk5ld3NJRCkuU3RhdGU7XG4gIC8vICAgfVxuICAvLyAgIGlmKHJlZ2lvbk1hcC5oYXMoc3RhdGUpKXtcbiAgLy8gICAgIHJlZ2lvbiA9IHJlZ2lvbk1hcC5nZXQoc3RhdGUpWzNdO1xuICAvLyAgIH1cbiAgLy8gICBpZihyZWdpb24gPT1cIldlc3RcIil7XG4gIC8vICAgICByZXR1cm4gXCJncmVlblwiXG4gIC8vICAgfVxuICAvLyAgIGlmKHJlZ2lvbiA9PVwiU291dGhcIil7XG4gIC8vICAgICByZXR1cm4gXCJibHVlXCJcbiAgLy8gICB9XG4gIC8vICAgaWYocmVnaW9uID09XCJNaWR3ZXN0XCIpe1xuICAvLyAgICAgcmV0dXJuIFwicHVycGxlXCJcbiAgLy8gICB9XG4gIC8vICAgaWYocmVnaW9uID09XCJOb3J0aGVhc3RcIil7XG4gIC8vICAgICByZXR1cm4gXCJ5ZWxsb3dcIlxuICAvLyAgIH1cbiAgLy8gfVxuICBidWlsZENoYXJ0KCk7XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBpbml0IH1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvbWFwcy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7QUFDQTtBQXNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQVNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBU0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUlBO0FBR0E7QUFIQTtBQUNBO0FBT0E7QUFJQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 100;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +(data.total_num - data.male_num) / data.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +data.white_sup_num / data.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +data.white_num / data.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, data) {\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 500 - margin.left - margin.right;\n  var height = 500 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".scatter\");\n\n  container.append(\"p\").attr(\"class\", \"chart-title\").text(\"Gender Break-down of Staff vs. Leaders\");\n\n  function buildToggles() {\n    var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n    var sizeCats = [0, 20, 50, 100, 500];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == sizeCats.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      countMin = d;\n      buildChart();\n    });\n\n    var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == raceGenderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"race\") {\n        return \"Race\";\n      }\n      return \"Gender\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      cut = d;\n      buildChart();\n    });\n\n    var leaderToggleData = [\"all\", \"leader\"];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(leaderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == leaderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"all\") {\n        return \"All Staff\";\n      }\n      return \"Leadership\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      group = d;\n      buildChart();\n    });\n  }\n  buildToggles();\n\n  function buildChart() {\n\n    d3.selectAll(\".scatter-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"scatter-chart-wrapper\").style(\"width\", width + margin.left + margin.right + \"px\");\n\n    var chartSvgDoubleChange = chartDiv.append(\"svg\").attr(\"class\", \"scatter-chart-wrapper-svg-double-change\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var maxPercentArray = [];\n    var diffArray = [];\n    var raceDiffArray = [];\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      var maxPercent = d3.max(leaves, function (d) {\n        return getPercent(d);\n      });\n      maxPercentArray.push(maxPercent);\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014)) {\n        return d;\n      }\n      return null;\n    });\n\n    for (var item in newsNest) {\n      var diff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"supGender\";\n      var raceDiff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"gender\";\n      diffArray.push(diff);\n      raceDiffArray.push(raceDiff);\n      newsNest[item].value.companyName = newsIDName.get(newsNest[item].key).Company;\n      newsNest[item].value.diff = diff;\n      newsNest[item].value.raceDiff = raceDiff;\n    }\n    ;\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n    var percentExtent = d3.extent(maxPercentArray, function (d) {\n      return d;\n    });\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var raceDiffExtent = d3.extent(raceDiffArray, function (d) {\n      return d;\n    });\n    var diffScale = d3.scaleLinear().domain([diffExtent[0], diffExtent[1]]).range([0, width]);\n    var raceDiffScale = d3.scaleLinear().domain([raceDiffExtent[0], raceDiffExtent[1]]).range([height, 0]);\n\n    var colorScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"white\", \"green\"]);\n    var strokeScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"grey\", \"green\"]);\n\n    var xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n    var yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n\n    function buildAxis() {\n      var chartAxis = chartSvgDoubleChange.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-axis\");\n\n      var chartAxisLines = chartAxis.append(\"g\");\n\n      chartAxisLines.append(\"line\").attr(\"x1\", width / 2).attr(\"x2\", width / 2).attr(\"y1\", 0).attr(\"y2\", height).attr(\"class\", \"swarm-axis-line\");\n\n      chartAxisLines.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n\n      var chartAxisText = chartAxis.append(\"g\");\n\n      chartAxisText.append(\"g\").selectAll(\"text\").data([\"100% Female Leaders\", \"100% Male Leaders\"]).enter().append(\"text\").attr(\"x\", function (d, i) {\n        return width / 2;\n      }).attr(\"y\", function (d, i) {\n        if (i == 0) {\n          return 0;\n        }\n        return height;\n      }).attr(\"class\", \"swarm-axis-tick-text\").text(function (d) {\n        return d;\n      }).style(\"text-anchor\", function (d, i) {\n        return \"middle\";\n      }).style(\"dominant-baseline\", \"text-after-edge\");\n\n      chartAxisText.append(\"g\").selectAll(\"text\").data([\"100% Male Staff\", \"100% Female Staff\"]).enter().append(\"text\").attr(\"x\", function (d, i) {\n        if (i == 0) {\n          return 0;\n        }\n        return width;\n      }).attr(\"y\", height / 2).attr(\"class\", \"swarm-axis-tick-text\").text(function (d) {\n        return d;\n      }).style(\"text-anchor\", function (d, i) {\n        if (i == 0) {\n          return \"end\";\n        }\n        return \"start\";\n      });\n    }\n    buildAxis();\n\n    var chartSvgDoubleChangeG = chartSvgDoubleChange.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    chartSvgDoubleChangeG.selectAll(\"circle\").data(newsNest).enter().append(\"circle\").attr(\"class\", \"scatter-circle-double-axis\").attr(\"r\", function (d) {\n      return radiusScale(d.value.yearMap.get(2014).total_num);\n    }).attr(\"cx\", function (d) {\n      return xScale(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n      return diffScale(d.value.diff);\n    }).attr(\"cy\", function (d) {\n      return yScale(getPercentType(\"supGender\", d.value.yearMap.get(2014)));\n    }).on(\"mouseover\", function (d) {});\n\n    chartDiv.append(\"div\").attr(\"class\", \"swarm-chart-logos\").style(\"transform\", \"translate(\" + margin.left + \"px\" + \",\" + margin.top + \"px\" + \")\").selectAll(\"div\").data(newsNest).enter().append(\"div\").style(\"transform\", function (d) {\n      return \"translate(\" + xScale(getPercentType(\"gender\", d.value.yearMap.get(2014))) + \"px\" + \",\" + yScale(getPercentType(\"supGender\", d.value.yearMap.get(2014))) + \"px\" + \")\";\n    }).attr(\"class\", \"swarm-chart-logo-container\").append(\"div\").style(\"width\", function (d) {\n      return \"1px\";\n    }).style(\"height\", function (d) {\n      return \"1px\";\n    }).attr(\"class\", \"swarm-chart-logo\").style(\"width\", function (d) {\n      return radiusScale(d.value.yearMap.get(2014).total_num) * 2 + \"px\";\n    }).style(\"height\", function (d) {\n      return radiusScale(d.value.yearMap.get(2014).total_num) * 2 + \"px\";\n    }).style(\"background-image\", function (d) {\n      if (d.value.companyName == \"the new york times\") {\n        return \"url(assets/ny-times-logo.svg)\";\n      }\n    });\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 100;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +d.male_num / d.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +d.white_sup_num / d.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_sup_num / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +d.white_num / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +data.male_num / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return +data.white_num / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 1000 - margin.left - margin.right;\n  var height = 500 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".slope-chart\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data([0, 20, 50, 100, 500]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    countMin = d;\n    buildChart();\n  });\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data([\"race\", \"gender\", \"supWhite\", \"supGender\"]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    cut = d;\n    buildChart();\n  });\n\n  var xScale = d3.scaleLinear().domain([.54, .75]).range([0, width]);\n\n  function buildChart() {\n\n    d3.selectAll(\".slope-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"svg\").attr(\"class\", \"slope-chart-wrapper\").attr(\"width\", width).attr(\"height\", height);\n\n    var miniMultiple = container.append(\"div\").attr(\"class\", \"slope-mini-multiple-div\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014)) {\n        return d;\n      }\n      return null;\n    });\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n\n    // function buildAxis(){\n    //  var chartAxis = chartDiv.append(\"g\")\n    //    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //    .attr(\"class\",\"swarm-axis\")\n    //    ;\n    //\n    //  chartAxis.append(\"g\")\n    //    .append(\"line\")\n    //    .attr(\"x1\",0)\n    //    .attr(\"x2\",\"100%\")\n    //    .attr(\"y1\",height/2)\n    //    .attr(\"y2\",height/2)\n    //    .attr(\"class\",\"swarm-axis-line\")\n    //\n    // }\n    // buildAxis();\n\n    var chartG = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // function buildAverage(){\n    //   var chartAverage = chartDiv.append(\"g\")\n    //      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //      .attr(\"class\",\"swarm-average\")\n    //      ;\n    //\n    //  chartAverage.append(\"text\")\n    //    .attr(\"class\",\"swarm-average-text swarm-average-text-label\")\n    //    .attr(\"x\",xScale(dataToMap.average))\n    //    .attr(\"y\",height*.33-19)\n    //    .text(\"Overall\")\n    //\n    //   chartAverage.append(\"text\")\n    //     .attr(\"class\",\"swarm-average-text\")\n    //     .attr(\"x\",xScale(dataToMap.average))\n    //     .attr(\"y\",height*.33-5)\n    //     .text(Math.round(dataToMap.average*100)+\"% Male\")\n    //\n    //   chartAverage.append(\"line\")\n    //     .attr(\"class\",\"swarm-average-line\")\n    //     .attr(\"x1\",xScale(dataToMap.average))\n    //     .attr(\"x2\",xScale(dataToMap.average))\n    //     .attr(\"y1\",height*.33)\n    //     .attr(\"y2\",height*.66)\n    //     ;\n    // }\n    // buildAverage();\n\n    var topRowCircle = chartG.append(\"g\").selectAll(\"circle\").data(newsNest).enter().append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n      return 3;\n    }).attr(\"cx\", function (d) {\n      return xScale(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"cy\", function (d) {\n      return 0;\n    }).style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    }).on(\"mouseover\", function (d) {\n      console.log(d);\n    });\n\n    var bottomRowCircle = chartG.append(\"g\").selectAll(\"circle\").data(newsNest).enter().append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n      return 3;\n    }).attr(\"cx\", function (d) {\n      return xScale(getPercent(d.value.values[0]));\n    }).attr(\"cy\", function (d) {\n      return 100;\n    }).style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    var rowLines = chartG.append(\"g\").selectAll(\"line\").data(newsNest).enter().append(\"line\").attr(\"class\", \"slope-line\").attr(\"x2\", function (d) {\n      return xScale(getPercent(d.value.values[0]));\n    }).attr(\"y2\", function (d) {\n      return 100;\n    }).attr(\"x1\", function (d) {\n      return xScale(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"y1\", function (d) {\n      return 0;\n    }).style(\"stroke\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    var miniWidth = 40;\n    var miniHeight = 100;\n\n    var multipleY = d3.scaleLinear().domain([.3, 1]).range([miniHeight, 0]);\n\n    var miniMultipleWrapper = miniMultiple.selectAll(\"div\").data(newsNest).enter().append(\"div\").attr(\"class\", \"mini-multiple-div\");\n\n    miniMultipleWrapper.append(\"p\").attr(\"class\", \"mini-multiple-text\").style(\"margin-top\", 20).text(function (d) {\n      return newsIDName.get(d.value.values[0].NewsID).Company;\n    });\n\n    var miniMultipleWrapperSvg = miniMultipleWrapper.append(\"svg\").attr(\"class\", \"slope-mini-svg\").attr(\"height\", miniHeight).style(\"height\", miniHeight + \"px\");\n\n    miniMultipleWrapperSvg.append(\"circle\").attr(\"cx\", function (d) {\n      return 0;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercent(d.value.values[0]));\n    }).attr(\"r\", 2).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    miniMultipleWrapperSvg.append(\"circle\").attr(\"cx\", function (d) {\n      return miniWidth;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"r\", 2).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    miniMultipleWrapperSvg.selectAll(\"line\").data([0, 1, 2, 4, 5]).enter().append(\"line\").attr(\"class\", \"slope-line-axis\").attr(\"y1\", function (d, i) {\n      return i * 20 + \"%\";\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d, i) {\n      return i * 20 + \"%\";\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    });\n\n    miniMultipleWrapperSvg.append(\"line\").attr(\"class\", \"slope-line\").attr(\"y1\", function (d) {\n      return multipleY(getPercent(d.value.values[0]));\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d) {\n      return multipleY(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    }).style(\"stroke\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    // cell\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return d.radius\n    //   })\n    //   // .attr(\"cx\", function(d) { return d.x; })\n    //   // .attr(\"cy\", function(d) { return d.y; })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d.male_num/d.total_num);\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n\n    // dataToMap.values = d3.nest()\n    //   .key(function(d){\n    //     return Math.round(getPercent(d)*50)/50;\n    //   })\n    //   .sortKeys(function(a,b){\n    //     return a-b;\n    //   })\n    //   .entries(dataToMap.values)\n    //   ;\n    //\n    // chartDiv.append(\"div\")\n    //   .attr(\"class\",\"histogram-avg-div\")\n    //   .style(\"left\",function(d){\n    //     return (dataToMap.average*width+1)+\"px\"\n    //   })\n    //   .append(\"p\")\n    //   .text(Math.round(dataToMap.average*100)+\"%\")\n    //   ;\n    //\n    // var yearsColumn = chartDiv\n    //   .selectAll(\".histogram-year-container\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-year-container\")\n    //   .style(\"left\",function(d){\n    //     return (d.key*width+1)+\"px\"\n    //   })\n    //   ;\n    //\n    // yearsColumn\n    //   .selectAll(\"div\")\n    //   .data(function(d){\n    //     return d.values\n    //   })\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",function(d){\n    //     var state = null;\n    //     var region = null;\n    //     if(newsIdMap.has(d.NewsID)){\n    //       state = newsIdMap.get(d.NewsID).State;\n    //     }\n    //     if(regionMap.has(state)){\n    //       region = regionMap.get(state)[3];\n    //     }\n    //\n    //     if(region ==\"West\"){\n    //       region = \"green\"\n    //     }\n    //     if(region ==\"South\"){\n    //       region = \"blue\"\n    //     }\n    //     if(region ==\"Midwest\"){\n    //       region = \"purple\"\n    //     }\n    //     if(region ==\"Northeast\"){\n    //       region = \"yellow\"\n    //     }\n    //     return \"histogram-year-item \"+region\n    //   })\n    //   .style(\"background-color\",function(d){\n    //     // return backgroundFunction(d)\n    //     return null\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n    //\n    // yearsColumn.append(\"p\")\n    //   .text(function(d,i){\n    //     if(i%5 == 0 || i==0 || i==yearsColumn.size()-1){\n    //       return Math.round(d.key*100)+\"%\";\n    //     }\n    //     return null;\n    //\n    //   })\n    //   ;\n  }\n  function backgroundFunction(d) {\n    var state = null;\n    var region = null;\n    if (newsIdMap.has(d.NewsID)) {\n      state = newsIdMap.get(d.NewsID).State;\n    }\n    if (regionMap.has(state)) {\n      region = regionMap.get(state)[3];\n    }\n    if (region == \"West\") {\n      return \"green\";\n    }\n    if (region == \"South\") {\n      return \"blue\";\n    }\n    if (region == \"Midwest\") {\n      return \"purple\";\n    }\n    if (region == \"Northeast\") {\n      return \"yellow\";\n    }\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo, top_3_data) {\n\n  var yearSelected = 2015;\n\n  var top3Map = d3.map(top_3_data, function (d) {\n    return d.Organization.toLowerCase();\n  });\n\n  var cut = \"race\";\n  var group = \"all\";\n  var countMin = 50;\n\n  function getAverage(data) {\n\n    if (cut == \"gender\" && group == \"all\") {\n      return d3.mean(data, function (d) {\n        return (d.total_num - d.male_num) / d.total_num;\n      });\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.white_sup_num) / d.total_sup_num;\n      });\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.male_sup_num) / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return (+d.total_num - +d.white_num) / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\" && group == \"all\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num;\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 20, left: 40 };\n  var width = 1000 - margin.left - margin.right;\n  var height = 250 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".swarm-leader\");\n\n  container.append(\"p\").attr(\"class\", \"chart-title\").text(\"Newsrooms Broken-down by Gender\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  var sizeCats = [0, 20, 50, 100, 500];\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n    if (i == 0) {\n      return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    }\n    if (i == sizeCats.length - 1) {\n      return \"back-curve histogram-chart-toggle-item\";\n    }\n    return \"histogram-chart-toggle-item\";\n  }).text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    var dataSelected = d;\n    d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n      if (d == dataSelected) {\n        return true;\n      }\n      return false;\n    });\n    countMin = d;\n    buildChart();\n  });\n\n  var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n    if (i == 0) {\n      return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    }\n    if (i == raceGenderToggleData.length - 1) {\n      return \"back-curve histogram-chart-toggle-item\";\n    }\n    return \"histogram-chart-toggle-item\";\n  }).text(function (d) {\n    if (d == \"race\") {\n      return \"Race\";\n    }\n    return \"Gender\";\n  }).on(\"click\", function (d) {\n    var dataSelected = d;\n    d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n      if (d == dataSelected) {\n        return true;\n      }\n      return false;\n    });\n    cut = d;\n    buildChart();\n  });\n\n  var leaderToggleData = [\"all\", \"leader\"];\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(leaderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n    if (i == 0) {\n      return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    }\n    if (i == leaderToggleData.length - 1) {\n      return \"back-curve histogram-chart-toggle-item\";\n    }\n    return \"histogram-chart-toggle-item\";\n  }).text(function (d) {\n    if (d == \"all\") {\n      return \"All Staff\";\n    }\n    return \"Leadership\";\n  }).on(\"click\", function (d) {\n    var dataSelected = d;\n    d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n      if (d == dataSelected) {\n        return true;\n      }\n      return false;\n    });\n    group = d;\n    buildChart();\n  });\n\n  var xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]);\n  if (cut == \"race\") {\n    xScale.domain([0, 1]);\n  }\n\n  function buildChart() {\n\n    d3.selectAll(\".swarm-leader-chart-container\").remove();\n\n    var chartDivContainer = container.append(\"div\").attr(\"class\", \"swarm-leader-chart-container\").style(\"width\", width + margin.left + margin.right + \"px\");\n\n    var chartToolTip = chartDivContainer.append(\"div\").attr(\"class\", \"swarm-chart-tool-tip\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").text(function (d) {\n      return d;\n    });\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var yearNest = d3.nest().key(function (d) {\n      return +d.Year;\n    }).rollup(function (leaves) {\n      var average = getAverage(leaves);\n      return { average: average, values: leaves };\n    }).entries(filteredMapData);\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    var diffArray = [];\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(yearSelected)) {\n        return d;\n      }\n      return null;\n    });\n\n    for (var item in newsNest) {\n      newsNest[item].companyName = newsIDName.get(newsNest[item].key).Company;\n      newsNest[item].top3Data = top3Map.get(newsNest[item].companyName);\n      var diff = getPercent(newsNest[item].value.yearMap.get(yearSelected)) - getPercent(newsNest[item].value.values[0]);\n      diffArray.push(diff);\n      newsNest[item].value.diff = diff;\n    }\n    ;\n\n    var newsMap = d3.map(newsNest, function (d) {\n      return d.key;\n    });\n\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var colorScale = d3.scaleLinear().domain(diffExtent).range([\"green\", \"red\"]);\n    var genderColorScale = d3.scaleLinear().domain([.2, .5, .8]).range([\"#2161fa\", \"#dddddd\", \"#ff3333\"]);\n    if (cut == \"race\") {\n      genderColorScale.domain([0, .5, 1]);\n    }\n\n    var dataToMap = yearNest.filter(function (d) {\n      return d.key == yearSelected;\n    })[0].value.values;\n\n    var totalExtent = d3.extent(dataToMap, function (d) {\n      return +d.total_num;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n\n    dataToMap.forEach(function (d, i) {\n      d.radius = radiusScale(d.total_num);\n      d.companyName = newsIDName.get(+d.NewsID).Company;\n      d.top3Data = top3Map.get(d.companyName);\n    });\n\n    var dataNest = d3.nest().key(function (d) {\n      if (+d.top3Data[\"TOP3-nonwhite\"] > 0) {\n        return 1;\n      }\n      return 0;\n    }).entries(dataToMap);\n\n    function buildAnSVG(dataSet) {\n\n      var forceCollide = d3.forceCollide().radius(function (d) {\n        return d.radius + 1;\n      }).iterations(1);\n\n      var simulation = d3.forceSimulation(dataSet).force(\"x\", d3.forceX(function (d) {\n        return xScale(getPercent(d));\n      }).strength(1)).force(\"y\", d3.forceY(height / 2)).force(\"collide\", forceCollide).stop();\n\n      var chartDiv = chartDivContainer.append(\"svg\").attr(\"class\", \"swarm-chart-wrapper\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n\n      function buildAxis() {\n\n        var chartAxis = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-axis\");\n\n        var tickData = [.2, .3, .5, .7, .8];\n        if (cut == \"race\") {\n          tickData = [0, .3, .5, .7, 1];\n        }\n\n        var ticks = chartAxis.append(\"g\").attr(\"class\", \"swarm-axis-tick-container\").selectAll(\"g\").data(tickData).enter().append(\"g\").attr(\"class\", \"swarm-axis-tick-g\");\n\n        ticks.append(\"line\").style(\"stroke\", function (d) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", function (d, i) {\n          if (d == .5) {\n            return height / 2;\n          }\n          return 0;\n        }).attr(\"y2\", function (d) {\n          if (d == .5) {\n            return 0;\n          }\n          return height * .05;\n        }).attr(\"class\", \"swarm-axis-tick\");\n\n        ticks.append(\"text\").attr(\"x\", function (d) {\n          return xScale(d);\n        }).attr(\"y\", -6).attr(\"class\", \"swarm-axis-tick-text\").style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i == tickData.length - 1) {\n            return \"end\";\n          }\n          return null;\n        }).style(\"fill\", function (d, i) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              return Math.floor((1 - d) * 100) + \"% White Staff\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male Staff\";\n          }\n          if (i == tickData.length - 1) {\n            if (cut == \"race\") {\n              return Math.floor(d * 100) + \"% Non-White Staff\";\n            }\n            return Math.floor(d * 100) + \"% Female Staff\";\n          }\n          if (d == .5) {\n            return \"50/50  Split\";\n          }\n          if (d < .5) {\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n\n        chartAxis.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n      }\n      buildAxis();\n\n      var chartG = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      function buildAverage() {\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(dataToMap.average)).attr(\"y\", height * .2 - 22).text(\"Overall\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(dataToMap.average)).attr(\"y\", height * .2 - 7).text(function () {\n          if (cut == \"race\") {\n            return Math.round((1 - dataToMap.average) * 100) + \"% White\";\n          }\n          return Math.round((1 - dataToMap.average) * 100) + \"% Male\";\n        });\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-average-line\").attr(\"x1\", xScale(dataToMap.average)).attr(\"x2\", xScale(dataToMap.average)).attr(\"y1\", height * .2).attr(\"y2\", height * .8);\n      }\n      // buildAverage();\n\n      for (var i = 0; i < 250; ++i) {\n        simulation.tick();\n      }var cell = chartG.selectAll(\"g\").data(dataSet).enter().append(\"g\");\n\n      cell.append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n        return d.radius;\n      }).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).on(\"mouseover\", function (d) {\n        var data = d;\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", data.y + data.radius + \"px\").style(\"left\", data.x + data.radius + 50 + \"px\").text(newsIDName.get(d.NewsID).Company + \" - \" + Math.floor(getPercent(d) * 100) + \"%\");\n      }).on(\"mouseout\", function (d) {\n        chartToolTip.style(\"visibility\", null).text(\"\");\n      }).style(\"fill\", function (d) {\n        var value = getPercent(d);\n        return genderColorScale(value);\n      });\n    }\n\n    buildAnSVG(dataNest[0].values);\n    buildAnSVG(dataNest[1].values);\n\n    // var searchDiv = chartDivContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-div\")\n    //\n    // searchDiv\n    //   .append(\"input\")\n    //   .attr(\"class\",\"swarm-chart-search\")\n    //   .attr(\"placeholder\",\"Find a Newsroom\")\n    //   ;\n\n    // chartDivContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-source\")\n    //   .selectAll(\"p\")\n    //   .data([\"Source: ASNE Survey, 2017\",\"At least 50 staff\"])\n    //   .enter()\n    //   .append(\"p\")\n    //   .attr(\"class\",\"swarm-chart-source-text\")\n    //   .text(function(d){\n    //     return d;\n    //   })\n    //   ;\n\n    // chartDivContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-logos\")\n    //   .style(\"transform\", \"translate(\" + margin.left+\"px\" + \",\" + margin.top+\"px\" + \")\")\n    //   .selectAll(\"div\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .style(\"transform\",function(d){\n    //      return \"translate(\" + d.x+\"px\" + \",\" + d.y+\"px\" + \")\"\n    //   })\n    //   .attr(\"class\",\"swarm-chart-logo-container\")\n    //   .append(\"div\")\n    //   .style(\"width\", function(d){\n    //     return \"1px\"\n    //   })\n    //   .style(\"height\", function(d){\n    //     return \"1px\"\n    //   })\n    //   .attr(\"class\",\"swarm-chart-logo\")\n    //   .style(\"width\", function(d){\n    //     return d.radius*2+\"px\"\n    //   })\n    //   .style(\"height\", function(d){\n    //     return d.radius*2+\"px\"\n    //   })\n    //   .style(\"background-image\",function(d){\n    //     if(newsIDName.get(d.NewsID).Company==\"the new york times\"){\n    //       return \"url(assets/ny-times-logo.svg)\"\n    //     }\n    //   })\n    //   ;\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo, top_3_data, censusData) {\n\n  var censusMap = d3.map(censusData, function (d) {\n    return d.city_state;\n  });\n\n  var yearSelected = 2014;\n  var currentChart = \"swarm\";\n  var cut = \"gender\";\n  var group = \"all\";\n  var countMin = 50;\n  var mouseoverOffsetX = 20;\n  var mouseoverOffsetY = -14;\n\n  function getAverage(data) {\n\n    if (cut == \"gender\" && group == \"all\") {\n      return d3.mean(data, function (d) {\n        return (d.total_num - d.male_num) / d.total_num;\n      });\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.white_sup_num) / d.total_sup_num;\n      });\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.male_sup_num) / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return (+d.total_num - +d.white_num) / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\" && group == \"all\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num;\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, dataSet) {\n    var data = dataSet.yearMap.get(yearSelected);\n\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    if (kind == \"raceRaw\") {\n      return (+data.total_num - +data.white_num) / data.total_num;\n    }\n    var racePoint = (+data.total_num - +data.white_num) / data.total_num - (1 - dataSet.whiteCensus);\n    return racePoint;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 20, bottom: 20, left: 20 };\n  var width = 1000 - margin.left - margin.right;\n  var height = 250 - margin.top - margin.bottom;\n  var container = d3.select(\".swarm\");\n\n  var chartTitle = container.append(\"p\").attr(\"class\", \"chart-title\").text(\"Newsrooms Broken-down by Gender\");\n  var chartTopSection = container.append(\"div\").attr(\"class\", \"chart-top-section\");\n\n  function buildStepper() {\n\n    var stepperContainer = chartTopSection.append(\"div\").attr(\"class\", \"stepper-container\");\n\n    stepperContainer.append(\"p\").attr(\"class\", \"stepper-container-text\").text(function (d) {\n      return \"The ASNE Newsroom Employment Diversity Survey (previously known as the Newsroom Employment Census), sponsored by a significant grant from the John S. and James L. Knight Foundation, is a tool ASNE uses to measure the success of its goal of having the percentage of minorities working in newsrooms nationwide equal to the percentage of minorities in the nation's population by 2025.\";\n    });\n\n    var stepperContainerToggle = stepperContainer.append(\"div\").attr(\"class\", \"stepper-toggle-row\");\n\n    var stepperPlay = stepperContainerToggle.append(\"div\").attr(\"class\", \"stepper-play-button\").on(\"click\", function (d) {\n      buildChart(\"swarm-scatter\");\n    });\n\n    var stepperPlayIcon = stepperPlay.append(\"div\").attr(\"class\", \"stepper-arrow\");\n\n    var stepperPlayText = stepperPlay.append(\"p\").attr(\"class\", \"stepper-play-text\").text(\"Start Animation\");\n\n    stepperContainerToggle.append(\"div\").attr(\"class\", \"stepper-item-container\").selectAll(\"p\").data([\"swarm\", \"swarm-scatter\", \"arrow-scatter\"]).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"stepper-item stepper-item-selected\";\n      }\n      return \"stepper-item\";\n    }).text(function (d, i) {\n      return i + 1;\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"stepper-item-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      currentChart = d;\n      buildChart(d);\n    });\n  }\n  buildStepper();\n\n  // function searchSpectrum(){\n  //\n  //   var searchArray = [];\n  //   var searchResults = d3.selectAll(\".search-results\");\n  //   var searchResultMouseOver = false;\n  //\n  //   var searchInput = d3.selectAll(\".search-films\").select(\"input\")\n  //         .on(\"keyup\", keyupedFilmColumn);\n  //\n  //   function keyupedFilmColumn() {\n  //     searchFilmColumn(this.value.trim());\n  //   }\n  //\n  //   function searchFilmColumn(value) {\n  //     if (value.length > 2) {\n  //       searchResults.style(\"display\",\"block\");\n  //       var re = new RegExp(\"\\\\b\" + d3.requote(value), \"i\");\n  //       genreSelected = \"all\";\n  //       var filteredSpectrumData = spectrumData.filter(function(d,i){\n  //         var string = d.genreList;\n  //         if(genreSelected == \"all\" && stage == 3){\n  //           return +d.gross > 45;\n  //         }\n  //         else if(genreSelected ==\"all\" && stage == 2){\n  //           return d;\n  //         }\n  //         else if(stage == 3){\n  //           var substring = genreSelected;\n  //           return +d.gross > 45 && string.indexOf(substring) > -1;\n  //         }\n  //         return string.indexOf(substring) > -1\n  //       })\n  //       ;\n  //\n  //       searchArray = _.filter(filteredSpectrumData, function(d,i) {\n  //         return re.test(d[\"title\"]);\n  //       })\n  //       ;\n  //\n  //       //\n  //       var searchDivData = searchResults.selectAll(\"p\")\n  //         .data(searchArray, function(d){\n  //           return d[\"imdb_id\"];\n  //         })\n  //         ;\n  //\n  //       var searchEnter = searchDivData\n  //         .enter()\n  //         .append(\"p\")\n  //         .attr(\"class\",\"tk-futura-pt search-result\")\n  //         .html(function(d){\n  //           var final_str = d.title.replace(re, function(str) {return '<b><u>'+str+'</u></b>'});\n  //           var percent = \"<span class='search-result-percent'><span style='color:\"+maleColor+\";'>\"+percentFormat(1-d.female_percent)+\"</span>/<span style='color:\"+femaleColor+\";'>\"+percentFormat(d.female_percent)+\"</span></span>\";\n  //           return final_str + \" \" + percent;\n  //         })\n  //         .on(\"click\",function(d){\n  //           genreSelected = \"all\";\n  //           updateSpectrumSearch(d);\n  //           d3.selectAll(\".filter-item-spectrum\").style(\"background-color\",null).style(\"box-shadow\",null).style(\"border-color\",null).style(\"font-weight\",null);\n  //           d3.select(\".filter-item-spectrum\").style(\"background-color\",\"#F5F5F5\").style(\"box-shadow\",\"inset 0 3px 5px rgba(0,0,0,.125)\").style(\"border-color\",\"#adadad\").style(\"font-weight\",\"500\");\n  //           if(mobile){\n  //             searchResults.style(\"display\",\"none\");\n  //           }\n  //         })\n  //         ;\n  //\n  //       searchDivData.exit().remove();\n  //\n  //\n  //     } else{\n  //       searchResults.style(\"display\",\"none\");\n  //     }\n  //\n  //   };\n  // }\n  //\n  // searchSpectrum();\n\n  var searchDiv = chartTopSection.append(\"div\").attr(\"class\", \"swarm-chart-search-div\");\n\n  searchDiv.append(\"input\").attr(\"class\", \"swarm-chart-search\").attr(\"placeholder\", \"Find a Newsroom\");\n\n  searchDiv.append(\"div\").attr(\"class\", \"swarm-chart-search-results\");\n\n  var xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]);\n  var yScale = d3.scaleLinear().domain([0, .1]).range([height, 0]);\n\n  var chartDivContainer = container.append(\"div\").attr(\"class\", \"swarm-chart-container\").style(\"width\", width + margin.left + margin.right + \"px\");\n\n  var chartToolTip = chartDivContainer.append(\"div\").attr(\"class\", \"swarm-chart-tool-tip\").style(\"transform\", \"translate(\" + margin.left + \"px\" + \",\" + margin.top + \"px\" + \")\").text(function (d) {\n    return d;\n  });\n\n  var chartDiv = chartDivContainer.append(\"svg\").attr(\"class\", \"swarm-chart-wrapper\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n\n  var filteredMapData = mapData.filter(function (d) {\n    if (cut == \"supWhite\" || cut == \"supGender\") {\n      return d.total_num > countMin && d.total_sup_num > 0;\n    }\n    return d.total_num > countMin;\n  });\n\n  var yearNest = d3.nest().key(function (d) {\n    return +d.Year;\n  }).rollup(function (leaves) {\n    var average = getAverage(leaves);\n    return { average: average, values: leaves };\n  }).entries(filteredMapData);\n\n  var maxPercentArray = [];\n  var diffArray = [];\n  var raceDiffArray = [];\n  var averageArray = [];\n\n  var newsNest = d3.nest().key(function (d) {\n    return +d.NewsID;\n  }).rollup(function (leaves) {\n    var map = d3.map(leaves, function (d) {\n      return d.Year;\n    });\n    var maxTotalNum = d3.max(leaves, function (d) {\n      return d.total_num;\n    });\n    var maxPercent = d3.max(leaves, function (d) {\n      return getPercent(d);\n    });\n    maxPercentArray.push(maxPercent);\n    return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n  }).entries(filteredMapData);\n\n  newsNest = newsNest.filter(function (d) {\n    if (d.value.yearMap.has(yearSelected) && d.value.values.length > 1) {\n      return d;\n    }\n    return null;\n  });\n\n  var totalExtent = d3.extent(newsNest, function (d) {\n    return +d.value.yearMap.get(yearSelected).total_num;\n  });\n  var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n\n  for (var item in newsNest) {\n\n    var currentSup = getPercentType(\"supGender\", newsNest[item].value);\n    var currentYear = getPercent(newsNest[item].value.yearMap.get(yearSelected));\n    var previousYear = getPercent(newsNest[item].value.values.filter(function (d) {\n      if (cut == \"gender\") {\n        return +d.Year > 2000;\n      }\n      return d;\n    })[0]);\n    var diff = currentYear - previousYear;\n    cut = \"supGender\";\n    var raceDiff = getPercent(newsNest[item].value.yearMap.get(yearSelected)) - getPercent(newsNest[item].value.values[0]);\n    cut = \"gender\";\n    diffArray.push(diff);\n    raceDiffArray.push(raceDiff);\n\n    var companyData = newsIDName.get(newsNest[item].key);\n    var cityState = companyData.City + \" \" + companyData.State;\n\n    newsNest[item].value.companyName = companyData.Company;\n    var whiteCensus = .9;\n    if (censusMap.has(cityState)) {\n      whiteCensus = +censusMap.get(cityState).white_2015 / 100;\n      // console.log(newsNest[item].value.companyName,newsNest[item].key,cityState);\n    }\n    newsNest[item].value.whiteCensus = whiteCensus;\n    newsNest[item].value.whiteDelta = getPercentType(\"race\", newsNest[item].value);\n    newsNest[item].value.diff = diff;\n    newsNest[item].value.raceDiff = raceDiff;\n    var totalCount = +newsNest[item].value.yearMap.get(yearSelected).total_num;\n    newsNest[item].value.radius = radiusScale(totalCount);\n    newsNest[item].value.currentYear = currentYear;\n    newsNest[item].value.previousYear = previousYear;\n    newsNest[item].value.currentSup = currentSup;\n\n    // newsNest[item].top3Data = top3Map.get(newsNest[item].companyName);\n  }\n  ;\n\n  var newsNestAverageT0 = d3.mean(newsNest, function (d) {\n    return d.value.previousYear;\n  });\n  var newsNestAverageT1 = d3.mean(newsNest, function (d) {\n    return d.value.currentYear;\n  });\n  var newsNestSupAverageT1 = d3.mean(newsNest, function (d) {\n    return d.value.currentSup;\n  });\n\n  var newsMap = d3.map(newsNest, function (d) {\n    return d.key;\n  });\n\n  var diffExtent = d3.extent(diffArray, function (d) {\n    return d;\n  });\n  var colorScale = d3.scaleLinear().domain(diffExtent).range([\"green\", \"red\"]);\n  var genderColorScale = d3.scaleLinear().domain([.2, .5, .8]).range([\"#2161fa\", \"#dddddd\", \"#ff3333\"]);\n  if (cut == \"race\") {\n    genderColorScale.domain([0, .5, 1]);\n  }\n\n  var cell;\n  var cellCircle;\n  var cellImages;\n\n  var chartAxis = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-axis\");\n\n  var chartG = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  var duration = 750;\n\n  function buildChart(chartType) {\n\n    function changeTitle() {\n      var title = \"Newsrooms Broken-down by Gender\";\n      if (cut == \"race\") {\n        var title = \"White/Non-White Breakdown of Newsrooms vs. City\";\n      }\n      if (chartType == \"swarm-scatter\") {\n        title = \"Gender Break-down of Staff vs. Leaders\";\n      } else if (chartType == \"arrow-scatter\") {\n        title = \"Change in Gender Break-down from 2002 - 2017\";\n      }\n      chartTitle.text(title);\n    }\n    function setWidths(chartType) {\n      if (chartType == \"swarm\") {\n        // margin = {top: 40, right: 100, bottom: 20, left: 100};\n        width = 1000 - margin.left - margin.right;\n        height = 250 - margin.top - margin.bottom;\n        if (cut == \"race\") {\n          xScale.domain([-1, 1]);\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return d.value.whiteDelta;\n          });\n          genderColorScale.domain([-1, 0, 1]);\n        } else if (cut == \"gender\") {\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return d.value.currentYear;\n          });\n          xScale.domain([.2, .8]);\n          genderColorScale.domain([.2, .5, .8]);\n        }\n      }\n      if (chartType == \"swarm-scatter\") {\n        // margin = {top: 40, right: 100, bottom: 20, left: 100};\n        width = 800 - margin.left - margin.right;\n        height = 500 - margin.top - margin.bottom;\n        xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n        yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n        newsNestAverageT1 = d3.mean(newsNest, function (d) {\n          return d.value.currentYear;\n        });\n      }\n\n      chartDivContainer.transition().duration(duration).delay(duration).style(\"width\", width + margin.left + margin.right + \"px\");\n\n      chartToolTip.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      chartDiv.transition().duration(duration).attr(\"height\", height + margin.top + margin.bottom).transition().duration(duration).attr(\"width\", width + margin.top + margin.bottom);\n\n      chartG.transition().duration(500).attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      chartAxis.transition().duration(500).attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    }\n    changeTitle();\n    if (chartType != \"new\") {\n      setWidths(chartType);\n    }\n\n    if (chartType == \"swarm-scatter\") {\n      var buildAxis = function buildAxis() {\n\n        var chartAxisContainer = chartAxis.append(\"g\");\n\n        var chartAxisLines = chartAxisContainer.append(\"g\");\n\n        chartAxisLines.append(\"line\").attr(\"x1\", width / 2).attr(\"x2\", width / 2).attr(\"y1\", 0).attr(\"y2\", height).attr(\"class\", \"swarm-axis-line\");\n\n        chartAxisLines.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n\n        var chartAxisText = chartAxisContainer.append(\"g\");\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data([\"100% Female Leaders\", \"100% Male Leaders\"]).enter().append(\"text\").attr(\"x\", function (d, i) {\n          return width / 2;\n        }).attr(\"y\", function (d, i) {\n          if (i == 0) {\n            return 0;\n          }\n          return height;\n        }).attr(\"class\", \"swarm-axis-tick-text\").text(function (d) {\n          return d;\n        }).style(\"text-anchor\", function (d, i) {\n          return \"middle\";\n        }).style(\"dominant-baseline\", function (d, i) {\n          if (i == 1) {\n            return \"text-before-edge\";\n          }\n          return \"text-after-edge\";\n        });\n\n        chartAxisText.append(\"g\").selectAll(\"rect\").data([\"100% Male Staff\", \"100% Female Staff\"]).enter().append(\"rect\").attr(\"x\", function (d, i) {\n          if (i == 0) {\n            return 0;\n          }\n          return width;\n        }).attr(\"y\", height / 2).attr(\"width\", 100).attr(\"height\", 32).attr(\"class\", \"swarm-axis-tick-rect\").style(\"transform\", function (d, i) {\n          if (i == 1) {\n            return \"translate(-100%,0)\";\n          }\n          return null;\n          // return \"translate(100%,0)\"\n        });\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data([\"100% Male Staff\", \"100% Female Staff\"]).enter().append(\"text\").attr(\"x\", function (d, i) {\n          if (i == 0) {\n            return 0;\n          }\n          return width;\n        }).attr(\"y\", height / 2).attr(\"class\", \"swarm-axis-tick-text\").text(function (d) {\n          return d;\n        }).style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          return \"end\";\n        });\n      };\n\n      var buildAverage = function buildAverage() {\n\n        chartDiv.select(\".swarm-average\").remove();\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        chartAverage.append(\"circle\").attr(\"class\", \"swarm-circle swarm-circle-average\").attr(\"cx\", xScale(newsNestAverageT1)).attr(\"cy\", yScale(newsNestSupAverageT1)).attr(\"r\", 8);\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", yScale(newsNestSupAverageT1) - 26).style(\"fill\", \"black\").text(\"Overall\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", yScale(newsNestSupAverageT1) - 14).text(function () {\n          if (cut == \"race\") {\n            return Math.round((1 - newsNestSupAverageT1) * 100) + \"% White\";\n          }\n          return Math.round((1 - newsNestSupAverageT1) * 100) + \"% Male\";\n        });\n      };\n\n      cellCircle.on(\"mouseover\", function (d) {\n        var data = d;\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", yScale(getPercentType(\"supGender\", data.value)) + mouseoverOffsetY + \"px\").style(\"left\", xScale(getPercentType(\"gender\", data.value)) + data.value.radius + mouseoverOffsetX + \"px\").text(d.value.companyName + \" - \" + Math.floor(getPercentType(\"gender\", d.value) * 100) + \"%\");\n      }).on(\"mouseout\", function (d) {\n        chartToolTip.style(\"visibility\", null).text(\"\");\n      }).transition().duration(duration).delay(function (d, i) {\n        return i * 10;\n      }).attr(\"cx\", function (d) {\n        return xScale(getPercentType(\"gender\", d.value));\n        // return diffScale(d.value.diff);\n      }).attr(\"cy\", function (d) {\n        return yScale(getPercentType(\"supGender\", d.value));\n      }).style(\"fill\", null).style(\"stroke\", null);\n\n      cellImages.transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + xScale(getPercentType(\"gender\", d.value)) + \",\" + yScale(getPercentType(\"supGender\", d.value)) + \")\";\n      });\n      ;\n\n      chartAxis.select(\"g\").transition().duration(250).style(\"opacity\", 0).on(\"end\", function (d) {\n        d3.select(this).remove();\n        buildAxis();\n      });\n\n      buildAverage();\n    }\n    if (chartType == \"swarm\") {\n      var _buildAxis = function _buildAxis() {\n\n        var chartAxisContainer = chartAxis.append(\"g\");\n\n        var tickData = [.2, .3, .5, .7, .8];\n        var midPoint = .5;\n        if (cut == \"race\") {\n          tickData = [-1, -.5, -.25, 0, .25, 1];\n          midPoint = 0;\n        }\n\n        var ticks = chartAxisContainer.append(\"g\").attr(\"class\", \"swarm-axis-tick-container\").selectAll(\"g\").data(tickData).enter().append(\"g\").attr(\"class\", \"swarm-axis-tick-g\");\n\n        ticks.append(\"line\").style(\"stroke\", function (d) {\n          if (d == midPoint) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", function (d, i) {\n          if (d == midPoint) {\n            return height / 2;\n          }\n          return 0;\n        }).attr(\"y2\", function (d) {\n          if (d == midPoint) {\n            return 0;\n          }\n          return height * .05;\n        }).attr(\"class\", \"swarm-axis-tick\");\n\n        ticks.append(\"text\").attr(\"x\", function (d) {\n          return xScale(d);\n        }).attr(\"y\", -9).attr(\"class\", \"swarm-axis-tick-text\").style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i == tickData.length - 1) {\n            return \"end\";\n          }\n          return null;\n        }).style(\"fill\", function (d, i) {\n          if (d == midPoint) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              return \"More White vs. City Census\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male Staff\";\n          }\n          if (i == tickData.length - 1) {\n            if (cut == \"race\") {\n              return \"More People of Color vs. City Census\";\n            }\n            return Math.floor(d * 100) + \"% Female Staff\";\n          }\n          if (d == midPoint) {\n            if (cut == \"race\") {\n              return \"Parity with City\";\n            }\n            return \"50/50  Split\";\n          }\n          if (d < midPoint) {\n            if (cut == \"race\") {\n              return \"+\" + Math.floor(Math.abs(d) * 100) + \"%\";\n            }\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          if (cut == \"race\") {\n            return \"+\" + Math.floor(Math.abs(d) * 100) + \"%\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n\n        chartAxisContainer.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n      };\n\n      var _buildAverage = function _buildAverage() {\n\n        chartDiv.select(\".swarm-average\").remove();\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\").style(\"opacity\", 0);\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 22).text(\"Overall\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 7).text(function () {\n          if (cut == \"race\") {\n            return Math.round(Math.abs(newsNestAverageT1) * 100) + \"% More White\";\n          }\n          return Math.round((1 - newsNestAverageT1) * 100) + \"% Male\";\n        });\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-average-line\").attr(\"x1\", xScale(newsNestAverageT1)).attr(\"x2\", xScale(newsNestAverageT1)).attr(\"y1\", height * .2).attr(\"y2\", height * .8);\n\n        chartAverage.transition().duration(duration).delay(duration).style(\"opacity\", 1);\n      };\n\n      var forceCollide = d3.forceCollide().radius(function (d) {\n        return d.value.radius + 1;\n      }).iterations(1);\n\n      var simulation = d3.forceSimulation(newsNest).force(\"x\", d3.forceX(function (d) {\n        return xScale(getPercentType(cut, d.value));\n      }).strength(1)).force(\"y\", d3.forceY(height / 2)).force(\"collide\", forceCollide).stop();\n\n      chartAxis.select(\"g\").transition().duration(500).style(\"opacity\", 0).on(\"end\", function (d) {\n        d3.select(this).remove();\n        _buildAxis();\n      });\n\n      for (var i = 0; i < 250; ++i) {\n        simulation.tick();\n      }cellCircle.on(\"mouseover\", function (d) {\n        d3.select(this).style(\"stroke\", \"black\");\n        var data = d;\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", data.y + mouseoverOffsetY + \"px\").style(\"left\", data.x + data.value.radius + mouseoverOffsetX + \"px\").text(function () {\n          if (cut == \"race\") {\n            var raceValue = getPercentType(\"raceRaw\", d.value);\n            if (raceValue < .5) {\n              return d.value.companyName + \" - \" + Math.floor((1 - raceValue) * 100) + \"% White. City - \" + Math.floor(d.value.whiteCensus * 100) + \"% White\";\n            }\n            return d.value.companyName + \" - \" + Math.floor(raceValue * 100) + \"% Non-white. City - \" + Math.floor((1 - d.value.whiteCensus) * 100) + \"% Non-white\";\n          }\n          return d.value.companyName + \" - \" + Math.floor(getPercentType(cut, d.value) * 100) + \"%\";\n        });\n      }).on(\"mouseout\", function (d) {\n        d3.select(this).style(\"stroke\", function (d) {\n          var value = getPercentType(cut, d.value);\n          return d3.color(genderColorScale(value)).darker(1);\n        });\n        chartToolTip.style(\"visibility\", null).text(\"\");\n      }).transition().duration(duration).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).style(\"fill\", function (d) {\n        var value = getPercentType(cut, d.value);\n        return genderColorScale(value);\n        return colorScale(newsMap.get(d.NewsID).value.diff);\n      }).style(\"stroke\", function (d) {\n        var value = getPercentType(cut, d.value);\n        return d3.color(genderColorScale(value)).darker(1);\n      });\n\n      cellImages.transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      });\n\n      _buildAverage();\n    }\n    if (chartType == \"new\") {\n      var _buildAxis2 = function _buildAxis2() {\n\n        var chartAxisContainer = chartAxis.append(\"g\");\n\n        var tickData = [.2, .3, .5, .7, .8];\n        if (cut == \"race\") {\n          tickData = [0, .3, .5, .7, 1];\n        }\n\n        var ticks = chartAxisContainer.append(\"g\").attr(\"class\", \"swarm-axis-tick-container\").selectAll(\"g\").data(tickData).enter().append(\"g\").attr(\"class\", \"swarm-axis-tick-g\");\n\n        ticks.append(\"line\").style(\"stroke\", function (d) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", function (d, i) {\n          if (d == .5) {\n            return height / 2;\n          }\n          return 0;\n        }).attr(\"y2\", function (d) {\n          if (d == .5) {\n            return 0;\n          }\n          return height * .05;\n        }).attr(\"class\", \"swarm-axis-tick\");\n\n        ticks.append(\"text\").attr(\"x\", function (d) {\n          return xScale(d);\n        }).attr(\"y\", -9).attr(\"class\", \"swarm-axis-tick-text\").style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i == tickData.length - 1) {\n            return \"end\";\n          }\n          return null;\n        }).style(\"fill\", function (d, i) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              return Math.floor((1 - d) * 100) + \"% White Staff\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male Staff\";\n          }\n          if (i == tickData.length - 1) {\n            if (cut == \"race\") {\n              return Math.floor(d * 100) + \"% Non-White Staff\";\n            }\n            return Math.floor(d * 100) + \"% Female Staff\";\n          }\n          if (d == .5) {\n            return \"50/50  Split\";\n          }\n          if (d < .5) {\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n\n        chartAxisContainer.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n      };\n\n      var _buildAverage2 = function _buildAverage2() {\n\n        chartDiv.select(\".swarm-average\").remove();\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 22).text(\"Overall\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 7).text(function () {\n          if (cut == \"race\") {\n            return Math.round((1 - newsNestAverageT1) * 100) + \"% White\";\n          }\n          return Math.round((1 - newsNestAverageT1) * 100) + \"% Male\";\n        });\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-average-line\").attr(\"x1\", xScale(newsNestAverageT1)).attr(\"x2\", xScale(newsNestAverageT1)).attr(\"y1\", height * .2).attr(\"y2\", height * .8);\n      };\n\n      var forceCollide = d3.forceCollide().radius(function (d) {\n        return d.value.radius + 1;\n      }).iterations(1);\n\n      var simulation = d3.forceSimulation(newsNest).force(\"x\", d3.forceX(function (d) {\n        return xScale(getPercentType(\"gender\", d.value));\n      }).strength(1)).force(\"y\", d3.forceY(height / 2)).force(\"collide\", forceCollide).stop();\n\n      _buildAxis2();\n\n      _buildAverage2();\n\n      for (var i = 0; i < 250; ++i) {\n        simulation.tick();\n      }cell = chartG.selectAll(\"g\").data(newsNest).enter().append(\"g\").sort(function (a, b) {\n        return b.value.radius - a.value.radius;\n      });\n\n      cellCircle = cell.append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n        return d.value.radius;\n      }).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).on(\"mouseover\", function (d) {\n        d3.select(this).style(\"stroke\", \"black\");\n        var data = d;\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", data.y + mouseoverOffsetY + \"px\").style(\"left\", data.x + data.value.radius + mouseoverOffsetX + \"px\").text(function () {\n          return d.value.companyName + \" - \" + Math.floor(getPercentType(\"gender\", d.value) * 100) + \"%\";\n        });\n      }).on(\"mouseout\", function (d) {\n        d3.select(this).style(\"stroke\", function (d) {\n          var value = getPercentType(\"gender\", d.value);\n          return d3.color(genderColorScale(value)).darker(1);\n        });\n        chartToolTip.style(\"visibility\", null).text(\"\");\n      }).style(\"fill\", function (d) {\n        var value = getPercentType(\"gender\", d.value);\n        return genderColorScale(value);\n        return colorScale(newsMap.get(d.NewsID).value.diff);\n      }).style(\"stroke\", function (d) {\n        var value = getPercentType(\"gender\", d.value);\n        return d3.color(genderColorScale(value)).darker(1);\n        //return d3.color(colorScale(newsMap.get(d.NewsID).value.diff)).darker(2);\n      });\n\n      cellImages = cell.append(\"g\").attr(\"transform\", function (d, i) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      }).attr(\"class\", \"swarm-image-container\");\n\n      cellImages.append(\"image\").attr(\"class\", \"swarm-image\").attr(\"xlink:href\", function (d) {\n        if (d.value.companyName == \"the new york times\") {\n          return \"assets/ny-times-logo.svg\";\n        }\n        if (d.value.companyName == \"the wall street journal\") {\n          return \"assets/wsj-logo.svg\";\n        }\n        if (d.value.companyName == \"los angeles times\") {\n          return \"assets/la-times-logo.png\";\n        }\n        return null;\n      }).attr(\"width\", function (d) {\n        return d.value.radius * 2 * .7;\n      }).attr(\"height\", function (d) {\n        return d.value.radius * 2 * .7;\n      });\n    }\n  }\n\n  buildChart(\"new\");\n\n  var footerContainer = container.append(\"div\").attr(\"class\", \"footer-container\");\n\n  footerContainer.append(\"div\").attr(\"class\", \"swarm-chart-source\").selectAll(\"p\").data([\"Source: ASNE Survey, 2017\", \"At least 50 staff\"]).enter().append(\"p\").attr(\"class\", \"swarm-chart-source-text\").text(function (d) {\n    return d;\n  });\n\n  function buildToggles() {\n    var toggles = footerContainer.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n    var sizeCats = [0, 20, 50, 100, 500];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == sizeCats.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      countMin = d;\n      buildChart(currentChart);\n    });\n\n    var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == raceGenderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"race\") {\n        return \"Race\";\n      }\n      return \"Gender\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      cut = d;\n      buildChart(currentChart);\n    });\n\n    var leaderToggleData = [\"all\", \"leader\"];\n    //\n    // toggles\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-chart-toggle-type\")\n    //   .selectAll(\"p\")\n    //   .data(leaderToggleData)\n    //   .enter()\n    //   .append(\"p\")\n    //   .attr(\"class\",function(d,i){\n    //     if(i==0){\n    //       return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    //     }\n    //     if(i==leaderToggleData.length-1){\n    //       return \"back-curve histogram-chart-toggle-item\";\n    //     }\n    //     return \"histogram-chart-toggle-item\";\n    //   })\n    //   .text(function(d){\n    //     if(d==\"all\"){\n    //       return \"All Staff\"\n    //     }\n    //     return \"Leadership\";\n    //   })\n    //   .on(\"click\",function(d){\n    //     var dataSelected = d;\n    //     d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\",function(d){\n    //       if(d==dataSelected){\n    //         return true;\n    //       }\n    //       return false;\n    //     })\n    //     group = d;\n    //     buildChart(currentChart);\n    //   })\n    //   ;\n  }\n  buildToggles();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL3N3YXJtLmpzP2Q1MGMiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgc3RhdGVzID0gW1xuICBbXCJNYWluZVwiLFwiTUVcIiwxLFwiTm9ydGhlYXN0XCIsMjNdLFxuICBbXCJWZXJtb250XCIsXCJWVFwiLDIsXCJOb3J0aGVhc3RcIiw1MF0sXG4gIFtcIk5ldyBIYW1wc2hpcmVcIixcIk5IXCIsMyxcIk5vcnRoZWFzdFwiLDMzXSxcbiAgW1wiUmhvZGUgSXNsYW5kXCIsXCJSSVwiLDQsXCJOb3J0aGVhc3RcIiw0NF0sXG4gIFtcIk1hc3NhY2h1c2V0dHNcIixcIk1BXCIsNSxcIk5vcnRoZWFzdFwiLDI1XSxcbiAgW1wiQ29ubmVjdGljdXRcIixcIkNUXCIsNixcIk5vcnRoZWFzdFwiLDldLFxuICBbXCJEZWxhd2FyZVwiLFwiREVcIiw3LFwiTm9ydGhlYXN0XCIsMTBdLFxuICBbXCJOZXcgSmVyc2V5XCIsXCJOSlwiLDgsXCJOb3J0aGVhc3RcIiwzNF0sXG4gIFtcIk5ldyBZb3JrXCIsXCJOWVwiLDksXCJOb3J0aGVhc3RcIiwzNl0sXG4gIFtcIlBlbm5zeWx2YW5pYVwiLFwiUEFcIiwxMCxcIk5vcnRoZWFzdFwiLDQyXSxcbiAgW1wiRGlzdHJpY3Qgb2YgQ29sdW1iaWFcIixcIkRDXCIsMTEsXCJOb3J0aGVhc3RcIiwxMV0sXG4gIFtcIk1hcnlsYW5kXCIsXCJNRFwiLDEyLFwiTm9ydGhlYXN0XCIsMjRdLFxuICBbXCJWaXJnaW5pYVwiLFwiVkFcIiwxMyxcIlNvdXRoXCIsNTFdLFxuICBbXCJOb3J0aCBDYXJvbGluYVwiLFwiTkNcIiwxNCxcIlNvdXRoXCIsMzddLFxuICBbXCJTb3V0aCBDYXJvbGluYVwiLFwiU0NcIiwxNSxcIlNvdXRoXCIsNDVdLFxuICBbXCJHZW9yZ2lhXCIsXCJHQVwiLDE2LFwiU291dGhcIiwxM10sXG4gIFtcIkFsYWJhbWFcIixcIkFMXCIsMTcsXCJTb3V0aFwiLDFdLFxuICBbXCJNaXNzaXNzaXBwaVwiLFwiTVNcIiwxOCxcIlNvdXRoXCIsMjhdLFxuICBbXCJMb3Vpc2lhbmFcIixcIkxBXCIsMTksXCJTb3V0aFwiLDIyXSxcbiAgW1wiQXJrYW5zYXNcIixcIkFSXCIsMjAsXCJTb3V0aFwiLDVdLFxuICBbXCJUZW5uZXNzZWVcIixcIlROXCIsMjEsXCJTb3V0aFwiLDQ3XSxcbiAgW1wiS2VudHVja3lcIixcIktZXCIsMjIsXCJTb3V0aFwiLDIxXSxcbiAgW1wiV2VzdCBWaXJnaW5pYVwiLFwiV1ZcIiwyMyxcIlNvdXRoXCIsNTRdLFxuICBbXCJPa2xhaG9tYVwiLFwiT0tcIiwyNCxcIk1pZHdlc3RcIiw0MF0sXG4gIFtcIkNvbG9yYWRvXCIsXCJDT1wiLDI1LFwiV2VzdFwiLDhdLFxuICBbXCJVdGFoXCIsXCJVVFwiLDI2LFwiV2VzdFwiLDQ5XSxcbiAgW1wiSWRhaG9cIixcIklEXCIsMjcsXCJXZXN0XCIsMTZdLFxuICBbXCJXeW9taW5nXCIsXCJXWVwiLDI4LFwiV2VzdFwiLDU2XSxcbiAgW1wiTW9udGFuYVwiLFwiTVRcIiwyOSxcIldlc3RcIiwzMF0sXG4gIFtcIk5vcnRoIERha290YVwiLFwiTkRcIiwzMCxcIk1pZHdlc3RcIiwzOF0sXG4gIFtcIlNvdXRoIERha290YVwiLFwiU0RcIiwzMSxcIk1pZHdlc3RcIiw0Nl0sXG4gIFtcIk5lYnJhc2thXCIsXCJORVwiLDMyLFwiTWlkd2VzdFwiLDMxXSxcbiAgW1wiS2Fuc2FzXCIsXCJLU1wiLDMzLFwiTWlkd2VzdFwiLDIwXSxcbiAgW1wiSW93YVwiLFwiSUFcIiwzNCxcIk1pZHdlc3RcIiwxOV0sXG4gIFtcIk1pbm5lc290YVwiLFwiTU5cIiwzNSxcIk1pZHdlc3RcIiwyN10sXG4gIFtcIldpc2NvbnNpblwiLFwiV0lcIiwzNixcIk1pZHdlc3RcIiw1NV0sXG4gIFtcIkluZGlhbmFcIixcIklOXCIsMzcsXCJNaWR3ZXN0XCIsMThdLFxuICBbXCJNaXNzb3VyaVwiLFwiTU9cIiwzOCxcIk1pZHdlc3RcIiwyOV0sXG4gIFtcIk9oaW9cIixcIk9IXCIsMzksXCJNaWR3ZXN0XCIsMzldLFxuICBbXCJNaWNoaWdhblwiLFwiTUlcIiw0MCxcIk1pZHdlc3RcIiwyNl0sXG4gIFtcIklsbGlub2lzXCIsXCJJTFwiLDQxLFwiTWlkd2VzdFwiLDE3XSxcbiAgW1wiRmxvcmlkYVwiLFwiRkxcIiw0MixcIlNvdXRoXCIsMTJdLFxuICBbXCJDYWxpZm9ybmlhXCIsXCJDQVwiLDQzLFwiV2VzdFwiLDZdLFxuICBbXCJOZXZhZGFcIixcIk5WXCIsNDQsXCJXZXN0XCIsMzJdLFxuICBbXCJUZXhhc1wiLFwiVFhcIiw0NSxcIlNvdXRoXCIsNDhdLFxuICBbXCJBcml6b25hXCIsXCJBWlwiLDQ2LFwiV2VzdFwiLDRdLFxuICBbXCJOZXcgTWV4aWNvXCIsXCJOTVwiLDQ3LFwiV2VzdFwiLDM1XSxcbiAgW1wiQWxhc2thXCIsXCJBS1wiLDQ4LFwiV2VzdFwiLDJdLFxuICBbXCJXYXNoaW5ndG9uXCIsXCJXQVwiLDQ5LFwiV2VzdFwiLDUzXSxcbiAgW1wiT3JlZ29uXCIsXCJPUlwiLDUwLFwiV2VzdFwiLDQxXSxcbiAgW1wiSGF3YWlpXCIsXCJISVwiLDUxLFwiV2VzdFwiLDE1XSxcbiAgXVxuICA7XG5cbmZ1bmN0aW9uIGluaXQobWFwRGF0YSxsYXRMb25nRGF0YSxuZXdzSURMb2NhdGlvbixuZXdzSURJbmZvLHRvcF8zX2RhdGEsY2Vuc3VzRGF0YSkge1xuXG5cbiAgdmFyIGNlbnN1c01hcCA9IGQzLm1hcChjZW5zdXNEYXRhLGZ1bmN0aW9uKGQpeyByZXR1cm4gZC5jaXR5X3N0YXRlOyB9KTtcblxuICB2YXIgeWVhclNlbGVjdGVkID0gMjAxNDtcbiAgdmFyIGN1cnJlbnRDaGFydCA9IFwic3dhcm1cIjtcblx0dmFyIGN1dCA9IFwiZ2VuZGVyXCJcbiAgdmFyIGdyb3VwID0gXCJhbGxcIlxuICB2YXIgY291bnRNaW4gPSAgNTA7XG4gIHZhciBtb3VzZW92ZXJPZmZzZXRYID0gMjA7XG4gIHZhciBtb3VzZW92ZXJPZmZzZXRZID0gLTE0O1xuXG5cdGZ1bmN0aW9uIGdldEF2ZXJhZ2UoZGF0YSl7XG5cblx0XHRpZihjdXQgPT0gXCJnZW5kZXJcIiAmJiBncm91cCA9PSBcImFsbFwiKXtcblx0XHRcdHJldHVybiBkMy5tZWFuKGRhdGEsZnVuY3Rpb24oZCl7cmV0dXJuIChkLnRvdGFsX251bSAtIGQubWFsZV9udW0pLyhkLnRvdGFsX251bSl9KTtcblx0XHR9XG5cdFx0aWYoY3V0ID09IFwicmFjZVwiICYmIGdyb3VwICE9IFwiYWxsXCIpe1xuXHRcdFx0cmV0dXJuIGQzLm1lYW4oZGF0YSxmdW5jdGlvbihkKXtyZXR1cm4gKCtkLnRvdGFsX3N1cF9udW0gLSArZC53aGl0ZV9zdXBfbnVtKS9kLnRvdGFsX3N1cF9udW19KTtcblx0XHR9XG5cdFx0aWYoY3V0ID09IFwiZ2VuZGVyXCIgJiYgZ3JvdXAgIT0gXCJhbGxcIil7XG5cdFx0XHRyZXR1cm4gZDMubWVhbihkYXRhLGZ1bmN0aW9uKGQpe3JldHVybiAoK2QudG90YWxfc3VwX251bSAtICtkLm1hbGVfc3VwX251bSkvZC50b3RhbF9zdXBfbnVtfSk7XG5cdFx0fVxuXHRcdHJldHVybiBkMy5tZWFuKGRhdGEsZnVuY3Rpb24oZCl7cmV0dXJuICgrZC50b3RhbF9udW0gLSArZC53aGl0ZV9udW0pL2QudG90YWxfbnVtfSk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQZXJjZW50KGRhdGEpe1xuICAgIGlmKGN1dCA9PSBcImdlbmRlclwiICYmIGdyb3VwID09IFwiYWxsXCIpe1xuICAgICAgcmV0dXJuICsoZGF0YS50b3RhbF9udW0tZGF0YS5tYWxlX251bSkvZGF0YS50b3RhbF9udW1cblx0XHR9XG4gICAgaWYoY3V0ID09IFwicmFjZVwiICYmIGdyb3VwICE9IFwiYWxsXCIpe1xuICAgICAgcmV0dXJuICgrZGF0YS50b3RhbF9zdXBfbnVtIC0gK2RhdGEud2hpdGVfc3VwX251bSkvZGF0YS50b3RhbF9zdXBfbnVtO1xuXHRcdH1cbiAgICBpZihjdXQgPT0gXCJnZW5kZXJcIiAmJiBncm91cCAhPSBcImFsbFwiKXtcbiAgICAgIHJldHVybiAoK2RhdGEudG90YWxfc3VwX251bSAtICtkYXRhLm1hbGVfc3VwX251bSkvZGF0YS50b3RhbF9zdXBfbnVtO1xuXHRcdH1cbiAgICByZXR1cm4gKCtkYXRhLnRvdGFsX251bSAtICtkYXRhLndoaXRlX251bSkvZGF0YS50b3RhbF9udW1cblx0fVxuXG4gIGZ1bmN0aW9uIGdldFBlcmNlbnRUeXBlKGtpbmQsZGF0YVNldCl7XG4gICAgdmFyIGRhdGEgPSBkYXRhU2V0LnllYXJNYXAuZ2V0KHllYXJTZWxlY3RlZCk7XG5cbiAgICBpZihraW5kID09IFwiZ2VuZGVyXCIpe1xuICAgICAgcmV0dXJuICsoZGF0YS50b3RhbF9udW0tZGF0YS5tYWxlX251bSkvZGF0YS50b3RhbF9udW1cbiAgICB9XG4gICAgaWYoa2luZCA9PSBcInN1cFdoaXRlXCIpe1xuICAgICAgcmV0dXJuICgrZGF0YS50b3RhbF9zdXBfbnVtIC0gK2RhdGEud2hpdGVfc3VwX251bSkvZGF0YS50b3RhbF9zdXBfbnVtO1xuICAgIH1cbiAgICBpZihraW5kID09IFwic3VwR2VuZGVyXCIpe1xuICAgICAgcmV0dXJuICgrZGF0YS50b3RhbF9zdXBfbnVtIC0gK2RhdGEubWFsZV9zdXBfbnVtKS9kYXRhLnRvdGFsX3N1cF9udW07XG4gICAgfVxuICAgIGlmKGtpbmQgPT0gXCJyYWNlUmF3XCIpe1xuICAgICAgcmV0dXJuICgoK2RhdGEudG90YWxfbnVtIC0gK2RhdGEud2hpdGVfbnVtKS9kYXRhLnRvdGFsX251bSlcbiAgICB9XG4gICAgdmFyIHJhY2VQb2ludCA9ICgoK2RhdGEudG90YWxfbnVtIC0gK2RhdGEud2hpdGVfbnVtKS9kYXRhLnRvdGFsX251bSkgLSAoMS1kYXRhU2V0LndoaXRlQ2Vuc3VzKTtcbiAgICByZXR1cm4gcmFjZVBvaW50O1xuICB9XG5cblx0dmFyIGxhdExvbmdNYXAgPSBkMy5tYXAobGF0TG9uZ0RhdGEsZnVuY3Rpb24oZCl7IHJldHVybiBkLk5ld3NJRH0pO1xuXHR2YXIgbmV3c0lkTWFwID0gZDMubWFwKG5ld3NJRExvY2F0aW9uLGZ1bmN0aW9uKGQpeyByZXR1cm4gZC5OZXdzSUR9KTtcbiAgdmFyIG5ld3NJRE5hbWUgPSBkMy5tYXAobmV3c0lESW5mbyxmdW5jdGlvbihkKXsgcmV0dXJuIGQuTmV3c0lEfSk7XG5cdHZhciByZWdpb25NYXAgPSBkMy5tYXAoc3RhdGVzLGZ1bmN0aW9uKGQpe1xuXHRcdHJldHVybiBkWzFdO1xuXHR9KTtcblxuICB2YXIgbWFyZ2luID0ge3RvcDogNDAsIHJpZ2h0OiAyMCwgYm90dG9tOiAyMCwgbGVmdDogMjB9O1xuICB2YXIgd2lkdGggPSAxMDAwIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIHZhciBoZWlnaHQgPSAyNTAgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgdmFyIGNvbnRhaW5lciA9IGQzLnNlbGVjdChcIi5zd2FybVwiKTtcblxuICB2YXIgY2hhcnRUaXRsZSA9IGNvbnRhaW5lci5hcHBlbmQoXCJwXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwiY2hhcnQtdGl0bGVcIilcbiAgICAudGV4dChcIk5ld3Nyb29tcyBCcm9rZW4tZG93biBieSBHZW5kZXJcIilcbiAgICA7XG4gIHZhciBjaGFydFRvcFNlY3Rpb24gPSBjb250YWluZXIuYXBwZW5kKFwiZGl2XCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwiY2hhcnQtdG9wLXNlY3Rpb25cIilcbiAgICA7XG5cbiAgZnVuY3Rpb24gYnVpbGRTdGVwcGVyKCl7XG5cbiAgICB2YXIgc3RlcHBlckNvbnRhaW5lciA9IGNoYXJ0VG9wU2VjdGlvblxuICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3RlcHBlci1jb250YWluZXJcIilcblxuICAgIHN0ZXBwZXJDb250YWluZXIuYXBwZW5kKFwicFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3RlcHBlci1jb250YWluZXItdGV4dFwiKVxuICAgICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiBcIlRoZSBBU05FIE5ld3Nyb29tIEVtcGxveW1lbnQgRGl2ZXJzaXR5IFN1cnZleSAocHJldmlvdXNseSBrbm93biBhcyB0aGUgTmV3c3Jvb20gRW1wbG95bWVudCBDZW5zdXMpLCBzcG9uc29yZWQgYnkgYSBzaWduaWZpY2FudCBncmFudCBmcm9tIHRoZSBKb2huIFMuIGFuZCBKYW1lcyBMLiBLbmlnaHQgRm91bmRhdGlvbiwgaXMgYSB0b29sIEFTTkUgdXNlcyB0byBtZWFzdXJlIHRoZSBzdWNjZXNzIG9mIGl0cyBnb2FsIG9mIGhhdmluZyB0aGUgcGVyY2VudGFnZSBvZiBtaW5vcml0aWVzIHdvcmtpbmcgaW4gbmV3c3Jvb21zIG5hdGlvbndpZGUgZXF1YWwgdG8gdGhlIHBlcmNlbnRhZ2Ugb2YgbWlub3JpdGllcyBpbiB0aGUgbmF0aW9uJ3MgcG9wdWxhdGlvbiBieSAyMDI1LlwiO1xuICAgICAgfSlcbiAgICAgIDtcblxuICAgIHZhciBzdGVwcGVyQ29udGFpbmVyVG9nZ2xlID0gc3RlcHBlckNvbnRhaW5lci5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN0ZXBwZXItdG9nZ2xlLXJvd1wiKVxuICAgICAgO1xuXG4gICAgdmFyIHN0ZXBwZXJQbGF5ID0gc3RlcHBlckNvbnRhaW5lclRvZ2dsZS5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN0ZXBwZXItcGxheS1idXR0b25cIilcbiAgICAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIGJ1aWxkQ2hhcnQoXCJzd2FybS1zY2F0dGVyXCIpO1xuICAgICAgfSlcbiAgICAgIDtcblxuICAgIHZhciBzdGVwcGVyUGxheUljb24gPSBzdGVwcGVyUGxheS5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN0ZXBwZXItYXJyb3dcIilcbiAgICAgIDtcblxuICAgIHZhciBzdGVwcGVyUGxheVRleHQgPSBzdGVwcGVyUGxheS5hcHBlbmQoXCJwXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJzdGVwcGVyLXBsYXktdGV4dFwiKVxuICAgICAgLnRleHQoXCJTdGFydCBBbmltYXRpb25cIilcbiAgICAgIDtcblxuICAgIHN0ZXBwZXJDb250YWluZXJUb2dnbGVcbiAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN0ZXBwZXItaXRlbS1jb250YWluZXJcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAuZGF0YShbXCJzd2FybVwiLFwic3dhcm0tc2NhdHRlclwiLFwiYXJyb3ctc2NhdHRlclwiXSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKFwicFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgIHJldHVybiBcInN0ZXBwZXItaXRlbSBzdGVwcGVyLWl0ZW0tc2VsZWN0ZWRcIlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcInN0ZXBwZXItaXRlbVwiXG4gICAgICB9KVxuICAgICAgLnRleHQoZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgcmV0dXJuIGkrMTtcbiAgICAgIH0pXG4gICAgICAub24oXCJjbGlja1wiLGZ1bmN0aW9uKGQpe1xuICAgICAgICB2YXIgZGF0YVNlbGVjdGVkID0gZDtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMucGFyZW50Tm9kZSkuc2VsZWN0QWxsKFwicFwiKS5jbGFzc2VkKFwic3RlcHBlci1pdGVtLXNlbGVjdGVkXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoZD09ZGF0YVNlbGVjdGVkKXtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pXG4gICAgICAgIGN1cnJlbnRDaGFydCA9IGQ7XG4gICAgICAgIGJ1aWxkQ2hhcnQoZCk7XG4gICAgICB9KVxuICAgICAgO1xuICB9XG4gIGJ1aWxkU3RlcHBlcigpO1xuXG4gICAgLy8gZnVuY3Rpb24gc2VhcmNoU3BlY3RydW0oKXtcbiAgICAvL1xuICAgIC8vICAgdmFyIHNlYXJjaEFycmF5ID0gW107XG4gICAgLy8gICB2YXIgc2VhcmNoUmVzdWx0cyA9IGQzLnNlbGVjdEFsbChcIi5zZWFyY2gtcmVzdWx0c1wiKTtcbiAgICAvLyAgIHZhciBzZWFyY2hSZXN1bHRNb3VzZU92ZXIgPSBmYWxzZTtcbiAgICAvL1xuICAgIC8vICAgdmFyIHNlYXJjaElucHV0ID0gZDMuc2VsZWN0QWxsKFwiLnNlYXJjaC1maWxtc1wiKS5zZWxlY3QoXCJpbnB1dFwiKVxuICAgIC8vICAgICAgICAgLm9uKFwia2V5dXBcIiwga2V5dXBlZEZpbG1Db2x1bW4pO1xuICAgIC8vXG4gICAgLy8gICBmdW5jdGlvbiBrZXl1cGVkRmlsbUNvbHVtbigpIHtcbiAgICAvLyAgICAgc2VhcmNoRmlsbUNvbHVtbih0aGlzLnZhbHVlLnRyaW0oKSk7XG4gICAgLy8gICB9XG4gICAgLy9cbiAgICAvLyAgIGZ1bmN0aW9uIHNlYXJjaEZpbG1Db2x1bW4odmFsdWUpIHtcbiAgICAvLyAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDIpIHtcbiAgICAvLyAgICAgICBzZWFyY2hSZXN1bHRzLnN0eWxlKFwiZGlzcGxheVwiLFwiYmxvY2tcIik7XG4gICAgLy8gICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIlxcXFxiXCIgKyBkMy5yZXF1b3RlKHZhbHVlKSwgXCJpXCIpO1xuICAgIC8vICAgICAgIGdlbnJlU2VsZWN0ZWQgPSBcImFsbFwiO1xuICAgIC8vICAgICAgIHZhciBmaWx0ZXJlZFNwZWN0cnVtRGF0YSA9IHNwZWN0cnVtRGF0YS5maWx0ZXIoZnVuY3Rpb24oZCxpKXtcbiAgICAvLyAgICAgICAgIHZhciBzdHJpbmcgPSBkLmdlbnJlTGlzdDtcbiAgICAvLyAgICAgICAgIGlmKGdlbnJlU2VsZWN0ZWQgPT0gXCJhbGxcIiAmJiBzdGFnZSA9PSAzKXtcbiAgICAvLyAgICAgICAgICAgcmV0dXJuICtkLmdyb3NzID4gNDU7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgICAgICBlbHNlIGlmKGdlbnJlU2VsZWN0ZWQgPT1cImFsbFwiICYmIHN0YWdlID09IDIpe1xuICAgIC8vICAgICAgICAgICByZXR1cm4gZDtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIGVsc2UgaWYoc3RhZ2UgPT0gMyl7XG4gICAgLy8gICAgICAgICAgIHZhciBzdWJzdHJpbmcgPSBnZW5yZVNlbGVjdGVkO1xuICAgIC8vICAgICAgICAgICByZXR1cm4gK2QuZ3Jvc3MgPiA0NSAmJiBzdHJpbmcuaW5kZXhPZihzdWJzdHJpbmcpID4gLTE7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgICAgICByZXR1cm4gc3RyaW5nLmluZGV4T2Yoc3Vic3RyaW5nKSA+IC0xXG4gICAgLy8gICAgICAgfSlcbiAgICAvLyAgICAgICA7XG4gICAgLy9cbiAgICAvLyAgICAgICBzZWFyY2hBcnJheSA9IF8uZmlsdGVyKGZpbHRlcmVkU3BlY3RydW1EYXRhLCBmdW5jdGlvbihkLGkpIHtcbiAgICAvLyAgICAgICAgIHJldHVybiByZS50ZXN0KGRbXCJ0aXRsZVwiXSk7XG4gICAgLy8gICAgICAgfSlcbiAgICAvLyAgICAgICA7XG4gICAgLy9cbiAgICAvLyAgICAgICAvL1xuICAgIC8vICAgICAgIHZhciBzZWFyY2hEaXZEYXRhID0gc2VhcmNoUmVzdWx0cy5zZWxlY3RBbGwoXCJwXCIpXG4gICAgLy8gICAgICAgICAuZGF0YShzZWFyY2hBcnJheSwgZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgICAgICAgIHJldHVybiBkW1wiaW1kYl9pZFwiXTtcbiAgICAvLyAgICAgICAgIH0pXG4gICAgLy8gICAgICAgICA7XG4gICAgLy9cbiAgICAvLyAgICAgICB2YXIgc2VhcmNoRW50ZXIgPSBzZWFyY2hEaXZEYXRhXG4gICAgLy8gICAgICAgICAuZW50ZXIoKVxuICAgIC8vICAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAvLyAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInRrLWZ1dHVyYS1wdCBzZWFyY2gtcmVzdWx0XCIpXG4gICAgLy8gICAgICAgICAuaHRtbChmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgICAgICAgdmFyIGZpbmFsX3N0ciA9IGQudGl0bGUucmVwbGFjZShyZSwgZnVuY3Rpb24oc3RyKSB7cmV0dXJuICc8Yj48dT4nK3N0cisnPC91PjwvYj4nfSk7XG4gICAgLy8gICAgICAgICAgIHZhciBwZXJjZW50ID0gXCI8c3BhbiBjbGFzcz0nc2VhcmNoLXJlc3VsdC1wZXJjZW50Jz48c3BhbiBzdHlsZT0nY29sb3I6XCIrbWFsZUNvbG9yK1wiOyc+XCIrcGVyY2VudEZvcm1hdCgxLWQuZmVtYWxlX3BlcmNlbnQpK1wiPC9zcGFuPi88c3BhbiBzdHlsZT0nY29sb3I6XCIrZmVtYWxlQ29sb3IrXCI7Jz5cIitwZXJjZW50Rm9ybWF0KGQuZmVtYWxlX3BlcmNlbnQpK1wiPC9zcGFuPjwvc3Bhbj5cIjtcbiAgICAvLyAgICAgICAgICAgcmV0dXJuIGZpbmFsX3N0ciArIFwiIFwiICsgcGVyY2VudDtcbiAgICAvLyAgICAgICAgIH0pXG4gICAgLy8gICAgICAgICAub24oXCJjbGlja1wiLGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICAgICAgICBnZW5yZVNlbGVjdGVkID0gXCJhbGxcIjtcbiAgICAvLyAgICAgICAgICAgdXBkYXRlU3BlY3RydW1TZWFyY2goZCk7XG4gICAgLy8gICAgICAgICAgIGQzLnNlbGVjdEFsbChcIi5maWx0ZXItaXRlbS1zcGVjdHJ1bVwiKS5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIixudWxsKS5zdHlsZShcImJveC1zaGFkb3dcIixudWxsKS5zdHlsZShcImJvcmRlci1jb2xvclwiLG51bGwpLnN0eWxlKFwiZm9udC13ZWlnaHRcIixudWxsKTtcbiAgICAvLyAgICAgICAgICAgZDMuc2VsZWN0KFwiLmZpbHRlci1pdGVtLXNwZWN0cnVtXCIpLnN0eWxlKFwiYmFja2dyb3VuZC1jb2xvclwiLFwiI0Y1RjVGNVwiKS5zdHlsZShcImJveC1zaGFkb3dcIixcImluc2V0IDAgM3B4IDVweCByZ2JhKDAsMCwwLC4xMjUpXCIpLnN0eWxlKFwiYm9yZGVyLWNvbG9yXCIsXCIjYWRhZGFkXCIpLnN0eWxlKFwiZm9udC13ZWlnaHRcIixcIjUwMFwiKTtcbiAgICAvLyAgICAgICAgICAgaWYobW9iaWxlKXtcbiAgICAvLyAgICAgICAgICAgICBzZWFyY2hSZXN1bHRzLnN0eWxlKFwiZGlzcGxheVwiLFwibm9uZVwiKTtcbiAgICAvLyAgICAgICAgICAgfVxuICAgIC8vICAgICAgICAgfSlcbiAgICAvLyAgICAgICAgIDtcbiAgICAvL1xuICAgIC8vICAgICAgIHNlYXJjaERpdkRhdGEuZXhpdCgpLnJlbW92ZSgpO1xuICAgIC8vXG4gICAgLy9cbiAgICAvLyAgICAgfSBlbHNle1xuICAgIC8vICAgICAgIHNlYXJjaFJlc3VsdHMuc3R5bGUoXCJkaXNwbGF5XCIsXCJub25lXCIpO1xuICAgIC8vICAgICB9XG4gICAgLy9cbiAgICAvLyAgIH07XG4gICAgLy8gfVxuICAgIC8vXG4gICAgLy8gc2VhcmNoU3BlY3RydW0oKTtcblxuICAgIHZhciBzZWFyY2hEaXYgPSBjaGFydFRvcFNlY3Rpb24uYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1zZWFyY2gtZGl2XCIpXG5cbiAgICBzZWFyY2hEaXZcbiAgICAgIC5hcHBlbmQoXCJpbnB1dFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtc2VhcmNoXCIpXG4gICAgICAuYXR0cihcInBsYWNlaG9sZGVyXCIsXCJGaW5kIGEgTmV3c3Jvb21cIilcbiAgICAgIDtcblxuICAgIHNlYXJjaERpdlxuICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtc2VhcmNoLXJlc3VsdHNcIik7XG5cbiAgdmFyIHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFsuMiwuOF0pLnJhbmdlKFswLHdpZHRoXSk7XG4gIHZhciB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwuMV0pLnJhbmdlKFtoZWlnaHQsMF0pO1xuXG4gIHZhciBjaGFydERpdkNvbnRhaW5lciA9IGNvbnRhaW5lclxuICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1jb250YWluZXJcIilcbiAgICAuc3R5bGUoXCJ3aWR0aFwiLHdpZHRoK21hcmdpbi5sZWZ0K21hcmdpbi5yaWdodCtcInB4XCIpXG5cbiAgdmFyIGNoYXJ0VG9vbFRpcCA9IGNoYXJ0RGl2Q29udGFpbmVyXG4gICAgLmFwcGVuZChcImRpdlwiKVxuICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXRvb2wtdGlwXCIpXG4gICAgLnN0eWxlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQrXCJweFwiICsgXCIsXCIgKyBtYXJnaW4udG9wK1wicHhcIiArIFwiKVwiKVxuICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgcmV0dXJuIGQ7XG4gICAgfSlcbiAgICA7XG5cbiAgdmFyIGNoYXJ0RGl2ID0gY2hhcnREaXZDb250YWluZXJcbiAgICAuYXBwZW5kKFwic3ZnXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtd3JhcHBlclwiKVxuICAgIC5hdHRyKFwid2lkdGhcIix3aWR0aCttYXJnaW4ubGVmdCttYXJnaW4ucmlnaHQpXG4gICAgLmF0dHIoXCJoZWlnaHRcIixoZWlnaHQrbWFyZ2luLnRvcCttYXJnaW4uYm90dG9tKVxuICAgIDtcblxuICB2YXIgZmlsdGVyZWRNYXBEYXRhID0gbWFwRGF0YS5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgaWYoY3V0ID09IFwic3VwV2hpdGVcIiB8fCBjdXQgPT0gXCJzdXBHZW5kZXJcIil7XG4gICAgICByZXR1cm4gZC50b3RhbF9udW0gPiBjb3VudE1pbiAmJiBkLnRvdGFsX3N1cF9udW0gPiAwO1xuICAgIH1cbiAgICByZXR1cm4gZC50b3RhbF9udW0gPiBjb3VudE1pbjtcbiAgfSlcbiAgO1xuXG4gIHZhciB5ZWFyTmVzdCA9IGQzLm5lc3QoKVxuICAgIC5rZXkoZnVuY3Rpb24oZCl7XG4gICAgICByZXR1cm4gK2QuWWVhclxuICAgIH0pXG4gICAgLnJvbGx1cChmdW5jdGlvbihsZWF2ZXMpe1xuICAgICAgdmFyIGF2ZXJhZ2UgPSBnZXRBdmVyYWdlKGxlYXZlcyk7XG4gICAgICByZXR1cm4ge2F2ZXJhZ2U6YXZlcmFnZSx2YWx1ZXM6bGVhdmVzfTtcbiAgICB9KVxuXG4gICAgLmVudHJpZXMoZmlsdGVyZWRNYXBEYXRhKVxuICAgIDtcblxuICB2YXIgbWF4UGVyY2VudEFycmF5ID0gW107XG4gIHZhciBkaWZmQXJyYXkgPSBbXTtcbiAgdmFyIHJhY2VEaWZmQXJyYXkgPSBbXVxuICB2YXIgYXZlcmFnZUFycmF5ID0gW11cblxuICB2YXIgbmV3c05lc3QgPSBkMy5uZXN0KClcbiAgICAua2V5KGZ1bmN0aW9uKGQpe1xuICAgICAgcmV0dXJuICtkLk5ld3NJRFxuICAgIH0pXG4gICAgLnJvbGx1cChmdW5jdGlvbihsZWF2ZXMpe1xuICAgICAgdmFyIG1hcCA9IGQzLm1hcChsZWF2ZXMsZnVuY3Rpb24oZCl7cmV0dXJuIGQuWWVhcn0pO1xuICAgICAgdmFyIG1heFRvdGFsTnVtID0gZDMubWF4KGxlYXZlcyxmdW5jdGlvbihkKXtyZXR1cm4gZC50b3RhbF9udW19KTtcbiAgICAgIHZhciBtYXhQZXJjZW50ID0gZDMubWF4KGxlYXZlcyxmdW5jdGlvbihkKXsgcmV0dXJuIGdldFBlcmNlbnQoZCl9KTtcbiAgICAgIG1heFBlcmNlbnRBcnJheS5wdXNoKG1heFBlcmNlbnQpXG4gICAgICByZXR1cm4ge3llYXJNYXA6bWFwLHZhbHVlczpsZWF2ZXMsbWF4VG90YWw6bWF4VG90YWxOdW19XG4gICAgfSlcbiAgICAuZW50cmllcyhmaWx0ZXJlZE1hcERhdGEpXG4gICAgO1xuXG4gICAgbmV3c05lc3QgPSBuZXdzTmVzdC5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICBpZihkLnZhbHVlLnllYXJNYXAuaGFzKHllYXJTZWxlY3RlZCkgJiYgZC52YWx1ZS52YWx1ZXMubGVuZ3RoID4gMSl7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG5cbiAgICB2YXIgdG90YWxFeHRlbnQgPSBkMy5leHRlbnQobmV3c05lc3QsZnVuY3Rpb24oZCl7XG4gICAgICByZXR1cm4gK2QudmFsdWUueWVhck1hcC5nZXQoeWVhclNlbGVjdGVkKS50b3RhbF9udW07XG4gICAgfSlcbiAgICB2YXIgcmFkaXVzU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbih0b3RhbEV4dGVudCkucmFuZ2UoWzUsMzBdKTtcblxuICAgIGZvciAodmFyIGl0ZW0gaW4gbmV3c05lc3Qpe1xuXG4gICAgICB2YXIgY3VycmVudFN1cCA9IGdldFBlcmNlbnRUeXBlKFwic3VwR2VuZGVyXCIsbmV3c05lc3RbaXRlbV0udmFsdWUpXG4gICAgICB2YXIgY3VycmVudFllYXIgPSBnZXRQZXJjZW50KG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnllYXJNYXAuZ2V0KHllYXJTZWxlY3RlZCkpO1xuICAgICAgdmFyIHByZXZpb3VzWWVhciA9IGdldFBlcmNlbnQobmV3c05lc3RbaXRlbV0udmFsdWUudmFsdWVzLmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgICAgaWYoY3V0PT1cImdlbmRlclwiKXtcbiAgICAgICAgICByZXR1cm4gK2QuWWVhciA+IDIwMDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgICB9KVswXSk7XG4gICAgICB2YXIgZGlmZiA9IGN1cnJlbnRZZWFyLXByZXZpb3VzWWVhcjtcbiAgICAgIGN1dCA9IFwic3VwR2VuZGVyXCI7XG4gICAgICB2YXIgcmFjZURpZmYgPSBnZXRQZXJjZW50KG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnllYXJNYXAuZ2V0KHllYXJTZWxlY3RlZCkpLWdldFBlcmNlbnQobmV3c05lc3RbaXRlbV0udmFsdWUudmFsdWVzWzBdKTtcbiAgICAgIGN1dCA9IFwiZ2VuZGVyXCJcbiAgICAgIGRpZmZBcnJheS5wdXNoKGRpZmYpO1xuICAgICAgcmFjZURpZmZBcnJheS5wdXNoKHJhY2VEaWZmKTtcblxuICAgICAgdmFyIGNvbXBhbnlEYXRhID0gbmV3c0lETmFtZS5nZXQobmV3c05lc3RbaXRlbV0ua2V5KTtcbiAgICAgIHZhciBjaXR5U3RhdGUgPSBjb21wYW55RGF0YS5DaXR5K1wiIFwiK2NvbXBhbnlEYXRhLlN0YXRlO1xuXG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5jb21wYW55TmFtZSA9IGNvbXBhbnlEYXRhLkNvbXBhbnlcbiAgICAgIHZhciB3aGl0ZUNlbnN1cyA9IC45O1xuICAgICAgaWYoY2Vuc3VzTWFwLmhhcyhjaXR5U3RhdGUpKXtcbiAgICAgICAgd2hpdGVDZW5zdXMgPSArY2Vuc3VzTWFwLmdldChjaXR5U3RhdGUpLndoaXRlXzIwMTUvMTAwO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhuZXdzTmVzdFtpdGVtXS52YWx1ZS5jb21wYW55TmFtZSxuZXdzTmVzdFtpdGVtXS5rZXksY2l0eVN0YXRlKTtcbiAgICAgIH1cbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLndoaXRlQ2Vuc3VzID0gd2hpdGVDZW5zdXM7XG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS53aGl0ZURlbHRhID0gZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsbmV3c05lc3RbaXRlbV0udmFsdWUpXG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5kaWZmID0gZGlmZjtcbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnJhY2VEaWZmID0gcmFjZURpZmY7XG4gICAgICB2YXIgdG90YWxDb3VudCA9ICtuZXdzTmVzdFtpdGVtXS52YWx1ZS55ZWFyTWFwLmdldCh5ZWFyU2VsZWN0ZWQpLnRvdGFsX251bTtcbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnJhZGl1cyA9IHJhZGl1c1NjYWxlKHRvdGFsQ291bnQpO1xuICAgICAgbmV3c05lc3RbaXRlbV0udmFsdWUuY3VycmVudFllYXIgPSBjdXJyZW50WWVhcjtcbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnByZXZpb3VzWWVhciA9IHByZXZpb3VzWWVhcjtcbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLmN1cnJlbnRTdXAgPSBjdXJyZW50U3VwO1xuXG4gICAgICAvLyBuZXdzTmVzdFtpdGVtXS50b3AzRGF0YSA9IHRvcDNNYXAuZ2V0KG5ld3NOZXN0W2l0ZW1dLmNvbXBhbnlOYW1lKTtcbiAgICB9XG4gICAgO1xuXG4gIHZhciBuZXdzTmVzdEF2ZXJhZ2VUMCA9IGQzLm1lYW4obmV3c05lc3QsZnVuY3Rpb24oZCl7IHJldHVybiBkLnZhbHVlLnByZXZpb3VzWWVhcjt9KTtcbiAgdmFyIG5ld3NOZXN0QXZlcmFnZVQxID0gZDMubWVhbihuZXdzTmVzdCxmdW5jdGlvbihkKXsgcmV0dXJuIGQudmFsdWUuY3VycmVudFllYXI7fSk7XG4gIHZhciBuZXdzTmVzdFN1cEF2ZXJhZ2VUMSA9IGQzLm1lYW4obmV3c05lc3QsZnVuY3Rpb24oZCl7IHJldHVybiBkLnZhbHVlLmN1cnJlbnRTdXA7fSk7XG5cbiAgdmFyIG5ld3NNYXAgPSBkMy5tYXAobmV3c05lc3QsZnVuY3Rpb24oZCl7cmV0dXJuIGQua2V5fSk7XG5cbiAgdmFyIGRpZmZFeHRlbnQgPSBkMy5leHRlbnQoZGlmZkFycmF5LGZ1bmN0aW9uKGQpe3JldHVybiBkOyB9KTtcbiAgdmFyIGNvbG9yU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihkaWZmRXh0ZW50KS5yYW5nZShbXCJncmVlblwiLFwicmVkXCJdKTtcbiAgdmFyIGdlbmRlckNvbG9yU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbLjIsLjUsLjhdKS5yYW5nZShbXCIjMjE2MWZhXCIsXCIjZGRkZGRkXCIsXCIjZmYzMzMzXCJdKTtcbiAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICBnZW5kZXJDb2xvclNjYWxlLmRvbWFpbihbMCwuNSwxXSk7XG4gIH1cblxuICB2YXIgY2VsbDtcbiAgdmFyIGNlbGxDaXJjbGU7XG4gIHZhciBjZWxsSW1hZ2VzO1xuXG4gIHZhciBjaGFydEF4aXMgPSBjaGFydERpdi5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXNcIilcbiAgICA7XG5cbiAgdmFyIGNoYXJ0RyA9IGNoYXJ0RGl2XG4gICAgLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG4gIHZhciBkdXJhdGlvbiA9IDc1MDtcblxuICBmdW5jdGlvbiBidWlsZENoYXJ0KGNoYXJ0VHlwZSl7XG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VUaXRsZSgpe1xuICAgICAgdmFyIHRpdGxlID0gXCJOZXdzcm9vbXMgQnJva2VuLWRvd24gYnkgR2VuZGVyXCI7XG4gICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgdmFyIHRpdGxlID0gXCJXaGl0ZS9Ob24tV2hpdGUgQnJlYWtkb3duIG9mIE5ld3Nyb29tcyB2cy4gQ2l0eVwiO1xuICAgICAgfVxuICAgICAgaWYoY2hhcnRUeXBlID09IFwic3dhcm0tc2NhdHRlclwiKXtcbiAgICAgICAgdGl0bGUgPSBcIkdlbmRlciBCcmVhay1kb3duIG9mIFN0YWZmIHZzLiBMZWFkZXJzXCI7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKGNoYXJ0VHlwZSA9PSBcImFycm93LXNjYXR0ZXJcIil7XG4gICAgICAgIHRpdGxlID0gXCJDaGFuZ2UgaW4gR2VuZGVyIEJyZWFrLWRvd24gZnJvbSAyMDAyIC0gMjAxN1wiXG4gICAgICB9XG4gICAgICBjaGFydFRpdGxlLnRleHQodGl0bGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRXaWR0aHMoY2hhcnRUeXBlKXtcbiAgICAgIGlmKGNoYXJ0VHlwZSA9PSBcInN3YXJtXCIpe1xuICAgICAgICAvLyBtYXJnaW4gPSB7dG9wOiA0MCwgcmlnaHQ6IDEwMCwgYm90dG9tOiAyMCwgbGVmdDogMTAwfTtcbiAgICAgICAgd2lkdGggPSAxMDAwIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgICAgIGhlaWdodCA9IDI1MCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgIHhTY2FsZS5kb21haW4oWy0xLDFdKTtcbiAgICAgICAgICBuZXdzTmVzdEF2ZXJhZ2VUMSA9IGQzLm1lYW4obmV3c05lc3QsZnVuY3Rpb24oZCl7IHJldHVybiBkLnZhbHVlLndoaXRlRGVsdGE7fSk7XG4gICAgICAgICAgZ2VuZGVyQ29sb3JTY2FsZS5kb21haW4oWy0xLDAsMV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoY3V0ID09IFwiZ2VuZGVyXCIpe1xuICAgICAgICAgIG5ld3NOZXN0QXZlcmFnZVQxID0gZDMubWVhbihuZXdzTmVzdCxmdW5jdGlvbihkKXsgcmV0dXJuIGQudmFsdWUuY3VycmVudFllYXI7fSk7XG4gICAgICAgICAgeFNjYWxlLmRvbWFpbihbLjIsLjhdKTtcbiAgICAgICAgICBnZW5kZXJDb2xvclNjYWxlLmRvbWFpbihbLjIsLjUsLjhdKTtcblxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZihjaGFydFR5cGUgPT0gXCJzd2FybS1zY2F0dGVyXCIpe1xuICAgICAgICAvLyBtYXJnaW4gPSB7dG9wOiA0MCwgcmlnaHQ6IDEwMCwgYm90dG9tOiAyMCwgbGVmdDogMTAwfTtcbiAgICAgICAgd2lkdGggPSA4MDAgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgICAgICAgaGVpZ2h0ID0gNTAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gICAgICAgIHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFsuMiwuOF0pLnJhbmdlKFswLHdpZHRoXSkuY2xhbXAodHJ1ZSk7XG4gICAgICAgIHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFsuMiwuOF0pLnJhbmdlKFtoZWlnaHQsMF0pLmNsYW1wKHRydWUpO1xuICAgICAgICBuZXdzTmVzdEF2ZXJhZ2VUMSA9IGQzLm1lYW4obmV3c05lc3QsZnVuY3Rpb24oZCl7IHJldHVybiBkLnZhbHVlLmN1cnJlbnRZZWFyO30pO1xuICAgICAgfVxuXG4gICAgICBjaGFydERpdkNvbnRhaW5lclxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgLmRlbGF5KGR1cmF0aW9uKVxuICAgICAgICAuc3R5bGUoXCJ3aWR0aFwiLHdpZHRoK21hcmdpbi5sZWZ0K21hcmdpbi5yaWdodCtcInB4XCIpXG5cbiAgICAgIGNoYXJ0VG9vbFRpcFxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gICAgICAgIDtcblxuICAgICAgY2hhcnREaXZcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsaGVpZ2h0K21hcmdpbi50b3ArbWFyZ2luLmJvdHRvbSlcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIix3aWR0aCttYXJnaW4udG9wK21hcmdpbi5ib3R0b20pXG4gICAgICAgIDtcblxuICAgICAgY2hhcnRHXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAgICAgY2hhcnRBeGlzXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAgIH1cbiAgICBjaGFuZ2VUaXRsZSgpO1xuICAgIGlmKGNoYXJ0VHlwZSE9XCJuZXdcIil7XG4gICAgICBzZXRXaWR0aHMoY2hhcnRUeXBlKTtcbiAgICB9XG5cblxuICAgIGlmKGNoYXJ0VHlwZSA9PSBcInN3YXJtLXNjYXR0ZXJcIil7XG5cbiAgICAgIGNlbGxDaXJjbGVcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIGRhdGEgPSBkO1xuICAgICAgICAgIGNoYXJ0VG9vbFRpcFxuICAgICAgICAgICAgLnN0eWxlKFwidmlzaWJpbGl0eVwiLFwidmlzaWJsZVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIHlTY2FsZShnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGRhdGEudmFsdWUpKSArIG1vdXNlb3Zlck9mZnNldFkgK1wicHhcIilcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIix4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkYXRhLnZhbHVlKSkgKyBkYXRhLnZhbHVlLnJhZGl1cyArIG1vdXNlb3Zlck9mZnNldFggK1wicHhcIilcbiAgICAgICAgICAgIC50ZXh0KGQudmFsdWUuY29tcGFueU5hbWUrXCIgLSBcIitNYXRoLmZsb29yKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkqMTAwKStcIiVcIik7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBjaGFydFRvb2xUaXBcbiAgICAgICAgICAgIC5zdHlsZShcInZpc2liaWxpdHlcIixudWxsKVxuICAgICAgICAgICAgLnRleHQoXCJcIilcbiAgICAgICAgICAgIDtcbiAgICAgICAgfSlcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5kZWxheShmdW5jdGlvbihkLGkpe1xuICAgICAgICAgIHJldHVybiBpKjEwO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkpO1xuICAgICAgICAgIC8vIHJldHVybiBkaWZmU2NhbGUoZC52YWx1ZS5kaWZmKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIHlTY2FsZShnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGQudmFsdWUpKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLG51bGwpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZVwiLG51bGwpXG4gICAgICAgIDtcblxuICAgICAgY2VsbEltYWdlc1xuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkpICsgXCIsXCIgKyB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJzdXBHZW5kZXJcIixkLnZhbHVlKSkgKyBcIilcIlxuICAgICAgICB9KTtcbiAgICAgICAgO1xuXG4gICAgICBjaGFydEF4aXNcbiAgICAgICAgLnNlbGVjdChcImdcIilcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oMjUwKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsMClcbiAgICAgICAgLm9uKFwiZW5kXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICAgIGJ1aWxkQXhpcygpO1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXhpcygpe1xuXG4gICAgICAgIHZhciBjaGFydEF4aXNDb250YWluZXIgPSBjaGFydEF4aXMuYXBwZW5kKFwiZ1wiKVxuXG4gICAgICAgIHZhciBjaGFydEF4aXNMaW5lcyA9IGNoYXJ0QXhpc0NvbnRhaW5lci5hcHBlbmQoXCJnXCIpXG5cbiAgICAgICAgY2hhcnRBeGlzTGluZXMuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgLmF0dHIoXCJ4MVwiLHdpZHRoLzIpXG4gICAgICAgICAuYXR0cihcIngyXCIsd2lkdGgvMilcbiAgICAgICAgIC5hdHRyKFwieTFcIiwwKVxuICAgICAgICAgLmF0dHIoXCJ5MlwiLGhlaWdodClcbiAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtbGluZVwiKVxuXG4gICAgICAgIGNoYXJ0QXhpc0xpbmVzLmFwcGVuZChcImdcIilcbiAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgIC5hdHRyKFwieDFcIiwwKVxuICAgICAgICAgIC5hdHRyKFwieDJcIix3aWR0aClcbiAgICAgICAgICAuYXR0cihcInkxXCIsaGVpZ2h0LzIpXG4gICAgICAgICAgLmF0dHIoXCJ5MlwiLGhlaWdodC8yKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtbGluZVwiKVxuXG4gICAgICAgIHZhciBjaGFydEF4aXNUZXh0ID0gY2hhcnRBeGlzQ29udGFpbmVyLmFwcGVuZChcImdcIilcblxuICAgICAgICBjaGFydEF4aXNUZXh0XG4gICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgIC5kYXRhKFtcIjEwMCUgRmVtYWxlIExlYWRlcnNcIixcIjEwMCUgTWFsZSBMZWFkZXJzXCJdKVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAuYXR0cihcInhcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgcmV0dXJuIHdpZHRoLzI7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cihcInlcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhlaWdodFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy10aWNrLXRleHRcIilcbiAgICAgICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgcmV0dXJuIFwibWlkZGxlXCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdHlsZShcImRvbWluYW50LWJhc2VsaW5lXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgIGlmKGk9PTEpe1xuICAgICAgICAgICAgICByZXR1cm4gXCJ0ZXh0LWJlZm9yZS1lZGdlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJ0ZXh0LWFmdGVyLWVkZ2VcIlxuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG4gICAgICAgIGNoYXJ0QXhpc1RleHRcbiAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgIC5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgICAgICAgLmRhdGEoW1wiMTAwJSBNYWxlIFN0YWZmXCIsXCIxMDAlIEZlbWFsZSBTdGFmZlwiXSlcbiAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdpZHRoXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cihcInlcIixoZWlnaHQvMilcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsMTAwKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsMzIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy10aWNrLXJlY3RcIilcbiAgICAgICAgICAuc3R5bGUoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgaWYoaT09MSl7XG4gICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZSgtMTAwJSwwKVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIC8vIHJldHVybiBcInRyYW5zbGF0ZSgxMDAlLDApXCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIDtcblxuICAgICAgICBjaGFydEF4aXNUZXh0XG4gICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgIC5kYXRhKFtcIjEwMCUgTWFsZSBTdGFmZlwiLFwiMTAwJSBGZW1hbGUgU3RhZmZcIl0pXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3aWR0aFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsaGVpZ2h0LzIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy10aWNrLXRleHRcIilcbiAgICAgICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICAgIHJldHVybiBcInN0YXJ0XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJlbmRcIlxuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZEF2ZXJhZ2UoKXtcblxuICAgICAgICAgIGNoYXJ0RGl2LnNlbGVjdChcIi5zd2FybS1hdmVyYWdlXCIpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgdmFyIGNoYXJ0QXZlcmFnZSA9IGNoYXJ0RGl2LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZVwiKVxuICAgICAgICAgICAgIDtcblxuICAgICAgICAgY2hhcnRBdmVyYWdlLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaXJjbGUgc3dhcm0tY2lyY2xlLWF2ZXJhZ2VcIilcbiAgICAgICAgICAgLmF0dHIoXCJjeFwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgIC5hdHRyKFwiY3lcIix5U2NhbGUobmV3c05lc3RTdXBBdmVyYWdlVDEpKVxuICAgICAgICAgICAuYXR0cihcInJcIiw4KVxuICAgICAgICAgICA7XG5cbiAgICAgICAgIGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF2ZXJhZ2UtdGV4dCBzd2FybS1hdmVyYWdlLXRleHQtbGFiZWxcIilcbiAgICAgICAgICAgLmF0dHIoXCJ4XCIseFNjYWxlKG5ld3NOZXN0QXZlcmFnZVQxKSlcbiAgICAgICAgICAgLmF0dHIoXCJ5XCIseVNjYWxlKG5ld3NOZXN0U3VwQXZlcmFnZVQxKSAtIDI2KVxuICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsXCJibGFja1wiKVxuICAgICAgICAgICAudGV4dChcIk92ZXJhbGxcIilcblxuICAgICAgICAgIGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLXRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgICAuYXR0cihcInlcIix5U2NhbGUobmV3c05lc3RTdXBBdmVyYWdlVDEpIC0gMTQpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKCgxLW5ld3NOZXN0U3VwQXZlcmFnZVQxKSoxMDApK1wiJSBXaGl0ZVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKDEtbmV3c05lc3RTdXBBdmVyYWdlVDEpKjEwMCkrXCIlIE1hbGVcIlxuICAgICAgICAgICAgfSlcblxuICAgICAgfVxuICAgICAgYnVpbGRBdmVyYWdlKCk7XG5cbiAgICB9XG4gICAgaWYoY2hhcnRUeXBlID09IFwic3dhcm1cIil7XG5cbiAgICAgIHZhciBmb3JjZUNvbGxpZGUgPSBkMy5mb3JjZUNvbGxpZGUoKVxuICAgICAgICAgIC5yYWRpdXMoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC52YWx1ZS5yYWRpdXMgKyAxOyB9KVxuICAgICAgICAgIC5pdGVyYXRpb25zKDEpO1xuXG4gICAgICB2YXIgc2ltdWxhdGlvbiA9IGQzLmZvcmNlU2ltdWxhdGlvbihuZXdzTmVzdClcbiAgICAgICAgICAuZm9yY2UoXCJ4XCIsIGQzLmZvcmNlWChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKGN1dCxkLnZhbHVlKSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3RyZW5ndGgoMSkpXG4gICAgICAgICAgLmZvcmNlKFwieVwiLCBkMy5mb3JjZVkoaGVpZ2h0IC8gMikpXG4gICAgICAgICAgLmZvcmNlKFwiY29sbGlkZVwiLCBmb3JjZUNvbGxpZGUpXG4gICAgICAgICAgLnN0b3AoKVxuICAgICAgICAgIDtcblxuICAgICAgY2hhcnRBeGlzXG4gICAgICAgIC5zZWxlY3QoXCJnXCIpXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDApXG4gICAgICAgIC5vbihcImVuZFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICBidWlsZEF4aXMoKTtcbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICBmdW5jdGlvbiBidWlsZEF4aXMoKXtcblxuICAgICAgICAgIHZhciBjaGFydEF4aXNDb250YWluZXIgPSBjaGFydEF4aXMuYXBwZW5kKFwiZ1wiKVxuXG4gICAgICAgICAgdmFyIHRpY2tEYXRhID0gWy4yLC4zLC41LC43LC44XTtcbiAgICAgICAgICB2YXIgbWlkUG9pbnQgPSAuNVxuICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICB0aWNrRGF0YSA9IFstMSwtLjUsLS4yNSwwLC4yNSwxXTtcbiAgICAgICAgICAgIG1pZFBvaW50ID0gMFxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB0aWNrcyA9IGNoYXJ0QXhpc0NvbnRhaW5lclxuICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtdGljay1jb250YWluZXJcIilcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gICAgICAgICAgICAuZGF0YSh0aWNrRGF0YSlcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy10aWNrLWdcIilcbiAgICAgICAgICAgIDtcblxuICAgICAgICAgIHRpY2tzXG4gICAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgIGlmKGQ9PW1pZFBvaW50KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIjODg4XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGdlbmRlckNvbG9yU2NhbGUoZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICByZXR1cm4geFNjYWxlKGQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgICAgaWYoZD09bWlkUG9pbnQpe1xuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQvMjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgaWYoZD09bWlkUG9pbnQpe1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBoZWlnaHQqLjA1O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtdGlja1wiKVxuXG4gICAgICAgICAgdGlja3NcbiAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcInlcIiwtOSlcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtdGljay10ZXh0XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgICAgIHJldHVybiBcInN0YXJ0XCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihpPT10aWNrRGF0YS5sZW5ndGgtMSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZW5kXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgICBpZihkPT1taWRQb2ludCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiIzg4OFwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBnZW5kZXJDb2xvclNjYWxlKGQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCJNb3JlIFdoaXRlIHZzLiBDaXR5IENlbnN1c1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxLWQpKjEwMCkrXCIlIE1hbGUgU3RhZmZcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGk9PXRpY2tEYXRhLmxlbmd0aC0xKXtcbiAgICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTW9yZSBQZW9wbGUgb2YgQ29sb3IgdnMuIENpdHkgQ2Vuc3VzXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZCoxMDApK1wiJSBGZW1hbGUgU3RhZmZcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGQ9PW1pZFBvaW50KXtcbiAgICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiUGFyaXR5IHdpdGggQ2l0eVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBcIjUwLzUwICBTcGxpdFwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGQ8bWlkUG9pbnQpe1xuICAgICAgICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIrXCIrTWF0aC5mbG9vcihNYXRoLmFicyhkKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMS1kKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiK1wiK01hdGguZmxvb3IoTWF0aC5hYnMoZCkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgO1xuXG4gICAgICAgICAgY2hhcnRBeGlzQ29udGFpbmVyLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsMClcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIix3aWR0aClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIixoZWlnaHQvMilcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIixoZWlnaHQvMilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtbGluZVwiKVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1MDsgKytpKSBzaW11bGF0aW9uLnRpY2soKTtcblxuICAgICAgY2VsbENpcmNsZVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJzdHJva2VcIixcImJsYWNrXCIpO1xuICAgICAgICAgIHZhciBkYXRhID0gZDtcbiAgICAgICAgICBjaGFydFRvb2xUaXBcbiAgICAgICAgICAgIC5zdHlsZShcInZpc2liaWxpdHlcIixcInZpc2libGVcIilcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLGRhdGEueSArIG1vdXNlb3Zlck9mZnNldFkgK1wicHhcIilcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIixkYXRhLnggKyBkYXRhLnZhbHVlLnJhZGl1cyArIG1vdXNlb3Zlck9mZnNldFggK1wicHhcIilcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgICAgdmFyIHJhY2VWYWx1ZSA9IGdldFBlcmNlbnRUeXBlKFwicmFjZVJhd1wiLGQudmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmKHJhY2VWYWx1ZSA8IC41KXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBkLnZhbHVlLmNvbXBhbnlOYW1lK1wiIC0gXCIrTWF0aC5mbG9vcigoMS1yYWNlVmFsdWUpKjEwMCkrXCIlIFdoaXRlLiBDaXR5IC0gXCIrTWF0aC5mbG9vcihkLnZhbHVlLndoaXRlQ2Vuc3VzKjEwMCkrXCIlIFdoaXRlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkLnZhbHVlLmNvbXBhbnlOYW1lK1wiIC0gXCIrTWF0aC5mbG9vcigocmFjZVZhbHVlKSoxMDApK1wiJSBOb24td2hpdGUuIENpdHkgLSBcIitNYXRoLmZsb29yKCgxLWQudmFsdWUud2hpdGVDZW5zdXMpKjEwMCkrXCIlIE5vbi13aGl0ZVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGQudmFsdWUuY29tcGFueU5hbWUrXCIgLSBcIitNYXRoLmZsb29yKGdldFBlcmNlbnRUeXBlKGN1dCxkLnZhbHVlKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBnZXRQZXJjZW50VHlwZShjdXQsZC52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZDMuY29sb3IoZ2VuZGVyQ29sb3JTY2FsZSh2YWx1ZSkpLmRhcmtlcigxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGFydFRvb2xUaXBcbiAgICAgICAgICAgIC5zdHlsZShcInZpc2liaWxpdHlcIixudWxsKVxuICAgICAgICAgICAgLnRleHQoXCJcIilcbiAgICAgICAgICAgIDtcbiAgICAgICAgfSlcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSlcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGdldFBlcmNlbnRUeXBlKGN1dCxkLnZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gZ2VuZGVyQ29sb3JTY2FsZSh2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yU2NhbGUobmV3c01hcC5nZXQoZC5OZXdzSUQpLnZhbHVlLmRpZmYpO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBnZXRQZXJjZW50VHlwZShjdXQsZC52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGQzLmNvbG9yKGdlbmRlckNvbG9yU2NhbGUodmFsdWUpKS5kYXJrZXIoMSk7XG4gICAgICAgIH0pXG4gICAgICAgIDtcblxuICAgICAgY2VsbEltYWdlc1xuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIlxuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXZlcmFnZSgpe1xuXG4gICAgICAgICAgY2hhcnREaXYuc2VsZWN0KFwiLnN3YXJtLWF2ZXJhZ2VcIikucmVtb3ZlKCk7XG5cbiAgICAgICAgICB2YXIgY2hhcnRBdmVyYWdlID0gY2hhcnREaXYuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIilcbiAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlXCIpXG4gICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDApXG4gICAgICAgICAgICAgO1xuXG4gICAgICAgICBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLXRleHQgc3dhcm0tYXZlcmFnZS10ZXh0LWxhYmVsXCIpXG4gICAgICAgICAgIC5hdHRyKFwieFwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgIC5hdHRyKFwieVwiLGhlaWdodCouMi0yMilcbiAgICAgICAgICAgLnRleHQoXCJPdmVyYWxsXCIpXG5cbiAgICAgICAgY2hhcnRBdmVyYWdlLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLXRleHRcIilcbiAgICAgICAgICAuYXR0cihcInhcIix4U2NhbGUobmV3c05lc3RBdmVyYWdlVDEpKVxuICAgICAgICAgIC5hdHRyKFwieVwiLGhlaWdodCouMi03KVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoTWF0aC5hYnMobmV3c05lc3RBdmVyYWdlVDEpKSoxMDApK1wiJSBNb3JlIFdoaXRlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKCgxLW5ld3NOZXN0QXZlcmFnZVQxKSoxMDApK1wiJSBNYWxlXCJcbiAgICAgICAgICB9KVxuXG4gICAgICAgIGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZS1saW5lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4MVwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgLmF0dHIoXCJ4MlwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgLmF0dHIoXCJ5MVwiLGhlaWdodCouMilcbiAgICAgICAgICAuYXR0cihcInkyXCIsaGVpZ2h0Ki44KVxuICAgICAgICAgIDtcblxuICAgICAgICBjaGFydEF2ZXJhZ2UudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKS5kZWxheShkdXJhdGlvbikuc3R5bGUoXCJvcGFjaXR5XCIsMSlcblxuICAgICAgfVxuICAgICAgYnVpbGRBdmVyYWdlKCk7XG5cbiAgICB9XG4gICAgaWYoY2hhcnRUeXBlID09IFwibmV3XCIpe1xuXG4gICAgICB2YXIgZm9yY2VDb2xsaWRlID0gZDMuZm9yY2VDb2xsaWRlKClcbiAgICAgICAgICAucmFkaXVzKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudmFsdWUucmFkaXVzICsgMTsgfSlcbiAgICAgICAgICAuaXRlcmF0aW9ucygxKTtcblxuICAgICAgdmFyIHNpbXVsYXRpb24gPSBkMy5mb3JjZVNpbXVsYXRpb24obmV3c05lc3QpXG4gICAgICAgICAgLmZvcmNlKFwieFwiLCBkMy5mb3JjZVgoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdHJlbmd0aCgxKSlcbiAgICAgICAgICAuZm9yY2UoXCJ5XCIsIGQzLmZvcmNlWShoZWlnaHQgLyAyKSlcbiAgICAgICAgICAuZm9yY2UoXCJjb2xsaWRlXCIsIGZvcmNlQ29sbGlkZSlcbiAgICAgICAgICAuc3RvcCgpXG4gICAgICAgICAgO1xuXG4gICAgICBmdW5jdGlvbiBidWlsZEF4aXMoKXtcblxuICAgICAgIHZhciBjaGFydEF4aXNDb250YWluZXIgPSBjaGFydEF4aXMuYXBwZW5kKFwiZ1wiKVxuXG4gICAgICAgdmFyIHRpY2tEYXRhID0gWy4yLC4zLC41LC43LC44XTtcbiAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgdGlja0RhdGEgPSBbMCwuMywuNSwuNywxXTtcbiAgICAgICB9XG5cbiAgICAgICB2YXIgdGlja3MgPSBjaGFydEF4aXNDb250YWluZXJcbiAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1heGlzLXRpY2stY29udGFpbmVyXCIpXG4gICAgICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgICAgLmRhdGEodGlja0RhdGEpXG4gICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtdGljay1nXCIpXG4gICAgICAgICA7XG5cbiAgICAgICAgdGlja3NcbiAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgaWYoZD09LjUpe1xuICAgICAgICAgICAgIHJldHVybiBcIiM4ODhcIjtcbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gZ2VuZGVyQ29sb3JTY2FsZShkKTtcbiAgICAgICAgIH0pXG4gICAgICAgICAuYXR0cihcIngxXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgIHJldHVybiB4U2NhbGUoZCk7XG4gICAgICAgICB9KVxuICAgICAgICAgLmF0dHIoXCJ4MlwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICByZXR1cm4geFNjYWxlKGQpO1xuICAgICAgICAgfSlcbiAgICAgICAgIC5hdHRyKFwieTFcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICBpZihkPT0uNSl7XG4gICAgICAgICAgICAgcmV0dXJuIGhlaWdodC8yO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICB9KVxuICAgICAgICAgLmF0dHIoXCJ5MlwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICBpZihkPT0uNSl7XG4gICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgcmV0dXJuIGhlaWdodCouMDU7XG4gICAgICAgICB9KVxuICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy10aWNrXCIpXG5cbiAgICAgICAgdGlja3NcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIHhTY2FsZShkKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsLTkpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtdGljay10ZXh0XCIpXG4gICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgIHJldHVybiBcInN0YXJ0XCJcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoaT09dGlja0RhdGEubGVuZ3RoLTEpe1xuICAgICAgICAgICAgcmV0dXJuIFwiZW5kXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgaWYoZD09LjUpe1xuICAgICAgICAgICAgcmV0dXJuIFwiIzg4OFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZ2VuZGVyQ29sb3JTY2FsZShkKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRleHQoZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxLWQpKjEwMCkrXCIlIFdoaXRlIFN0YWZmXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxLWQpKjEwMCkrXCIlIE1hbGUgU3RhZmZcIlxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihpPT10aWNrRGF0YS5sZW5ndGgtMSl7XG4gICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkKjEwMCkrXCIlIE5vbi1XaGl0ZSBTdGFmZlwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkKjEwMCkrXCIlIEZlbWFsZSBTdGFmZlwiXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGQ9PS41KXtcbiAgICAgICAgICAgIHJldHVybiBcIjUwLzUwICBTcGxpdFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihkPC41KXtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxLWQpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGQqMTAwKStcIiVcIjtcbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICAgY2hhcnRBeGlzQ29udGFpbmVyLmFwcGVuZChcImdcIilcbiAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAuYXR0cihcIngxXCIsMClcbiAgICAgICAgIC5hdHRyKFwieDJcIix3aWR0aClcbiAgICAgICAgIC5hdHRyKFwieTFcIixoZWlnaHQvMilcbiAgICAgICAgIC5hdHRyKFwieTJcIixoZWlnaHQvMilcbiAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtbGluZVwiKVxuICAgICAgfVxuICAgICAgYnVpbGRBeGlzKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXZlcmFnZSgpe1xuXG4gICAgICAgICAgY2hhcnREaXYuc2VsZWN0KFwiLnN3YXJtLWF2ZXJhZ2VcIikucmVtb3ZlKCk7XG5cbiAgICAgICAgICB2YXIgY2hhcnRBdmVyYWdlID0gY2hhcnREaXYuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIilcbiAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlXCIpXG4gICAgICAgICAgICAgO1xuXG4gICAgICAgICBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLXRleHQgc3dhcm0tYXZlcmFnZS10ZXh0LWxhYmVsXCIpXG4gICAgICAgICAgIC5hdHRyKFwieFwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgIC5hdHRyKFwieVwiLGhlaWdodCouMi0yMilcbiAgICAgICAgICAgLnRleHQoXCJPdmVyYWxsXCIpXG5cbiAgICAgICAgICBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZS10ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIix4U2NhbGUobmV3c05lc3RBdmVyYWdlVDEpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsaGVpZ2h0Ki4yLTcpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKCgxLW5ld3NOZXN0QXZlcmFnZVQxKSoxMDApK1wiJSBXaGl0ZVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKDEtbmV3c05lc3RBdmVyYWdlVDEpKjEwMCkrXCIlIE1hbGVcIlxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgIGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLWxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIix4U2NhbGUobmV3c05lc3RBdmVyYWdlVDEpKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsaGVpZ2h0Ki4yKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLGhlaWdodCouOClcbiAgICAgICAgICAgIDtcblxuICAgICAgfVxuICAgICAgYnVpbGRBdmVyYWdlKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjUwOyArK2kpIHNpbXVsYXRpb24udGljaygpO1xuXG4gICAgICBjZWxsID0gY2hhcnRHXG4gICAgICAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gICAgICAgIC5kYXRhKG5ld3NOZXN0KVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuc29ydChmdW5jdGlvbihhLGIpe1xuICAgICAgICAgIHJldHVybiBiLnZhbHVlLnJhZGl1cyAtIGEudmFsdWUucmFkaXVzO1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxDaXJjbGUgPSBjZWxsXG4gICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2lyY2xlXCIpXG4gICAgICAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5yYWRpdXNcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLng7IH0pXG4gICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55OyB9KVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJzdHJva2VcIixcImJsYWNrXCIpO1xuICAgICAgICAgIHZhciBkYXRhID0gZDtcbiAgICAgICAgICBjaGFydFRvb2xUaXBcbiAgICAgICAgICAgIC5zdHlsZShcInZpc2liaWxpdHlcIixcInZpc2libGVcIilcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLGRhdGEueSArIG1vdXNlb3Zlck9mZnNldFkgK1wicHhcIilcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIixkYXRhLnggKyBkYXRhLnZhbHVlLnJhZGl1cyArIG1vdXNlb3Zlck9mZnNldFggK1wicHhcIilcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHJldHVybiBkLnZhbHVlLmNvbXBhbnlOYW1lK1wiIC0gXCIrTWF0aC5mbG9vcihnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZDMuY29sb3IoZ2VuZGVyQ29sb3JTY2FsZSh2YWx1ZSkpLmRhcmtlcigxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGFydFRvb2xUaXBcbiAgICAgICAgICAgIC5zdHlsZShcInZpc2liaWxpdHlcIixudWxsKVxuICAgICAgICAgICAgLnRleHQoXCJcIilcbiAgICAgICAgICAgIDtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGdlbmRlckNvbG9yU2NhbGUodmFsdWUpO1xuICAgICAgICAgIHJldHVybiBjb2xvclNjYWxlKG5ld3NNYXAuZ2V0KGQuTmV3c0lEKS52YWx1ZS5kaWZmKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gZDMuY29sb3IoZ2VuZGVyQ29sb3JTY2FsZSh2YWx1ZSkpLmRhcmtlcigxKTtcbiAgICAgICAgICAvL3JldHVybiBkMy5jb2xvcihjb2xvclNjYWxlKG5ld3NNYXAuZ2V0KGQuTmV3c0lEKS52YWx1ZS5kaWZmKSkuZGFya2VyKDIpO1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxJbWFnZXMgPSBjZWxsXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIGQueSArIFwiKVwiO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1pbWFnZS1jb250YWluZXJcIilcbiAgICAgICAgO1xuXG4gICAgICBjZWxsSW1hZ2VzXG4gICAgICAgIC5hcHBlbmQoXCJpbWFnZVwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1pbWFnZVwiKVxuICAgICAgICAuYXR0cihcInhsaW5rOmhyZWZcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZihkLnZhbHVlLmNvbXBhbnlOYW1lID09IFwidGhlIG5ldyB5b3JrIHRpbWVzXCIpe1xuICAgICAgICAgICAgcmV0dXJuIFwiYXNzZXRzL255LXRpbWVzLWxvZ28uc3ZnXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZC52YWx1ZS5jb21wYW55TmFtZSA9PSBcInRoZSB3YWxsIHN0cmVldCBqb3VybmFsXCIpe1xuICAgICAgICAgICAgcmV0dXJuIFwiYXNzZXRzL3dzai1sb2dvLnN2Z1wiXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGQudmFsdWUuY29tcGFueU5hbWUgPT0gXCJsb3MgYW5nZWxlcyB0aW1lc1wiKXtcbiAgICAgICAgICAgIHJldHVybiBcImFzc2V0cy9sYS10aW1lcy1sb2dvLnBuZ1wiXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIGQudmFsdWUucmFkaXVzKjIqLjc7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIGQudmFsdWUucmFkaXVzKjIqLjc7XG4gICAgICAgIH0pXG4gICAgICAgIDtcbiAgICB9XG4gIH1cblxuICBidWlsZENoYXJ0KFwibmV3XCIpO1xuXG4gIHZhciBmb290ZXJDb250YWluZXIgPSBjb250YWluZXIuYXBwZW5kKFwiZGl2XCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwiZm9vdGVyLWNvbnRhaW5lclwiKVxuICAgIDtcblxuICBmb290ZXJDb250YWluZXIuYXBwZW5kKFwiZGl2XCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtc291cmNlXCIpXG4gICAgLnNlbGVjdEFsbChcInBcIilcbiAgICAuZGF0YShbXCJTb3VyY2U6IEFTTkUgU3VydmV5LCAyMDE3XCIsXCJBdCBsZWFzdCA1MCBzdGFmZlwiXSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJwXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtc291cmNlLXRleHRcIilcbiAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgIHJldHVybiBkO1xuICAgIH0pXG4gICAgO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkVG9nZ2xlcygpe1xuICAgIHZhciB0b2dnbGVzID0gZm9vdGVyQ29udGFpbmVyLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwiaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS13cmFwcGVyXCIpO1xuXG4gICAgdmFyIHNpemVDYXRzID0gWzAsMjAsNTAsMTAwLDUwMF07XG5cbiAgICB0b2dnbGVzXG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLXNpemVcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAuZGF0YShzaXplQ2F0cylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKFwicFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgIHJldHVybiBcInRvZ2dsZS1zZWxlY3RlZCBmcm9udC1jdXJ2ZSBoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgICAgfVxuICAgICAgICBpZihpPT1zaXplQ2F0cy5sZW5ndGgtMSl7XG4gICAgICAgICAgcmV0dXJuIFwiYmFjay1jdXJ2ZSBoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgIH0pXG4gICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgICB9KVxuICAgICAgLm9uKFwiY2xpY2tcIixmdW5jdGlvbihkKXtcbiAgICAgICAgdmFyIGRhdGFTZWxlY3RlZCA9IGQ7XG4gICAgICAgIGQzLnNlbGVjdCh0aGlzLnBhcmVudE5vZGUpLnNlbGVjdEFsbChcInBcIikuY2xhc3NlZChcInRvZ2dsZS1zZWxlY3RlZFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQ9PWRhdGFTZWxlY3RlZCl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KVxuICAgICAgICBjb3VudE1pbiA9IGQ7XG4gICAgICAgIGJ1aWxkQ2hhcnQoY3VycmVudENoYXJ0KTtcbiAgICAgIH0pXG4gICAgICA7XG5cbiAgICB2YXIgcmFjZUdlbmRlclRvZ2dsZURhdGEgPSBbXCJnZW5kZXJcIixcInJhY2VcIl07Ly8sXCJzdXBXaGl0ZVwiLFwic3VwR2VuZGVyXCJdXG5cbiAgICB0b2dnbGVzXG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLXR5cGVcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAuZGF0YShyYWNlR2VuZGVyVG9nZ2xlRGF0YSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKFwicFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgIHJldHVybiBcInRvZ2dsZS1zZWxlY3RlZCBmcm9udC1jdXJ2ZSBoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgICAgfVxuICAgICAgICBpZihpPT1yYWNlR2VuZGVyVG9nZ2xlRGF0YS5sZW5ndGgtMSl7XG4gICAgICAgICAgcmV0dXJuIFwiYmFjay1jdXJ2ZSBoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgIH0pXG4gICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgaWYoZD09XCJyYWNlXCIpe1xuICAgICAgICAgIHJldHVybiBcIlJhY2VcIlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIkdlbmRlclwiO1xuICAgICAgfSlcbiAgICAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIHZhciBkYXRhU2VsZWN0ZWQgPSBkO1xuICAgICAgICBkMy5zZWxlY3QodGhpcy5wYXJlbnROb2RlKS5zZWxlY3RBbGwoXCJwXCIpLmNsYXNzZWQoXCJ0b2dnbGUtc2VsZWN0ZWRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZihkPT1kYXRhU2VsZWN0ZWQpe1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgY3V0ID0gZDtcbiAgICAgICAgYnVpbGRDaGFydChjdXJyZW50Q2hhcnQpO1xuICAgICAgfSlcbiAgICAgIDtcblxuICAgIHZhciBsZWFkZXJUb2dnbGVEYXRhID0gW1wiYWxsXCIsXCJsZWFkZXJcIl07XG4gICAgLy9cbiAgICAvLyB0b2dnbGVzXG4gICAgLy8gICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLXR5cGVcIilcbiAgICAvLyAgIC5zZWxlY3RBbGwoXCJwXCIpXG4gICAgLy8gICAuZGF0YShsZWFkZXJUb2dnbGVEYXRhKVxuICAgIC8vICAgLmVudGVyKClcbiAgICAvLyAgIC5hcHBlbmQoXCJwXCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAvLyAgICAgaWYoaT09MCl7XG4gICAgLy8gICAgICAgcmV0dXJuIFwidG9nZ2xlLXNlbGVjdGVkIGZyb250LWN1cnZlIGhpc3RvZ3JhbS1jaGFydC10b2dnbGUtaXRlbVwiO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKGk9PWxlYWRlclRvZ2dsZURhdGEubGVuZ3RoLTEpe1xuICAgIC8vICAgICAgIHJldHVybiBcImJhY2stY3VydmUgaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCI7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgcmV0dXJuIFwiaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCI7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIGlmKGQ9PVwiYWxsXCIpe1xuICAgIC8vICAgICAgIHJldHVybiBcIkFsbCBTdGFmZlwiXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgcmV0dXJuIFwiTGVhZGVyc2hpcFwiO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHZhciBkYXRhU2VsZWN0ZWQgPSBkO1xuICAgIC8vICAgICBkMy5zZWxlY3QodGhpcy5wYXJlbnROb2RlKS5zZWxlY3RBbGwoXCJwXCIpLmNsYXNzZWQoXCJ0b2dnbGUtc2VsZWN0ZWRcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgICBpZihkPT1kYXRhU2VsZWN0ZWQpe1xuICAgIC8vICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gICAgICAgfVxuICAgIC8vICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyAgICAgfSlcbiAgICAvLyAgICAgZ3JvdXAgPSBkO1xuICAgIC8vICAgICBidWlsZENoYXJ0KGN1cnJlbnRDaGFydCk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgO1xuICB9XG4gIGJ1aWxkVG9nZ2xlcygpXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBpbml0IH1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvc3dhcm0uanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBO0FBQ0E7QUFzREE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUlBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFHQTtBQUNBO0FBUUE7QUFDQTtBQUlBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBc0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUE1SkE7QUFDQTtBQThKQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFNQTtBQUNBO0FBTUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQTlMQTtBQUVBO0FBQ0E7QUFNQTtBQUVBO0FBSUE7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBSUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUE2SUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQTRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBU0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQU9BO0FBQ0E7QUExSUE7QUFDQTtBQWtNQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFLQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUVBO0FBQ0E7QUFyT0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQU1BO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFrSEE7QUFBQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFHQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQXdDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFPQTtBQUNBO0FBcEhBO0FBQ0E7QUF1SEE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBS0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUF2SkE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQTBHQTtBQUNBO0FBb0NBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFRQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBR0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBUUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// D3 is included by globally by default\n// import * as d3 from 'd3'\n// import loadData from './load-data'\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n  var cut = \"gender\";\n\n  var countMin = 100;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_num / d.total_num;\n      });\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +d.white_sup_num / d.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_sup_num / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +d.white_num / d.total_num;\n    });\n  }\n  //\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +data.male_num / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return +data.white_num / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n\n  var regionMap = d3.map(states, function (d) {\n    return d[1].toLowerCase();\n  });\n\n  var width = 500;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".table-rows\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data([0, 20, 50, 100, 500]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    countMin = d;\n    buildChart();\n  });\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data([\"race\", \"gender\", \"supWhite\", \"supGender\"]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    cut = d;\n    buildChart();\n  });\n\n  function buildChart() {\n\n    d3.selectAll(\".table-rows-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"table-rows-wrapper\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      return d.total_num > countMin;\n    });\n    var yearNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var extent = d3.extent(leaves, function (d) {\n        return d.Year;\n      });\n      return leaves.filter(function (d) {\n        return d.Year == extent[0] || d.Year == extent[1];\n      });\n    }).entries(filteredMapData);\n\n    //\n    var rows = chartDiv.selectAll(\"div\").data(yearNest).enter().append(\"div\").attr(\"class\", \"table-rows-row\");\n\n    rows.append(\"p\").text(function (d) {\n      return newsIDName.get(d.value[0].NewsID).Company;\n    }).attr(\"class\", \"table-rows-row-name\");\n\n    rows.selectAll(\"div\").data(function (d) {\n      return d.value;\n    }).enter().append(\"div\").sort(function (a, b) {\n      return a.Year - b.Year;\n    }).attr(\"class\", function (d) {\n      return \"table-rows-row-dot\";\n    }).style(\"background-color\", function (d) {\n      var state = null;\n      var region = null;\n      if (newsIdMap.has(d.NewsID)) {\n        state = newsIDName.get(d.NewsID).State;\n      }\n      if (regionMap.has(state)) {\n        region = regionMap.get(state)[3];\n      }\n      if (region == \"West\") {\n        return \"green\";\n      }\n      if (region == \"South\") {\n        return \"blue\";\n      }\n      if (region == \"Midwest\") {\n        return \"purple\";\n      }\n      if (region == \"Northeast\") {\n        return \"yellow\";\n      }\n      return \"grey\";\n    }).style(\"left\", function (d) {\n      return horzScale(getPercent(d)) + \"px\";\n    }).on(\"mouseover\", function (d) {\n      console.log(d);\n    }).append(\"p\").attr(\"class\", \"table-rows-row-dot-text\").html(function (d) {\n      return d.Year + \"<br>\" + Math.round(getPercent(d) * 100) + \"%\";\n    }).style(\"font-weight\", function (d, i) {\n      if (i == 1) {\n        return 700;\n      }\n    });\n  }\n\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&\"object\"==typeof b&&\"function\"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}\nfunction r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?\"function\"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&(\"function\"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};\nfunction w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype[\"catch\"]=n.prototype.g);}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb21pcy9wcm9taXNlLmpzPzNhNTUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7J3VzZSBzdHJpY3QnO3ZhciBmLGc9W107ZnVuY3Rpb24gbChhKXtnLnB1c2goYSk7MT09Zy5sZW5ndGgmJmYoKX1mdW5jdGlvbiBtKCl7Zm9yKDtnLmxlbmd0aDspZ1swXSgpLGcuc2hpZnQoKX1mPWZ1bmN0aW9uKCl7c2V0VGltZW91dChtKX07ZnVuY3Rpb24gbihhKXt0aGlzLmE9cDt0aGlzLmI9dm9pZCAwO3RoaXMuZj1bXTt2YXIgYj10aGlzO3RyeXthKGZ1bmN0aW9uKGEpe3EoYixhKX0sZnVuY3Rpb24oYSl7cihiLGEpfSl9Y2F0Y2goYyl7cihiLGMpfX12YXIgcD0yO2Z1bmN0aW9uIHQoYSl7cmV0dXJuIG5ldyBuKGZ1bmN0aW9uKGIsYyl7YyhhKX0pfWZ1bmN0aW9uIHUoYSl7cmV0dXJuIG5ldyBuKGZ1bmN0aW9uKGIpe2IoYSl9KX1mdW5jdGlvbiBxKGEsYil7aWYoYS5hPT1wKXtpZihiPT1hKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIGM9ITE7dHJ5e3ZhciBkPWImJmIudGhlbjtpZihudWxsIT1iJiZcIm9iamVjdFwiPT10eXBlb2YgYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZCl7ZC5jYWxsKGIsZnVuY3Rpb24oYil7Y3x8cShhLGIpO2M9ITB9LGZ1bmN0aW9uKGIpe2N8fHIoYSxiKTtjPSEwfSk7cmV0dXJufX1jYXRjaChlKXtjfHxyKGEsZSk7cmV0dXJufWEuYT0wO2EuYj1iO3YoYSl9fVxuZnVuY3Rpb24gcihhLGIpe2lmKGEuYT09cCl7aWYoYj09YSl0aHJvdyBuZXcgVHlwZUVycm9yO2EuYT0xO2EuYj1iO3YoYSl9fWZ1bmN0aW9uIHYoYSl7bChmdW5jdGlvbigpe2lmKGEuYSE9cClmb3IoO2EuZi5sZW5ndGg7KXt2YXIgYj1hLmYuc2hpZnQoKSxjPWJbMF0sZD1iWzFdLGU9YlsyXSxiPWJbM107dHJ5ezA9PWEuYT9cImZ1bmN0aW9uXCI9PXR5cGVvZiBjP2UoYy5jYWxsKHZvaWQgMCxhLmIpKTplKGEuYik6MT09YS5hJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgZD9lKGQuY2FsbCh2b2lkIDAsYS5iKSk6YihhLmIpKX1jYXRjaChoKXtiKGgpfX19KX1uLnByb3RvdHlwZS5nPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmModm9pZCAwLGEpfTtuLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gbmV3IG4oZnVuY3Rpb24oZCxlKXtjLmYucHVzaChbYSxiLGQsZV0pO3YoYyl9KX07XG5mdW5jdGlvbiB3KGEpe3JldHVybiBuZXcgbihmdW5jdGlvbihiLGMpe2Z1bmN0aW9uIGQoYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe2hbY109ZDtlKz0xO2U9PWEubGVuZ3RoJiZiKGgpfX12YXIgZT0wLGg9W107MD09YS5sZW5ndGgmJmIoaCk7Zm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKz0xKXUoYVtrXSkuYyhkKGspLGMpfSl9ZnVuY3Rpb24geChhKXtyZXR1cm4gbmV3IG4oZnVuY3Rpb24oYixjKXtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoO2QrPTEpdShhW2RdKS5jKGIsYyl9KX07d2luZG93LlByb21pc2V8fCh3aW5kb3cuUHJvbWlzZT1uLHdpbmRvdy5Qcm9taXNlLnJlc29sdmU9dSx3aW5kb3cuUHJvbWlzZS5yZWplY3Q9dCx3aW5kb3cuUHJvbWlzZS5yYWNlPXgsd2luZG93LlByb21pc2UuYWxsPXcsd2luZG93LlByb21pc2UucHJvdG90eXBlLnRoZW49bi5wcm90b3R5cGUuYyx3aW5kb3cuUHJvbWlzZS5wcm90b3R5cGVbXCJjYXRjaFwiXT1uLnByb3RvdHlwZS5nKTt9KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb21pcy9wcm9taXNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ })
/******/ ]);