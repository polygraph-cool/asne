/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // import * as d3 from 'd3'\n\n// import newsroom from './newsroom'\n\n\n__webpack_require__(14);\n\nvar _graphic = __webpack_require__(5);\n\nvar _graphic2 = _interopRequireDefault(_graphic);\n\nvar _histogram = __webpack_require__(6);\n\nvar _histogram2 = _interopRequireDefault(_histogram);\n\nvar _table = __webpack_require__(12);\n\nvar _table2 = _interopRequireDefault(_table);\n\nvar _slope = __webpack_require__(9);\n\nvar _slope2 = _interopRequireDefault(_slope);\n\nvar _swarm = __webpack_require__(11);\n\nvar _swarm2 = _interopRequireDefault(_swarm);\n\nvar _scatters = __webpack_require__(8);\n\nvar _scatters2 = _interopRequireDefault(_scatters);\n\nvar _arrowScatter = __webpack_require__(3);\n\nvar _arrowScatter2 = _interopRequireDefault(_arrowScatter);\n\nvar _swarmLeader = __webpack_require__(10);\n\nvar _swarmLeader2 = _interopRequireDefault(_swarmLeader);\n\nvar _maps = __webpack_require__(7);\n\nvar _maps2 = _interopRequireDefault(_maps);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction cleanTk(d) {\n\treturn _extends({}, d);\n}\n\nfunction init() {\n\treturn new Promise(function (resolve, reject) {\n\t\td3.queue().defer(d3.csv, 'assets/map_data_3.csv').defer(d3.csv, 'assets/lats.csv').defer(d3.csv, 'assets/newsidsunique_2.csv').defer(d3.csv, 'assets/news_ids.csv').defer(d3.json, 'assets/usJson.json').defer(d3.csv, 'assets/top_3.csv').defer(d3.csv, 'assets/census.csv').awaitAll(function (err, result) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t_maps2.default.init(result[0], result[1], result[2], result[3], result[4]);\n\t\t\t\t_arrowScatter2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_scatters2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_swarm2.default.init(result[0], result[1], result[2], result[3], result[5], result[6], result[4]);\n\t\t\t\t_swarmLeader2.default.init(result[0], result[1], result[2], result[3], result[5]);\n\t\t\t\t_graphic2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_histogram2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_table2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t_slope2.default.init(result[0], result[1], result[2], result[3]);\n\t\t\t\t// newsroom.init();\n\t\t\t}\n\t\t});\n\t});\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvbG9hZC1kYXRhLmpzPzdhZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnXG5pbXBvcnQgJ3Byb21pcydcbmltcG9ydCBncmFwaGljIGZyb20gJy4vZ3JhcGhpYydcbmltcG9ydCBoaXN0b2dyYW0gZnJvbSAnLi9oaXN0b2dyYW0nXG5pbXBvcnQgdGFibGUgZnJvbSAnLi90YWJsZSdcbi8vIGltcG9ydCBuZXdzcm9vbSBmcm9tICcuL25ld3Nyb29tJ1xuaW1wb3J0IHNsb3BlIGZyb20gJy4vc2xvcGUnXG5pbXBvcnQgc3dhcm0gZnJvbSAnLi9zd2FybSdcbmltcG9ydCBzY2F0dGVyIGZyb20gJy4vc2NhdHRlcnMnXG5pbXBvcnQgYXJyb3dTY2F0dGVyIGZyb20gJy4vYXJyb3ctc2NhdHRlcidcbmltcG9ydCBzd2FybUxlYWRlciBmcm9tICcuL3N3YXJtLWxlYWRlcidcbmltcG9ydCBtYXBzIGZyb20gJy4vbWFwcydcblxuZnVuY3Rpb24gY2xlYW5UayhkKSB7XG5cdHJldHVybiB7XG5cdFx0Li4uZCxcblx0fVxufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGQzLnF1ZXVlKClcblx0XHRcdC5kZWZlcihkMy5jc3YsJ2Fzc2V0cy9tYXBfZGF0YV8zLmNzdicpXG5cdFx0XHQuZGVmZXIoZDMuY3N2LCdhc3NldHMvbGF0cy5jc3YnKVxuXHRcdFx0LmRlZmVyKGQzLmNzdiwnYXNzZXRzL25ld3NpZHN1bmlxdWVfMi5jc3YnKVxuXHRcdFx0LmRlZmVyKGQzLmNzdiwnYXNzZXRzL25ld3NfaWRzLmNzdicpXG5cdFx0XHQuZGVmZXIoZDMuanNvbiwnYXNzZXRzL3VzSnNvbi5qc29uJylcblx0XHRcdC5kZWZlcihkMy5jc3YsJ2Fzc2V0cy90b3BfMy5jc3YnKVxuXHRcdFx0LmRlZmVyKGQzLmNzdiwnYXNzZXRzL2NlbnN1cy5jc3YnKVxuXHRcdFx0LmF3YWl0QWxsKChlcnIsIHJlc3VsdCkgPT4ge1xuXHRcdFx0XHRpZiAoZXJyKXtcblx0XHRcdFx0XHRyZWplY3QoZXJyKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdG1hcHMuaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10scmVzdWx0WzRdKTtcblx0XHRcdFx0XHRhcnJvd1NjYXR0ZXIuaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10pO1xuXHRcdFx0XHRcdHNjYXR0ZXIuaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10pO1xuXHRcdFx0XHRcdHN3YXJtLmluaXQocmVzdWx0WzBdLHJlc3VsdFsxXSxyZXN1bHRbMl0scmVzdWx0WzNdLHJlc3VsdFs1XSxyZXN1bHRbNl0scmVzdWx0WzRdKTtcblx0XHRcdFx0XHRzd2FybUxlYWRlci5pbml0KHJlc3VsdFswXSxyZXN1bHRbMV0scmVzdWx0WzJdLHJlc3VsdFszXSxyZXN1bHRbNV0pO1xuXHRcdFx0XHRcdGdyYXBoaWMuaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10pO1xuXHRcdFx0XHRcdGhpc3RvZ3JhbS5pbml0KHJlc3VsdFswXSxyZXN1bHRbMV0scmVzdWx0WzJdLHJlc3VsdFszXSk7XG5cdFx0XHRcdFx0dGFibGUuaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10pO1xuXHRcdFx0XHRcdHNsb3BlLmluaXQocmVzdWx0WzBdLHJlc3VsdFsxXSxyZXN1bHRbMl0scmVzdWx0WzNdKTtcblx0XHRcdFx0XHQvLyBuZXdzcm9vbS5pbml0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgaW5pdCB9XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL2xvYWQtZGF0YS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQU5BO0FBQ0E7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFDQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBU0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n// device sniffing for mobile\n\nvar isMobile = {\n\tandroid: function android() {\n\t\treturn navigator.userAgent.match(/Android/i);\n\t},\n\n\tblackberry: function blackberry() {\n\t\treturn navigator.userAgent.match(/BlackBerry/i);\n\t},\n\n\tios: function ios() {\n\t\treturn navigator.userAgent.match(/iPhone|iPad|iPod/i);\n\t},\n\n\topera: function opera() {\n\t\treturn navigator.userAgent.match(/Opera Mini/i);\n\t},\n\n\twindows: function windows() {\n\t\treturn navigator.userAgent.match(/IEMobile/i);\n\t},\n\n\tany: function any() {\n\t\treturn isMobile.android() || isMobile.blackberry() || isMobile.ios() || isMobile.opera() || isMobile.windows();\n\t}\n};\n\nexports.default = isMobile;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdXRpbHMvaXMtbW9iaWxlLmpzPzY1NGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZGV2aWNlIHNuaWZmaW5nIGZvciBtb2JpbGVcblxuY29uc3QgaXNNb2JpbGUgPSB7XG5cdGFuZHJvaWQ6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSksXG5cblx0YmxhY2tiZXJyeTogKCkgPT4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQmxhY2tCZXJyeS9pKSxcblxuXHRpb3M6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZXxpUGFkfGlQb2QvaSksXG5cblx0b3BlcmE6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL09wZXJhIE1pbmkvaSksXG5cblx0d2luZG93czogKCkgPT4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvSUVNb2JpbGUvaSksXG5cblx0YW55OiAoKSA9PiAoXG5cdFx0aXNNb2JpbGUuYW5kcm9pZCgpIHx8XG5cdFx0aXNNb2JpbGUuYmxhY2tiZXJyeSgpIHx8XG5cdFx0aXNNb2JpbGUuaW9zKCkgfHxcblx0XHRpc01vYmlsZS5vcGVyYSgpIHx8XG5cdFx0aXNNb2JpbGUud2luZG93cygpXG5cdCksXG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTW9iaWxlXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL3V0aWxzL2lzLW1vYmlsZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBWEE7QUFDQTtBQW1CQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  var countMin = 50;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +(data.total_num - data.male_num) / data.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +data.white_sup_num / data.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +data.white_num / data.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, data) {\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 600 - margin.left - margin.right;\n  var height = 400 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".arrow-scatter\");\n\n  // container.append(\"p\")\n  //   .attr(\"class\",\"chart-title\")\n  //   .text(\"Change in Gender Break-down from 2002 - 2017\")\n  //   ;\n\n  function buildToggles() {\n    var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n    var sizeCats = [0, 20, 50, 100, 500];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == sizeCats.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      countMin = d;\n      buildChart();\n    });\n\n    var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == raceGenderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"race\") {\n        return \"Race\";\n      }\n      return \"Gender\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      cut = d;\n      buildChart();\n    });\n\n    var leaderToggleData = [\"all\", \"leader\"];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(leaderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == leaderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"all\") {\n        return \"All Staff\";\n      }\n      return \"Leadership\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      group = d;\n      buildChart();\n    });\n  }\n  buildToggles();\n\n  function buildChart() {\n\n    d3.selectAll(\".arrow-scatter-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"arrow-scatter-chart-wrapper\").style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var chartSvgDoubleChange = chartDiv.append(\"svg\").attr(\"class\", \"arrow-scatter-chart-wrapper-svg-double-change\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n\n    var chartDivText = chartDiv.append(\"div\").attr(\"class\", \"arrow-scatter-chart-wrapper-text-div\").style(\"transform\", \"translate(\" + margin.left + \"px\" + \",\" + margin.top + \"px\" + \")\").style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var miniMultiple = container.append(\"div\").attr(\"class\", \"slope-mini-multiple-div\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      if (cut == \"gender\") {\n        return d.total_num > countMin && +d.Year > 2000;\n      }\n      return d.total_num > countMin;\n    });\n\n    var maxPercentArray = [];\n    var diffArray = [];\n    var raceDiffArray = [];\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      var maxPercent = d3.max(leaves, function (d) {\n        return getPercent(d);\n      });\n      maxPercentArray.push(maxPercent);\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014) && d.value.values.length > 1) {\n        return d;\n      }\n      return null;\n    });\n\n    var newsNestAverageT0 = d3.mean(newsNest, function (d) {\n      return getPercent(d.value.values[0]);\n    });\n    var newsNestAverageT1 = d3.mean(newsNest, function (d) {\n      return getPercent(d.value.yearMap.get(2014));\n    });\n\n    for (var item in newsNest) {\n      var diff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"supGender\";\n      var raceDiff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"gender\";\n      diffArray.push(diff);\n      raceDiffArray.push(raceDiff);\n      newsNest[item].value.diff = diff;\n      newsNest[item].value.raceDiff = raceDiff;\n    }\n    ;\n\n    newsNest = newsNest.sort(function (a, b) {\n      return b.value.diff - a.value.diff;\n    });\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n    var percentExtent = d3.extent(maxPercentArray, function (d) {\n      return d;\n    });\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var raceDiffExtent = d3.extent(raceDiffArray, function (d) {\n      return d;\n    });\n    var diffScale = d3.scaleLinear().domain([diffExtent[0], diffExtent[1]]).range([0, width]);\n    var raceDiffScale = d3.scaleLinear().domain([raceDiffExtent[0], raceDiffExtent[1]]).range([height, 0]);\n\n    var totalScale = d3.scaleLinear().domain(totalExtent).range([height, 0]);\n    var totalXScale = d3.scaleLinear().domain(totalExtent).range([0, width]);\n\n    var colorScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"white\", \"green\"]);\n    var strokeScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"grey\", \"green\"]);\n\n    var xScale = d3.scaleLinear().domain([0, .7]).range([0, width]);\n    var yScale = d3.scaleLinear().domain([.25, .5]).range([height, 0]);\n\n    var linearGradientDown = chartSvgDoubleChange.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"gradient\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 1);\n\n    var linearGradientAverage = chartSvgDoubleChange.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"gradient-average\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 1);\n\n    var linearGradientUp = chartSvgDoubleChange.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"gradient-up\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 1);\n\n    var chartSvgDoubleChangeG = chartSvgDoubleChange.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    linearGradientUp.append(\"stop\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", 1);\n\n    linearGradientUp.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", .3);\n\n    linearGradientAverage.append(\"stop\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", 1);\n\n    linearGradientAverage.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", .3);\n\n    linearGradientDown.append(\"stop\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", .3);\n\n    linearGradientDown.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", 1);\n\n    chartSvgDoubleChangeG.append(\"marker\").attr(\"id\", \"triangle-up\").attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 0).attr(\"refY\", 5).attr(\"markerUnits\", \"strokeWidth\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").append(\"path\").attr(\"fill\", \"blue\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\");\n\n    chartSvgDoubleChangeG.append(\"marker\").attr(\"id\", \"triangle-down\").attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 0).attr(\"refY\", 5).attr(\"markerUnits\", \"strokeWidth\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").append(\"path\").attr(\"fill\", \"red\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\");\n\n    function drawArrow(t0, t1) {\n      var d = t1 > t0 ? \"M0,\" + (t1 - 2) + \" L4,\" + (t1 - 8) + \" L1.5,\" + (t1 - 8) + \" L0,\" + t0 + \" L-1.5,\" + (t1 - 8) + \" L-4,\" + (t1 - 8) + \" Z\" : \"M0,\" + (t1 + 2) + \" L4,\" + (t1 + 8) + \" L1.5,\" + (t1 + 8) + \" L0,\" + t0 + \" L-1.5,\" + (t1 + 8) + \" L-4,\" + (t1 + 8) + \" Z\";\n      return d;\n    }\n    function drawDiamond(t0, t1) {\n      return \"M0,\" + (t1 - 4) + \" L4,\" + (t1 - 8)\n      // + \" L1.5,\" + (t1-8)\n      + \" L0,\" + (t1 - 12) + \" L-4,\" + (t1 - 8) + \" Z\";\n    }\n\n    var arrowXScale = d3.scaleLinear().domain([0, newsNest.length - 1]).range([0, width]);\n\n    var arrowsGs = chartSvgDoubleChangeG.selectAll(\"g\").data(newsNest).enter().append(\"g\").attr(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale(i) + \",0)\";\n    }).on(\"mouseover\", function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company;\n      console.log(d.value.diff);\n      console.log(getPercentType(\"gender\", d.value.yearMap.get(2014)), getPercentType(\"gender\", d.value.values[0]));\n    });\n\n    chartSvgDoubleChangeG.append(\"g\").attr(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \",0)\";\n    }).append(\"path\").attr(\"class\", \"arrow-scatter-line arrow-scatter-line-average\").attr(\"d\", function (d) {\n      var t0 = yScale(newsNestAverageT0);\n      var t1 = yScale(newsNestAverageT1);\n      return drawArrow(t0, t1);\n    }).attr(\"fill\", function (d) {\n      if (newsNestAverageT1 - newsNestAverageT0 > 0) {\n        return \"url(#gradient-average)\";\n      }\n      return \"url(#gradient)\";\n    }).attr(\"stroke\", \"none\").attr(\"fill-opacity\", 1);\n\n    var arrows = arrowsGs.append(\"path\").attr(\"class\", \"arrow-scatter-line\").attr(\"d\", function (d) {\n      var t0 = yScale(getPercentType(\"gender\", d.value.values[0]));\n      var t1 = yScale(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n\n      if (Math.abs(d.value.diff) < .008) {\n        return drawDiamond(t0, t1);\n      }\n      return drawArrow(t0, t1);\n    }).attr(\"fill\", function (d) {\n      if (d.value.diff > 0) {\n        return \"url(#gradient-up)\";\n      }\n      if (Math.abs(d.value.diff) < .015) {\n        return \"#888888\";\n      }\n      return \"url(#gradient)\";\n    }).attr(\"stroke\", \"none\").attr(\"fill-opacity\", 1);\n\n    var arrowText = arrowsGs.append(\"text\").attr(\"class\", \"arrow-scatter-line-text\").attr(\"transform\", function (d, i) {\n      return \"rotate(-90 \" + yScale(getPercentType(\"gender\", d.value.values[0])) / 2 + \" \" + yScale(getPercentType(\"gender\", d.value.values[0])) / 2 + \")\";\n    }).text(function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company;\n      if (company == \"the new york times\") {\n        return company;\n      }\n      return null;\n    });\n\n    var arrowTextDiv = chartDivText.selectAll(\"div\").data(newsNest).enter().append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale(i) + \"px,\" + yScale(getPercentType(\"gender\", d.value.yearMap.get(2014))) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-logo\").style(\"background-image\", function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company;\n      if (company == \"the new york times\") {\n        return \"url(assets/ny-times-logo.svg)\";\n      }\n    });\n\n    chartDivText.append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \"px,\" + yScale(newsNestAverageT1) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-text-average\").text(function (d) {\n      return \"Overall\";\n    });\n\n    chartDivText.append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \"px,\" + yScale(newsNestAverageT1) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-text-average arrow-scatter-line-text-average-num-top\").text(function (d) {\n      return Math.floor(100 * newsNestAverageT1) + \"%\";\n    });\n\n    chartDivText.append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \"px,\" + yScale(newsNestAverageT0) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-text-average arrow-scatter-line-text-average-num-bottom\").text(function (d) {\n      return Math.floor(100 * newsNestAverageT0) + \"%\";\n    });\n\n    var axisGs = chartSvgDoubleChangeG.append(\"g\").selectAll(\"g\").data([.3, .4, .5]).enter().append(\"g\");\n\n    axisGs.append(\"text\").attr(\"x\", function (d) {\n      return -12;\n    }).attr(\"y\", function (d) {\n      return yScale(d) + 2;\n    }).attr(\"dominant-baseline\", \"middle\").attr(\"class\", \"arrow-scatter-axis-text\").text(function (d) {\n      if (d == .5) {\n        return \"50/50 Gender Split\";\n      }\n      return Math.floor((1 - d) * 100) + \"% Male\";\n    }).style(\"fill\", function (d) {\n      if (d == .5) {\n        return \"rgb(136, 136, 136)\";\n      }\n      return null;\n    });\n\n    axisGs.append(\"line\").attr(\"class\", \"arrow-scatter-line-axis\").attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"x2\", function (d) {\n      return width;\n    }).attr(\"y1\", function (d) {\n      return yScale(d);\n    }).attr(\"y2\", function (d) {\n      return yScale(d);\n    }).style(\"stroke-width\", function (d) {\n      if (d == .5) {\n        return \"2px\";\n      }\n      return null;\n    }).style(\"stroke\", function (d) {\n      if (d != .5) {\n        return \"#a7a7a7\";\n      }\n      return null;\n    }).style(\"stroke-dasharray\", function (d) {\n      if (d != .5) {\n        return \"3,1\";\n      }\n      return null;\n    });\n\n    // chartSvgDoubleChangeG\n    //   .selectAll(\"line\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"line\")\n    //   .attr(\"class\",\"arrow-scatter-line\")\n    //   .style(\"stroke-width\",function(d){\n    //     if(+d.value.yearMap.get(2014).total_num > 100){\n    //       return \"2px\"\n    //     }\n    //     if(+d.value.yearMap.get(2014).total_num > 50){\n    //       return \"1px\"\n    //     }\n    //     if(+d.value.yearMap.get(2014).total_num > 10){\n    //       return \".5px\"\n    //     }\n    //   })\n    //   .style(\"stroke\",function(d){\n    //     if(d.value.diff > 0){\n    //       return \"blue\"\n    //     }\n    //     return \"red\"\n    //   })\n    //   .attr(\"x1\",function(d){\n    //     return xScale(getPercentType(\"supGender\",d.value.values[0]));\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n    //     // return diffScale(d.value.diff);\n    //   })\n    //   .attr(\"y1\",function(d){\n    //     return totalScale(d.value.yearMap.get(2014).total_num)\n    //     // return yScale(getPercentType(\"supGender\",d.value.values[0]));\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return totalScale(d.value.yearMap.get(2014).total_num)\n    //     // return yScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n    //     // return raceDiffScale(d.value.raceDiff)\n    //   })\n    //   .attr(\"marker-end\",function(d){\n    //     if(d.value.diff > 0){\n    //       return \"url(#triangle-up)\";\n    //     }\n    //     return \"url(#triangle-down)\";\n    //   })\n    //   // .style(\"stroke\",\"url(#gradient)\")\n    //   .on(\"mouseover\",function(d){\n    //     console.log(getPercentType(\"supGender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",d.value.yearMap.get(2014)));\n    //   })\n    //   ;\n\n    // chartSvgDoubleChangeG\n    //   .append(\"line\")\n    //   .attr(\"class\",\"arrow-scatter-line-axis\")\n    //   .attr(\"x1\",function(d){\n    //     return xScale(.5);\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(.5);\n    //   })\n    //   .attr(\"y1\",function(d){\n    //     return 0;\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return height;\n    //   })\n\n\n    // function buildAverage(){\n    //   var chartAverage = chartDiv.append(\"g\")\n    //      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //      .attr(\"class\",\"swarm-average\")\n    //      ;\n    //\n    //  chartAverage.append(\"text\")\n    //    .attr(\"class\",\"swarm-average-text swarm-average-text-label\")\n    //    .attr(\"x\",xScale(dataToMap.average))\n    //    .attr(\"y\",height*.33-19)\n    //    .text(\"Overall\")\n    //\n    //   chartAverage.append(\"text\")\n    //     .attr(\"class\",\"swarm-average-text\")\n    //     .attr(\"x\",xScale(dataToMap.average))\n    //     .attr(\"y\",height*.33-5)\n    //     .text(Math.round(dataToMap.average*100)+\"% Male\")\n    //\n    //   chartAverage.append(\"line\")\n    //     .attr(\"class\",\"swarm-average-line\")\n    //     .attr(\"x1\",xScale(dataToMap.average))\n    //     .attr(\"x2\",xScale(dataToMap.average))\n    //     .attr(\"y1\",height*.33)\n    //     .attr(\"y2\",height*.66)\n    //     ;\n    // }\n    // buildAverage();\n\n    // var topRowCircle = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return 3\n    //   })\n    //   .attr(\"cx\", function(d) {\n    //     return xScale(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"cy\", function(d) {\n    //     return 0;\n    //   })\n    //   .style(\"fill\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d);\n    //   })\n    //   ;\n    //\n    // var bottomRowCircle = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return 3\n    //   })\n    //   .attr(\"cx\", function(d) {\n    //     return xScale(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"cy\", function(d) {\n    //     return 100;\n    //   })\n    //   .style(\"fill\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    // var rowLines = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"line\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"line\")\n    //   .attr(\"class\",\"slope-line\")\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return 100;\n    //   })\n    //   .attr(\"x1\", function(d) {\n    //     return xScale(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"y1\", function(d) {\n    //     return 0;\n    //   })\n    //   .style(\"stroke\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    var miniMargin = { top: 0, right: 10, bottom: 0, left: 10 };\n    var miniWidth = 50 - miniMargin.left - miniMargin.right;\n    var miniHeight = 80 - miniMargin.top - miniMargin.bottom;\n    var genderColorScale = d3.scaleLinear().domain([.2, .5, .8]).range([\"#2161fa\", \"#dddddd\", \"#ff3333\"]);\n\n    var multipleY = d3.scaleLinear().domain([.2, .5]).range([miniHeight, 0]);\n\n    // miniMultiple.append(\"p\")\n    //   .attr(\"class\",\"chart-title\")\n    //   .text(\"Change in Break-down of Female Staff, 2001 - 2016\")\n    //   ;\n\n    var miniMultipleWrapper = miniMultiple.append(\"div\").attr(\"class\", \"mini-multiple-div-container\").selectAll(\"div\").data(newsNest.sort(function (a, b) {\n      return +b.value.maxTotal - +a.value.maxTotal;\n    }).slice(0, 25)).enter().append(\"div\").attr(\"class\", \"mini-multiple-div\");\n\n    miniMultipleWrapper.append(\"div\").attr(\"class\", \"mini-multiple-text-container\").append(\"p\").attr(\"class\", \"mini-multiple-text\").style(\"margin-top\", 20).text(function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company.replace(\"the\", \"\");\n      if (company.length > 20) {\n        return company.slice(0, 17) + \"...\";\n      }\n      return company;\n    });\n\n    var miniMultipleWrapperSvg = miniMultipleWrapper.append(\"svg\").attr(\"class\", \"slope-mini-svg\").attr(\"width\", miniWidth + miniMargin.left + miniMargin.right).attr(\"height\", miniHeight + miniMargin.top + miniMargin.bottom);\n\n    var miniMultipleWrapperG = miniMultipleWrapperSvg.append(\"g\").style(\"transform\", \"translate(\" + miniMargin.left + \"px\" + \",\" + miniMargin.top + \"px\" + \")\");\n\n    var miniMultipleWrapperAxis = miniMultipleWrapperG.append(\"g\").attr(\"class\", \"slope-line-axis-container\");\n\n    miniMultipleWrapperG.append(\"circle\").attr(\"cx\", function (d) {\n      return 0;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.values[0]));\n    }).attr(\"r\", 3).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      if (d.value.diff > 0) {\n        return \"blue\";\n      }\n      return \"red\";\n      // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return 0;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.values[0])) + 27;\n      }\n      return multipleY(getPercentType(\"gender\", d.value.values[0])) + 15;\n    }).attr(\"class\", \"slope-small-text\").text(function (d, i) {\n      if (i == 0) {\n        return Math.floor(100 * getPercentType(\"gender\", d.value.values[0])) + \"%\";\n      }\n      return Math.floor(100 * getPercentType(\"gender\", d.value.values[0]));\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return 0;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.values[0])) + 15;\n      }\n      return null;\n    }).attr(\"class\", \"slope-small-text slope-small-text-bold\").text(function (d, i) {\n      if (i == 0) {\n        return \"2001\";\n      }\n      return null;\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return miniWidth;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014))) + 15;\n      }\n      return null;\n    }).attr(\"class\", \"slope-small-text slope-small-text-bold\").text(function (d, i) {\n      if (i == 0) {\n        return \"2016\";\n      }\n      return null;\n    }).style(\"text-anchor\", function (d, i) {\n      if (i == 0) {\n        return \"start\";\n      }\n      return null;\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return miniWidth;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014))) + 27;\n      }\n      return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014))) + 15;\n    }).attr(\"class\", \"slope-small-text\").text(function (d, i) {\n      if (i == 0) {\n        return Math.floor(100 * getPercentType(\"gender\", d.value.yearMap.get(2014))) + \"%\";\n      }\n      return Math.floor(100 * getPercentType(\"gender\", d.value.yearMap.get(2014)));\n    }).style(\"text-anchor\", function (d, i) {\n      if (i == 0) {\n        return \"start\";\n      }\n      return null;\n    });\n\n    miniMultipleWrapperG.append(\"circle\").attr(\"cx\", function (d) {\n      return miniWidth;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n    }).attr(\"r\", 3).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      if (d.value.diff > 0) {\n        return \"blue\";\n      }\n      return \"red\";\n      // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n    });\n    //\n    //\n    miniMultipleWrapperG.append(\"line\").attr(\"class\", \"slope-line\").attr(\"y1\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.values[0]));\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    }).attr(\"stroke-linecap\", \"round\").attr(\"stroke-linejoin\", \"round\").attr(\"stroke-width\", 1.8).style(\"stroke\", function (d) {\n      if (d.value.diff > 0) {\n        return \"blue\";\n      }\n      return \"red\";\n      // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n    });\n\n    miniMultipleWrapperAxis.selectAll(\"line\").data([.2, .3, .4, .5]).enter().append(\"line\").attr(\"class\", \"slope-line-axis\").attr(\"y1\", function (d, i) {\n      return multipleY(d);\n      // return i*20+\"%\";\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d, i) {\n      return multipleY(d);\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    }).style(\"stroke\", function (d) {\n      if (d == .5) {\n        return \"black\";\n      }\n    });\n    //\n\n    // cell\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return d.radius\n    //   })\n    //   // .attr(\"cx\", function(d) { return d.x; })\n    //   // .attr(\"cy\", function(d) { return d.y; })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d.male_num/d.total_num);\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n\n    // dataToMap.values = d3.nest()\n    //   .key(function(d){\n    //     return Math.round(getPercent(d)*50)/50;\n    //   })\n    //   .sortKeys(function(a,b){\n    //     return a-b;\n    //   })\n    //   .entries(dataToMap.values)\n    //   ;\n    //\n    // chartDiv.append(\"div\")\n    //   .attr(\"class\",\"histogram-avg-div\")\n    //   .style(\"left\",function(d){\n    //     return (dataToMap.average*width+1)+\"px\"\n    //   })\n    //   .append(\"p\")\n    //   .text(Math.round(dataToMap.average*100)+\"%\")\n    //   ;\n    //\n    // var yearsColumn = chartDiv\n    //   .selectAll(\".histogram-year-container\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-year-container\")\n    //   .style(\"left\",function(d){\n    //     return (d.key*width+1)+\"px\"\n    //   })\n    //   ;\n    //\n    // yearsColumn\n    //   .selectAll(\"div\")\n    //   .data(function(d){\n    //     return d.values\n    //   })\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",function(d){\n    //     var state = null;\n    //     var region = null;\n    //     if(newsIdMap.has(d.NewsID)){\n    //       state = newsIdMap.get(d.NewsID).State;\n    //     }\n    //     if(regionMap.has(state)){\n    //       region = regionMap.get(state)[3];\n    //     }\n    //\n    //     if(region ==\"West\"){\n    //       region = \"green\"\n    //     }\n    //     if(region ==\"South\"){\n    //       region = \"blue\"\n    //     }\n    //     if(region ==\"Midwest\"){\n    //       region = \"purple\"\n    //     }\n    //     if(region ==\"Northeast\"){\n    //       region = \"yellow\"\n    //     }\n    //     return \"histogram-year-item \"+region\n    //   })\n    //   .style(\"background-color\",function(d){\n    //     // return backgroundFunction(d)\n    //     return null\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n    //\n    // yearsColumn.append(\"p\")\n    //   .text(function(d,i){\n    //     if(i%5 == 0 || i==0 || i==yearsColumn.size()-1){\n    //       return Math.round(d.key*100)+\"%\";\n    //     }\n    //     return null;\n    //\n    //   })\n    //   ;\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _lodash = __webpack_require__(2);\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _isMobile = __webpack_require__(1);\n\nvar _isMobile2 = _interopRequireDefault(_isMobile);\n\nvar _loadData = __webpack_require__(0);\n\nvar _loadData2 = _interopRequireDefault(_loadData);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bodySel = d3.select('body');\n// import graphic from './graphic'\n// D3 is included by globally by default\n\nvar previousWidth = 0;\n\n// function resize() {\n// \tconst width = bodySel.node().offsetWidth\n// \tif (previousWidth !== width) {\n// \t\tpreviousWidth = width\n// \t\tgraphic.resize()\n// \t}\n// }\n\nfunction init() {\n\t// add mobile class to body tag\n\tbodySel.classed('is-mobile', _isMobile2.default.any());\n\t// setup resize event\n\t// window.addEventListener('resize', debounce(resize, 150))\n\t_loadData2.default.init();\n}\n\ninit();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvZW50cnkuanM/YjE2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEMyBpcyBpbmNsdWRlZCBieSBnbG9iYWxseSBieSBkZWZhdWx0XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoLmRlYm91bmNlJ1xuaW1wb3J0IGlzTW9iaWxlIGZyb20gJy4vdXRpbHMvaXMtbW9iaWxlJ1xuLy8gaW1wb3J0IGdyYXBoaWMgZnJvbSAnLi9ncmFwaGljJ1xuaW1wb3J0IGxvYWREYXRhIGZyb20gJy4vbG9hZC1kYXRhJ1xuXG5jb25zdCBib2R5U2VsID0gZDMuc2VsZWN0KCdib2R5JylcbmxldCBwcmV2aW91c1dpZHRoID0gMFxuXG4vLyBmdW5jdGlvbiByZXNpemUoKSB7XG4vLyBcdGNvbnN0IHdpZHRoID0gYm9keVNlbC5ub2RlKCkub2Zmc2V0V2lkdGhcbi8vIFx0aWYgKHByZXZpb3VzV2lkdGggIT09IHdpZHRoKSB7XG4vLyBcdFx0cHJldmlvdXNXaWR0aCA9IHdpZHRoXG4vLyBcdFx0Z3JhcGhpYy5yZXNpemUoKVxuLy8gXHR9XG4vLyB9XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG5cdC8vIGFkZCBtb2JpbGUgY2xhc3MgdG8gYm9keSB0YWdcblx0Ym9keVNlbC5jbGFzc2VkKCdpcy1tb2JpbGUnLCBpc01vYmlsZS5hbnkoKSlcblx0Ly8gc2V0dXAgcmVzaXplIGV2ZW50XG5cdC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZShyZXNpemUsIDE1MCkpXG5cdGxvYWREYXRhLmluaXQoKVxufVxuXG5pbml0KClcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvZW50cnkuanMiXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQ0E7QUFDQTs7Ozs7QUFDQTtBQUhBO0FBSEE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n// D3 is included by globally by default\n// import * as d3 from 'd3'\n// import loadData from './load-data'\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation) {\n\n\tvar cut = \"gender\";\n\t// var cut = \"supGender\"\n\n\tfunction getAverage(data) {\n\t\tif (cut == \"gender\") {\n\t\t\treturn d3.mean(data, function (d) {\n\t\t\t\treturn +d.male_num / d.total_num;\n\t\t\t});\n\t\t}\n\t\tif (cut == \"supWhite\") {\n\t\t\treturn d3.mean(data, function (d) {\n\t\t\t\treturn +d.white_sup_num / d.total_sup_num;\n\t\t\t});\n\t\t}\n\t\tif (cut == \"supGender\") {\n\t\t\treturn d3.mean(data, function (d) {\n\t\t\t\treturn +d.male_sup_num / d.total_sup_num;\n\t\t\t});\n\t\t}\n\t\treturn d3.mean(data, function (d) {\n\t\t\treturn +d.white_num / d.total_num;\n\t\t});\n\t}\n\t//\n\tfunction getPercent(data) {\n\t\tif (cut == \"gender\") {\n\t\t\treturn +data.male_num / data.total_num;\n\t\t}\n\t\tif (cut == \"supWhite\") {\n\t\t\treturn +data.white_sup_num / data.total_sup_num;\n\t\t}\n\t\tif (cut == \"supGender\") {\n\t\t\treturn +data.male_sup_num / data.total_sup_num;\n\t\t}\n\t\treturn +data.white_num / data.total_num;\n\t}\n\t//\n\tvar latLongMap = d3.map(latLongData, function (d) {\n\t\treturn d.NewsID;\n\t});\n\tvar newsIdMap = d3.map(newsIDLocation, function (d) {\n\t\treturn d.NewsID;\n\t});\n\n\tvar regionMap = d3.map(states, function (d) {\n\t\treturn d[1];\n\t});\n\n\tvar width = 500;\n\tvar horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n\tvar container = d3.select(\".line-scatter\");\n\n\tvar yearNest = d3.nest().key(function (d) {\n\t\tvar state = null;\n\t\tvar region = null;\n\t\tif (newsIdMap.has(d.NewsID)) {\n\t\t\tstate = newsIdMap.get(d.NewsID).State;\n\t\t}\n\t\tif (regionMap.has(state)) {\n\t\t\tregion = regionMap.get(state)[3];\n\t\t}\n\t\treturn region;\n\t}).key(function (d) {\n\t\treturn +d.Year;\n\t}).sortKeys(function (a, b) {\n\t\treturn a - b;\n\t}).rollup(function (leaves) {\n\t\tvar average = getAverage(leaves);\n\t\treturn { average: average, values: leaves };\n\t}).entries(mapData);\n\n\t//\n\tvar region = container.selectAll(\"div\").data(yearNest).enter().append(\"div\").attr(\"class\", \"year-container\");\n\n\tregion.append(\"p\").text(function (d) {\n\t\treturn d.key;\n\t});\n\n\tvar years = region.selectAll(\"div\").data(function (d) {\n\t\treturn d.values;\n\t}).enter().append(\"div\").attr(\"class\", \"region-container\");\n\n\tyears.selectAll(\"div\").data(function (d) {\n\t\treturn d.value.values;\n\t}).enter().append(\"div\").attr(\"class\", \"line\").style(\"left\", function (d) {\n\t\tvar percent = getPercent(d);\n\t\treturn horzScale(percent) + \"px\";\n\t}).style(\"background-color\", function (d) {\n\t\treturn null;\n\t});\n\tyears.append(\"div\").style(\"left\", function (d) {\n\t\treturn horzScale(.5) + \"px\";\n\t}).attr(\"class\", \"line line-half\");\n\t//\n\tyears.append(\"div\").datum(function (d) {\n\t\treturn d.value.average;\n\t}).style(\"left\", function (d) {\n\t\treturn horzScale(d) + \"px\";\n\t}).attr(\"class\", \"line line-average\").append(\"p\").text(function (d) {\n\t\treturn Math.round(d * 100) + \"%\";\n\t});\n\n\tyears.append(\"p\").text(function (d) {\n\t\treturn d.key;\n\t});\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// D3 is included by globally by default\n// import * as d3 from 'd3'\n// import loadData from './load-data'\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 50;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_num / d.total_num;\n      });\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +d.white_sup_num / d.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_sup_num / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +d.white_num / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +data.male_num / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return +data.white_num / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var width = 1000;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".histogram\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data([0, 20, 50, 100, 500]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    countMin = d;\n    buildChart();\n  });\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data([\"race\", \"gender\", \"supWhite\", \"supGender\"]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    cut = d;\n    buildChart();\n  });\n\n  function buildChart() {\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    d3.selectAll(\".histogram-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"histogram-chart-wrapper\");\n\n    var yearNest = d3.nest().key(function (d) {\n      return +d.Year;\n    }).rollup(function (leaves) {\n      var average = getAverage(leaves);\n      return { average: average, values: leaves };\n    }).entries(filteredMapData);\n\n    var dataToMap = yearNest.filter(function (d) {\n      return d.key == 2014;\n    })[0].value;\n\n    dataToMap.values = d3.nest().key(function (d) {\n      return Math.round(getPercent(d) * 50) / 50;\n    }).sortKeys(function (a, b) {\n      return a - b;\n    })\n    // .rollup(function(leaves){\n    //   var average = getAverage(leaves);\n    //   return {average:average,values:leaves};\n    // })\n    .entries(dataToMap.values);\n\n    chartDiv.append(\"div\").attr(\"class\", \"histogram-avg-div\").style(\"left\", function (d) {\n      return dataToMap.average * width + 1 + \"px\";\n    }).append(\"p\").text(Math.round(dataToMap.average * 100) + \"%\");\n\n    var yearsColumn = chartDiv.selectAll(\".histogram-year-container\").data(dataToMap.values).enter().append(\"div\").attr(\"class\", \"histogram-year-container\").style(\"left\", function (d) {\n      return d.key * width + 1 + \"px\";\n    });\n    //\n    yearsColumn.selectAll(\"div\").data(function (d) {\n      return d.values;\n    }).enter().append(\"div\").attr(\"class\", function (d) {\n      var state = null;\n      var region = null;\n      if (newsIdMap.has(d.NewsID)) {\n        state = newsIdMap.get(d.NewsID).State;\n      }\n      if (regionMap.has(state)) {\n        region = regionMap.get(state)[3];\n      }\n\n      if (region == \"West\") {\n        region = \"green\";\n      }\n      if (region == \"South\") {\n        region = \"blue\";\n      }\n      if (region == \"Midwest\") {\n        region = \"purple\";\n      }\n      if (region == \"Northeast\") {\n        region = \"yellow\";\n      }\n      return \"histogram-year-item \" + region;\n    }).style(\"background-color\", function (d) {\n      // return backgroundFunction(d)\n      return null;\n    }).on(\"mouseover\", function (d) {\n      console.log(newsIDName.get(d.NewsID).Company);\n    });\n\n    yearsColumn.append(\"p\").text(function (d, i) {\n      if (i % 5 == 0 || i == 0 || i == yearsColumn.size() - 1) {\n        return Math.round(d.key * 100) + \"%\";\n      }\n      return null;\n    });\n  }\n  function backgroundFunction(d) {\n    var state = null;\n    var region = null;\n    if (newsIdMap.has(d.NewsID)) {\n      state = newsIdMap.get(d.NewsID).State;\n    }\n    if (regionMap.has(state)) {\n      region = regionMap.get(state)[3];\n    }\n    if (region == \"West\") {\n      return \"green\";\n    }\n    if (region == \"South\") {\n      return \"blue\";\n    }\n    if (region == \"Midwest\") {\n      return \"purple\";\n    }\n    if (region == \"Northeast\") {\n      return \"yellow\";\n    }\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo, stateTopo) {\n\n  // var projection = d3.geoAlbersUsa()\n  //     // .scale(1280)\n  //     // .translate([width / 2, height / 2]);\n  //\n  // var path = d3.geoPath()\n  //     .projection(projection)\n  //     // .pointRadius(1.5)\n  //     ;\n  //\n  // // var projection = d3.geoAlbersUsa();\n  // // var path = d3.geoPath().projection(projection);\n  //\n  // var cut = \"gender\"\n  // // var cut = \"supGender\"\n  // var countMin =  19;\n  //\n  // mapData = mapData.filter(function(d){\n  //   return +d.Year > 2000;\n  // })\n  //\n  // function getAverage(data){\n  // \tif(cut == \"gender\"){\n  //     var mean = d3.mean(data,function(d){return +(data.total_num-data.male_num)/data.total_num});\n  // \t\treturn mean;\n  // \t}\n  // \tif(cut == \"supWhite\"){\n  // \t\treturn d3.mean(data,function(d){return +data.white_sup_num/data.total_sup_num});\n  // \t}\n  // \tif(cut == \"supGender\"){\n  // \t\treturn d3.mean(data,function(d){return (+data.total_sup_num - +data.male_sup_num)/data.total_sup_num});\n  // \t}\n  // \treturn d3.mean(data,function(d){return +data.white_num/data.total_num});\n  // }\n  //\n  // function getPercent(data){\n  // \tif(cut == \"gender\"){\n  // \t\treturn +(data.total_num-data.male_num)/data.total_num\n  // \t}\n  // \tif(cut == \"supWhite\"){\n  // \t\treturn +data.white_sup_num/data.total_sup_num;\n  // \t}\n  // \tif(cut == \"supGender\"){\n  // \t\treturn +data.male_sup_num/data.total_sup_num;\n  // \t}\n  // \treturn (+data.total_num - +data.white_num)/data.total_num\n  // }\n  //\n  // function getPercentType(kind,data){\n  //   if(kind == \"gender\"){\n  //     return +(data.total_num-data.male_num)/data.total_num\n  //   }\n  //   if(kind == \"supWhite\"){\n  //     return +data.white_sup_num/data.total_sup_num;\n  //   }\n  //   if(kind == \"supGender\"){\n  //     return (+data.total_sup_num - +data.male_sup_num)/data.total_sup_num;\n  //   }\n  //   return (+data.total_num - +data.white_num)/data.total_num\n  // }\n  //\n  // var latLongMap = d3.map(latLongData,function(d){ return d.NewsID});\n  // var newsIdMap = d3.map(newsIDLocation,function(d){ return d.NewsID});\n  // var newsIDName = d3.map(newsIDInfo,function(d){ return d.NewsID});\n  // var regionMap = d3.map(states,function(d){\n  // \treturn d[1];\n  // });\n  //\n  // var margin = {top: 40, right: 40, bottom: 40, left: 40};\n  // var width = 600 - margin.left - margin.right;\n  // var height = 300 - margin.top - margin.bottom;\n  // var horzScale = d3.scaleLinear().domain([0,1]).range([0,width])\n  // var container = d3.select(\".maps\");\n  //\n  // var toggles = container.append(\"div\")\n  //   .attr(\"class\",\"histogram-chart-toggle-wrapper\");\n  //\n  // toggles\n  //   .append(\"div\")\n  //   .attr(\"class\",\"histogram-chart-toggle-size\")\n  //   .selectAll(\"p\")\n  //   .data([0,20,50,100,500])\n  //   .enter()\n  //   .append(\"p\")\n  //   .attr(\"class\",\"histogram-chart-toggle-item\")\n  //   .text(function(d){\n  //     return d;\n  //   })\n  //   .on(\"click\",function(d){\n  //     countMin = d;\n  //     buildChart();\n  //   })\n  //   ;\n  //\n  // toggles\n  //   .append(\"div\")\n  //   .attr(\"class\",\"histogram-chart-toggle-type\")\n  //   .selectAll(\"p\")\n  //   .data([\"race\",\"gender\",\"supWhite\",\"supGender\"])\n  //   .enter()\n  //   .append(\"p\")\n  //   .attr(\"class\",\"histogram-chart-toggle-item\")\n  //   .text(function(d){\n  //     return d;\n  //   })\n  //   .on(\"click\",function(d){\n  //     cut = d;\n  //     buildChart();\n  //   })\n  //   ;\n  //\n  // function buildChart(){\n  //\n  //\n  //\n  //   d3.selectAll(\".maps-chart-wrapper\").remove();\n  //\n  //   var chartDiv = container\n  //     .append(\"div\")\n  //     .attr(\"class\",\"maps-chart-wrapper\")\n  //\n  //   var mapSvg = chartDiv.append(\"svg\")\n  //     .attr(\"class\",\"maps-chart-svg\")\n  //     .attr(\"viewBox\",\"0 0 960 600\")\n  //     ;\n  //\n  //   mapSvg.append(\"g\")\n  //     .attr(\"class\", \"states\")\n  //     .selectAll(\"path\")\n  //     // .data(topojson.feature(stateTopo, stateTopo.objects.states))\n  //     .data(topojson.feature(stateTopo, stateTopo.objects.states).features)\n  //     .enter().append(\"path\")\n  //     .attr(\"d\", path);\n  //\n  //   mapSvg\n  //     .append(\"g\")\n  //     .append(\"path\")\n  //     .attr(\"class\", \"state-borders\")\n  //     .attr(\"d\", path(topojson.mesh(stateTopo, stateTopo.objects.states, function(a, b) { return a !== b; })));\n  //\n  //   var chartSvgDoubleChange = chartDiv\n  //     .append(\"svg\")\n  //     .attr(\"class\",\"maps-chart-wrapper-svg-double-change\")\n  //     .attr(\"width\",width+margin.left+margin.right)\n  //     .attr(\"height\",height+margin.top+margin.bottom)\n  //     .style(\"width\",width+margin.left+margin.right+\"px\")\n  //     .style(\"height\",height+margin.top+margin.bottom+\"px\")\n  //     ;\n  //\n  //   var miniMultiple = container.append(\"div\")\n  //     .attr(\"class\",\"slope-mini-multiple-div\")\n  //     ;\n  //\n  //   var filteredMapData = mapData.filter(function(d){\n  //       if(cut == \"supWhite\" || cut == \"supGender\"){\n  //         return d.total_num > countMin && d.total_sup_num > 0;\n  //       }\n  //       return d.total_num > countMin;\n  //     })\n  //     ;\n  //\n  //   var maxPercentArray = [];\n  //   var diffArray = [];\n  //   var raceDiffArray = []\n  //   var newsNest = d3.nest()\n  //     .key(function(d){\n  //       return +d.NewsID\n  //     })\n  //     .rollup(function(leaves){\n  //       var map = d3.map(leaves,function(d){return d.Year});\n  //       var maxTotalNum = d3.max(leaves,function(d){return d.total_num});\n  //       var maxPercent = d3.max(leaves,function(d){ return getPercent(d)});\n  //       maxPercentArray.push(maxPercent)\n  //       return {yearMap:map,values:leaves,maxTotal:maxTotalNum}\n  //     })\n  //     .entries(filteredMapData)\n  //     ;\n  //\n  //   newsNest = newsNest.filter(function(d){\n  //     if(d.value.yearMap.has(2014)){\n  //       return d;\n  //     }\n  //     return null;\n  //   });\n  //\n  //   for (var item in newsNest){\n  //     var diff = getPercentType(\"gender\",newsNest[item].value.yearMap.get(2014))-getPercentType(\"gender\",newsNest[item].value.values[0])\n  //     cut = \"supGender\";\n  //     var raceDiff = getPercent(newsNest[item].value.yearMap.get(2014))-getPercent(newsNest[item].value.values[0]);\n  //     cut = \"gender\"\n  //     diffArray.push(diff);\n  //     raceDiffArray.push(raceDiff);\n  //\n  //     newsNest[item].value.diff = diff;\n  //     newsNest[item].value.raceDiff = raceDiff;\n  //     if(latLongMap.has(newsNest[item].key)){\n  //       newsNest[item].value.location = latLongMap.get(newsNest[item].key)\n  //       newsNest[item].value.hasLocation = true\n  //     }\n  //     else{\n  //       newsNest[item].value.hasLocation = false\n  //     }\n  //   }\n  //   ;\n  //\n  //\n  //\n  //   newsNest = newsNest.filter(function(d){\n  //     var hasLat = false;\n  //     if(d.value.hasLocation){\n  //       if(d.value.location.lat != \"NULL\"){\n  //         hasLat = true;\n  //       }\n  //     }\n  //     return d.value.hasLocation && hasLat;\n  //   })\n  //\n  //   var totalExtent = d3.extent(newsNest,function(d){return +d.value.maxTotal})\n  //   var radiusScale = d3.scaleLinear().domain(totalExtent).range([3,40]);\n  //   var percentExtent = d3.extent(maxPercentArray,function(d){return d;});\n  //   var diffExtent = d3.extent(diffArray,function(d){return d; });\n  //   var raceDiffExtent = d3.extent(raceDiffArray,function(d){ return d; });\n  //   var diffScale = d3.scaleLinear().domain([diffExtent[0],diffExtent[1]]).range([0,width])\n  //   var raceDiffScale = d3.scaleLinear().domain([raceDiffExtent[0],raceDiffExtent[1]]).range([height,0])\n  //\n  //   var totalScale = d3.scaleLinear().domain(totalExtent).range([height,0]);\n  //   var totalXScale = d3.scaleLinear().domain(totalExtent).range([0,width]);\n  //\n  //   var colorScale = d3.scaleLinear().domain([diffExtent[0],0,diffExtent[1]]).range([\"red\",\"white\",\"green\"]);\n  //\n  //   var colorScalePercent = d3.scaleLinear().domain([-1,0,.30,.35,.4,.45,.5,.6]).range([\"#000000\",\"#000000\",\"rgb(8, 69, 148)\",\"rgb(33, 113, 181)\",\"rgb(204, 219, 163)\",\"rgb(253, 246, 163)\",\"#e2e1e1\",\"rgb(39, 108, 145)\"]);\n  //\n  //   var strokeScale = d3.scaleLinear().domain([diffExtent[0],0,diffExtent[1]]).range([\"red\",\"grey\",\"green\"]);\n  //\n  //   var xArrowLength = d3.scaleLinear().domain([0,.15]).range([1,30]).clamp(true);\n  //\n  //   // newsNest = newsNest.filter(function(d){\n  //   //   var percent = getPercentType(\"gender\",d.value.yearMap.get(2014));\n  //   //   return percent > .50;\n  //   // })\n  //\n  //   var xScale = d3.scaleLinear().domain([0,.7]).range([0,width]);\n  //   var yScale = d3.scaleLinear().domain([.2,.5]).range([height,0]);\n  //   var lineWidthScale = d3.scaleLinear().domain(totalExtent).range([1.4,2.5]).clamp(true)\n  //\n  //   // var mapMarkers = mapSvg.append(\"g\")\n  //   //   .attr(\"class\",\"map-markers\")\n  //   //   .selectAll(\"circle\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"map-marker\")\n  //   //   .attr(\"r\",function(d){\n  //   //     return radiusScale(+d.value.maxTotal);\n  //   //   })\n  //   //   // .style(\"fill\",function(d){\n  //   //   //   //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n  //   //   //   //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //   //   return \"rgb(169, 169, 169)\";\n  //   //   //   return colorScalePercent(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //   //   return \"red\"\n  //   //   // })\n  //   //   .attr(\"transform\",function(d){\n  //   //     var location = d.value.location;\n  //   //     return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     // console.log(d);\n  //   //     console.log(newsIDName.get(d.key).Company);\n  //   //     console.log(getPercentType(\"gender\",d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   ;\n  //\n  //   var tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n  //   var arc = d3.arc()\n  //     .innerRadius(0)\n  //     .outerRadius(10)\n  //     .startAngle(0);\n  //\n  //   // radiusScale.range([10,20])\n  //\n  //   var theta1 = Math.PI * 0.75;\n  //   var theta2 = Math.PI * -0.75;\n  //   var sin1 = Math.sin(theta1);\n  //   var sin2 = Math.sin(theta2);\n  //   var cos1 = Math.cos(theta1);\n  //   var cos2 = Math.cos(theta2);\n  //\n  //   var arrowMaps = mapSvg.append(\"g\")\n  //       .selectAll(\"g\")\n  //       .data(newsNest)\n  //       .enter()\n  //       .append(\"g\")\n  //       .attr(\"transform\",function(d){\n  //         var location = d.value.location;\n  //         return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //       })\n  //       .append(\"path\")\n  //       .attr(\"class\",\"map-arrow-path\")\n  //       .attr(\"d\", function(d){\n  //\n  //         // console.log(getPercentType(\"gender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",newsNest[item].value.values[0]));\n  //         var xVal = xArrowLength(Math.abs(d.value.diff));\n  //         var dx = 0;\n  //         if(d.value.diff > 0){\n  //           dx = xVal;\n  //         }\n  //         else{\n  //           dx = -xVal;\n  //         }\n  //         var dy = -3;\n  //\n  //         var stemLen = Math.sqrt(dx * dx + dy * dy);\n  //         var headLen = Math.min(stemLen * 0.7, 8);\n  //         var xn = dx / stemLen * headLen;\n  //         var yn = dy / stemLen * headLen;\n  //         var ax1 = xn * cos1 - yn * sin1 + dx\n  //         var ay1 = xn * sin1 + yn * cos1 + dy\n  //         var ax2 = xn * cos2 - yn * sin2 + dx\n  //         var ay2 = xn * sin2 + yn * cos2 + dy\n  //\n  //         var head = [[ax1,ay1],[dx,dy],[ax2,ay2]];\n  //\n  //         return \"M0,0\"+\"L\"+dx+\",\"+dy+\"L\"+head[0][0]+\",\"+head[0][1]+\"L\"+head[1][0]+\",\"+head[1][1]+\"L\"+head[2][0]+\",\"+head[2][1];\n  //         // arc.outerRadius(radiusScale(+d.value.maxTotal));\n  //         // return arc({endAngle: +getPercentType(\"gender\",d.value.yearMap.get(2014)) * tau});\n  //       })\n  //       .attr(\"stroke-width\",function(d){\n  //         // return lineWidthScale(d.value.maxTotal)\n  //         return 1.4;\n  //       })\n  //       .attr(\"stroke\",function(d){\n  //         if(d.value.diff > 0){\n  //           return \"#3989cb\"\n  //         }\n  //         return \"rgb(214, 84, 84)\";\n  //       })\n  //       .on(\"mouseover\",function(d){\n  //         console.log(d.value.diff);\n  //         console.log(newsIDName.get(d.key).Company);\n  //       })\n  //       ;\n  //\n  //   // var arrowMaps = mapSvg.append(\"g\")\n  //   //     .selectAll(\"g\")\n  //   //     .data(newsNest)\n  //   //     .enter()\n  //   //     .append(\"g\")\n  //   //     .attr(\"transform\",function(d){\n  //   //       var location = d.value.location;\n  //   //       return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //   //     })\n  //   //     .append(\"path\")\n  //   //     .attr(\"transform\",function(d){\n  //   //       return \"translate(\"+ Math.random()*5+\",\"+Math.random()*5+\")\";\n  //   //     })\n  //   //     .attr(\"class\",\"map-arrow-path-peak\")\n  //   //     .attr(\"d\", function(d){\n  //   //\n  //   //       //height = size\n  //   //       //left / right = margin\n  //   //\n  //   //       var offset = radiusScale(d.value.maxTotal);\n  //   //\n  //   //       // var xVal = xArrowLength(Math.abs(d.value.diff));\n  //   //\n  //   //       xArrowLength.range([0,offset*3])\n  //   //       var xVal = xArrowLength(Math.abs(d.value.diff));\n  //   //\n  //   //       var dx = 0;\n  //   //       if(d.value.diff > 0){\n  //   //         dx = xVal;\n  //   //       }\n  //   //       else{\n  //   //         dx = -xVal;\n  //   //       }\n  //   //       var dy = -3;\n  //   //\n  //   //       return \"M\"+ -offset +\",\"+ 0 + \"L\"+0+\",\"+ -dx +\"L\"+offset+\",\"+0// [-offset,0][0,dx][offset,0]\n  //   //\n  //   //       // return \"M0,\"+ -offset + \"L\"+dx+\",\"+\"0\"+\"L\"+0+\",\"+offset// [0,-offset][xVal,0][0,offset]\n  //   //\n  //   //\n  //   //       var stemLen = Math.sqrt(dx * dx + dy * dy);\n  //   //       var headLen = Math.min(stemLen * 0.7, 8);\n  //   //       var xn = dx / stemLen * headLen;\n  //   //       var yn = dy / stemLen * headLen;\n  //   //       var ax1 = xn * cos1 - yn * sin1 + dx\n  //   //       var ay1 = xn * sin1 + yn * cos1 + dy\n  //   //       var ax2 = xn * cos2 - yn * sin2 + dx\n  //   //       var ay2 = xn * sin2 + yn * cos2 + dy\n  //   //\n  //   //       var head = [[ax1,ay1],[dx,dy],[ax2,ay2]];\n  //   //\n  //   //       return \"M0,0\"+\"L\"+dx+\",\"+dy+\"L\"+head[0][0]+\",\"+head[0][1]+\"L\"+head[1][0]+\",\"+head[1][1]+\"L\"+head[2][0]+\",\"+head[2][1];\n  //   //       // arc.outerRadius(radiusScale(+d.value.maxTotal));\n  //   //       // return arc({endAngle: +getPercentType(\"gender\",d.value.yearMap.get(2014)) * tau});\n  //   //     })\n  //   //     .attr(\"stroke-width\",function(d){\n  //   //       return lineWidthScale(d.value.maxTotal)\n  //   //       // return 1.4;\n  //   //     })\n  //   //     .attr(\"stroke\",function(d){\n  //   //       if(d.value.diff > 0){\n  //   //         return \"#3989cb\"\n  //   //       }\n  //   //       return \"rgb(214, 84, 84)\";\n  //   //     })\n  //   //     .on(\"mouseover\",function(d){\n  //   //       console.log(d.value.diff);\n  //   //       console.log(newsIDName.get(d.key).Company);\n  //   //     })\n  //   //     ;\n  //\n  //\n  //   // var pieChartBackground = mapSvg.append(\"g\")\n  //   //   .attr(\"class\",\"map-markers\")\n  //   //   .selectAll(\"circle\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"map-marker\")\n  //   //   .attr(\"r\",function(d){\n  //   //     return radiusScale(+d.value.maxTotal);\n  //   //   })\n  //   //   .style(\"fill\",function(d){\n  //   //     //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n  //   //     //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //\n  //   //     // return colorScalePercent(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //     return \"#72c1ff\"\n  //   //   })\n  //   //   .attr(\"transform\",function(d){\n  //   //     var location = d.value.location;\n  //   //     return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     // console.log(d);\n  //   //     console.log(newsIDName.get(d.key).Company);\n  //   //     console.log(getPercentType(\"gender\",d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   ;\n  //\n  //   // var pieCharts = mapSvg.append(\"g\")\n  //   //     .selectAll(\"g\")\n  //   //     .data(newsNest)\n  //   //     .enter()\n  //   //     .append(\"g\")\n  //   //     .attr(\"transform\",function(d){\n  //   //       var location = d.value.location;\n  //   //       return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //   //     })\n  //   //     .append(\"path\")\n  //   //     .attr(\"class\",\"slice-arc\")\n  //   //     .style(\"fill\",function(d){\n  //   //       return \"blue\"\n  //   //       //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n  //   //       //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //       return colorScalePercent(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //       return \"red\"\n  //   //     })\n  //   //     .attr(\"d\", function(d){\n  //   //       arc.outerRadius(radiusScale(+d.value.maxTotal));\n  //   //       return arc({endAngle: +getPercentType(\"gender\",d.value.yearMap.get(2014)) * tau});\n  //   //     });\n  //\n  //   // function buildAxis(){\n  //   //  var chartAxis = chartDiv.append(\"g\")\n  //   //    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n  //   //    .attr(\"class\",\"swarm-axis\")\n  //   //    ;\n  //   //\n  //   //  chartAxis.append(\"g\")\n  //   //    .append(\"line\")\n  //   //    .attr(\"x1\",0)\n  //   //    .attr(\"x2\",\"100%\")\n  //   //    .attr(\"y1\",height/2)\n  //   //    .attr(\"y2\",height/2)\n  //   //    .attr(\"class\",\"swarm-axis-line\")\n  //   //\n  //   // }\n  //   // buildAxis();\n  //\n  //   // var linearGradientDown = chartSvgDoubleChange\n  //   //   .append(\"defs\")\n  //   //   .append(\"linearGradient\")\n  //   //   .attr(\"id\",\"gradient\")\n  //   //   .attr(\"x1\",0)\n  //   //   .attr(\"x2\",0)\n  //   //   .attr(\"y1\",0)\n  //   //   .attr(\"y2\",1)\n  //   //\n  //   // var linearGradientUp = chartSvgDoubleChange\n  //   //   .append(\"defs\")\n  //   //   .append(\"linearGradient\")\n  //   //   .attr(\"id\",\"gradient-up\")\n  //   //   .attr(\"x1\",0)\n  //   //   .attr(\"x2\",0)\n  //   //   .attr(\"y1\",0)\n  //   //   .attr(\"y2\",1)\n  //   //\n  //   // var chartSvgDoubleChangeG = chartSvgDoubleChange\n  //   //   .append(\"g\")\n  //   //   .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  //   //\n  //   // linearGradientUp\n  //   //   .append(\"stop\")\n  //   //   .attr(\"stop-color\",\"blue\")\n  //   //   .attr(\"stop-opacity\",1)\n  //   //\n  //   // linearGradientUp\n  //   //   .append(\"stop\")\n  //   //   .attr(\"offset\",\"100%\")\n  //   //   .attr(\"stop-color\",\"blue\")\n  //   //   .attr(\"stop-opacity\",0)\n  //   //\n  //   // linearGradientDown\n  //   //   .append(\"stop\")\n  //   //   .attr(\"stop-color\",\"red\")\n  //   //   .attr(\"stop-opacity\",0)\n  //   //\n  //   // linearGradientDown\n  //   //   .append(\"stop\")\n  //   //   .attr(\"offset\",\"100%\")\n  //   //   .attr(\"stop-color\",\"red\")\n  //   //   .attr(\"stop-opacity\",1)\n  //   //\n  //   // chartSvgDoubleChangeG.append(\"marker\")\n  //   //   .attr(\"id\",\"triangle-up\")\n  //   //   .attr(\"viewBox\",\"0 0 10 10\")\n  //   //   .attr(\"refX\",0)\n  //   //   .attr(\"refY\",5)\n  //   //   .attr(\"markerUnits\",\"strokeWidth\")\n  //   //   .attr(\"markerWidth\",6)\n  //   //   .attr(\"markerHeight\",8)\n  //   //   .attr(\"orient\",\"auto\")\n  //   //   .append(\"path\")\n  //   //   .attr(\"fill\",\"blue\")\n  //   //   .attr(\"d\",\"M 0 0 L 10 5 L 0 10 z\")\n  //   //\n  //   // chartSvgDoubleChangeG.append(\"marker\")\n  //   //   .attr(\"id\",\"triangle-down\")\n  //   //   .attr(\"viewBox\",\"0 0 10 10\")\n  //   //   .attr(\"refX\",0)\n  //   //   .attr(\"refY\",5)\n  //   //   .attr(\"markerUnits\",\"strokeWidth\")\n  //   //   .attr(\"markerWidth\",6)\n  //   //   .attr(\"markerHeight\",8)\n  //   //   .attr(\"orient\",\"auto\")\n  //   //   .append(\"path\")\n  //   //   .attr(\"fill\",\"red\")\n  //   //   .attr(\"d\",\"M 0 0 L 10 5 L 0 10 z\")\n  //   //\n  //   //\n  // \t// function drawArrow (t0,t1) {\n  // \t// \tvar d = t1 > t0 ?\n  // \t// \t\t(\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n  // \t// \t\t(\"M0,\" + (t1+2) + \" L4,\" + (t1+8) + \" L1.5,\" + (t1+8) + \" L0,\" + t0 + \" L-1.5,\" + (t1+8) + \" L-4,\" + (t1+8) + \" Z\");\n  //   //\n  // \t// \treturn d;\n  // \t// }\n  //   //\n  //   // var arrows = chartSvgDoubleChangeG\n  //   //   .selectAll(\"path\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"path\")\n  //   //   .attr(\"class\",\"arrow-scatter-line\")\n  //   //   .attr(\"d\",function(d){\n  //   //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n  //   //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //     // return null\n  //   //     //\n  //   //     return drawArrow(t0,t1)\n  //   //   })\n  //   //   .attr(\"fill\",function(d){\n  //   //     if(d.value.diff > 0){\n  //   //       return \"url(#gradient-up)\"\n  //   //     }\n  //   //     return \"url(#gradient)\";\n  //   //   })\n  //   //   .attr(\"stroke\",\"none\")\n  //   //   .attr(\"fill-opacity\",1)\n  //   //\n  //   // var arrowXScale = d3.scaleLinear().domain([0,arrows.size()-1]).range([0,width]);\n  //   //\n  //   // arrows\n  //   //   .sort(function(a,b){\n  //   //     // return getPercentType(\"gender\",b.value.values[0]) - getPercentType(\"gender\",a.value.values[0])\n  //   //     return b.value.diff - a.value.diff;\n  //   //   })\n  //   //   .attr(\"transform\",function(d,i){\n  //   //     return \"translate(\"+arrowXScale(i)+\",0)\"\n  //   //     // return \"translate(\"+totalXScale(d.value.yearMap.get(2014).total_num)+\",0)\"\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(getPercentType(\"supGender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   ;\n  //\n  //\n  //   // chartSvgDoubleChangeG\n  //   //   .selectAll(\"line\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"arrow-scatter-line\")\n  //   //   .style(\"stroke-width\",function(d){\n  //   //     if(+d.value.yearMap.get(2014).total_num > 100){\n  //   //       return \"2px\"\n  //   //     }\n  //   //     if(+d.value.yearMap.get(2014).total_num > 50){\n  //   //       return \"1px\"\n  //   //     }\n  //   //     if(+d.value.yearMap.get(2014).total_num > 10){\n  //   //       return \".5px\"\n  //   //     }\n  //   //   })\n  //   //   .style(\"stroke\",function(d){\n  //   //     if(d.value.diff > 0){\n  //   //       return \"blue\"\n  //   //     }\n  //   //     return \"red\"\n  //   //   })\n  //   //   .attr(\"x1\",function(d){\n  //   //     return xScale(getPercentType(\"supGender\",d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return xScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n  //   //     // return diffScale(d.value.diff);\n  //   //   })\n  //   //   .attr(\"y1\",function(d){\n  //   //     return totalScale(d.value.yearMap.get(2014).total_num)\n  //   //     // return yScale(getPercentType(\"supGender\",d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return totalScale(d.value.yearMap.get(2014).total_num)\n  //   //     // return yScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n  //   //     // return raceDiffScale(d.value.raceDiff)\n  //   //   })\n  //   //   .attr(\"marker-end\",function(d){\n  //   //     if(d.value.diff > 0){\n  //   //       return \"url(#triangle-up)\";\n  //   //     }\n  //   //     return \"url(#triangle-down)\";\n  //   //   })\n  //   //   // .style(\"stroke\",\"url(#gradient)\")\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(getPercentType(\"supGender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   ;\n  //\n  //   // chartSvgDoubleChangeG\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"arrow-scatter-line-axis\")\n  //   //   .attr(\"x1\",function(d){\n  //   //     return xScale(.5);\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return xScale(.5);\n  //   //   })\n  //   //   .attr(\"y1\",function(d){\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return height;\n  //   //   })\n  //\n  //   // chartSvgDoubleChangeG\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"arrow-scatter-line-axis\")\n  //   //   .attr(\"x1\",function(d){\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return width;\n  //   //   })\n  //   //   .attr(\"y1\",function(d){\n  //   //     return yScale(.5);\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return yScale(.5);\n  //   //   })\n  //\n  //\n  //   // function buildAverage(){\n  //   //   var chartAverage = chartDiv.append(\"g\")\n  //   //      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n  //   //      .attr(\"class\",\"swarm-average\")\n  //   //      ;\n  //   //\n  //   //  chartAverage.append(\"text\")\n  //   //    .attr(\"class\",\"swarm-average-text swarm-average-text-label\")\n  //   //    .attr(\"x\",xScale(dataToMap.average))\n  //   //    .attr(\"y\",height*.33-19)\n  //   //    .text(\"Overall\")\n  //   //\n  //   //   chartAverage.append(\"text\")\n  //   //     .attr(\"class\",\"swarm-average-text\")\n  //   //     .attr(\"x\",xScale(dataToMap.average))\n  //   //     .attr(\"y\",height*.33-5)\n  //   //     .text(Math.round(dataToMap.average*100)+\"% Male\")\n  //   //\n  //   //   chartAverage.append(\"line\")\n  //   //     .attr(\"class\",\"swarm-average-line\")\n  //   //     .attr(\"x1\",xScale(dataToMap.average))\n  //   //     .attr(\"x2\",xScale(dataToMap.average))\n  //   //     .attr(\"y1\",height*.33)\n  //   //     .attr(\"y2\",height*.66)\n  //   //     ;\n  //   // }\n  //   // buildAverage();\n  //\n  //   // var topRowCircle = chartG\n  //   //   .append(\"g\")\n  //   //   .selectAll(\"circle\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"swarm-circle\")\n  //   //   .attr(\"r\", function(d){\n  //   //     return 3\n  //   //   })\n  //   //   .attr(\"cx\", function(d) {\n  //   //     return xScale(getPercent(d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   .attr(\"cy\", function(d) {\n  //   //     return 0;\n  //   //   })\n  //   //   .style(\"fill\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(d);\n  //   //   })\n  //   //   ;\n  //   //\n  //   // var bottomRowCircle = chartG\n  //   //   .append(\"g\")\n  //   //   .selectAll(\"circle\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"swarm-circle\")\n  //   //   .attr(\"r\", function(d){\n  //   //     return 3\n  //   //   })\n  //   //   .attr(\"cx\", function(d) {\n  //   //     return xScale(getPercent(d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"cy\", function(d) {\n  //   //     return 100;\n  //   //   })\n  //   //   .style(\"fill\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //   // var rowLines = chartG\n  //   //   .append(\"g\")\n  //   //   .selectAll(\"line\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"slope-line\")\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return xScale(getPercent(d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return 100;\n  //   //   })\n  //   //   .attr(\"x1\", function(d) {\n  //   //     return xScale(getPercent(d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   .attr(\"y1\", function(d) {\n  //   //     return 0;\n  //   //   })\n  //   //   .style(\"stroke\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //   // var miniWidth = 40;\n  //   // var miniHeight = 100;\n  //   //\n  //   // var multipleY = d3.scaleLinear().domain([.3,1]).range([miniHeight,0]);\n  //   //\n  //   // var miniMultipleWrapper = miniMultiple.selectAll(\"div\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"div\")\n  //   //   .attr(\"class\",\"mini-multiple-div\")\n  //   //   ;\n  //   //\n  //   // miniMultipleWrapper.append(\"p\")\n  //   //   .attr(\"class\",\"mini-multiple-text\")\n  //   //   .style(\"margin-top\",20)\n  //   //   .text(function(d){\n  //   //     return newsIDName.get(d.value.values[0].NewsID).Company;\n  //   //   })\n  //   //   ;\n  //   //\n  //   // var miniMultipleWrapperSvg = miniMultipleWrapper\n  //   //   .append(\"svg\")\n  //   //   .attr(\"class\",\"slope-mini-svg\")\n  //   //   .attr(\"height\",miniHeight)\n  //   //   .style(\"height\",miniHeight+\"px\")\n  //   //   ;\n  //   //\n  //   // miniMultipleWrapperSvg\n  //   //   .append(\"circle\")\n  //   //   .attr(\"cx\",function(d){\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"cy\",function(d){\n  //   //     return multipleY(getPercent(d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"r\",2)\n  //   //   .attr(\"class\",\"slope-small-dot\")\n  //   //   .style(\"fill\",function(d){\n  //   //\n  //   //     console.log(newsIDName.get(d.key).Company);\n  //   //     console.log(getPercent(d.value.yearMap.get(2014)));\n  //   //     console.log(getPercent(d.value.values[0]));\n  //   //\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //   // miniMultipleWrapperSvg\n  //   //   .append(\"circle\")\n  //   //   .attr(\"cx\",function(d){\n  //   //     return miniWidth;\n  //   //   })\n  //   //   .attr(\"cy\",function(d){\n  //   //     return multipleY(getPercent(d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   .attr(\"r\",2)\n  //   //   .attr(\"class\",\"slope-small-dot\")\n  //   //   .style(\"fill\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //   // miniMultipleWrapperSvg\n  //   //   .selectAll(\"line\")\n  //   //   .data([0,1,2,4,5])\n  //   //   .enter()\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"slope-line-axis\")\n  //   //   .attr(\"y1\", function(d,i) {\n  //   //     return i*20+\"%\";\n  //   //   })\n  //   //   .attr(\"x1\", function(d) {\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"y2\", function(d,i) {\n  //   //     return i*20+\"%\";\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return miniWidth;\n  //   //   })\n  //   //\n  //   // miniMultipleWrapperSvg\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"slope-line\")\n  //   //   .attr(\"y1\", function(d) {\n  //   //     return multipleY(getPercent(d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"x1\", function(d) {\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return multipleY(getPercent(d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return miniWidth;\n  //   //   })\n  //   //   .style(\"stroke\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //\n  //   // cell\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"swarm-circle\")\n  //   //   .attr(\"r\", function(d){\n  //   //     return d.radius\n  //   //   })\n  //   //   // .attr(\"cx\", function(d) { return d.x; })\n  //   //   // .attr(\"cy\", function(d) { return d.y; })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(d.male_num/d.total_num);\n  //   //     console.log(newsIDName.get(d.NewsID).Company);\n  //   //   })\n  //   //   ;\n  //\n  //   // dataToMap.values = d3.nest()\n  //   //   .key(function(d){\n  //   //     return Math.round(getPercent(d)*50)/50;\n  //   //   })\n  //   //   .sortKeys(function(a,b){\n  //   //     return a-b;\n  //   //   })\n  //   //   .entries(dataToMap.values)\n  //   //   ;\n  //   //\n  //   // chartDiv.append(\"div\")\n  //   //   .attr(\"class\",\"histogram-avg-div\")\n  //   //   .style(\"left\",function(d){\n  //   //     return (dataToMap.average*width+1)+\"px\"\n  //   //   })\n  //   //   .append(\"p\")\n  //   //   .text(Math.round(dataToMap.average*100)+\"%\")\n  //   //   ;\n  //   //\n  //   // var yearsColumn = chartDiv\n  //   //   .selectAll(\".histogram-year-container\")\n  //   //   .data(dataToMap.values)\n  //   //   .enter()\n  //   //   .append(\"div\")\n  //   //   .attr(\"class\",\"histogram-year-container\")\n  //   //   .style(\"left\",function(d){\n  //   //     return (d.key*width+1)+\"px\"\n  //   //   })\n  //   //   ;\n  //   //\n  //   // yearsColumn\n  //   //   .selectAll(\"div\")\n  //   //   .data(function(d){\n  //   //     return d.values\n  //   //   })\n  //   //   .enter()\n  //   //   .append(\"div\")\n  //   //   .attr(\"class\",function(d){\n  //   //     var state = null;\n  //   //     var region = null;\n  //   //     if(newsIdMap.has(d.NewsID)){\n  //   //       state = newsIdMap.get(d.NewsID).State;\n  //   //     }\n  //   //     if(regionMap.has(state)){\n  //   //       region = regionMap.get(state)[3];\n  //   //     }\n  //   //\n  //   //     if(region ==\"West\"){\n  //   //       region = \"green\"\n  //   //     }\n  //   //     if(region ==\"South\"){\n  //   //       region = \"blue\"\n  //   //     }\n  //   //     if(region ==\"Midwest\"){\n  //   //       region = \"purple\"\n  //   //     }\n  //   //     if(region ==\"Northeast\"){\n  //   //       region = \"yellow\"\n  //   //     }\n  //   //     return \"histogram-year-item \"+region\n  //   //   })\n  //   //   .style(\"background-color\",function(d){\n  //   //     // return backgroundFunction(d)\n  //   //     return null\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(newsIDName.get(d.NewsID).Company);\n  //   //   })\n  //   //   ;\n  //   //\n  //   // yearsColumn.append(\"p\")\n  //   //   .text(function(d,i){\n  //   //     if(i%5 == 0 || i==0 || i==yearsColumn.size()-1){\n  //   //       return Math.round(d.key*100)+\"%\";\n  //   //     }\n  //   //     return null;\n  //   //\n  //   //   })\n  //   //   ;\n  // }\n  // // function backgroundFunction(d){\n  // //   var state = null;\n  // //   var region = null;\n  // //   if(newsIdMap.has(d.NewsID)){\n  // //     state = newsIdMap.get(d.NewsID).State;\n  // //   }\n  // //   if(regionMap.has(state)){\n  // //     region = regionMap.get(state)[3];\n  // //   }\n  // //   if(region ==\"West\"){\n  // //     return \"green\"\n  // //   }\n  // //   if(region ==\"South\"){\n  // //     return \"blue\"\n  // //   }\n  // //   if(region ==\"Midwest\"){\n  // //     return \"purple\"\n  // //   }\n  // //   if(region ==\"Northeast\"){\n  // //     return \"yellow\"\n  // //   }\n  // // }\n  // buildChart();\n\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvbWFwcy5qcz85OGM4Il0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIHN0YXRlcyA9IFtcbiAgW1wiTWFpbmVcIixcIk1FXCIsMSxcIk5vcnRoZWFzdFwiLDIzXSxcbiAgW1wiVmVybW9udFwiLFwiVlRcIiwyLFwiTm9ydGhlYXN0XCIsNTBdLFxuICBbXCJOZXcgSGFtcHNoaXJlXCIsXCJOSFwiLDMsXCJOb3J0aGVhc3RcIiwzM10sXG4gIFtcIlJob2RlIElzbGFuZFwiLFwiUklcIiw0LFwiTm9ydGhlYXN0XCIsNDRdLFxuICBbXCJNYXNzYWNodXNldHRzXCIsXCJNQVwiLDUsXCJOb3J0aGVhc3RcIiwyNV0sXG4gIFtcIkNvbm5lY3RpY3V0XCIsXCJDVFwiLDYsXCJOb3J0aGVhc3RcIiw5XSxcbiAgW1wiRGVsYXdhcmVcIixcIkRFXCIsNyxcIk5vcnRoZWFzdFwiLDEwXSxcbiAgW1wiTmV3IEplcnNleVwiLFwiTkpcIiw4LFwiTm9ydGhlYXN0XCIsMzRdLFxuICBbXCJOZXcgWW9ya1wiLFwiTllcIiw5LFwiTm9ydGhlYXN0XCIsMzZdLFxuICBbXCJQZW5uc3lsdmFuaWFcIixcIlBBXCIsMTAsXCJOb3J0aGVhc3RcIiw0Ml0sXG4gIFtcIkRpc3RyaWN0IG9mIENvbHVtYmlhXCIsXCJEQ1wiLDExLFwiTm9ydGhlYXN0XCIsMTFdLFxuICBbXCJNYXJ5bGFuZFwiLFwiTURcIiwxMixcIk5vcnRoZWFzdFwiLDI0XSxcbiAgW1wiVmlyZ2luaWFcIixcIlZBXCIsMTMsXCJTb3V0aFwiLDUxXSxcbiAgW1wiTm9ydGggQ2Fyb2xpbmFcIixcIk5DXCIsMTQsXCJTb3V0aFwiLDM3XSxcbiAgW1wiU291dGggQ2Fyb2xpbmFcIixcIlNDXCIsMTUsXCJTb3V0aFwiLDQ1XSxcbiAgW1wiR2VvcmdpYVwiLFwiR0FcIiwxNixcIlNvdXRoXCIsMTNdLFxuICBbXCJBbGFiYW1hXCIsXCJBTFwiLDE3LFwiU291dGhcIiwxXSxcbiAgW1wiTWlzc2lzc2lwcGlcIixcIk1TXCIsMTgsXCJTb3V0aFwiLDI4XSxcbiAgW1wiTG91aXNpYW5hXCIsXCJMQVwiLDE5LFwiU291dGhcIiwyMl0sXG4gIFtcIkFya2Fuc2FzXCIsXCJBUlwiLDIwLFwiU291dGhcIiw1XSxcbiAgW1wiVGVubmVzc2VlXCIsXCJUTlwiLDIxLFwiU291dGhcIiw0N10sXG4gIFtcIktlbnR1Y2t5XCIsXCJLWVwiLDIyLFwiU291dGhcIiwyMV0sXG4gIFtcIldlc3QgVmlyZ2luaWFcIixcIldWXCIsMjMsXCJTb3V0aFwiLDU0XSxcbiAgW1wiT2tsYWhvbWFcIixcIk9LXCIsMjQsXCJNaWR3ZXN0XCIsNDBdLFxuICBbXCJDb2xvcmFkb1wiLFwiQ09cIiwyNSxcIldlc3RcIiw4XSxcbiAgW1wiVXRhaFwiLFwiVVRcIiwyNixcIldlc3RcIiw0OV0sXG4gIFtcIklkYWhvXCIsXCJJRFwiLDI3LFwiV2VzdFwiLDE2XSxcbiAgW1wiV3lvbWluZ1wiLFwiV1lcIiwyOCxcIldlc3RcIiw1Nl0sXG4gIFtcIk1vbnRhbmFcIixcIk1UXCIsMjksXCJXZXN0XCIsMzBdLFxuICBbXCJOb3J0aCBEYWtvdGFcIixcIk5EXCIsMzAsXCJNaWR3ZXN0XCIsMzhdLFxuICBbXCJTb3V0aCBEYWtvdGFcIixcIlNEXCIsMzEsXCJNaWR3ZXN0XCIsNDZdLFxuICBbXCJOZWJyYXNrYVwiLFwiTkVcIiwzMixcIk1pZHdlc3RcIiwzMV0sXG4gIFtcIkthbnNhc1wiLFwiS1NcIiwzMyxcIk1pZHdlc3RcIiwyMF0sXG4gIFtcIklvd2FcIixcIklBXCIsMzQsXCJNaWR3ZXN0XCIsMTldLFxuICBbXCJNaW5uZXNvdGFcIixcIk1OXCIsMzUsXCJNaWR3ZXN0XCIsMjddLFxuICBbXCJXaXNjb25zaW5cIixcIldJXCIsMzYsXCJNaWR3ZXN0XCIsNTVdLFxuICBbXCJJbmRpYW5hXCIsXCJJTlwiLDM3LFwiTWlkd2VzdFwiLDE4XSxcbiAgW1wiTWlzc291cmlcIixcIk1PXCIsMzgsXCJNaWR3ZXN0XCIsMjldLFxuICBbXCJPaGlvXCIsXCJPSFwiLDM5LFwiTWlkd2VzdFwiLDM5XSxcbiAgW1wiTWljaGlnYW5cIixcIk1JXCIsNDAsXCJNaWR3ZXN0XCIsMjZdLFxuICBbXCJJbGxpbm9pc1wiLFwiSUxcIiw0MSxcIk1pZHdlc3RcIiwxN10sXG4gIFtcIkZsb3JpZGFcIixcIkZMXCIsNDIsXCJTb3V0aFwiLDEyXSxcbiAgW1wiQ2FsaWZvcm5pYVwiLFwiQ0FcIiw0MyxcIldlc3RcIiw2XSxcbiAgW1wiTmV2YWRhXCIsXCJOVlwiLDQ0LFwiV2VzdFwiLDMyXSxcbiAgW1wiVGV4YXNcIixcIlRYXCIsNDUsXCJTb3V0aFwiLDQ4XSxcbiAgW1wiQXJpem9uYVwiLFwiQVpcIiw0NixcIldlc3RcIiw0XSxcbiAgW1wiTmV3IE1leGljb1wiLFwiTk1cIiw0NyxcIldlc3RcIiwzNV0sXG4gIFtcIkFsYXNrYVwiLFwiQUtcIiw0OCxcIldlc3RcIiwyXSxcbiAgW1wiV2FzaGluZ3RvblwiLFwiV0FcIiw0OSxcIldlc3RcIiw1M10sXG4gIFtcIk9yZWdvblwiLFwiT1JcIiw1MCxcIldlc3RcIiw0MV0sXG4gIFtcIkhhd2FpaVwiLFwiSElcIiw1MSxcIldlc3RcIiwxNV0sXG4gIF1cbiAgO1xuXG5mdW5jdGlvbiBpbml0KG1hcERhdGEsbGF0TG9uZ0RhdGEsbmV3c0lETG9jYXRpb24sbmV3c0lESW5mbyxzdGF0ZVRvcG8pIHtcblxuICAvLyB2YXIgcHJvamVjdGlvbiA9IGQzLmdlb0FsYmVyc1VzYSgpXG4gIC8vICAgICAvLyAuc2NhbGUoMTI4MClcbiAgLy8gICAgIC8vIC50cmFuc2xhdGUoW3dpZHRoIC8gMiwgaGVpZ2h0IC8gMl0pO1xuICAvL1xuICAvLyB2YXIgcGF0aCA9IGQzLmdlb1BhdGgoKVxuICAvLyAgICAgLnByb2plY3Rpb24ocHJvamVjdGlvbilcbiAgLy8gICAgIC8vIC5wb2ludFJhZGl1cygxLjUpXG4gIC8vICAgICA7XG4gIC8vXG4gIC8vIC8vIHZhciBwcm9qZWN0aW9uID0gZDMuZ2VvQWxiZXJzVXNhKCk7XG4gIC8vIC8vIHZhciBwYXRoID0gZDMuZ2VvUGF0aCgpLnByb2plY3Rpb24ocHJvamVjdGlvbik7XG4gIC8vXG5cdC8vIHZhciBjdXQgPSBcImdlbmRlclwiXG5cdC8vIC8vIHZhciBjdXQgPSBcInN1cEdlbmRlclwiXG4gIC8vIHZhciBjb3VudE1pbiA9ICAxOTtcbiAgLy9cbiAgLy8gbWFwRGF0YSA9IG1hcERhdGEuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAvLyAgIHJldHVybiArZC5ZZWFyID4gMjAwMDtcbiAgLy8gfSlcbiAgLy9cblx0Ly8gZnVuY3Rpb24gZ2V0QXZlcmFnZShkYXRhKXtcblx0Ly8gXHRpZihjdXQgPT0gXCJnZW5kZXJcIil7XG4gIC8vICAgICB2YXIgbWVhbiA9IGQzLm1lYW4oZGF0YSxmdW5jdGlvbihkKXtyZXR1cm4gKyhkYXRhLnRvdGFsX251bS1kYXRhLm1hbGVfbnVtKS9kYXRhLnRvdGFsX251bX0pO1xuXHQvLyBcdFx0cmV0dXJuIG1lYW47XG5cdC8vIFx0fVxuXHQvLyBcdGlmKGN1dCA9PSBcInN1cFdoaXRlXCIpe1xuXHQvLyBcdFx0cmV0dXJuIGQzLm1lYW4oZGF0YSxmdW5jdGlvbihkKXtyZXR1cm4gK2RhdGEud2hpdGVfc3VwX251bS9kYXRhLnRvdGFsX3N1cF9udW19KTtcblx0Ly8gXHR9XG5cdC8vIFx0aWYoY3V0ID09IFwic3VwR2VuZGVyXCIpe1xuXHQvLyBcdFx0cmV0dXJuIGQzLm1lYW4oZGF0YSxmdW5jdGlvbihkKXtyZXR1cm4gKCtkYXRhLnRvdGFsX3N1cF9udW0gLSArZGF0YS5tYWxlX3N1cF9udW0pL2RhdGEudG90YWxfc3VwX251bX0pO1xuXHQvLyBcdH1cblx0Ly8gXHRyZXR1cm4gZDMubWVhbihkYXRhLGZ1bmN0aW9uKGQpe3JldHVybiArZGF0YS53aGl0ZV9udW0vZGF0YS50b3RhbF9udW19KTtcblx0Ly8gfVxuICAvL1xuXHQvLyBmdW5jdGlvbiBnZXRQZXJjZW50KGRhdGEpe1xuXHQvLyBcdGlmKGN1dCA9PSBcImdlbmRlclwiKXtcblx0Ly8gXHRcdHJldHVybiArKGRhdGEudG90YWxfbnVtLWRhdGEubWFsZV9udW0pL2RhdGEudG90YWxfbnVtXG5cdC8vIFx0fVxuXHQvLyBcdGlmKGN1dCA9PSBcInN1cFdoaXRlXCIpe1xuXHQvLyBcdFx0cmV0dXJuICtkYXRhLndoaXRlX3N1cF9udW0vZGF0YS50b3RhbF9zdXBfbnVtO1xuXHQvLyBcdH1cblx0Ly8gXHRpZihjdXQgPT0gXCJzdXBHZW5kZXJcIil7XG5cdC8vIFx0XHRyZXR1cm4gK2RhdGEubWFsZV9zdXBfbnVtL2RhdGEudG90YWxfc3VwX251bTtcblx0Ly8gXHR9XG5cdC8vIFx0cmV0dXJuICgrZGF0YS50b3RhbF9udW0gLSArZGF0YS53aGl0ZV9udW0pL2RhdGEudG90YWxfbnVtXG5cdC8vIH1cbiAgLy9cbiAgLy8gZnVuY3Rpb24gZ2V0UGVyY2VudFR5cGUoa2luZCxkYXRhKXtcbiAgLy8gICBpZihraW5kID09IFwiZ2VuZGVyXCIpe1xuICAvLyAgICAgcmV0dXJuICsoZGF0YS50b3RhbF9udW0tZGF0YS5tYWxlX251bSkvZGF0YS50b3RhbF9udW1cbiAgLy8gICB9XG4gIC8vICAgaWYoa2luZCA9PSBcInN1cFdoaXRlXCIpe1xuICAvLyAgICAgcmV0dXJuICtkYXRhLndoaXRlX3N1cF9udW0vZGF0YS50b3RhbF9zdXBfbnVtO1xuICAvLyAgIH1cbiAgLy8gICBpZihraW5kID09IFwic3VwR2VuZGVyXCIpe1xuICAvLyAgICAgcmV0dXJuICgrZGF0YS50b3RhbF9zdXBfbnVtIC0gK2RhdGEubWFsZV9zdXBfbnVtKS9kYXRhLnRvdGFsX3N1cF9udW07XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiAoK2RhdGEudG90YWxfbnVtIC0gK2RhdGEud2hpdGVfbnVtKS9kYXRhLnRvdGFsX251bVxuICAvLyB9XG4gIC8vXG5cdC8vIHZhciBsYXRMb25nTWFwID0gZDMubWFwKGxhdExvbmdEYXRhLGZ1bmN0aW9uKGQpeyByZXR1cm4gZC5OZXdzSUR9KTtcblx0Ly8gdmFyIG5ld3NJZE1hcCA9IGQzLm1hcChuZXdzSURMb2NhdGlvbixmdW5jdGlvbihkKXsgcmV0dXJuIGQuTmV3c0lEfSk7XG4gIC8vIHZhciBuZXdzSUROYW1lID0gZDMubWFwKG5ld3NJREluZm8sZnVuY3Rpb24oZCl7IHJldHVybiBkLk5ld3NJRH0pO1xuXHQvLyB2YXIgcmVnaW9uTWFwID0gZDMubWFwKHN0YXRlcyxmdW5jdGlvbihkKXtcblx0Ly8gXHRyZXR1cm4gZFsxXTtcblx0Ly8gfSk7XG4gIC8vXG4gIC8vIHZhciBtYXJnaW4gPSB7dG9wOiA0MCwgcmlnaHQ6IDQwLCBib3R0b206IDQwLCBsZWZ0OiA0MH07XG5cdC8vIHZhciB3aWR0aCA9IDYwMCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAvLyB2YXIgaGVpZ2h0ID0gMzAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cdC8vIHZhciBob3J6U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwxXSkucmFuZ2UoWzAsd2lkdGhdKVxuXHQvLyB2YXIgY29udGFpbmVyID0gZDMuc2VsZWN0KFwiLm1hcHNcIik7XG4gIC8vXG4gIC8vIHZhciB0b2dnbGVzID0gY29udGFpbmVyLmFwcGVuZChcImRpdlwiKVxuICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcImhpc3RvZ3JhbS1jaGFydC10b2dnbGUtd3JhcHBlclwiKTtcbiAgLy9cbiAgLy8gdG9nZ2xlc1xuICAvLyAgIC5hcHBlbmQoXCJkaXZcIilcbiAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLXNpemVcIilcbiAgLy8gICAuc2VsZWN0QWxsKFwicFwiKVxuICAvLyAgIC5kYXRhKFswLDIwLDUwLDEwMCw1MDBdKVxuICAvLyAgIC5lbnRlcigpXG4gIC8vICAgLmFwcGVuZChcInBcIilcbiAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIilcbiAgLy8gICAudGV4dChmdW5jdGlvbihkKXtcbiAgLy8gICAgIHJldHVybiBkO1xuICAvLyAgIH0pXG4gIC8vICAgLm9uKFwiY2xpY2tcIixmdW5jdGlvbihkKXtcbiAgLy8gICAgIGNvdW50TWluID0gZDtcbiAgLy8gICAgIGJ1aWxkQ2hhcnQoKTtcbiAgLy8gICB9KVxuICAvLyAgIDtcbiAgLy9cbiAgLy8gdG9nZ2xlc1xuICAvLyAgIC5hcHBlbmQoXCJkaXZcIilcbiAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLXR5cGVcIilcbiAgLy8gICAuc2VsZWN0QWxsKFwicFwiKVxuICAvLyAgIC5kYXRhKFtcInJhY2VcIixcImdlbmRlclwiLFwic3VwV2hpdGVcIixcInN1cEdlbmRlclwiXSlcbiAgLy8gICAuZW50ZXIoKVxuICAvLyAgIC5hcHBlbmQoXCJwXCIpXG4gIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwiaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCIpXG4gIC8vICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gIC8vICAgICByZXR1cm4gZDtcbiAgLy8gICB9KVxuICAvLyAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgICBjdXQgPSBkO1xuICAvLyAgICAgYnVpbGRDaGFydCgpO1xuICAvLyAgIH0pXG4gIC8vICAgO1xuICAvL1xuICAvLyBmdW5jdGlvbiBidWlsZENoYXJ0KCl7XG4gIC8vXG4gIC8vXG4gIC8vXG4gIC8vICAgZDMuc2VsZWN0QWxsKFwiLm1hcHMtY2hhcnQtd3JhcHBlclwiKS5yZW1vdmUoKTtcbiAgLy9cbiAgLy8gICB2YXIgY2hhcnREaXYgPSBjb250YWluZXJcbiAgLy8gICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgLy8gICAgIC5hdHRyKFwiY2xhc3NcIixcIm1hcHMtY2hhcnQtd3JhcHBlclwiKVxuICAvL1xuICAvLyAgIHZhciBtYXBTdmcgPSBjaGFydERpdi5hcHBlbmQoXCJzdmdcIilcbiAgLy8gICAgIC5hdHRyKFwiY2xhc3NcIixcIm1hcHMtY2hhcnQtc3ZnXCIpXG4gIC8vICAgICAuYXR0cihcInZpZXdCb3hcIixcIjAgMCA5NjAgNjAwXCIpXG4gIC8vICAgICA7XG4gIC8vXG4gIC8vICAgbWFwU3ZnLmFwcGVuZChcImdcIilcbiAgLy8gICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzdGF0ZXNcIilcbiAgLy8gICAgIC5zZWxlY3RBbGwoXCJwYXRoXCIpXG4gIC8vICAgICAvLyAuZGF0YSh0b3BvanNvbi5mZWF0dXJlKHN0YXRlVG9wbywgc3RhdGVUb3BvLm9iamVjdHMuc3RhdGVzKSlcbiAgLy8gICAgIC5kYXRhKHRvcG9qc29uLmZlYXR1cmUoc3RhdGVUb3BvLCBzdGF0ZVRvcG8ub2JqZWN0cy5zdGF0ZXMpLmZlYXR1cmVzKVxuICAvLyAgICAgLmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKVxuICAvLyAgICAgLmF0dHIoXCJkXCIsIHBhdGgpO1xuICAvL1xuICAvLyAgIG1hcFN2Z1xuICAvLyAgICAgLmFwcGVuZChcImdcIilcbiAgLy8gICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gIC8vICAgICAuYXR0cihcImNsYXNzXCIsIFwic3RhdGUtYm9yZGVyc1wiKVxuICAvLyAgICAgLmF0dHIoXCJkXCIsIHBhdGgodG9wb2pzb24ubWVzaChzdGF0ZVRvcG8sIHN0YXRlVG9wby5vYmplY3RzLnN0YXRlcywgZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYSAhPT0gYjsgfSkpKTtcbiAgLy9cbiAgLy8gICB2YXIgY2hhcnRTdmdEb3VibGVDaGFuZ2UgPSBjaGFydERpdlxuICAvLyAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAvLyAgICAgLmF0dHIoXCJjbGFzc1wiLFwibWFwcy1jaGFydC13cmFwcGVyLXN2Zy1kb3VibGUtY2hhbmdlXCIpXG4gIC8vICAgICAuYXR0cihcIndpZHRoXCIsd2lkdGgrbWFyZ2luLmxlZnQrbWFyZ2luLnJpZ2h0KVxuICAvLyAgICAgLmF0dHIoXCJoZWlnaHRcIixoZWlnaHQrbWFyZ2luLnRvcCttYXJnaW4uYm90dG9tKVxuICAvLyAgICAgLnN0eWxlKFwid2lkdGhcIix3aWR0aCttYXJnaW4ubGVmdCttYXJnaW4ucmlnaHQrXCJweFwiKVxuICAvLyAgICAgLnN0eWxlKFwiaGVpZ2h0XCIsaGVpZ2h0K21hcmdpbi50b3ArbWFyZ2luLmJvdHRvbStcInB4XCIpXG4gIC8vICAgICA7XG4gIC8vXG4gIC8vICAgdmFyIG1pbmlNdWx0aXBsZSA9IGNvbnRhaW5lci5hcHBlbmQoXCJkaXZcIilcbiAgLy8gICAgIC5hdHRyKFwiY2xhc3NcIixcInNsb3BlLW1pbmktbXVsdGlwbGUtZGl2XCIpXG4gIC8vICAgICA7XG4gIC8vXG4gIC8vICAgdmFyIGZpbHRlcmVkTWFwRGF0YSA9IG1hcERhdGEuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAvLyAgICAgICBpZihjdXQgPT0gXCJzdXBXaGl0ZVwiIHx8IGN1dCA9PSBcInN1cEdlbmRlclwiKXtcbiAgLy8gICAgICAgICByZXR1cm4gZC50b3RhbF9udW0gPiBjb3VudE1pbiAmJiBkLnRvdGFsX3N1cF9udW0gPiAwO1xuICAvLyAgICAgICB9XG4gIC8vICAgICAgIHJldHVybiBkLnRvdGFsX251bSA+IGNvdW50TWluO1xuICAvLyAgICAgfSlcbiAgLy8gICAgIDtcbiAgLy9cbiAgLy8gICB2YXIgbWF4UGVyY2VudEFycmF5ID0gW107XG4gIC8vICAgdmFyIGRpZmZBcnJheSA9IFtdO1xuICAvLyAgIHZhciByYWNlRGlmZkFycmF5ID0gW11cbiAgLy8gICB2YXIgbmV3c05lc3QgPSBkMy5uZXN0KClcbiAgLy8gICAgIC5rZXkoZnVuY3Rpb24oZCl7XG4gIC8vICAgICAgIHJldHVybiArZC5OZXdzSURcbiAgLy8gICAgIH0pXG4gIC8vICAgICAucm9sbHVwKGZ1bmN0aW9uKGxlYXZlcyl7XG4gIC8vICAgICAgIHZhciBtYXAgPSBkMy5tYXAobGVhdmVzLGZ1bmN0aW9uKGQpe3JldHVybiBkLlllYXJ9KTtcbiAgLy8gICAgICAgdmFyIG1heFRvdGFsTnVtID0gZDMubWF4KGxlYXZlcyxmdW5jdGlvbihkKXtyZXR1cm4gZC50b3RhbF9udW19KTtcbiAgLy8gICAgICAgdmFyIG1heFBlcmNlbnQgPSBkMy5tYXgobGVhdmVzLGZ1bmN0aW9uKGQpeyByZXR1cm4gZ2V0UGVyY2VudChkKX0pO1xuICAvLyAgICAgICBtYXhQZXJjZW50QXJyYXkucHVzaChtYXhQZXJjZW50KVxuICAvLyAgICAgICByZXR1cm4ge3llYXJNYXA6bWFwLHZhbHVlczpsZWF2ZXMsbWF4VG90YWw6bWF4VG90YWxOdW19XG4gIC8vICAgICB9KVxuICAvLyAgICAgLmVudHJpZXMoZmlsdGVyZWRNYXBEYXRhKVxuICAvLyAgICAgO1xuICAvL1xuICAvLyAgIG5ld3NOZXN0ID0gbmV3c05lc3QuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAvLyAgICAgaWYoZC52YWx1ZS55ZWFyTWFwLmhhcygyMDE0KSl7XG4gIC8vICAgICAgIHJldHVybiBkO1xuICAvLyAgICAgfVxuICAvLyAgICAgcmV0dXJuIG51bGw7XG4gIC8vICAgfSk7XG4gIC8vXG4gIC8vICAgZm9yICh2YXIgaXRlbSBpbiBuZXdzTmVzdCl7XG4gIC8vICAgICB2YXIgZGlmZiA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsbmV3c05lc3RbaXRlbV0udmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLWdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsbmV3c05lc3RbaXRlbV0udmFsdWUudmFsdWVzWzBdKVxuICAvLyAgICAgY3V0ID0gXCJzdXBHZW5kZXJcIjtcbiAgLy8gICAgIHZhciByYWNlRGlmZiA9IGdldFBlcmNlbnQobmV3c05lc3RbaXRlbV0udmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLWdldFBlcmNlbnQobmV3c05lc3RbaXRlbV0udmFsdWUudmFsdWVzWzBdKTtcbiAgLy8gICAgIGN1dCA9IFwiZ2VuZGVyXCJcbiAgLy8gICAgIGRpZmZBcnJheS5wdXNoKGRpZmYpO1xuICAvLyAgICAgcmFjZURpZmZBcnJheS5wdXNoKHJhY2VEaWZmKTtcbiAgLy9cbiAgLy8gICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLmRpZmYgPSBkaWZmO1xuICAvLyAgICAgbmV3c05lc3RbaXRlbV0udmFsdWUucmFjZURpZmYgPSByYWNlRGlmZjtcbiAgLy8gICAgIGlmKGxhdExvbmdNYXAuaGFzKG5ld3NOZXN0W2l0ZW1dLmtleSkpe1xuICAvLyAgICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5sb2NhdGlvbiA9IGxhdExvbmdNYXAuZ2V0KG5ld3NOZXN0W2l0ZW1dLmtleSlcbiAgLy8gICAgICAgbmV3c05lc3RbaXRlbV0udmFsdWUuaGFzTG9jYXRpb24gPSB0cnVlXG4gIC8vICAgICB9XG4gIC8vICAgICBlbHNle1xuICAvLyAgICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5oYXNMb2NhdGlvbiA9IGZhbHNlXG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIDtcbiAgLy9cbiAgLy9cbiAgLy9cbiAgLy8gICBuZXdzTmVzdCA9IG5ld3NOZXN0LmZpbHRlcihmdW5jdGlvbihkKXtcbiAgLy8gICAgIHZhciBoYXNMYXQgPSBmYWxzZTtcbiAgLy8gICAgIGlmKGQudmFsdWUuaGFzTG9jYXRpb24pe1xuICAvLyAgICAgICBpZihkLnZhbHVlLmxvY2F0aW9uLmxhdCAhPSBcIk5VTExcIil7XG4gIC8vICAgICAgICAgaGFzTGF0ID0gdHJ1ZTtcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgICAgcmV0dXJuIGQudmFsdWUuaGFzTG9jYXRpb24gJiYgaGFzTGF0O1xuICAvLyAgIH0pXG4gIC8vXG4gIC8vICAgdmFyIHRvdGFsRXh0ZW50ID0gZDMuZXh0ZW50KG5ld3NOZXN0LGZ1bmN0aW9uKGQpe3JldHVybiArZC52YWx1ZS5tYXhUb3RhbH0pXG4gIC8vICAgdmFyIHJhZGl1c1NjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4odG90YWxFeHRlbnQpLnJhbmdlKFszLDQwXSk7XG4gIC8vICAgdmFyIHBlcmNlbnRFeHRlbnQgPSBkMy5leHRlbnQobWF4UGVyY2VudEFycmF5LGZ1bmN0aW9uKGQpe3JldHVybiBkO30pO1xuICAvLyAgIHZhciBkaWZmRXh0ZW50ID0gZDMuZXh0ZW50KGRpZmZBcnJheSxmdW5jdGlvbihkKXtyZXR1cm4gZDsgfSk7XG4gIC8vICAgdmFyIHJhY2VEaWZmRXh0ZW50ID0gZDMuZXh0ZW50KHJhY2VEaWZmQXJyYXksZnVuY3Rpb24oZCl7IHJldHVybiBkOyB9KTtcbiAgLy8gICB2YXIgZGlmZlNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oW2RpZmZFeHRlbnRbMF0sZGlmZkV4dGVudFsxXV0pLnJhbmdlKFswLHdpZHRoXSlcbiAgLy8gICB2YXIgcmFjZURpZmZTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFtyYWNlRGlmZkV4dGVudFswXSxyYWNlRGlmZkV4dGVudFsxXV0pLnJhbmdlKFtoZWlnaHQsMF0pXG4gIC8vXG4gIC8vICAgdmFyIHRvdGFsU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbih0b3RhbEV4dGVudCkucmFuZ2UoW2hlaWdodCwwXSk7XG4gIC8vICAgdmFyIHRvdGFsWFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4odG90YWxFeHRlbnQpLnJhbmdlKFswLHdpZHRoXSk7XG4gIC8vXG4gIC8vICAgdmFyIGNvbG9yU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbZGlmZkV4dGVudFswXSwwLGRpZmZFeHRlbnRbMV1dKS5yYW5nZShbXCJyZWRcIixcIndoaXRlXCIsXCJncmVlblwiXSk7XG4gIC8vXG4gIC8vICAgdmFyIGNvbG9yU2NhbGVQZXJjZW50ID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy0xLDAsLjMwLC4zNSwuNCwuNDUsLjUsLjZdKS5yYW5nZShbXCIjMDAwMDAwXCIsXCIjMDAwMDAwXCIsXCJyZ2IoOCwgNjksIDE0OClcIixcInJnYigzMywgMTEzLCAxODEpXCIsXCJyZ2IoMjA0LCAyMTksIDE2MylcIixcInJnYigyNTMsIDI0NiwgMTYzKVwiLFwiI2UyZTFlMVwiLFwicmdiKDM5LCAxMDgsIDE0NSlcIl0pO1xuICAvL1xuICAvLyAgIHZhciBzdHJva2VTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFtkaWZmRXh0ZW50WzBdLDAsZGlmZkV4dGVudFsxXV0pLnJhbmdlKFtcInJlZFwiLFwiZ3JleVwiLFwiZ3JlZW5cIl0pO1xuICAvL1xuICAvLyAgIHZhciB4QXJyb3dMZW5ndGggPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwuMTVdKS5yYW5nZShbMSwzMF0pLmNsYW1wKHRydWUpO1xuICAvL1xuICAvLyAgIC8vIG5ld3NOZXN0ID0gbmV3c05lc3QuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgdmFyIHBlcmNlbnQgPSBnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpO1xuICAvLyAgIC8vICAgcmV0dXJuIHBlcmNlbnQgPiAuNTA7XG4gIC8vICAgLy8gfSlcbiAgLy9cbiAgLy8gICB2YXIgeFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsLjddKS5yYW5nZShbMCx3aWR0aF0pO1xuICAvLyAgIHZhciB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbLjIsLjVdKS5yYW5nZShbaGVpZ2h0LDBdKTtcbiAgLy8gICB2YXIgbGluZVdpZHRoU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbih0b3RhbEV4dGVudCkucmFuZ2UoWzEuNCwyLjVdKS5jbGFtcCh0cnVlKVxuICAvL1xuICAvLyAgIC8vIHZhciBtYXBNYXJrZXJzID0gbWFwU3ZnLmFwcGVuZChcImdcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcIm1hcC1tYXJrZXJzXCIpXG4gIC8vICAgLy8gICAuc2VsZWN0QWxsKFwiY2lyY2xlXCIpXG4gIC8vICAgLy8gICAuZGF0YShuZXdzTmVzdClcbiAgLy8gICAvLyAgIC5lbnRlcigpXG4gIC8vICAgLy8gICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gIC8vICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJtYXAtbWFya2VyXCIpXG4gIC8vICAgLy8gICAuYXR0cihcInJcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgcmV0dXJuIHJhZGl1c1NjYWxlKCtkLnZhbHVlLm1heFRvdGFsKTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAvLyAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAvLyAgIC8vICAgICB2YXIgdDAgPSB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnZhbHVlc1swXSkpXG4gIC8vICAgLy8gICAvLyAgIC8vICAgICB2YXIgdDEgPSB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSlcbiAgLy8gICAvLyAgIC8vICAgcmV0dXJuIFwicmdiKDE2OSwgMTY5LCAxNjkpXCI7XG4gIC8vICAgLy8gICAvLyAgIHJldHVybiBjb2xvclNjYWxlUGVyY2VudChnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpKVxuICAvLyAgIC8vICAgLy8gICByZXR1cm4gXCJyZWRcIlxuICAvLyAgIC8vICAgLy8gfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHZhciBsb2NhdGlvbiA9IGQudmFsdWUubG9jYXRpb247XG4gIC8vICAgLy8gICAgIHJldHVybiBcInRyYW5zbGF0ZShcIitwcm9qZWN0aW9uKFsrbG9jYXRpb24ubG5nLGxvY2F0aW9uLmxhdF0pK1wiKVwiO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhkKTtcbiAgLy8gICAvLyAgICAgY29uc29sZS5sb2cobmV3c0lETmFtZS5nZXQoZC5rZXkpLkNvbXBhbnkpO1xuICAvLyAgIC8vICAgICBjb25zb2xlLmxvZyhnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpKTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICA7XG4gIC8vXG4gIC8vICAgdmFyIHRhdSA9IDIgKiBNYXRoLlBJOyAvLyBodHRwOi8vdGF1ZGF5LmNvbS90YXUtbWFuaWZlc3RvXG4gIC8vICAgdmFyIGFyYyA9IGQzLmFyYygpXG4gIC8vICAgICAuaW5uZXJSYWRpdXMoMClcbiAgLy8gICAgIC5vdXRlclJhZGl1cygxMClcbiAgLy8gICAgIC5zdGFydEFuZ2xlKDApO1xuICAvL1xuICAvLyAgIC8vIHJhZGl1c1NjYWxlLnJhbmdlKFsxMCwyMF0pXG4gIC8vXG4gIC8vICAgdmFyIHRoZXRhMSA9IE1hdGguUEkgKiAwLjc1O1xuICAvLyAgIHZhciB0aGV0YTIgPSBNYXRoLlBJICogLTAuNzU7XG4gIC8vICAgdmFyIHNpbjEgPSBNYXRoLnNpbih0aGV0YTEpO1xuICAvLyAgIHZhciBzaW4yID0gTWF0aC5zaW4odGhldGEyKTtcbiAgLy8gICB2YXIgY29zMSA9IE1hdGguY29zKHRoZXRhMSk7XG4gIC8vICAgdmFyIGNvczIgPSBNYXRoLmNvcyh0aGV0YTIpO1xuICAvL1xuICAvLyAgIHZhciBhcnJvd01hcHMgPSBtYXBTdmcuYXBwZW5kKFwiZ1wiKVxuICAvLyAgICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAvLyAgICAgICAuZGF0YShuZXdzTmVzdClcbiAgLy8gICAgICAgLmVudGVyKClcbiAgLy8gICAgICAgLmFwcGVuZChcImdcIilcbiAgLy8gICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihkKXtcbiAgLy8gICAgICAgICB2YXIgbG9jYXRpb24gPSBkLnZhbHVlLmxvY2F0aW9uO1xuICAvLyAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIitwcm9qZWN0aW9uKFsrbG9jYXRpb24ubG5nLGxvY2F0aW9uLmxhdF0pK1wiKVwiO1xuICAvLyAgICAgICB9KVxuICAvLyAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAvLyAgICAgICAuYXR0cihcImNsYXNzXCIsXCJtYXAtYXJyb3ctcGF0aFwiKVxuICAvLyAgICAgICAuYXR0cihcImRcIiwgZnVuY3Rpb24oZCl7XG4gIC8vXG4gIC8vICAgICAgICAgLy8gY29uc29sZS5sb2coZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSxnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLG5ld3NOZXN0W2l0ZW1dLnZhbHVlLnZhbHVlc1swXSkpO1xuICAvLyAgICAgICAgIHZhciB4VmFsID0geEFycm93TGVuZ3RoKE1hdGguYWJzKGQudmFsdWUuZGlmZikpO1xuICAvLyAgICAgICAgIHZhciBkeCA9IDA7XG4gIC8vICAgICAgICAgaWYoZC52YWx1ZS5kaWZmID4gMCl7XG4gIC8vICAgICAgICAgICBkeCA9IHhWYWw7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICAgIGVsc2V7XG4gIC8vICAgICAgICAgICBkeCA9IC14VmFsO1xuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgICB2YXIgZHkgPSAtMztcbiAgLy9cbiAgLy8gICAgICAgICB2YXIgc3RlbUxlbiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gIC8vICAgICAgICAgdmFyIGhlYWRMZW4gPSBNYXRoLm1pbihzdGVtTGVuICogMC43LCA4KTtcbiAgLy8gICAgICAgICB2YXIgeG4gPSBkeCAvIHN0ZW1MZW4gKiBoZWFkTGVuO1xuICAvLyAgICAgICAgIHZhciB5biA9IGR5IC8gc3RlbUxlbiAqIGhlYWRMZW47XG4gIC8vICAgICAgICAgdmFyIGF4MSA9IHhuICogY29zMSAtIHluICogc2luMSArIGR4XG4gIC8vICAgICAgICAgdmFyIGF5MSA9IHhuICogc2luMSArIHluICogY29zMSArIGR5XG4gIC8vICAgICAgICAgdmFyIGF4MiA9IHhuICogY29zMiAtIHluICogc2luMiArIGR4XG4gIC8vICAgICAgICAgdmFyIGF5MiA9IHhuICogc2luMiArIHluICogY29zMiArIGR5XG4gIC8vXG4gIC8vICAgICAgICAgdmFyIGhlYWQgPSBbW2F4MSxheTFdLFtkeCxkeV0sW2F4MixheTJdXTtcbiAgLy9cbiAgLy8gICAgICAgICByZXR1cm4gXCJNMCwwXCIrXCJMXCIrZHgrXCIsXCIrZHkrXCJMXCIraGVhZFswXVswXStcIixcIitoZWFkWzBdWzFdK1wiTFwiK2hlYWRbMV1bMF0rXCIsXCIraGVhZFsxXVsxXStcIkxcIitoZWFkWzJdWzBdK1wiLFwiK2hlYWRbMl1bMV07XG4gIC8vICAgICAgICAgLy8gYXJjLm91dGVyUmFkaXVzKHJhZGl1c1NjYWxlKCtkLnZhbHVlLm1heFRvdGFsKSk7XG4gIC8vICAgICAgICAgLy8gcmV0dXJuIGFyYyh7ZW5kQW5nbGU6ICtnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpICogdGF1fSk7XG4gIC8vICAgICAgIH0pXG4gIC8vICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgICAgICAgLy8gcmV0dXJuIGxpbmVXaWR0aFNjYWxlKGQudmFsdWUubWF4VG90YWwpXG4gIC8vICAgICAgICAgcmV0dXJuIDEuNDtcbiAgLy8gICAgICAgfSlcbiAgLy8gICAgICAgLmF0dHIoXCJzdHJva2VcIixmdW5jdGlvbihkKXtcbiAgLy8gICAgICAgICBpZihkLnZhbHVlLmRpZmYgPiAwKXtcbiAgLy8gICAgICAgICAgIHJldHVybiBcIiMzOTg5Y2JcIlxuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgICByZXR1cm4gXCJyZ2IoMjE0LCA4NCwgODQpXCI7XG4gIC8vICAgICAgIH0pXG4gIC8vICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGQudmFsdWUuZGlmZik7XG4gIC8vICAgICAgICAgY29uc29sZS5sb2cobmV3c0lETmFtZS5nZXQoZC5rZXkpLkNvbXBhbnkpO1xuICAvLyAgICAgICB9KVxuICAvLyAgICAgICA7XG4gIC8vXG4gIC8vICAgLy8gdmFyIGFycm93TWFwcyA9IG1hcFN2Zy5hcHBlbmQoXCJnXCIpXG4gIC8vICAgLy8gICAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gIC8vICAgLy8gICAgIC5kYXRhKG5ld3NOZXN0KVxuICAvLyAgIC8vICAgICAuZW50ZXIoKVxuICAvLyAgIC8vICAgICAuYXBwZW5kKFwiZ1wiKVxuICAvLyAgIC8vICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICAgIHZhciBsb2NhdGlvbiA9IGQudmFsdWUubG9jYXRpb247XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiK3Byb2plY3Rpb24oWytsb2NhdGlvbi5sbmcsbG9jYXRpb24ubGF0XSkrXCIpXCI7XG4gIC8vICAgLy8gICAgIH0pXG4gIC8vICAgLy8gICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gIC8vICAgLy8gICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiKyBNYXRoLnJhbmRvbSgpKjUrXCIsXCIrTWF0aC5yYW5kb20oKSo1K1wiKVwiO1xuICAvLyAgIC8vICAgICB9KVxuICAvLyAgIC8vICAgICAuYXR0cihcImNsYXNzXCIsXCJtYXAtYXJyb3ctcGF0aC1wZWFrXCIpXG4gIC8vICAgLy8gICAgIC5hdHRyKFwiZFwiLCBmdW5jdGlvbihkKXtcbiAgLy8gICAvL1xuICAvLyAgIC8vICAgICAgIC8vaGVpZ2h0ID0gc2l6ZVxuICAvLyAgIC8vICAgICAgIC8vbGVmdCAvIHJpZ2h0ID0gbWFyZ2luXG4gIC8vICAgLy9cbiAgLy8gICAvLyAgICAgICB2YXIgb2Zmc2V0ID0gcmFkaXVzU2NhbGUoZC52YWx1ZS5tYXhUb3RhbCk7XG4gIC8vICAgLy9cbiAgLy8gICAvLyAgICAgICAvLyB2YXIgeFZhbCA9IHhBcnJvd0xlbmd0aChNYXRoLmFicyhkLnZhbHVlLmRpZmYpKTtcbiAgLy8gICAvL1xuICAvLyAgIC8vICAgICAgIHhBcnJvd0xlbmd0aC5yYW5nZShbMCxvZmZzZXQqM10pXG4gIC8vICAgLy8gICAgICAgdmFyIHhWYWwgPSB4QXJyb3dMZW5ndGgoTWF0aC5hYnMoZC52YWx1ZS5kaWZmKSk7XG4gIC8vICAgLy9cbiAgLy8gICAvLyAgICAgICB2YXIgZHggPSAwO1xuICAvLyAgIC8vICAgICAgIGlmKGQudmFsdWUuZGlmZiA+IDApe1xuICAvLyAgIC8vICAgICAgICAgZHggPSB4VmFsO1xuICAvLyAgIC8vICAgICAgIH1cbiAgLy8gICAvLyAgICAgICBlbHNle1xuICAvLyAgIC8vICAgICAgICAgZHggPSAteFZhbDtcbiAgLy8gICAvLyAgICAgICB9XG4gIC8vICAgLy8gICAgICAgdmFyIGR5ID0gLTM7XG4gIC8vICAgLy9cbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCJNXCIrIC1vZmZzZXQgK1wiLFwiKyAwICsgXCJMXCIrMCtcIixcIisgLWR4ICtcIkxcIitvZmZzZXQrXCIsXCIrMC8vIFstb2Zmc2V0LDBdWzAsZHhdW29mZnNldCwwXVxuICAvLyAgIC8vXG4gIC8vICAgLy8gICAgICAgLy8gcmV0dXJuIFwiTTAsXCIrIC1vZmZzZXQgKyBcIkxcIitkeCtcIixcIitcIjBcIitcIkxcIiswK1wiLFwiK29mZnNldC8vIFswLC1vZmZzZXRdW3hWYWwsMF1bMCxvZmZzZXRdXG4gIC8vICAgLy9cbiAgLy8gICAvL1xuICAvLyAgIC8vICAgICAgIHZhciBzdGVtTGVuID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgLy8gICAvLyAgICAgICB2YXIgaGVhZExlbiA9IE1hdGgubWluKHN0ZW1MZW4gKiAwLjcsIDgpO1xuICAvLyAgIC8vICAgICAgIHZhciB4biA9IGR4IC8gc3RlbUxlbiAqIGhlYWRMZW47XG4gIC8vICAgLy8gICAgICAgdmFyIHluID0gZHkgLyBzdGVtTGVuICogaGVhZExlbjtcbiAgLy8gICAvLyAgICAgICB2YXIgYXgxID0geG4gKiBjb3MxIC0geW4gKiBzaW4xICsgZHhcbiAgLy8gICAvLyAgICAgICB2YXIgYXkxID0geG4gKiBzaW4xICsgeW4gKiBjb3MxICsgZHlcbiAgLy8gICAvLyAgICAgICB2YXIgYXgyID0geG4gKiBjb3MyIC0geW4gKiBzaW4yICsgZHhcbiAgLy8gICAvLyAgICAgICB2YXIgYXkyID0geG4gKiBzaW4yICsgeW4gKiBjb3MyICsgZHlcbiAgLy8gICAvL1xuICAvLyAgIC8vICAgICAgIHZhciBoZWFkID0gW1theDEsYXkxXSxbZHgsZHldLFtheDIsYXkyXV07XG4gIC8vICAgLy9cbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCJNMCwwXCIrXCJMXCIrZHgrXCIsXCIrZHkrXCJMXCIraGVhZFswXVswXStcIixcIitoZWFkWzBdWzFdK1wiTFwiK2hlYWRbMV1bMF0rXCIsXCIraGVhZFsxXVsxXStcIkxcIitoZWFkWzJdWzBdK1wiLFwiK2hlYWRbMl1bMV07XG4gIC8vICAgLy8gICAgICAgLy8gYXJjLm91dGVyUmFkaXVzKHJhZGl1c1NjYWxlKCtkLnZhbHVlLm1heFRvdGFsKSk7XG4gIC8vICAgLy8gICAgICAgLy8gcmV0dXJuIGFyYyh7ZW5kQW5nbGU6ICtnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpICogdGF1fSk7XG4gIC8vICAgLy8gICAgIH0pXG4gIC8vICAgLy8gICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIGxpbmVXaWR0aFNjYWxlKGQudmFsdWUubWF4VG90YWwpXG4gIC8vICAgLy8gICAgICAgLy8gcmV0dXJuIDEuNDtcbiAgLy8gICAvLyAgICAgfSlcbiAgLy8gICAvLyAgICAgLmF0dHIoXCJzdHJva2VcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgICBpZihkLnZhbHVlLmRpZmYgPiAwKXtcbiAgLy8gICAvLyAgICAgICAgIHJldHVybiBcIiMzOTg5Y2JcIlxuICAvLyAgIC8vICAgICAgIH1cbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCJyZ2IoMjE0LCA4NCwgODQpXCI7XG4gIC8vICAgLy8gICAgIH0pXG4gIC8vICAgLy8gICAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICAgIGNvbnNvbGUubG9nKGQudmFsdWUuZGlmZik7XG4gIC8vICAgLy8gICAgICAgY29uc29sZS5sb2cobmV3c0lETmFtZS5nZXQoZC5rZXkpLkNvbXBhbnkpO1xuICAvLyAgIC8vICAgICB9KVxuICAvLyAgIC8vICAgICA7XG4gIC8vXG4gIC8vXG4gIC8vICAgLy8gdmFyIHBpZUNoYXJ0QmFja2dyb3VuZCA9IG1hcFN2Zy5hcHBlbmQoXCJnXCIpXG4gIC8vICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJtYXAtbWFya2Vyc1wiKVxuICAvLyAgIC8vICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAvLyAgIC8vICAgLmRhdGEobmV3c05lc3QpXG4gIC8vICAgLy8gICAuZW50ZXIoKVxuICAvLyAgIC8vICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwibWFwLW1hcmtlclwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJyXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHJldHVybiByYWRpdXNTY2FsZSgrZC52YWx1ZS5tYXhUb3RhbCk7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICAvLyAgICAgdmFyIHQwID0geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS52YWx1ZXNbMF0pKVxuICAvLyAgIC8vICAgICAvLyAgICAgdmFyIHQxID0geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpXG4gIC8vICAgLy9cbiAgLy8gICAvLyAgICAgLy8gcmV0dXJuIGNvbG9yU2NhbGVQZXJjZW50KGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpXG4gIC8vICAgLy8gICAgIHJldHVybiBcIiM3MmMxZmZcIlxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHZhciBsb2NhdGlvbiA9IGQudmFsdWUubG9jYXRpb247XG4gIC8vICAgLy8gICAgIHJldHVybiBcInRyYW5zbGF0ZShcIitwcm9qZWN0aW9uKFsrbG9jYXRpb24ubG5nLGxvY2F0aW9uLmxhdF0pK1wiKVwiO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhkKTtcbiAgLy8gICAvLyAgICAgY29uc29sZS5sb2cobmV3c0lETmFtZS5nZXQoZC5rZXkpLkNvbXBhbnkpO1xuICAvLyAgIC8vICAgICBjb25zb2xlLmxvZyhnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpKTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICA7XG4gIC8vXG4gIC8vICAgLy8gdmFyIHBpZUNoYXJ0cyA9IG1hcFN2Zy5hcHBlbmQoXCJnXCIpXG4gIC8vICAgLy8gICAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gIC8vICAgLy8gICAgIC5kYXRhKG5ld3NOZXN0KVxuICAvLyAgIC8vICAgICAuZW50ZXIoKVxuICAvLyAgIC8vICAgICAuYXBwZW5kKFwiZ1wiKVxuICAvLyAgIC8vICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICAgIHZhciBsb2NhdGlvbiA9IGQudmFsdWUubG9jYXRpb247XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiK3Byb2plY3Rpb24oWytsb2NhdGlvbi5sbmcsbG9jYXRpb24ubGF0XSkrXCIpXCI7XG4gIC8vICAgLy8gICAgIH0pXG4gIC8vICAgLy8gICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gIC8vICAgLy8gICAgIC5hdHRyKFwiY2xhc3NcIixcInNsaWNlLWFyY1wiKVxuICAvLyAgIC8vICAgICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIFwiYmx1ZVwiXG4gIC8vICAgLy8gICAgICAgLy8gICAgIHZhciB0MCA9IHlTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUudmFsdWVzWzBdKSlcbiAgLy8gICAvLyAgICAgICAvLyAgICAgdmFyIHQxID0geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpXG4gIC8vICAgLy8gICAgICAgcmV0dXJuIGNvbG9yU2NhbGVQZXJjZW50KGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpXG4gIC8vICAgLy8gICAgICAgcmV0dXJuIFwicmVkXCJcbiAgLy8gICAvLyAgICAgfSlcbiAgLy8gICAvLyAgICAgLmF0dHIoXCJkXCIsIGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICAgIGFyYy5vdXRlclJhZGl1cyhyYWRpdXNTY2FsZSgrZC52YWx1ZS5tYXhUb3RhbCkpO1xuICAvLyAgIC8vICAgICAgIHJldHVybiBhcmMoe2VuZEFuZ2xlOiArZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSAqIHRhdX0pO1xuICAvLyAgIC8vICAgICB9KTtcbiAgLy9cbiAgLy8gICAvLyBmdW5jdGlvbiBidWlsZEF4aXMoKXtcbiAgLy8gICAvLyAgdmFyIGNoYXJ0QXhpcyA9IGNoYXJ0RGl2LmFwcGVuZChcImdcIilcbiAgLy8gICAvLyAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gIC8vICAgLy8gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpc1wiKVxuICAvLyAgIC8vICAgIDtcbiAgLy8gICAvL1xuICAvLyAgIC8vICBjaGFydEF4aXMuYXBwZW5kKFwiZ1wiKVxuICAvLyAgIC8vICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gIC8vICAgLy8gICAgLmF0dHIoXCJ4MVwiLDApXG4gIC8vICAgLy8gICAgLmF0dHIoXCJ4MlwiLFwiMTAwJVwiKVxuICAvLyAgIC8vICAgIC5hdHRyKFwieTFcIixoZWlnaHQvMilcbiAgLy8gICAvLyAgICAuYXR0cihcInkyXCIsaGVpZ2h0LzIpXG4gIC8vICAgLy8gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy1saW5lXCIpXG4gIC8vICAgLy9cbiAgLy8gICAvLyB9XG4gIC8vICAgLy8gYnVpbGRBeGlzKCk7XG4gIC8vXG4gIC8vICAgLy8gdmFyIGxpbmVhckdyYWRpZW50RG93biA9IGNoYXJ0U3ZnRG91YmxlQ2hhbmdlXG4gIC8vICAgLy8gICAuYXBwZW5kKFwiZGVmc1wiKVxuICAvLyAgIC8vICAgLmFwcGVuZChcImxpbmVhckdyYWRpZW50XCIpXG4gIC8vICAgLy8gICAuYXR0cihcImlkXCIsXCJncmFkaWVudFwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJ4MVwiLDApXG4gIC8vICAgLy8gICAuYXR0cihcIngyXCIsMClcbiAgLy8gICAvLyAgIC5hdHRyKFwieTFcIiwwKVxuICAvLyAgIC8vICAgLmF0dHIoXCJ5MlwiLDEpXG4gIC8vICAgLy9cbiAgLy8gICAvLyB2YXIgbGluZWFyR3JhZGllbnRVcCA9IGNoYXJ0U3ZnRG91YmxlQ2hhbmdlXG4gIC8vICAgLy8gICAuYXBwZW5kKFwiZGVmc1wiKVxuICAvLyAgIC8vICAgLmFwcGVuZChcImxpbmVhckdyYWRpZW50XCIpXG4gIC8vICAgLy8gICAuYXR0cihcImlkXCIsXCJncmFkaWVudC11cFwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJ4MVwiLDApXG4gIC8vICAgLy8gICAuYXR0cihcIngyXCIsMClcbiAgLy8gICAvLyAgIC5hdHRyKFwieTFcIiwwKVxuICAvLyAgIC8vICAgLmF0dHIoXCJ5MlwiLDEpXG4gIC8vICAgLy9cbiAgLy8gICAvLyB2YXIgY2hhcnRTdmdEb3VibGVDaGFuZ2VHID0gY2hhcnRTdmdEb3VibGVDaGFuZ2VcbiAgLy8gICAvLyAgIC5hcHBlbmQoXCJnXCIpXG4gIC8vICAgLy8gICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuICAvLyAgIC8vXG4gIC8vICAgLy8gbGluZWFyR3JhZGllbnRVcFxuICAvLyAgIC8vICAgLmFwcGVuZChcInN0b3BcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwic3RvcC1jb2xvclwiLFwiYmx1ZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJzdG9wLW9wYWNpdHlcIiwxKVxuICAvLyAgIC8vXG4gIC8vICAgLy8gbGluZWFyR3JhZGllbnRVcFxuICAvLyAgIC8vICAgLmFwcGVuZChcInN0b3BcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwib2Zmc2V0XCIsXCIxMDAlXCIpXG4gIC8vICAgLy8gICAuYXR0cihcInN0b3AtY29sb3JcIixcImJsdWVcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwic3RvcC1vcGFjaXR5XCIsMClcbiAgLy8gICAvL1xuICAvLyAgIC8vIGxpbmVhckdyYWRpZW50RG93blxuICAvLyAgIC8vICAgLmFwcGVuZChcInN0b3BcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwic3RvcC1jb2xvclwiLFwicmVkXCIpXG4gIC8vICAgLy8gICAuYXR0cihcInN0b3Atb3BhY2l0eVwiLDApXG4gIC8vICAgLy9cbiAgLy8gICAvLyBsaW5lYXJHcmFkaWVudERvd25cbiAgLy8gICAvLyAgIC5hcHBlbmQoXCJzdG9wXCIpXG4gIC8vICAgLy8gICAuYXR0cihcIm9mZnNldFwiLFwiMTAwJVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsXCJyZWRcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwic3RvcC1vcGFjaXR5XCIsMSlcbiAgLy8gICAvL1xuICAvLyAgIC8vIGNoYXJ0U3ZnRG91YmxlQ2hhbmdlRy5hcHBlbmQoXCJtYXJrZXJcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiaWRcIixcInRyaWFuZ2xlLXVwXCIpXG4gIC8vICAgLy8gICAuYXR0cihcInZpZXdCb3hcIixcIjAgMCAxMCAxMFwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJyZWZYXCIsMClcbiAgLy8gICAvLyAgIC5hdHRyKFwicmVmWVwiLDUpXG4gIC8vICAgLy8gICAuYXR0cihcIm1hcmtlclVuaXRzXCIsXCJzdHJva2VXaWR0aFwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJtYXJrZXJXaWR0aFwiLDYpXG4gIC8vICAgLy8gICAuYXR0cihcIm1hcmtlckhlaWdodFwiLDgpXG4gIC8vICAgLy8gICAuYXR0cihcIm9yaWVudFwiLFwiYXV0b1wiKVxuICAvLyAgIC8vICAgLmFwcGVuZChcInBhdGhcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiZmlsbFwiLFwiYmx1ZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJkXCIsXCJNIDAgMCBMIDEwIDUgTCAwIDEwIHpcIilcbiAgLy8gICAvL1xuICAvLyAgIC8vIGNoYXJ0U3ZnRG91YmxlQ2hhbmdlRy5hcHBlbmQoXCJtYXJrZXJcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiaWRcIixcInRyaWFuZ2xlLWRvd25cIilcbiAgLy8gICAvLyAgIC5hdHRyKFwidmlld0JveFwiLFwiMCAwIDEwIDEwXCIpXG4gIC8vICAgLy8gICAuYXR0cihcInJlZlhcIiwwKVxuICAvLyAgIC8vICAgLmF0dHIoXCJyZWZZXCIsNSlcbiAgLy8gICAvLyAgIC5hdHRyKFwibWFya2VyVW5pdHNcIixcInN0cm9rZVdpZHRoXCIpXG4gIC8vICAgLy8gICAuYXR0cihcIm1hcmtlcldpZHRoXCIsNilcbiAgLy8gICAvLyAgIC5hdHRyKFwibWFya2VySGVpZ2h0XCIsOClcbiAgLy8gICAvLyAgIC5hdHRyKFwib3JpZW50XCIsXCJhdXRvXCIpXG4gIC8vICAgLy8gICAuYXBwZW5kKFwicGF0aFwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJmaWxsXCIsXCJyZWRcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiZFwiLFwiTSAwIDAgTCAxMCA1IEwgMCAxMCB6XCIpXG4gIC8vICAgLy9cbiAgLy8gICAvL1xuXHQvLyBcdC8vIGZ1bmN0aW9uIGRyYXdBcnJvdyAodDAsdDEpIHtcblx0Ly8gXHQvLyBcdHZhciBkID0gdDEgPiB0MCA/XG5cdC8vIFx0Ly8gXHRcdChcIk0wLFwiICsgKHQxLTIpICsgXCIgTDQsXCIgKyAodDEtOCkgKyBcIiBMMS41LFwiICsgKHQxLTgpICsgXCIgTDAsXCIgKyB0MCArIFwiIEwtMS41LFwiICsgKHQxLTgpICsgXCIgTC00LFwiICsgKHQxLTgpICsgXCIgWlwiKSA6XG5cdC8vIFx0Ly8gXHRcdChcIk0wLFwiICsgKHQxKzIpICsgXCIgTDQsXCIgKyAodDErOCkgKyBcIiBMMS41LFwiICsgKHQxKzgpICsgXCIgTDAsXCIgKyB0MCArIFwiIEwtMS41LFwiICsgKHQxKzgpICsgXCIgTC00LFwiICsgKHQxKzgpICsgXCIgWlwiKTtcbiAgLy8gICAvL1xuXHQvLyBcdC8vIFx0cmV0dXJuIGQ7XG5cdC8vIFx0Ly8gfVxuICAvLyAgIC8vXG4gIC8vICAgLy8gdmFyIGFycm93cyA9IGNoYXJ0U3ZnRG91YmxlQ2hhbmdlR1xuICAvLyAgIC8vICAgLnNlbGVjdEFsbChcInBhdGhcIilcbiAgLy8gICAvLyAgIC5kYXRhKG5ld3NOZXN0KVxuICAvLyAgIC8vICAgLmVudGVyKClcbiAgLy8gICAvLyAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gIC8vICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJhcnJvdy1zY2F0dGVyLWxpbmVcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiZFwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICB2YXIgdDAgPSB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlLnZhbHVlc1swXSkpXG4gIC8vICAgLy8gICAgIHZhciB0MSA9IHlTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpKVxuICAvLyAgIC8vICAgICAvLyByZXR1cm4gbnVsbFxuICAvLyAgIC8vICAgICAvL1xuICAvLyAgIC8vICAgICByZXR1cm4gZHJhd0Fycm93KHQwLHQxKVxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICBpZihkLnZhbHVlLmRpZmYgPiAwKXtcbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCJ1cmwoI2dyYWRpZW50LXVwKVwiXG4gIC8vICAgLy8gICAgIH1cbiAgLy8gICAvLyAgICAgcmV0dXJuIFwidXJsKCNncmFkaWVudClcIjtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcInN0cm9rZVwiLFwibm9uZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwxKVxuICAvLyAgIC8vXG4gIC8vICAgLy8gdmFyIGFycm93WFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsYXJyb3dzLnNpemUoKS0xXSkucmFuZ2UoWzAsd2lkdGhdKTtcbiAgLy8gICAvL1xuICAvLyAgIC8vIGFycm93c1xuICAvLyAgIC8vICAgLnNvcnQoZnVuY3Rpb24oYSxiKXtcbiAgLy8gICAvLyAgICAgLy8gcmV0dXJuIGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsYi52YWx1ZS52YWx1ZXNbMF0pIC0gZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixhLnZhbHVlLnZhbHVlc1swXSlcbiAgLy8gICAvLyAgICAgcmV0dXJuIGIudmFsdWUuZGlmZiAtIGEudmFsdWUuZGlmZjtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQsaSl7XG4gIC8vICAgLy8gICAgIHJldHVybiBcInRyYW5zbGF0ZShcIithcnJvd1hTY2FsZShpKStcIiwwKVwiXG4gIC8vICAgLy8gICAgIC8vIHJldHVybiBcInRyYW5zbGF0ZShcIit0b3RhbFhTY2FsZShkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpLnRvdGFsX251bSkrXCIsMClcIlxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICBjb25zb2xlLmxvZyhnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIDtcbiAgLy9cbiAgLy9cbiAgLy8gICAvLyBjaGFydFN2Z0RvdWJsZUNoYW5nZUdcbiAgLy8gICAvLyAgIC5zZWxlY3RBbGwoXCJsaW5lXCIpXG4gIC8vICAgLy8gICAuZGF0YShuZXdzTmVzdClcbiAgLy8gICAvLyAgIC5lbnRlcigpXG4gIC8vICAgLy8gICAuYXBwZW5kKFwibGluZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwiYXJyb3ctc2NhdHRlci1saW5lXCIpXG4gIC8vICAgLy8gICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgaWYoK2QudmFsdWUueWVhck1hcC5nZXQoMjAxNCkudG90YWxfbnVtID4gMTAwKXtcbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCIycHhcIlxuICAvLyAgIC8vICAgICB9XG4gIC8vICAgLy8gICAgIGlmKCtkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpLnRvdGFsX251bSA+IDUwKXtcbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCIxcHhcIlxuICAvLyAgIC8vICAgICB9XG4gIC8vICAgLy8gICAgIGlmKCtkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpLnRvdGFsX251bSA+IDEwKXtcbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCIuNXB4XCJcbiAgLy8gICAvLyAgICAgfVxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5zdHlsZShcInN0cm9rZVwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICBpZihkLnZhbHVlLmRpZmYgPiAwKXtcbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCJibHVlXCJcbiAgLy8gICAvLyAgICAgfVxuICAvLyAgIC8vICAgICByZXR1cm4gXCJyZWRcIlxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwieDFcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGQudmFsdWUudmFsdWVzWzBdKSk7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJ4MlwiLCBmdW5jdGlvbihkKSB7XG4gIC8vICAgLy8gICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJzdXBHZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSk7XG4gIC8vICAgLy8gICAgIC8vIHJldHVybiBkaWZmU2NhbGUoZC52YWx1ZS5kaWZmKTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcInkxXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHJldHVybiB0b3RhbFNjYWxlKGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkudG90YWxfbnVtKVxuICAvLyAgIC8vICAgICAvLyByZXR1cm4geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwic3VwR2VuZGVyXCIsZC52YWx1ZS52YWx1ZXNbMF0pKTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcInkyXCIsIGZ1bmN0aW9uKGQpIHtcbiAgLy8gICAvLyAgICAgcmV0dXJuIHRvdGFsU2NhbGUoZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KS50b3RhbF9udW0pXG4gIC8vICAgLy8gICAgIC8vIHJldHVybiB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJzdXBHZW5kZXJcIixkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSk7XG4gIC8vICAgLy8gICAgIC8vIHJldHVybiByYWNlRGlmZlNjYWxlKGQudmFsdWUucmFjZURpZmYpXG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJtYXJrZXItZW5kXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIGlmKGQudmFsdWUuZGlmZiA+IDApe1xuICAvLyAgIC8vICAgICAgIHJldHVybiBcInVybCgjdHJpYW5nbGUtdXApXCI7XG4gIC8vICAgLy8gICAgIH1cbiAgLy8gICAvLyAgICAgcmV0dXJuIFwidXJsKCN0cmlhbmdsZS1kb3duKVwiO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC8vIC5zdHlsZShcInN0cm9rZVwiLFwidXJsKCNncmFkaWVudClcIilcbiAgLy8gICAvLyAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICBjb25zb2xlLmxvZyhnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIDtcbiAgLy9cbiAgLy8gICAvLyBjaGFydFN2Z0RvdWJsZUNoYW5nZUdcbiAgLy8gICAvLyAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gIC8vICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJhcnJvdy1zY2F0dGVyLWxpbmUtYXhpc1wiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJ4MVwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICByZXR1cm4geFNjYWxlKC41KTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcIngyXCIsIGZ1bmN0aW9uKGQpIHtcbiAgLy8gICAvLyAgICAgcmV0dXJuIHhTY2FsZSguNSk7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJ5MVwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICByZXR1cm4gMDtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcInkyXCIsIGZ1bmN0aW9uKGQpIHtcbiAgLy8gICAvLyAgICAgcmV0dXJuIGhlaWdodDtcbiAgLy8gICAvLyAgIH0pXG4gIC8vXG4gIC8vICAgLy8gY2hhcnRTdmdEb3VibGVDaGFuZ2VHXG4gIC8vICAgLy8gICAuYXBwZW5kKFwibGluZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwiYXJyb3ctc2NhdHRlci1saW5lLWF4aXNcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwieDFcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgcmV0dXJuIDA7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJ4MlwiLCBmdW5jdGlvbihkKSB7XG4gIC8vICAgLy8gICAgIHJldHVybiB3aWR0aDtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcInkxXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHJldHVybiB5U2NhbGUoLjUpO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwieTJcIiwgZnVuY3Rpb24oZCkge1xuICAvLyAgIC8vICAgICByZXR1cm4geVNjYWxlKC41KTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vXG4gIC8vXG4gIC8vICAgLy8gZnVuY3Rpb24gYnVpbGRBdmVyYWdlKCl7XG4gIC8vICAgLy8gICB2YXIgY2hhcnRBdmVyYWdlID0gY2hhcnREaXYuYXBwZW5kKFwiZ1wiKVxuICAvLyAgIC8vICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAvLyAgIC8vICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZVwiKVxuICAvLyAgIC8vICAgICAgO1xuICAvLyAgIC8vXG4gIC8vICAgLy8gIGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJ0ZXh0XCIpXG4gIC8vICAgLy8gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZS10ZXh0IHN3YXJtLWF2ZXJhZ2UtdGV4dC1sYWJlbFwiKVxuICAvLyAgIC8vICAgIC5hdHRyKFwieFwiLHhTY2FsZShkYXRhVG9NYXAuYXZlcmFnZSkpXG4gIC8vICAgLy8gICAgLmF0dHIoXCJ5XCIsaGVpZ2h0Ki4zMy0xOSlcbiAgLy8gICAvLyAgICAudGV4dChcIk92ZXJhbGxcIilcbiAgLy8gICAvL1xuICAvLyAgIC8vICAgY2hhcnRBdmVyYWdlLmFwcGVuZChcInRleHRcIilcbiAgLy8gICAvLyAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZS10ZXh0XCIpXG4gIC8vICAgLy8gICAgIC5hdHRyKFwieFwiLHhTY2FsZShkYXRhVG9NYXAuYXZlcmFnZSkpXG4gIC8vICAgLy8gICAgIC5hdHRyKFwieVwiLGhlaWdodCouMzMtNSlcbiAgLy8gICAvLyAgICAgLnRleHQoTWF0aC5yb3VuZChkYXRhVG9NYXAuYXZlcmFnZSoxMDApK1wiJSBNYWxlXCIpXG4gIC8vICAgLy9cbiAgLy8gICAvLyAgIGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJsaW5lXCIpXG4gIC8vICAgLy8gICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF2ZXJhZ2UtbGluZVwiKVxuICAvLyAgIC8vICAgICAuYXR0cihcIngxXCIseFNjYWxlKGRhdGFUb01hcC5hdmVyYWdlKSlcbiAgLy8gICAvLyAgICAgLmF0dHIoXCJ4MlwiLHhTY2FsZShkYXRhVG9NYXAuYXZlcmFnZSkpXG4gIC8vICAgLy8gICAgIC5hdHRyKFwieTFcIixoZWlnaHQqLjMzKVxuICAvLyAgIC8vICAgICAuYXR0cihcInkyXCIsaGVpZ2h0Ki42NilcbiAgLy8gICAvLyAgICAgO1xuICAvLyAgIC8vIH1cbiAgLy8gICAvLyBidWlsZEF2ZXJhZ2UoKTtcbiAgLy9cbiAgLy8gICAvLyB2YXIgdG9wUm93Q2lyY2xlID0gY2hhcnRHXG4gIC8vICAgLy8gICAuYXBwZW5kKFwiZ1wiKVxuICAvLyAgIC8vICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAvLyAgIC8vICAgLmRhdGEobmV3c05lc3QpXG4gIC8vICAgLy8gICAuZW50ZXIoKVxuICAvLyAgIC8vICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2lyY2xlXCIpXG4gIC8vICAgLy8gICAuYXR0cihcInJcIiwgZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHJldHVybiAzXG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7XG4gIC8vICAgLy8gICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudChkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSk7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7XG4gIC8vICAgLy8gICAgIHJldHVybiAwO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5zdHlsZShcImZpbGxcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgdmFyIGRpZmYgPSBnZXRQZXJjZW50KGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLWdldFBlcmNlbnQoZC52YWx1ZS52YWx1ZXNbMF0pXG4gIC8vICAgLy8gICAgIGlmKGRpZmYgPiAuMDEpe1xuICAvLyAgIC8vICAgICAgIHJldHVybiBcInJlZFwiXG4gIC8vICAgLy8gICAgIH1cbiAgLy8gICAvLyAgICAgaWYoZGlmZiA8IC4wMSl7XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIFwiZ3JlZW5cIjtcbiAgLy8gICAvLyAgICAgfVxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICBjb25zb2xlLmxvZyhkKTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICA7XG4gIC8vICAgLy9cbiAgLy8gICAvLyB2YXIgYm90dG9tUm93Q2lyY2xlID0gY2hhcnRHXG4gIC8vICAgLy8gICAuYXBwZW5kKFwiZ1wiKVxuICAvLyAgIC8vICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAvLyAgIC8vICAgLmRhdGEobmV3c05lc3QpXG4gIC8vICAgLy8gICAuZW50ZXIoKVxuICAvLyAgIC8vICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2lyY2xlXCIpXG4gIC8vICAgLy8gICAuYXR0cihcInJcIiwgZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHJldHVybiAzXG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7XG4gIC8vICAgLy8gICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudChkLnZhbHVlLnZhbHVlc1swXSkpO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkge1xuICAvLyAgIC8vICAgICByZXR1cm4gMTAwO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5zdHlsZShcImZpbGxcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgdmFyIGRpZmYgPSBnZXRQZXJjZW50KGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLWdldFBlcmNlbnQoZC52YWx1ZS52YWx1ZXNbMF0pXG4gIC8vICAgLy8gICAgIGlmKGRpZmYgPiAuMDEpe1xuICAvLyAgIC8vICAgICAgIHJldHVybiBcInJlZFwiXG4gIC8vICAgLy8gICAgIH1cbiAgLy8gICAvLyAgICAgaWYoZGlmZiA8IC4wMSl7XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIFwiZ3JlZW5cIjtcbiAgLy8gICAvLyAgICAgfVxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIDtcbiAgLy8gICAvL1xuICAvLyAgIC8vIHZhciByb3dMaW5lcyA9IGNoYXJ0R1xuICAvLyAgIC8vICAgLmFwcGVuZChcImdcIilcbiAgLy8gICAvLyAgIC5zZWxlY3RBbGwoXCJsaW5lXCIpXG4gIC8vICAgLy8gICAuZGF0YShuZXdzTmVzdClcbiAgLy8gICAvLyAgIC5lbnRlcigpXG4gIC8vICAgLy8gICAuYXBwZW5kKFwibGluZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwic2xvcGUtbGluZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJ4MlwiLCBmdW5jdGlvbihkKSB7XG4gIC8vICAgLy8gICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudChkLnZhbHVlLnZhbHVlc1swXSkpO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwieTJcIiwgZnVuY3Rpb24oZCkge1xuICAvLyAgIC8vICAgICByZXR1cm4gMTAwO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwieDFcIiwgZnVuY3Rpb24oZCkge1xuICAvLyAgIC8vICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnQoZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwieTFcIiwgZnVuY3Rpb24oZCkge1xuICAvLyAgIC8vICAgICByZXR1cm4gMDtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgdmFyIGRpZmYgPSBnZXRQZXJjZW50KGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLWdldFBlcmNlbnQoZC52YWx1ZS52YWx1ZXNbMF0pXG4gIC8vICAgLy8gICAgIGlmKGRpZmYgPiAuMDEpe1xuICAvLyAgIC8vICAgICAgIHJldHVybiBcInJlZFwiXG4gIC8vICAgLy8gICAgIH1cbiAgLy8gICAvLyAgICAgaWYoZGlmZiA8IC4wMSl7XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIFwiZ3JlZW5cIjtcbiAgLy8gICAvLyAgICAgfVxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIDtcbiAgLy8gICAvL1xuICAvLyAgIC8vIHZhciBtaW5pV2lkdGggPSA0MDtcbiAgLy8gICAvLyB2YXIgbWluaUhlaWdodCA9IDEwMDtcbiAgLy8gICAvL1xuICAvLyAgIC8vIHZhciBtdWx0aXBsZVkgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbLjMsMV0pLnJhbmdlKFttaW5pSGVpZ2h0LDBdKTtcbiAgLy8gICAvL1xuICAvLyAgIC8vIHZhciBtaW5pTXVsdGlwbGVXcmFwcGVyID0gbWluaU11bHRpcGxlLnNlbGVjdEFsbChcImRpdlwiKVxuICAvLyAgIC8vICAgLmRhdGEobmV3c05lc3QpXG4gIC8vICAgLy8gICAuZW50ZXIoKVxuICAvLyAgIC8vICAgLmFwcGVuZChcImRpdlwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwibWluaS1tdWx0aXBsZS1kaXZcIilcbiAgLy8gICAvLyAgIDtcbiAgLy8gICAvL1xuICAvLyAgIC8vIG1pbmlNdWx0aXBsZVdyYXBwZXIuYXBwZW5kKFwicFwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwibWluaS1tdWx0aXBsZS10ZXh0XCIpXG4gIC8vICAgLy8gICAuc3R5bGUoXCJtYXJnaW4tdG9wXCIsMjApXG4gIC8vICAgLy8gICAudGV4dChmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgcmV0dXJuIG5ld3NJRE5hbWUuZ2V0KGQudmFsdWUudmFsdWVzWzBdLk5ld3NJRCkuQ29tcGFueTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICA7XG4gIC8vICAgLy9cbiAgLy8gICAvLyB2YXIgbWluaU11bHRpcGxlV3JhcHBlclN2ZyA9IG1pbmlNdWx0aXBsZVdyYXBwZXJcbiAgLy8gICAvLyAgIC5hcHBlbmQoXCJzdmdcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInNsb3BlLW1pbmktc3ZnXCIpXG4gIC8vICAgLy8gICAuYXR0cihcImhlaWdodFwiLG1pbmlIZWlnaHQpXG4gIC8vICAgLy8gICAuc3R5bGUoXCJoZWlnaHRcIixtaW5pSGVpZ2h0K1wicHhcIilcbiAgLy8gICAvLyAgIDtcbiAgLy8gICAvL1xuICAvLyAgIC8vIG1pbmlNdWx0aXBsZVdyYXBwZXJTdmdcbiAgLy8gICAvLyAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiY3hcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgcmV0dXJuIDA7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJjeVwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICByZXR1cm4gbXVsdGlwbGVZKGdldFBlcmNlbnQoZC52YWx1ZS52YWx1ZXNbMF0pKTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcInJcIiwyKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwic2xvcGUtc21hbGwtZG90XCIpXG4gIC8vICAgLy8gICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy9cbiAgLy8gICAvLyAgICAgY29uc29sZS5sb2cobmV3c0lETmFtZS5nZXQoZC5rZXkpLkNvbXBhbnkpO1xuICAvLyAgIC8vICAgICBjb25zb2xlLmxvZyhnZXRQZXJjZW50KGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpKTtcbiAgLy8gICAvLyAgICAgY29uc29sZS5sb2coZ2V0UGVyY2VudChkLnZhbHVlLnZhbHVlc1swXSkpO1xuICAvLyAgIC8vXG4gIC8vICAgLy8gICAgIHZhciBkaWZmID0gZ2V0UGVyY2VudChkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKS1nZXRQZXJjZW50KGQudmFsdWUudmFsdWVzWzBdKVxuICAvLyAgIC8vICAgICBpZihkaWZmID4gLjAxKXtcbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCJyZWRcIlxuICAvLyAgIC8vICAgICB9XG4gIC8vICAgLy8gICAgIGlmKGRpZmYgPCAuMDEpe1xuICAvLyAgIC8vICAgICAgIHJldHVybiBcImdyZWVuXCI7XG4gIC8vICAgLy8gICAgIH1cbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICA7XG4gIC8vICAgLy9cbiAgLy8gICAvLyBtaW5pTXVsdGlwbGVXcmFwcGVyU3ZnXG4gIC8vICAgLy8gICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gIC8vICAgLy8gICAuYXR0cihcImN4XCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHJldHVybiBtaW5pV2lkdGg7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJjeVwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICByZXR1cm4gbXVsdGlwbGVZKGdldFBlcmNlbnQoZC52YWx1ZS55ZWFyTWFwLmdldCgyMDE0KSkpO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hdHRyKFwiclwiLDIpXG4gIC8vICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzbG9wZS1zbWFsbC1kb3RcIilcbiAgLy8gICAvLyAgIC5zdHlsZShcImZpbGxcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgdmFyIGRpZmYgPSBnZXRQZXJjZW50KGQudmFsdWUueWVhck1hcC5nZXQoMjAxNCkpLWdldFBlcmNlbnQoZC52YWx1ZS52YWx1ZXNbMF0pXG4gIC8vICAgLy8gICAgIGlmKGRpZmYgPiAuMDEpe1xuICAvLyAgIC8vICAgICAgIHJldHVybiBcInJlZFwiXG4gIC8vICAgLy8gICAgIH1cbiAgLy8gICAvLyAgICAgaWYoZGlmZiA8IC4wMSl7XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIFwiZ3JlZW5cIjtcbiAgLy8gICAvLyAgICAgfVxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIDtcbiAgLy8gICAvL1xuICAvLyAgIC8vIG1pbmlNdWx0aXBsZVdyYXBwZXJTdmdcbiAgLy8gICAvLyAgIC5zZWxlY3RBbGwoXCJsaW5lXCIpXG4gIC8vICAgLy8gICAuZGF0YShbMCwxLDIsNCw1XSlcbiAgLy8gICAvLyAgIC5lbnRlcigpXG4gIC8vICAgLy8gICAuYXBwZW5kKFwibGluZVwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwic2xvcGUtbGluZS1heGlzXCIpXG4gIC8vICAgLy8gICAuYXR0cihcInkxXCIsIGZ1bmN0aW9uKGQsaSkge1xuICAvLyAgIC8vICAgICByZXR1cm4gaSoyMCtcIiVcIjtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcIngxXCIsIGZ1bmN0aW9uKGQpIHtcbiAgLy8gICAvLyAgICAgcmV0dXJuIDA7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJ5MlwiLCBmdW5jdGlvbihkLGkpIHtcbiAgLy8gICAvLyAgICAgcmV0dXJuIGkqMjArXCIlXCI7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJ4MlwiLCBmdW5jdGlvbihkKSB7XG4gIC8vICAgLy8gICAgIHJldHVybiBtaW5pV2lkdGg7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vXG4gIC8vICAgLy8gbWluaU11bHRpcGxlV3JhcHBlclN2Z1xuICAvLyAgIC8vICAgLmFwcGVuZChcImxpbmVcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInNsb3BlLWxpbmVcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwieTFcIiwgZnVuY3Rpb24oZCkge1xuICAvLyAgIC8vICAgICByZXR1cm4gbXVsdGlwbGVZKGdldFBlcmNlbnQoZC52YWx1ZS52YWx1ZXNbMF0pKTtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuYXR0cihcIngxXCIsIGZ1bmN0aW9uKGQpIHtcbiAgLy8gICAvLyAgICAgcmV0dXJuIDA7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJ5MlwiLCBmdW5jdGlvbihkKSB7XG4gIC8vICAgLy8gICAgIHJldHVybiBtdWx0aXBsZVkoZ2V0UGVyY2VudChkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKSk7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLmF0dHIoXCJ4MlwiLCBmdW5jdGlvbihkKSB7XG4gIC8vICAgLy8gICAgIHJldHVybiBtaW5pV2lkdGg7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHZhciBkaWZmID0gZ2V0UGVyY2VudChkLnZhbHVlLnllYXJNYXAuZ2V0KDIwMTQpKS1nZXRQZXJjZW50KGQudmFsdWUudmFsdWVzWzBdKVxuICAvLyAgIC8vICAgICBpZihkaWZmID4gLjAxKXtcbiAgLy8gICAvLyAgICAgICByZXR1cm4gXCJyZWRcIlxuICAvLyAgIC8vICAgICB9XG4gIC8vICAgLy8gICAgIGlmKGRpZmYgPCAuMDEpe1xuICAvLyAgIC8vICAgICAgIHJldHVybiBcImdyZWVuXCI7XG4gIC8vICAgLy8gICAgIH1cbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICA7XG4gIC8vICAgLy9cbiAgLy9cbiAgLy8gICAvLyBjZWxsXG4gIC8vICAgLy8gICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gIC8vICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaXJjbGVcIilcbiAgLy8gICAvLyAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgcmV0dXJuIGQucmFkaXVzXG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgLy8gLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLng7IH0pXG4gIC8vICAgLy8gICAvLyAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSlcbiAgLy8gICAvLyAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICBjb25zb2xlLmxvZyhkLm1hbGVfbnVtL2QudG90YWxfbnVtKTtcbiAgLy8gICAvLyAgICAgY29uc29sZS5sb2cobmV3c0lETmFtZS5nZXQoZC5OZXdzSUQpLkNvbXBhbnkpO1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIDtcbiAgLy9cbiAgLy8gICAvLyBkYXRhVG9NYXAudmFsdWVzID0gZDMubmVzdCgpXG4gIC8vICAgLy8gICAua2V5KGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICByZXR1cm4gTWF0aC5yb3VuZChnZXRQZXJjZW50KGQpKjUwKS81MDtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuc29ydEtleXMoZnVuY3Rpb24oYSxiKXtcbiAgLy8gICAvLyAgICAgcmV0dXJuIGEtYjtcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuZW50cmllcyhkYXRhVG9NYXAudmFsdWVzKVxuICAvLyAgIC8vICAgO1xuICAvLyAgIC8vXG4gIC8vICAgLy8gY2hhcnREaXYuYXBwZW5kKFwiZGl2XCIpXG4gIC8vICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tYXZnLWRpdlwiKVxuICAvLyAgIC8vICAgLnN0eWxlKFwibGVmdFwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICByZXR1cm4gKGRhdGFUb01hcC5hdmVyYWdlKndpZHRoKzEpK1wicHhcIlxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5hcHBlbmQoXCJwXCIpXG4gIC8vICAgLy8gICAudGV4dChNYXRoLnJvdW5kKGRhdGFUb01hcC5hdmVyYWdlKjEwMCkrXCIlXCIpXG4gIC8vICAgLy8gICA7XG4gIC8vICAgLy9cbiAgLy8gICAvLyB2YXIgeWVhcnNDb2x1bW4gPSBjaGFydERpdlxuICAvLyAgIC8vICAgLnNlbGVjdEFsbChcIi5oaXN0b2dyYW0teWVhci1jb250YWluZXJcIilcbiAgLy8gICAvLyAgIC5kYXRhKGRhdGFUb01hcC52YWx1ZXMpXG4gIC8vICAgLy8gICAuZW50ZXIoKVxuICAvLyAgIC8vICAgLmFwcGVuZChcImRpdlwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwiaGlzdG9ncmFtLXllYXItY29udGFpbmVyXCIpXG4gIC8vICAgLy8gICAuc3R5bGUoXCJsZWZ0XCIsZnVuY3Rpb24oZCl7XG4gIC8vICAgLy8gICAgIHJldHVybiAoZC5rZXkqd2lkdGgrMSkrXCJweFwiXG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgO1xuICAvLyAgIC8vXG4gIC8vICAgLy8geWVhcnNDb2x1bW5cbiAgLy8gICAvLyAgIC5zZWxlY3RBbGwoXCJkaXZcIilcbiAgLy8gICAvLyAgIC5kYXRhKGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICByZXR1cm4gZC52YWx1ZXNcbiAgLy8gICAvLyAgIH0pXG4gIC8vICAgLy8gICAuZW50ZXIoKVxuICAvLyAgIC8vICAgLmFwcGVuZChcImRpdlwiKVxuICAvLyAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICB2YXIgc3RhdGUgPSBudWxsO1xuICAvLyAgIC8vICAgICB2YXIgcmVnaW9uID0gbnVsbDtcbiAgLy8gICAvLyAgICAgaWYobmV3c0lkTWFwLmhhcyhkLk5ld3NJRCkpe1xuICAvLyAgIC8vICAgICAgIHN0YXRlID0gbmV3c0lkTWFwLmdldChkLk5ld3NJRCkuU3RhdGU7XG4gIC8vICAgLy8gICAgIH1cbiAgLy8gICAvLyAgICAgaWYocmVnaW9uTWFwLmhhcyhzdGF0ZSkpe1xuICAvLyAgIC8vICAgICAgIHJlZ2lvbiA9IHJlZ2lvbk1hcC5nZXQoc3RhdGUpWzNdO1xuICAvLyAgIC8vICAgICB9XG4gIC8vICAgLy9cbiAgLy8gICAvLyAgICAgaWYocmVnaW9uID09XCJXZXN0XCIpe1xuICAvLyAgIC8vICAgICAgIHJlZ2lvbiA9IFwiZ3JlZW5cIlxuICAvLyAgIC8vICAgICB9XG4gIC8vICAgLy8gICAgIGlmKHJlZ2lvbiA9PVwiU291dGhcIil7XG4gIC8vICAgLy8gICAgICAgcmVnaW9uID0gXCJibHVlXCJcbiAgLy8gICAvLyAgICAgfVxuICAvLyAgIC8vICAgICBpZihyZWdpb24gPT1cIk1pZHdlc3RcIil7XG4gIC8vICAgLy8gICAgICAgcmVnaW9uID0gXCJwdXJwbGVcIlxuICAvLyAgIC8vICAgICB9XG4gIC8vICAgLy8gICAgIGlmKHJlZ2lvbiA9PVwiTm9ydGhlYXN0XCIpe1xuICAvLyAgIC8vICAgICAgIHJlZ2lvbiA9IFwieWVsbG93XCJcbiAgLy8gICAvLyAgICAgfVxuICAvLyAgIC8vICAgICByZXR1cm4gXCJoaXN0b2dyYW0teWVhci1pdGVtIFwiK3JlZ2lvblxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIixmdW5jdGlvbihkKXtcbiAgLy8gICAvLyAgICAgLy8gcmV0dXJuIGJhY2tncm91bmRGdW5jdGlvbihkKVxuICAvLyAgIC8vICAgICByZXR1cm4gbnVsbFxuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAvLyAgIC8vICAgICBjb25zb2xlLmxvZyhuZXdzSUROYW1lLmdldChkLk5ld3NJRCkuQ29tcGFueSk7XG4gIC8vICAgLy8gICB9KVxuICAvLyAgIC8vICAgO1xuICAvLyAgIC8vXG4gIC8vICAgLy8geWVhcnNDb2x1bW4uYXBwZW5kKFwicFwiKVxuICAvLyAgIC8vICAgLnRleHQoZnVuY3Rpb24oZCxpKXtcbiAgLy8gICAvLyAgICAgaWYoaSU1ID09IDAgfHwgaT09MCB8fCBpPT15ZWFyc0NvbHVtbi5zaXplKCktMSl7XG4gIC8vICAgLy8gICAgICAgcmV0dXJuIE1hdGgucm91bmQoZC5rZXkqMTAwKStcIiVcIjtcbiAgLy8gICAvLyAgICAgfVxuICAvLyAgIC8vICAgICByZXR1cm4gbnVsbDtcbiAgLy8gICAvL1xuICAvLyAgIC8vICAgfSlcbiAgLy8gICAvLyAgIDtcbiAgLy8gfVxuICAvLyAvLyBmdW5jdGlvbiBiYWNrZ3JvdW5kRnVuY3Rpb24oZCl7XG4gIC8vIC8vICAgdmFyIHN0YXRlID0gbnVsbDtcbiAgLy8gLy8gICB2YXIgcmVnaW9uID0gbnVsbDtcbiAgLy8gLy8gICBpZihuZXdzSWRNYXAuaGFzKGQuTmV3c0lEKSl7XG4gIC8vIC8vICAgICBzdGF0ZSA9IG5ld3NJZE1hcC5nZXQoZC5OZXdzSUQpLlN0YXRlO1xuICAvLyAvLyAgIH1cbiAgLy8gLy8gICBpZihyZWdpb25NYXAuaGFzKHN0YXRlKSl7XG4gIC8vIC8vICAgICByZWdpb24gPSByZWdpb25NYXAuZ2V0KHN0YXRlKVszXTtcbiAgLy8gLy8gICB9XG4gIC8vIC8vICAgaWYocmVnaW9uID09XCJXZXN0XCIpe1xuICAvLyAvLyAgICAgcmV0dXJuIFwiZ3JlZW5cIlxuICAvLyAvLyAgIH1cbiAgLy8gLy8gICBpZihyZWdpb24gPT1cIlNvdXRoXCIpe1xuICAvLyAvLyAgICAgcmV0dXJuIFwiYmx1ZVwiXG4gIC8vIC8vICAgfVxuICAvLyAvLyAgIGlmKHJlZ2lvbiA9PVwiTWlkd2VzdFwiKXtcbiAgLy8gLy8gICAgIHJldHVybiBcInB1cnBsZVwiXG4gIC8vIC8vICAgfVxuICAvLyAvLyAgIGlmKHJlZ2lvbiA9PVwiTm9ydGhlYXN0XCIpe1xuICAvLyAvLyAgICAgcmV0dXJuIFwieWVsbG93XCJcbiAgLy8gLy8gICB9XG4gIC8vIC8vIH1cbiAgLy8gYnVpbGRDaGFydCgpO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgaW5pdCB9XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL21hcHMuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBO0FBQ0E7QUFzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 100;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +(data.total_num - data.male_num) / data.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +data.white_sup_num / data.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +data.white_num / data.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, data) {\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 500 - margin.left - margin.right;\n  var height = 500 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".scatter\");\n\n  // container.append(\"p\")\n  //   .attr(\"class\",\"chart-title\")\n  //   .text(\"Gender Break-down of Staff vs. Leaders\")\n  //   ;\n\n  function buildToggles() {\n    var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n    var sizeCats = [0, 20, 50, 100, 500];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == sizeCats.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      countMin = d;\n      buildChart();\n    });\n\n    var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type histogram-chart-toggle-first\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == raceGenderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"race\") {\n        return \"Race\";\n      }\n      return \"Gender\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      cut = d;\n      buildChart();\n    });\n\n    var leaderToggleData = [\"all\", \"leader\"];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(leaderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == leaderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"all\") {\n        return \"All Staff\";\n      }\n      return \"Leadership\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      group = d;\n      buildChart();\n    });\n  }\n  buildToggles();\n\n  function buildChart() {\n\n    d3.selectAll(\".scatter-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"scatter-chart-wrapper\").style(\"width\", width + margin.left + margin.right + \"px\");\n\n    var chartSvgDoubleChange = chartDiv.append(\"svg\").attr(\"class\", \"scatter-chart-wrapper-svg-double-change\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var maxPercentArray = [];\n    var diffArray = [];\n    var raceDiffArray = [];\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      var maxPercent = d3.max(leaves, function (d) {\n        return getPercent(d);\n      });\n      maxPercentArray.push(maxPercent);\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014)) {\n        return d;\n      }\n      return null;\n    });\n\n    for (var item in newsNest) {\n      var diff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"supGender\";\n      var raceDiff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"gender\";\n      diffArray.push(diff);\n      raceDiffArray.push(raceDiff);\n      newsNest[item].value.companyName = newsIDName.get(newsNest[item].key).Company;\n      newsNest[item].value.diff = diff;\n      newsNest[item].value.raceDiff = raceDiff;\n    }\n    ;\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n    var percentExtent = d3.extent(maxPercentArray, function (d) {\n      return d;\n    });\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var raceDiffExtent = d3.extent(raceDiffArray, function (d) {\n      return d;\n    });\n    var diffScale = d3.scaleLinear().domain([diffExtent[0], diffExtent[1]]).range([0, width]);\n    var raceDiffScale = d3.scaleLinear().domain([raceDiffExtent[0], raceDiffExtent[1]]).range([height, 0]);\n\n    var colorScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"white\", \"green\"]);\n    var strokeScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"grey\", \"green\"]);\n\n    var xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n    var yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n\n    function buildAxis() {\n      var chartAxis = chartSvgDoubleChange.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-axis\");\n\n      var chartAxisLines = chartAxis.append(\"g\");\n\n      chartAxisLines.append(\"line\").attr(\"x1\", width / 2).attr(\"x2\", width / 2).attr(\"y1\", 0).attr(\"y2\", height).attr(\"class\", \"swarm-axis-line\");\n\n      chartAxisLines.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n\n      var chartAxisText = chartAxis.append(\"g\");\n\n      chartAxisText.append(\"g\").selectAll(\"text\").data([\"100% Female Leaders\", \"100% Male Leaders\"]).enter().append(\"text\").attr(\"x\", function (d, i) {\n        return width / 2;\n      }).attr(\"y\", function (d, i) {\n        if (i == 0) {\n          return 0;\n        }\n        return height;\n      }).attr(\"class\", \"swarm-axis-tick-text\").text(function (d) {\n        return d;\n      }).style(\"text-anchor\", function (d, i) {\n        return \"middle\";\n      }).style(\"dominant-baseline\", \"text-after-edge\");\n\n      chartAxisText.append(\"g\").selectAll(\"text\").data([\"100% Male Staff\", \"100% Female Staff\"]).enter().append(\"text\").attr(\"x\", function (d, i) {\n        if (i == 0) {\n          return 0;\n        }\n        return width;\n      }).attr(\"y\", height / 2).attr(\"class\", \"swarm-axis-tick-text\").text(function (d) {\n        return d;\n      }).style(\"text-anchor\", function (d, i) {\n        if (i == 0) {\n          return \"end\";\n        }\n        return \"start\";\n      });\n    }\n    buildAxis();\n\n    var chartSvgDoubleChangeG = chartSvgDoubleChange.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    chartSvgDoubleChangeG.selectAll(\"circle\").data(newsNest).enter().append(\"circle\").attr(\"class\", \"scatter-circle-double-axis\").attr(\"r\", function (d) {\n      return radiusScale(d.value.yearMap.get(2014).total_num);\n    }).attr(\"cx\", function (d) {\n      return xScale(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n      return diffScale(d.value.diff);\n    }).attr(\"cy\", function (d) {\n      return yScale(getPercentType(\"supGender\", d.value.yearMap.get(2014)));\n    }).on(\"mouseover\", function (d) {});\n\n    chartDiv.append(\"div\").attr(\"class\", \"swarm-chart-logos\").style(\"transform\", \"translate(\" + margin.left + \"px\" + \",\" + margin.top + \"px\" + \")\").selectAll(\"div\").data(newsNest).enter().append(\"div\").style(\"transform\", function (d) {\n      return \"translate(\" + xScale(getPercentType(\"gender\", d.value.yearMap.get(2014))) + \"px\" + \",\" + yScale(getPercentType(\"supGender\", d.value.yearMap.get(2014))) + \"px\" + \")\";\n    }).attr(\"class\", \"swarm-chart-logo-container\").append(\"div\").style(\"width\", function (d) {\n      return \"1px\";\n    }).style(\"height\", function (d) {\n      return \"1px\";\n    }).attr(\"class\", \"swarm-chart-logo\").style(\"width\", function (d) {\n      return radiusScale(d.value.yearMap.get(2014).total_num) * 2 + \"px\";\n    }).style(\"height\", function (d) {\n      return radiusScale(d.value.yearMap.get(2014).total_num) * 2 + \"px\";\n    }).style(\"background-image\", function (d) {\n      if (d.value.companyName == \"the new york times\") {\n        return \"url(assets/ny-times-logo.svg)\";\n      }\n    });\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 100;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +d.male_num / d.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +d.white_sup_num / d.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_sup_num / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +d.white_num / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +data.male_num / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return +data.white_num / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 1000 - margin.left - margin.right;\n  var height = 500 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".slope-chart\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data([0, 20, 50, 100, 500]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    countMin = d;\n    buildChart();\n  });\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data([\"race\", \"gender\", \"supWhite\", \"supGender\"]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    cut = d;\n    buildChart();\n  });\n\n  var xScale = d3.scaleLinear().domain([.54, .75]).range([0, width]);\n\n  function buildChart() {\n\n    d3.selectAll(\".slope-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"svg\").attr(\"class\", \"slope-chart-wrapper\").attr(\"width\", width).attr(\"height\", height);\n\n    var miniMultiple = container.append(\"div\").attr(\"class\", \"slope-mini-multiple-div\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014)) {\n        return d;\n      }\n      return null;\n    });\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n\n    // function buildAxis(){\n    //  var chartAxis = chartDiv.append(\"g\")\n    //    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //    .attr(\"class\",\"swarm-axis\")\n    //    ;\n    //\n    //  chartAxis.append(\"g\")\n    //    .append(\"line\")\n    //    .attr(\"x1\",0)\n    //    .attr(\"x2\",\"100%\")\n    //    .attr(\"y1\",height/2)\n    //    .attr(\"y2\",height/2)\n    //    .attr(\"class\",\"swarm-axis-line\")\n    //\n    // }\n    // buildAxis();\n\n    var chartG = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // function buildAverage(){\n    //   var chartAverage = chartDiv.append(\"g\")\n    //      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //      .attr(\"class\",\"swarm-average\")\n    //      ;\n    //\n    //  chartAverage.append(\"text\")\n    //    .attr(\"class\",\"swarm-average-text swarm-average-text-label\")\n    //    .attr(\"x\",xScale(dataToMap.average))\n    //    .attr(\"y\",height*.33-19)\n    //    .text(\"Overall\")\n    //\n    //   chartAverage.append(\"text\")\n    //     .attr(\"class\",\"swarm-average-text\")\n    //     .attr(\"x\",xScale(dataToMap.average))\n    //     .attr(\"y\",height*.33-5)\n    //     .text(Math.round(dataToMap.average*100)+\"% Male\")\n    //\n    //   chartAverage.append(\"line\")\n    //     .attr(\"class\",\"swarm-average-line\")\n    //     .attr(\"x1\",xScale(dataToMap.average))\n    //     .attr(\"x2\",xScale(dataToMap.average))\n    //     .attr(\"y1\",height*.33)\n    //     .attr(\"y2\",height*.66)\n    //     ;\n    // }\n    // buildAverage();\n\n    var topRowCircle = chartG.append(\"g\").selectAll(\"circle\").data(newsNest).enter().append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n      return 3;\n    }).attr(\"cx\", function (d) {\n      return xScale(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"cy\", function (d) {\n      return 0;\n    }).style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    }).on(\"mouseover\", function (d) {\n      console.log(d);\n    });\n\n    var bottomRowCircle = chartG.append(\"g\").selectAll(\"circle\").data(newsNest).enter().append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n      return 3;\n    }).attr(\"cx\", function (d) {\n      return xScale(getPercent(d.value.values[0]));\n    }).attr(\"cy\", function (d) {\n      return 100;\n    }).style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    var rowLines = chartG.append(\"g\").selectAll(\"line\").data(newsNest).enter().append(\"line\").attr(\"class\", \"slope-line\").attr(\"x2\", function (d) {\n      return xScale(getPercent(d.value.values[0]));\n    }).attr(\"y2\", function (d) {\n      return 100;\n    }).attr(\"x1\", function (d) {\n      return xScale(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"y1\", function (d) {\n      return 0;\n    }).style(\"stroke\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    var miniWidth = 40;\n    var miniHeight = 100;\n\n    var multipleY = d3.scaleLinear().domain([.3, 1]).range([miniHeight, 0]);\n\n    var miniMultipleWrapper = miniMultiple.selectAll(\"div\").data(newsNest).enter().append(\"div\").attr(\"class\", \"mini-multiple-div\");\n\n    miniMultipleWrapper.append(\"p\").attr(\"class\", \"mini-multiple-text\").style(\"margin-top\", 20).text(function (d) {\n      return newsIDName.get(d.value.values[0].NewsID).Company;\n    });\n\n    var miniMultipleWrapperSvg = miniMultipleWrapper.append(\"svg\").attr(\"class\", \"slope-mini-svg\").attr(\"height\", miniHeight).style(\"height\", miniHeight + \"px\");\n\n    miniMultipleWrapperSvg.append(\"circle\").attr(\"cx\", function (d) {\n      return 0;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercent(d.value.values[0]));\n    }).attr(\"r\", 2).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    miniMultipleWrapperSvg.append(\"circle\").attr(\"cx\", function (d) {\n      return miniWidth;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"r\", 2).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    miniMultipleWrapperSvg.selectAll(\"line\").data([0, 1, 2, 4, 5]).enter().append(\"line\").attr(\"class\", \"slope-line-axis\").attr(\"y1\", function (d, i) {\n      return i * 20 + \"%\";\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d, i) {\n      return i * 20 + \"%\";\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    });\n\n    miniMultipleWrapperSvg.append(\"line\").attr(\"class\", \"slope-line\").attr(\"y1\", function (d) {\n      return multipleY(getPercent(d.value.values[0]));\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d) {\n      return multipleY(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    }).style(\"stroke\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    // cell\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return d.radius\n    //   })\n    //   // .attr(\"cx\", function(d) { return d.x; })\n    //   // .attr(\"cy\", function(d) { return d.y; })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d.male_num/d.total_num);\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n\n    // dataToMap.values = d3.nest()\n    //   .key(function(d){\n    //     return Math.round(getPercent(d)*50)/50;\n    //   })\n    //   .sortKeys(function(a,b){\n    //     return a-b;\n    //   })\n    //   .entries(dataToMap.values)\n    //   ;\n    //\n    // chartDiv.append(\"div\")\n    //   .attr(\"class\",\"histogram-avg-div\")\n    //   .style(\"left\",function(d){\n    //     return (dataToMap.average*width+1)+\"px\"\n    //   })\n    //   .append(\"p\")\n    //   .text(Math.round(dataToMap.average*100)+\"%\")\n    //   ;\n    //\n    // var yearsColumn = chartDiv\n    //   .selectAll(\".histogram-year-container\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-year-container\")\n    //   .style(\"left\",function(d){\n    //     return (d.key*width+1)+\"px\"\n    //   })\n    //   ;\n    //\n    // yearsColumn\n    //   .selectAll(\"div\")\n    //   .data(function(d){\n    //     return d.values\n    //   })\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",function(d){\n    //     var state = null;\n    //     var region = null;\n    //     if(newsIdMap.has(d.NewsID)){\n    //       state = newsIdMap.get(d.NewsID).State;\n    //     }\n    //     if(regionMap.has(state)){\n    //       region = regionMap.get(state)[3];\n    //     }\n    //\n    //     if(region ==\"West\"){\n    //       region = \"green\"\n    //     }\n    //     if(region ==\"South\"){\n    //       region = \"blue\"\n    //     }\n    //     if(region ==\"Midwest\"){\n    //       region = \"purple\"\n    //     }\n    //     if(region ==\"Northeast\"){\n    //       region = \"yellow\"\n    //     }\n    //     return \"histogram-year-item \"+region\n    //   })\n    //   .style(\"background-color\",function(d){\n    //     // return backgroundFunction(d)\n    //     return null\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n    //\n    // yearsColumn.append(\"p\")\n    //   .text(function(d,i){\n    //     if(i%5 == 0 || i==0 || i==yearsColumn.size()-1){\n    //       return Math.round(d.key*100)+\"%\";\n    //     }\n    //     return null;\n    //\n    //   })\n    //   ;\n  }\n  function backgroundFunction(d) {\n    var state = null;\n    var region = null;\n    if (newsIdMap.has(d.NewsID)) {\n      state = newsIdMap.get(d.NewsID).State;\n    }\n    if (regionMap.has(state)) {\n      region = regionMap.get(state)[3];\n    }\n    if (region == \"West\") {\n      return \"green\";\n    }\n    if (region == \"South\") {\n      return \"blue\";\n    }\n    if (region == \"Midwest\") {\n      return \"purple\";\n    }\n    if (region == \"Northeast\") {\n      return \"yellow\";\n    }\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo, top_3_data) {\n\n  var yearSelected = 2015;\n\n  var top3Map = d3.map(top_3_data, function (d) {\n    return d.Organization.toLowerCase();\n  });\n\n  var cut = \"race\";\n  var group = \"all\";\n  var countMin = 50;\n\n  function getAverage(data) {\n\n    if (cut == \"gender\" && group == \"all\") {\n      return d3.mean(data, function (d) {\n        return (d.total_num - d.male_num) / d.total_num;\n      });\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.white_sup_num) / d.total_sup_num;\n      });\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.male_sup_num) / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return (+d.total_num - +d.white_num) / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\" && group == \"all\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num;\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 20, left: 40 };\n  var width = 1000 - margin.left - margin.right;\n  var height = 250 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".swarm-leader\");\n\n  // container.append(\"p\")\n  //   .attr(\"class\",\"chart-title\")\n  //   .text(\"Newsrooms Broken-down by Gender\")\n  //   ;\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  var sizeCats = [0, 20, 50, 100, 500];\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n    if (i == 0) {\n      return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    }\n    if (i == sizeCats.length - 1) {\n      return \"back-curve histogram-chart-toggle-item\";\n    }\n    return \"histogram-chart-toggle-item\";\n  }).text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    var dataSelected = d;\n    d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n      if (d == dataSelected) {\n        return true;\n      }\n      return false;\n    });\n    countMin = d;\n    buildChart();\n  });\n\n  var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n    if (i == 0) {\n      return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    }\n    if (i == raceGenderToggleData.length - 1) {\n      return \"back-curve histogram-chart-toggle-item\";\n    }\n    return \"histogram-chart-toggle-item\";\n  }).text(function (d) {\n    if (d == \"race\") {\n      return \"Race\";\n    }\n    return \"Gender\";\n  }).on(\"click\", function (d) {\n    var dataSelected = d;\n    d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n      if (d == dataSelected) {\n        return true;\n      }\n      return false;\n    });\n    cut = d;\n    buildChart();\n  });\n\n  var leaderToggleData = [\"all\", \"leader\"];\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(leaderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n    if (i == 0) {\n      return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    }\n    if (i == leaderToggleData.length - 1) {\n      return \"back-curve histogram-chart-toggle-item\";\n    }\n    return \"histogram-chart-toggle-item\";\n  }).text(function (d) {\n    if (d == \"all\") {\n      return \"All Staff\";\n    }\n    return \"Leadership\";\n  }).on(\"click\", function (d) {\n    var dataSelected = d;\n    d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n      if (d == dataSelected) {\n        return true;\n      }\n      return false;\n    });\n    group = d;\n    buildChart();\n  });\n\n  var xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]);\n  if (cut == \"race\") {\n    xScale.domain([0, 1]);\n  }\n\n  function buildChart() {\n\n    d3.selectAll(\".swarm-leader-chart-container\").remove();\n\n    var chartDivContainer = container.append(\"div\").attr(\"class\", \"swarm-leader-chart-container\").style(\"width\", width + margin.left + margin.right + \"px\");\n\n    var chartToolTip = chartDivContainer.append(\"div\").attr(\"class\", \"swarm-chart-tool-tip\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").text(function (d) {\n      return d;\n    });\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var yearNest = d3.nest().key(function (d) {\n      return +d.Year;\n    }).rollup(function (leaves) {\n      var average = getAverage(leaves);\n      return { average: average, values: leaves };\n    }).entries(filteredMapData);\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    var diffArray = [];\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(yearSelected)) {\n        return d;\n      }\n      return null;\n    });\n\n    for (var item in newsNest) {\n      newsNest[item].companyName = newsIDName.get(newsNest[item].key).Company;\n      newsNest[item].top3Data = top3Map.get(newsNest[item].companyName);\n      var diff = getPercent(newsNest[item].value.yearMap.get(yearSelected)) - getPercent(newsNest[item].value.values[0]);\n      diffArray.push(diff);\n      newsNest[item].value.diff = diff;\n    }\n    ;\n\n    var newsMap = d3.map(newsNest, function (d) {\n      return d.key;\n    });\n\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var colorScale = d3.scaleLinear().domain(diffExtent).range([\"green\", \"red\"]);\n    var genderColorScale = d3.scaleLinear().domain([.2, .5, .8]).range([\"#2161fa\", \"#dddddd\", \"#ff3333\"]);\n    if (cut == \"race\") {\n      genderColorScale.domain([0, .5, 1]);\n    }\n\n    var dataToMap = yearNest.filter(function (d) {\n      return d.key == yearSelected;\n    })[0].value.values;\n\n    var totalExtent = d3.extent(dataToMap, function (d) {\n      return +d.total_num;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n\n    dataToMap.forEach(function (d, i) {\n      d.radius = radiusScale(d.total_num);\n      d.companyName = newsIDName.get(+d.NewsID).Company;\n      d.top3Data = top3Map.get(d.companyName);\n    });\n\n    var dataNest = d3.nest().key(function (d) {\n      if (+d.top3Data[\"TOP3-nonwhite\"] > 0) {\n        return 1;\n      }\n      return 0;\n    }).entries(dataToMap);\n\n    function buildAnSVG(dataSet) {\n\n      var forceCollide = d3.forceCollide().radius(function (d) {\n        return d.radius + 1;\n      }).iterations(1);\n\n      var simulation = d3.forceSimulation(dataSet).force(\"x\", d3.forceX(function (d) {\n        return xScale(getPercent(d));\n      }).strength(1)).force(\"y\", d3.forceY(height / 2)).force(\"collide\", forceCollide).stop();\n\n      var chartDiv = chartDivContainer.append(\"svg\").attr(\"class\", \"swarm-chart-wrapper\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n\n      function buildAxis() {\n\n        var chartAxis = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-axis\");\n\n        var tickData = [.2, .3, .5, .7, .8];\n        if (cut == \"race\") {\n          tickData = [0, .3, .5, .7, 1];\n        }\n\n        var ticks = chartAxis.append(\"g\").attr(\"class\", \"swarm-axis-tick-container\").selectAll(\"g\").data(tickData).enter().append(\"g\").attr(\"class\", \"swarm-axis-tick-g\");\n\n        ticks.append(\"line\").style(\"stroke\", function (d) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", function (d, i) {\n          if (d == .5) {\n            return height / 2;\n          }\n          return 0;\n        }).attr(\"y2\", function (d) {\n          if (d == .5) {\n            return 0;\n          }\n          return height * .05;\n        }).attr(\"class\", \"swarm-axis-tick\");\n\n        ticks.append(\"text\").attr(\"x\", function (d) {\n          return xScale(d);\n        }).attr(\"y\", -6).attr(\"class\", \"swarm-axis-tick-text\").style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i == tickData.length - 1) {\n            return \"end\";\n          }\n          return null;\n        }).style(\"fill\", function (d, i) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              return Math.floor((1 - d) * 100) + \"% White Staff\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male Staff\";\n          }\n          if (i == tickData.length - 1) {\n            if (cut == \"race\") {\n              return Math.floor(d * 100) + \"% Non-White Staff\";\n            }\n            return Math.floor(d * 100) + \"% Female Staff\";\n          }\n          if (d == .5) {\n            return \"50/50  Split\";\n          }\n          if (d < .5) {\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n\n        chartAxis.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n      }\n      buildAxis();\n\n      var chartG = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      function buildAverage() {\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(dataToMap.average)).attr(\"y\", height * .2 - 22).text(\"Overall\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(dataToMap.average)).attr(\"y\", height * .2 - 7).text(function () {\n          if (cut == \"race\") {\n            return Math.round((1 - dataToMap.average) * 100) + \"% White\";\n          }\n          return Math.round((1 - dataToMap.average) * 100) + \"% Male\";\n        });\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-average-line\").attr(\"x1\", xScale(dataToMap.average)).attr(\"x2\", xScale(dataToMap.average)).attr(\"y1\", height * .2).attr(\"y2\", height * .8);\n      }\n      // buildAverage();\n\n      for (var i = 0; i < 250; ++i) {\n        simulation.tick();\n      }var cell = chartG.selectAll(\"g\").data(dataSet).enter().append(\"g\");\n\n      cell.append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n        return d.radius;\n      }).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).on(\"mouseover\", function (d) {\n        var data = d;\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", data.y + data.radius + \"px\").style(\"left\", data.x + data.radius + 50 + \"px\").text(newsIDName.get(d.NewsID).Company + \" - \" + Math.floor(getPercent(d) * 100) + \"%\");\n      }).on(\"mouseout\", function (d) {\n        chartToolTip.style(\"visibility\", null).text(\"\");\n      }).style(\"fill\", function (d) {\n        var value = getPercent(d);\n        return genderColorScale(value);\n      });\n    }\n\n    buildAnSVG(dataNest[0].values);\n    buildAnSVG(dataNest[1].values);\n\n    // var searchDiv = chartDivContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-div\")\n    //\n    // searchDiv\n    //   .append(\"input\")\n    //   .attr(\"class\",\"swarm-chart-search\")\n    //   .attr(\"placeholder\",\"Find a Newsroom\")\n    //   ;\n\n    // chartDivContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-source\")\n    //   .selectAll(\"p\")\n    //   .data([\"Source: ASNE Survey, 2017\",\"At least 50 staff\"])\n    //   .enter()\n    //   .append(\"p\")\n    //   .attr(\"class\",\"swarm-chart-source-text\")\n    //   .text(function(d){\n    //     return d;\n    //   })\n    //   ;\n\n    // chartDivContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-logos\")\n    //   .style(\"transform\", \"translate(\" + margin.left+\"px\" + \",\" + margin.top+\"px\" + \")\")\n    //   .selectAll(\"div\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .style(\"transform\",function(d){\n    //      return \"translate(\" + d.x+\"px\" + \",\" + d.y+\"px\" + \")\"\n    //   })\n    //   .attr(\"class\",\"swarm-chart-logo-container\")\n    //   .append(\"div\")\n    //   .style(\"width\", function(d){\n    //     return \"1px\"\n    //   })\n    //   .style(\"height\", function(d){\n    //     return \"1px\"\n    //   })\n    //   .attr(\"class\",\"swarm-chart-logo\")\n    //   .style(\"width\", function(d){\n    //     return d.radius*2+\"px\"\n    //   })\n    //   .style(\"height\", function(d){\n    //     return d.radius*2+\"px\"\n    //   })\n    //   .style(\"background-image\",function(d){\n    //     if(newsIDName.get(d.NewsID).Company==\"the new york times\"){\n    //       return \"url(assets/ny-times-logo.svg)\"\n    //     }\n    //   })\n    //   ;\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _geolib = __webpack_require__(13);\n\nvar _geolib2 = _interopRequireDefault(_geolib);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction wrapTwo(text, width) {\n  text.each(function () {\n    var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.3,\n        // ems\n    y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n      }\n    }\n  });\n}\n\nfunction wrap(text, width) {\n  text.each(function () {\n    var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.05,\n        // ems\n    y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\").style(\"font-weight\", 500);\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\").style(\"font-size\", \"12px\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n      }\n    }\n  });\n}\nfunction wrapThree(text, width) {\n  text.each(function () {\n    var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.3,\n        // ems\n    y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n      }\n    }\n  });\n}\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo, top_3_data, censusData, stateTopo) {\n  var alphaSort = \"\";\n  var searchMap;\n  var chartTableItem;\n  var miniMultipleWrapper;\n  var toggleType;\n  var miniTextHeight = 70;\n  var miniMargin = { top: 0, right: 20, bottom: 0, left: 20 };\n  var miniWidth = 70 - miniMargin.left - miniMargin.right;\n  var miniHeight = 90 - miniMargin.top - miniMargin.bottom;\n  var multipleY = d3.scaleLinear().domain([.2, .5]).range([miniHeight, 0]);\n\n  var mapBig = false;\n  var censusMap = d3.map(censusData, function (d) {\n    return d.city_state;\n  });\n  var searchInput;\n  var newsIDSearch = \"\";\n  var searchResults;\n  var newsIDSearchColor = \"#7354ab\";\n  var searchAlphaSortLetters;\n  var searchResultsContainer;\n  var yearSelected = 2014;\n  var yearOld = 2001;\n  var currentChart = \"swarm\";\n  var previousChart = \"swarm\";\n  var previousCut = \"gender\";\n  var cut = \"gender\";\n  var group = \"all\";\n  var countMin = 50;\n  var mouseoverOffsetX = 20;\n  var mouseoverOffsetY = -14;\n  var stepperSequence = [\"swarm\", \"swarm-scatter\", \"arrow-scatter\", \"arrow-scatter-full\", \"table\"];\n  var companyImages = [\"the new york times\", \"the wall street journal\", \"los angeles times\", \"usa today\"];\n  var tableData;\n  function getAverage(data) {\n\n    if (cut == \"gender\" && group == \"all\") {\n      return d3.mean(data, function (d) {\n        return (d.total_num - d.male_num) / d.total_num;\n      });\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.white_sup_num) / d.total_sup_num;\n      });\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.male_sup_num) / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return (+d.total_num - +d.white_num) / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\" && group == \"all\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num;\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, dataSet) {\n\n    var data = dataSet.yearMap.get(yearSelected);\n    if (kind == \"gender-old\") {\n      kind = \"gender\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year > 2000;\n      })[0];\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num;\n    }\n    if (kind == \"supWhiteAdjusted\") {\n      var racePoint = (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num - (1 - dataSet.whiteCensus);\n      return racePoint;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    if (kind == \"raceRaw\") {\n      return (+data.total_num - +data.white_num) / data.total_num;\n    }\n    var racePoint = (+data.total_num - +data.white_num) / data.total_num - (1 - dataSet.whiteCensus);\n    return racePoint;\n  }\n\n  newsIDInfo.forEach(function (d) {\n    var first = d.Company.charAt(0);\n    var second = \"\";\n    if (d.Company.split(\" \").length > 1) {\n      second = d.Company.split(\" \")[1].charAt(0);\n    }\n    d.chars = [first, second];\n  });\n\n  var latLongMap = d3.map(latLongData.filter(function (d) {\n    return d.lng != \"NULL\";\n  }), function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var newsIdSelected = 108;\n\n  var margin = { top: 40, right: 20, bottom: 20, left: 20 };\n  var width = 1000 - margin.left - margin.right;\n  var height = 250 - margin.top - margin.bottom;\n  var container = d3.select(\".swarm\");\n\n  var chartTopSection = container.append(\"div\").attr(\"class\", \"chart-top-section\");\n\n  function buildStepper() {\n\n    var stepperContainer = chartTopSection.append(\"div\").attr(\"class\", \"stepper-container\");\n\n    var stepperTextArray = [\"The Newsroom Employment Diversity Survey measures the percentage of women and minorities working in newsrooms nationwide.\", \"Newsrooms are about 32 percetage points more white than the audience they report on.\", \"When measuring leadership, newsrooms with more diversity tended to also have diverse staffs.\", \"change over time\", \"change over time 2\"];\n\n    var stepperText = stepperContainer.append(\"p\").attr(\"class\", \"stepper-container-text\").text(function (d) {\n      return stepperTextArray[0];\n    });\n\n    var stepperContainerToggle = stepperContainer.append(\"div\").attr(\"class\", \"stepper-toggle-row\");\n\n    var stepperPlay = stepperContainerToggle.append(\"div\").attr(\"class\", \"stepper-play-button\").on(\"click\", function (d) {\n      stepperPlayText.text(\"Resume Tour\");\n\n      var previous;\n\n      stepperContainerToggleContainerSteps.each(function (d, i) {\n        if (d3.select(this).classed(\"stepper-item-selected\") == true) {\n          previous = i;\n        }\n      });\n\n      currentChart = stepperSequence[previous + 1];\n\n      stepperContainerToggleContainerSteps.classed(\"stepper-item-selected\", function (d, i) {\n        if (d == currentChart && i == previous + 1) {\n          return true;\n        }\n        return false;\n      });\n\n      buildChart(currentChart);\n    });\n\n    var stepperPlayIcon = stepperPlay.append(\"div\").attr(\"class\", \"stepper-arrow\");\n\n    var stepperPlayText = stepperPlay.append(\"p\").attr(\"class\", \"stepper-play-text\").text(\"Start Tour\");\n\n    var stepperContainerToggleContainer = stepperContainerToggle.append(\"div\").attr(\"class\", \"stepper-item-container\");\n\n    var toggleText = [\"Newsroom <span>by Gender</span>\", \"Newsroom <span>by Race</span>\", \"Staff vs. Leadership, <span>by Gender</span>\", \"change over time\", \"change over time\"];\n\n    var stepperContainerToggleContainerSteps = stepperContainerToggleContainer.selectAll(\"p\").data(stepperSequence).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"stepper-item stepper-item-selected\";\n      }\n      return \"stepper-item\";\n    }).text(function (d, i) {\n      return i + 1;\n    }).on(\"mouseover\", function (d, i) {\n      var item = i;\n      stepperContainerToggleContainerHover.style(\"left\", function (d, i) {\n        var left = item * 15.89;\n        return left + \"px\";\n      }).style(\"visibility\", \"visible\").html(function () {\n        return toggleText[item];\n      });\n    }).on(\"mouseout\", function () {\n      stepperContainerToggleContainerHover.style(\"visibility\", null);\n    }).on(\"click\", function (d, i) {\n\n      var num = i;\n\n      stepperText.transition().duration(500).style(\"opacity\", 0).on(\"end\", function () {\n        stepperText.text(stepperTextArray[i]).transition().duration(500).style(\"opacity\", 1);\n      });\n\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"stepper-item-selected\", function (d, i) {\n        if (i == num) {\n          return true;\n        }\n        return false;\n      });\n      currentChart = d;\n      if (i == 1) {\n        cut = \"race\";\n      } else if (i == 0) {\n        cut = \"gender\";\n      }\n      buildChart(d);\n    });\n\n    var stepperContainerToggleContainerHover = stepperContainerToggleContainer.append(\"div\").attr(\"class\", \"stepper-item-hover\").html(function (d) {\n      return \"\";\n    });\n  }\n  buildStepper();\n\n  function searchSpectrum() {\n\n    // var searchDiv = toggles.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-div\")\n    //\n    // searchDiv\n    //   .append(\"input\")\n    //   .attr(\"class\",\"swarm-chart-search\")\n    //   .attr(\"placeholder\",\"Find a Newsroom\")\n    //   .on(\"focus\",function(d){\n    //     searchResultsContainer.style(\"display\",\"block\")\n    //   })\n    //   .on(\"focusout\",function(d){\n    //     searchResultsContainer.style(\"display\",null)\n    //   })\n    //   ;\n    //\n    // var searchResultsContainer = searchDiv\n    //   .append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results\");\n    //\n    // var searchAlphaSort = searchResultsContainer\n    //   .append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results-alpha-container\");\n    //\n    // searchAlphaSort.append(\"p\")\n    //   .text(\"filter\")\n    //   .attr(\"class\",\"swarm-chart-search-results-alpha-label\");\n    //\n    // searchAlphaSort\n    //   .append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results-alpha-item-container\")\n    //   .selectAll(\"p\")\n    //   .data([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"])\n    //   .enter()\n    //   .append(\"p\")\n    //   .attr(\"class\",\"swarm-chart-search-results-alpha-item\")\n    //   .text(function(d){\n    //     return d;\n    //   })\n    //   ;\n    //\n    // var searchResults = searchResultsContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results-result-container\")\n    //   .selectAll(\"div\")\n    //   .data(newsIDInfo)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results-result\")\n    //   .append(\"p\")\n    //   .attr(\"class\",\"swarm-chart-search-results-result-text\")\n    //   .text(function(d){\n    //     return d.Company;\n    //   })\n    //   ;\n    //\n\n\n    var searchArray = [];\n    var searchResultMouseOver = false;\n\n    searchInput.on(\"keyup\", keyupedFilmColumn);\n    //\n    function keyupedFilmColumn() {\n      searchNewsroom(this.value.trim());\n    }\n\n    function searchNewsroom(value) {\n      if (value.length > 2) {\n        // searchResults.style(\"display\",\"block\");\n\n        var escapeString = function escapeString(s) {\n          return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n        };\n\n        searchAlphaSortLetters.style(\"color\", null).style(\"text-decoration\", null);\n        alphaSort = \"\";\n\n        var re = new RegExp(\"\\\\b\" + escapeString(value), \"i\");\n        // var filteredSpectrumData = spectrumData.filter(function(d,i){\n        //   var string = d.genreList;\n        //   if(genreSelected == \"all\" && stage == 3){\n        //     return +d.gross > 45;\n        //   }\n        //   else if(genreSelected ==\"all\" && stage == 2){\n        //     return d;\n        //   }\n        //   else if(stage == 3){\n        //     var substring = genreSelected;\n        //     return +d.gross > 45 && string.indexOf(substring) > -1;\n        //   }\n        //   return string.indexOf(substring) > -1\n        // })\n        // ;\n        //\n\n        searchResults.style(\"display\", function (d, i) {\n          if (re.test(d.value.companyName)) {\n            return \"block\";\n          }\n          return \"none\";\n        });\n\n        // searchArray = _.filter(filteredSpectrumData, function(d,i) {\n        //   return re.test(d[\"title\"]);\n        // })\n        // ;\n        //\n        // //\n        // var searchDivData = searchResults.selectAll(\"p\")\n        //   .data(searchArray, function(d){\n        //     return d[\"imdb_id\"];\n        //   })\n        //   ;\n        //\n        // var searchEnter = searchDivData\n        //   .enter()\n        //   .append(\"p\")\n        //   .attr(\"class\",\"tk-futura-pt search-result\")\n        //   .html(function(d){\n        //     var final_str = d.title.replace(re, function(str) {return '<b><u>'+str+'</u></b>'});\n        //     var percent = \"<span class='search-result-percent'><span style='color:\"+maleColor+\";'>\"+percentFormat(1-d.female_percent)+\"</span>/<span style='color:\"+femaleColor+\";'>\"+percentFormat(d.female_percent)+\"</span></span>\";\n        //     return final_str + \" \" + percent;\n        //   })\n        //   .on(\"click\",function(d){\n        //     genreSelected = \"all\";\n        //     updateSpectrumSearch(d);\n        //     d3.selectAll(\".filter-item-spectrum\").style(\"background-color\",null).style(\"box-shadow\",null).style(\"border-color\",null).style(\"font-weight\",null);\n        //     d3.select(\".filter-item-spectrum\").style(\"background-color\",\"#F5F5F5\").style(\"box-shadow\",\"inset 0 3px 5px rgba(0,0,0,.125)\").style(\"border-color\",\"#adadad\").style(\"font-weight\",\"500\");\n        //     if(mobile){\n        //       searchResults.style(\"display\",\"none\");\n        //     }\n        //   })\n        //   ;\n        //\n        // searchDivData.exit().remove();\n      } else {\n        searchResults.style(\"display\", null);\n      }\n    };\n  }\n\n  var xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]);\n  var yScale = d3.scaleLinear().domain([0, .1]).range([height, 0]);\n\n  var chartDivContainer = container.append(\"div\").attr(\"class\", \"swarm-chart-container\").style(\"width\", width + margin.left + margin.right + \"px\");\n\n  var chartDivContainerTable = chartDivContainer.append(\"div\").attr(\"class\", \"swarm-chart-container-table\");\n\n  var chartTitle = chartDivContainer.append(\"p\").attr(\"class\", \"chart-title\").html(\"Newsrooms, Broken-down <span>by Gender</span>\").style(\"left\", margin.left + \"px\");\n\n  var miniMultiple = chartDivContainer.append(\"div\").attr(\"class\", \"slope-mini-multiple-div\");\n\n  var chartToolTip = chartDivContainer.append(\"div\").attr(\"class\", \"swarm-chart-tool-tip\").style(\"transform\", \"translate(\" + margin.left + \"px\" + \",\" + margin.top + \"px\" + \")\");\n\n  var chartToolTipCompany = chartToolTip.append(\"p\").attr(\"class\", \"swarm-chart-tool-tip-company\");\n\n  var chartDiv = chartDivContainer.append(\"svg\").attr(\"class\", \"swarm-chart-wrapper\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n\n  var defs = chartDiv.append(\"svg:defs\");\n\n  defs.append(\"marker\") // This section adds in the arrows\n  .attr(\"id\", \"arrow-head\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 0).attr(\"refY\", 0).attr(\"markerWidth\", 5).attr(\"markerHeight\", 3).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#d8d8d8\");\n\n  var linearGradientRight = defs.append(\"linearGradient\").attr(\"id\", \"gradient-blue\").attr(\"x1\", 0).attr(\"x2\", 1).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  var linearGradientAverage = defs.append(\"linearGradient\").attr(\"id\", \"gradient-average\").attr(\"x1\", 0).attr(\"x2\", 1).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  linearGradientAverage.append(\"stop\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", .15);\n\n  linearGradientAverage.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", 1);\n\n  linearGradientRight.append(\"stop\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", .15);\n\n  linearGradientRight.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", 1);\n\n  var linearGradientLeft = defs.append(\"linearGradient\").attr(\"id\", \"gradient-red\").attr(\"x1\", 1).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  linearGradientLeft.append(\"stop\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", .15);\n\n  linearGradientLeft.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", 1);\n\n  var linearGradientStartRight = defs.append(\"linearGradient\").attr(\"id\", \"gradient-right\").attr(\"x1\", 0).attr(\"x2\", 1).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  linearGradientStartRight.append(\"stop\").attr(\"stop-color\", \"#a7a7a7\").attr(\"stop-opacity\", .15);\n\n  linearGradientStartRight.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"#a7a7a7\").attr(\"stop-opacity\", 1);\n\n  var linearGradientStartLeft = defs.append(\"linearGradient\").attr(\"id\", \"gradient-left\").attr(\"x1\", 1).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  linearGradientStartLeft.append(\"stop\").attr(\"stop-color\", \"#868686\").attr(\"stop-opacity\", .15);\n\n  linearGradientStartLeft.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"#868686\").attr(\"stop-opacity\", 1);\n\n  defs.append(\"marker\") // This section adds in the arrows\n  .attr(\"id\", \"arrow-head-black\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 0).attr(\"refY\", 0).attr(\"markerWidth\", 7).attr(\"markerHeight\", 10).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#000000\");\n\n  var filteredMapData = mapData.filter(function (d) {\n    if (cut == \"supWhite\" || cut == \"supGender\") {\n      return d.total_num > countMin && d.total_sup_num > 0;\n    }\n    return d; //d.total_num > countMin;\n  });\n\n  var maxPercentArray = [];\n  var diffArray = [];\n  var raceDiffArray = [];\n  var averageArray = [];\n\n  var newsNest = d3.nest().key(function (d) {\n    return +d.NewsID;\n  }).rollup(function (leaves) {\n    var map = d3.map(leaves, function (d) {\n      return d.Year;\n    });\n    var maxTotalNum = d3.max(leaves, function (d) {\n      return d.total_num;\n    });\n    var maxPercent = d3.max(leaves, function (d) {\n      return getPercent(d);\n    });\n    maxPercentArray.push(maxPercent);\n    return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n  }).entries(filteredMapData);\n\n  var cutOutData = [];\n  var searchDataSet = [];\n\n  newsNest = newsNest.filter(function (d) {\n    if (d.value.yearMap.has(yearSelected) && d.value.values.length > 1) {\n      return d;\n    }\n    return null;\n  });\n\n  var totalExtent = d3.extent(newsNest, function (d) {\n    return +d.value.yearMap.get(yearSelected).total_num;\n  });\n\n  var radiusScale = d3.scaleLinear().domain([countMin, totalExtent[1]]).range([4, 27]);\n\n  for (var item in newsNest) {\n\n    var currentSup = getPercentType(\"supGender\", newsNest[item].value);\n    var currentYear = getPercent(newsNest[item].value.yearMap.get(yearSelected));\n    var previousYear = getPercentType(\"gender-old\", newsNest[item].value);\n    // var previousYear = getPercent(newsNest[item].value.values.filter(function(d){\n    //   if(cut==\"gender\"){\n    //     return +d.Year > 2000;\n    //   }\n    //   return d;\n    // })[0]);\n    var diff = currentYear - previousYear;\n    cut = \"supGender\";\n    var raceDiff = getPercent(newsNest[item].value.yearMap.get(yearSelected)) - getPercent(newsNest[item].value.values[0]);\n    cut = \"gender\";\n    diffArray.push(diff);\n    raceDiffArray.push(raceDiff);\n\n    var companyData = newsIDName.get(newsNest[item].key);\n    var cityState = companyData.City + \" \" + companyData.State;\n\n    newsNest[item].value.companyName = companyData.Company;\n\n    var first = companyData.Company.charAt(0);\n    var second = \"\";\n    if (companyData.Company.split(\" \").length > 1) {\n      second = companyData.Company.split(\" \")[1].charAt(0);\n    }\n    newsNest[item].value.chars = [first, second];\n\n    var whiteCensus = .9;\n    if (censusMap.has(cityState)) {\n      whiteCensus = +censusMap.get(cityState).white_2015 / 100;\n    } else {}\n    newsNest[item].value.whiteCensus = whiteCensus;\n    newsNest[item].value.whiteDelta = getPercentType(\"race\", newsNest[item].value);\n    newsNest[item].value.diff = diff;\n    newsNest[item].value.raceDiff = raceDiff;\n    var totalCount = +newsNest[item].value.yearMap.get(yearSelected).total_num;\n    newsNest[item].value.radius = radiusScale(totalCount);\n    newsNest[item].value.currentYear = currentYear;\n    newsNest[item].value.previousYear = previousYear;\n    newsNest[item].value.currentSup = currentSup;\n\n    if (latLongMap.has(newsNest[item].key)) {\n      var locationData = latLongMap.get(newsNest[item].key);\n      newsNest[item].value.location = { latitude: +locationData.lat, longitude: +locationData.lng };\n      newsNest[item].value.hasLocation = true;\n    } else {\n      newsNest[item].value.hasLocation = false;\n    }\n\n    // newsNest[item].top3Data = top3Map.get(newsNest[item].companyName);\n  }\n  ;\n\n  newsNest = newsNest.filter(function (d) {\n    searchDataSet.push(d);\n    var count = d.value.yearMap.get(yearSelected).total_num;\n    if (count > countMin) {\n      return d;\n    } else {\n      cutOutData.push(d);\n    }\n    return null;\n  });\n\n  newsNest = newsNest.sort(function (a, b) {\n    return b.value.radius - a.value.radius;\n  });\n\n  var countMini = -1;\n\n  for (var item in newsNest) {\n    newsNest[item].value.miniChart = -1;\n    if (newsNest[item].value.yearMap.has(yearOld) && countMini < 25) {\n      countMini = countMini + 1;\n      newsNest[item].value.miniChart = countMini;\n    }\n  };\n\n  var newsNestAverageT0 = d3.mean(newsNest, function (d) {\n    return d.value.previousYear;\n  });\n  var newsNestAverageT1 = d3.mean(newsNest, function (d) {\n    return d.value.currentYear;\n  });\n  var newsNestSupAverageT1 = d3.mean(newsNest, function (d) {\n    return getPercentType(\"supGender\", d.value);\n  });\n\n  var newsMap = d3.map(newsNest, function (d) {\n    return d.key;\n  });\n\n  var diffExtent = d3.extent(diffArray, function (d) {\n    return d;\n  });\n  var colorScale = d3.scaleLinear().domain(diffExtent).range([\"green\", \"red\"]);\n  var genderColorScale = d3.scaleLinear().domain([.2, .5, .8]).range([\"#2161fa\", \"#dddddd\", \"#ff3333\"]);\n  if (cut == \"race\") {\n    genderColorScale.domain([0, .5, 1]);\n  }\n\n  var cell;\n  var cellCircle;\n  var cellImages;\n  var cellText;\n  var cellCircleTwo;\n  var cellLine;\n  var cellDash;\n\n  var chartAxis = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-axis\");\n\n  var chartG = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  var duration = 750;\n\n  function buildChart(chartType) {\n\n    var rebuildAxis = false;\n\n    if (previousCut != cut || previousChart != chartType || chartType == \"table\") {\n      previousCut = cut;\n      previousChart = chartType;\n      rebuildAxis = true;\n    } else {\n      rebuildAxis = false;\n    }\n\n    var highlightedPosition = [0, 0, 0];\n\n    var highlightedStrokeColor = \"#4b487d\";\n\n    function highlightedItem(selectedItem) {\n      if (chartType == \"swarm\" || chartType == \"new\") {\n        selectedItem.style(\"stroke-width\", \"2px\").style(\"stroke\", highlightedStrokeColor);\n      }\n    }\n\n    function mouseOverEvents(data, element) {\n      if (chartType == \"swarm\" || chartType == \"new\") {\n\n        // var chartToolTipGenderTextContainer = chartToolTip.append(\"div\")\n        //   .attr(\"class\",\"swarm-chart-tool-tip-row swarm-chart-tool-tip-gender-container\")\n        //\n        // chartToolTipGenderTextContainer.append(\"p\")\n        //   .attr(\"class\",\"swarm-chart-tool-tip-label\")\n        //   .text(\"Gender\");\n        //\n        // var chartToolTipGenderText = chartToolTipGenderTextContainer.append(\"p\")\n        //   .attr(\"class\",\"swarm-chart-tool-tip-gender\")\n        //   .text(\"\");\n        //\n        // var chartToolTipRaceTextContainer = chartToolTip.append(\"div\")\n        //   .attr(\"class\",\"swarm-chart-tool-tip-row swarm-chart-tool-tip-race-container\")\n        //\n        // chartToolTipRaceTextContainer\n        //   .append(\"div\")\n        //   .attr(\"class\",\"swarm-chart-race-col\")\n        //   .selectAll(\"p\")\n        //   .data([\"white\",\"black\",\"asian\",\"hispanic\"])\n        //   .enter()\n        //   .append(\"p\")\n        //   .attr(\"class\",\"swarm-chart-tool-tip-label swarm-chart-tool-tip-row\")\n        //   .text(function(d){\n        //     return d;\n        //   })\n        //   ;\n        //\n        // var chartToolTipRaceTextWrapper = chartToolTipRaceTextContainer\n        //   .append(\"div\")\n        //   .attr(\"class\",\"swarm-chart-race-col swarm-chart-race-col-race-text\")\n        //   ;\n        //\n        // var chartToolTipRaceText = chartToolTipRaceTextWrapper\n        //   .selectAll(\"p\")\n        //   .data([\"white\",\"black\",\"asian\",\"hispanic\"])\n        //   .enter()\n        //   .append(\"p\")\n        //   .attr(\"class\",\"swarm-chart-tool-tip-race-text swarm-chart-tool-tip-row\")\n        //   .text(function(d){\n        //     return d;\n        //   })\n        //   ;\n\n        element.style(\"stroke\", function () {\n          return \"black\";\n        });\n\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", data.y + mouseoverOffsetY + \"px\").style(\"left\", data.x + data.value.radius + mouseoverOffsetX + \"px\");\n\n        chartToolTipCompany.text(data.value.companyName);\n\n        if (cut == \"gender\") {\n\n          // chartToolTipRaceTextContainer.style(\"display\",\"none\");\n          // chartToolTipGenderTextContainer.style(\"display\",null)\n          //\n          // chartToolTipGenderText\n          //   .html(function(d){\n          //     return Math.floor(getPercentType(\"gender\",data.value)*100)+\"% <span>Female</span>\";\n          //   })\n          // ;\n\n        } else {\n            // chartToolTipRaceTextContainer.style(\"display\",null);\n            // chartToolTipGenderTextContainer.style(\"display\",\"none\")\n            // chartToolTipRaceText\n            //   .html(function(d){\n            //     return \"2%\";\n            //       // var raceValue = getPercentType(\"raceRaw\",data.value);\n            //       // if(raceValue < .5){\n            //       //   return Math.floor((1-raceValue)*100)+\"% White. City - \"+Math.floor(data.value.whiteCensus*100)+\"% White\";\n            //       // }\n            //       // return Math.floor((raceValue)*100)+\"% Non-white. City - \"+Math.floor((1-data.value.whiteCensus)*100)+\"% Non-white\"\n            //   })\n\n          }\n      } else if (chartType == \"swarm-scatter\") {\n        element.style(\"stroke\", function () {\n          return \"black\";\n        });\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", function () {\n          if (cut == \"race\") {\n            return yScale(getPercentType(\"supWhite\", data.value)) + mouseoverOffsetY + \"px\";\n          }\n          return yScale(getPercentType(\"supGender\", data.value)) + mouseoverOffsetY + \"px\";\n        }).style(\"left\", function () {\n          if (cut == \"race\") {\n            return xScale(getPercentType(\"raceRaw\", data.value)) + data.value.radius + mouseoverOffsetX + \"px\";\n          }\n          return xScale(getPercentType(\"gender\", data.value)) + data.value.radius + mouseoverOffsetX + \"px\";\n        }).text(function (d) {\n          if (cut == \"race\") {\n            return data.value.companyName + \" - \" + Math.floor(getPercentType(\"raceRaw\", data.value) * 100) + \"%\" + \" - \" + Math.floor(getPercentType(\"supWhite\", data.value) * 100) + \"%\";\n          }\n          return data.value.companyName + \" - \" + Math.floor(getPercentType(\"gender\", data.value) * 100) + \"%\";\n        });\n      }\n    }\n    function mouseOutEvents(data, element) {\n      if (chartType == \"swarm\" || chartType == \"new\") {\n\n        element.style(\"stroke\", function (d) {\n          if (+data.key == newsIdSelected) {\n            return highlightedStrokeColor;\n          }\n          var value = getPercentType(cut, data.value);\n          return d3.color(genderColorScale(value)).darker(1);\n        });\n\n        chartToolTip.style(\"visibility\", null);\n      } else if (chartType == \"swarm-scatter\") {\n        element.style(\"stroke\", function (d) {\n          if (+data.key == newsIdSelected) {\n            return highlightedStrokeColor;\n          }\n          return null;\n        });\n\n        chartToolTip.style(\"visibility\", null);\n      }\n    }\n\n    function changeTitle() {\n      var title = \"Newsrooms, Broken Down <span>by Gender</span>\";\n      if (cut == \"race\") {\n        var title = \" <span>White/Non-White</span> Breakdown of Newsrooms vs. City\";\n      }\n      if (chartType == \"swarm-scatter\") {\n        title = \"Gender Break-down of Staff vs. <span>Leaders</span>\";\n        if (cut == \"race\") {\n          title = \"Racial Break-down of Staff vs. <span>Leaders</span>\";\n        }\n      } else if (chartType == \"mini-multiple\") {\n        title = \"<span>Change</span> in Gender Breakdown from 2002 - 2017\";\n      } else if (chartType == \"arrow-scatter\") {\n        title = \"<span>Change</span> in Gender Breakdown from 2002 - 2017\";\n      } else if (chartType == \"arrow-scatter-full\") {\n        title = \"<span>Change</span> in Gender Breakdown from 2002 - 2017\";\n      } else if (chartType == \"table\") {\n        title = \"\";\n      }\n      chartTitle.html(title);\n    }\n    function setWidths(chartType) {\n      if (chartType == \"swarm\") {\n        margin = { top: 40, right: 20, bottom: 20, left: 20 };\n        width = 1000 - margin.left - margin.right;\n        height = 250 - margin.top - margin.bottom;\n        if (cut == \"race\") {\n          xScale.domain([-1, 1]).range([0, width]).clamp(true);\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return d.value.whiteDelta;\n          });\n          genderColorScale.domain([-1, 0, 1]);\n        } else if (cut == \"gender\") {\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return d.value.currentYear;\n          });\n          xScale.domain([.2, .8]).range([0, width]).clamp(true);\n          genderColorScale.domain([.2, .5, .8]);\n        }\n      } else if (chartType == \"swarm-scatter\") {\n        margin = { top: 40, right: 20, bottom: 40, left: 20 };\n        width = 800 - margin.left - margin.right;\n        height = 500 - margin.top - margin.bottom;\n        xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n        yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n        if (cut == \"race\") {\n          xScale.domain([0, .6]).range([0, width]).clamp(true);\n          yScale.domain([0, .8]).range([height, 0]).clamp(true);\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return getPercentType(\"raceRaw\", d.value);\n          });\n          newsNestSupAverageT1 = d3.mean(newsNest, function (d) {\n            return getPercentType(\"supWhite\", d.value);\n          });\n        } else {\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return d.value.currentYear;\n          });\n          newsNestSupAverageT1 = d3.mean(newsNest, function (d) {\n            return getPercentType(\"supGender\", d.value);\n          });\n        }\n      } else if (chartType == \"mini-multiple\") {\n        margin = { top: 0, right: 0, bottom: 20, left: 0 };\n        width = 1000 - margin.left - margin.right;\n        height = 2 * (miniTextHeight + miniHeight + miniMargin.top + miniMargin.bottom) - margin.top - margin.bottom;\n      } else if (chartType == \"arrow-scatter\") {\n        margin = { top: 70, right: 60, bottom: 40, left: 200 };\n        width = 800 - margin.left - margin.right;\n        height = 500 - margin.top - margin.bottom;\n        xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n        yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n      } else if (chartType == \"arrow-scatter-full\") {\n        margin = { top: 70, right: 60, bottom: 40, left: 60 };\n        width = 800 - margin.left - margin.right;\n        height = 500 - margin.top - margin.bottom;\n        xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n        yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n        newsNestAverageT0 = d3.mean(newsNest, function (d) {\n          return d.value.previousYear;\n        });\n        newsNestAverageT1 = d3.mean(newsNest, function (d) {\n          return d.value.currentYear;\n        });\n      } else if (chartType == \"table\") {\n        chartDivContainerTable.transition().duration(0).style(\"opacity\", 1);\n        margin = { top: 40, right: 20, bottom: 20, left: 20 };\n        width = 1000 - margin.left - margin.right;\n        height = 250 - margin.top - margin.bottom;\n        xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n        yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n        radiusScale.range([3, 20]);\n        toggleType.style(\"visibility\", \"hidden\");\n        searchMap.style(\"display\", \"block\");\n      }\n      if (chartType != \"table\") {\n        radiusScale.range([4, 27]);\n        searchMap.style(\"display\", null);\n        toggleType.style(\"visibility\", null);\n        chartDivContainerTable.transition().duration(0).style(\"opacity\", 0);\n        ;\n      }\n      if (chartType != \"arrow-scatter\" && chartType != \"arrow-scatter-full\") {\n        cellLine.transition().duration(0).style(\"opacity\", 0);\n      }\n      if (chartType != \"arrow-scatter\") {\n        cellCircleTwo.transition().duration(0).style(\"opacity\", 0);\n        cell.style(\"opacity\", null);\n        cellText.transition().duration(0).style(\"opacity\", 0);\n      }\n      if (chartType != \"arrow-scatter-full\") {\n        cellText.style(\"transform\", null);\n        cellDash.style(\"opacity\", 0);\n      }\n\n      chartTitle.transition().duration(500).style(\"width\", width + \"px\").style(\"left\", margin.left + \"px\");\n\n      chartDivContainer.transition().duration(duration)\n      // .delay(duration)\n      .style(\"width\", width + margin.left + margin.right + \"px\");\n\n      chartToolTip.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      chartDiv.transition().duration(duration).attr(\"height\", height + margin.top + margin.bottom)\n      // .transition()\n      // .duration(duration)\n      .attr(\"width\", width + margin.left + margin.right);\n\n      chartG.transition().duration(500).attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      chartAxis.transition().duration(500).attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    }\n\n    changeTitle();\n\n    if (chartType != \"new\") {\n      setWidths(chartType);\n    }\n\n    if (chartType == \"swarm-scatter\") {\n      var buildAxis = function buildAxis() {\n\n        function leastSquares(xSeries, ySeries) {\n          var reduceSumFunc = function reduceSumFunc(prev, cur) {\n            return prev + cur;\n          };\n\n          var xBar = xSeries.reduce(reduceSumFunc) * 1.0 / xSeries.length;\n          var yBar = ySeries.reduce(reduceSumFunc) * 1.0 / ySeries.length;\n\n          var ssXX = xSeries.map(function (d) {\n            return Math.pow(d - xBar, 2);\n          }).reduce(reduceSumFunc);\n\n          var ssYY = ySeries.map(function (d) {\n            return Math.pow(d - yBar, 2);\n          }).reduce(reduceSumFunc);\n\n          var ssXY = xSeries.map(function (d, i) {\n            return (d - xBar) * (ySeries[i] - yBar);\n          }).reduce(reduceSumFunc);\n\n          var slope = ssXY / ssXX;\n          var intercept = yBar - xBar * slope;\n          var rSquare = Math.pow(ssXY, 2) / (ssXX * ssYY);\n\n          return { slope: slope, intercept: intercept, r2: rSquare };\n        }\n\n        var xValues = cellCircle.data().map(function (d) {\n          if (cut == \"race\") {\n            return getPercentType(\"raceRaw\", d.value);\n          }\n          return getPercentType(\"gender\", d.value);\n        });\n        var yValues = cellCircle.data().map(function (d) {\n          if (cut == \"race\") {\n            return getPercentType(\"supWhite\", d.value);\n          }\n          return getPercentType(\"supGender\", d.value);\n        });\n\n        var chartAxisContainer = chartAxis.append(\"g\");\n\n        var chartAxisLines = chartAxisContainer.append(\"g\");\n\n        var linear = leastSquares(xValues, yValues);\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-scatter-rect-gender-g\").append(\"line\").attr(\"class\", \"swarm-scatter-rect-gender-line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", function (d) {\n          return height / 2;\n        }).attr(\"y2\", function (d) {\n          return height / 2;\n        }).style(\"visibility\", function () {\n          if (cut == \"race\") {\n            return \"hidden\";\n          }\n          return null;\n        });\n\n        chartAxisLines.append(\"line\").attr(\"class\", \"swarm-scatter-regression-line\").attr(\"x1\", 0).attr(\"y1\", yScale(linear.intercept)).attr(\"x2\", function (d) {\n          if (cut == \"race\") {\n            return xScale(.6);\n          }\n          return xScale(.8);\n        }).attr(\"y2\", function () {\n          if (cut == \"race\") {\n            return yScale(.8 * linear.slope + linear.intercept);\n          }\n          return yScale(.8 * linear.slope + linear.intercept);\n        });\n\n        var regressionAnnotation = chartAxisLines.append(\"g\").attr(\"class\", \"swarm-scatter-regression-annotation\").attr(\"transform\", function () {\n          if (cut == \"race\") {\n            return \"translate(\" + xScale(.6 * .8) + \",\" + yScale(.8 * .8 * linear.slope + linear.intercept) + \")\";\n          }\n          return \"translate(\" + xScale(.8 * .8) + \",\" + yScale(.8 * .8 * linear.slope + linear.intercept) + \")\";\n        });\n\n        regressionAnnotation.append(\"text\").attr(\"class\", \"swarm-scatter-regression-annotation-text\").text(function () {\n          if (cut == \"race\") {\n            return \"Newsrooms with racially diverse leadership tend to have a racially diverse staff\";\n          }\n          return \"Newsrooms with female leadership tend to have more women on staff\";\n        }).attr(\"transform\", \"translate(\" + -40 + \",\" + -55 + \")\").attr(\"dy\", 0).call(wrapTwo, 250);\n\n        regressionAnnotation.append(\"line\").attr(\"class\", \"swarm-scatter-regression-annotation-line\").attr(\"x1\", -35).attr(\"y1\", -35).attr(\"x2\", -5).attr(\"y2\", -5).attr(\"marker-end\", \"url(#arrow-head-black)\");\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-scatter-x-axis-lines\").selectAll(\"line\").data(function () {\n          if (cut == \"race\") {\n            return [.1, .2, .3, .4, .5];\n          }\n          return [.25, .35, .45, .55, .65, .75];\n        }).enter().append(\"line\").attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", 0).attr(\"y2\", height).attr(\"class\", \"swarm-axis-line\");\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-scatter-y-axis-lines\").selectAll(\"line\").data(function () {\n          if (cut == \"race\") {\n            return [.1, .3, .5, .7];\n          }\n          return [.3, .5, .4, .6, .7];\n        }).enter().append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", function (d) {\n          return yScale(d);\n        }).attr(\"y2\", function (d) {\n          return yScale(d);\n        }).attr(\"class\", \"swarm-axis-line\");\n\n        var chartAxisText = chartAxisContainer.append(\"g\");\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data(function () {\n          if (cut == \"race\") {\n            return [\"← More White\", \"Staff Race\", \"More People of Color →\"];\n          }\n          return [\"← More Male Staff\", \"Staff Gender\", \"More Female Staff →\"];\n        }).enter().append(\"text\").attr(\"x\", function (d, i) {\n          if (i == 1) {\n            return width / 2;\n          }\n          if (i == 0) {\n            return width / 2 - 200;\n          }\n          return width / 2 + 200;\n        }).attr(\"y\", function (d, i) {\n          return height;\n        }).attr(\"class\", function (d, i) {\n          if (i != 1) {\n            return \"swarm-axis-tick-text scatter-axis-chart-text scatter-axis-chart-side\";\n          }\n          return \"swarm-axis-tick-text scatter-axis-chart-text\";\n        }).text(function (d) {\n          return d;\n        }).style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"end\";\n          }\n          if (i == 1) {\n            return \"middle\";\n          }\n          return \"start\";\n        });\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data(function () {\n          if (cut == \"race\") {\n            return [{ text: \"75% Leaders are Not White\", value: .75 }, { text: \"Leaders: 50-50 White/Non-White\", value: .5 }, { text: \"25% Non-White\", value: .25 }, { text: \"0% Non-White Leaders\", value: .0 }];\n          }\n          return [{ text: \"75% Leaders are Women\", value: .75 }, { text: \"65% Female\", value: .65 }, { text: \"Leaders: 50-50 Male/Female\", value: .5 }, { text: \"35% Female\", value: .35 }, { text: \"25% Leaders are Female\", value: .25 }];\n        }).enter().append(\"text\").attr(\"transform\", \"translate(\" + (width - 10) + \",0)\").attr(\"y\", function (d, i) {\n          return yScale(d.value);\n        }).attr(\"class\", function (d, i) {\n          return \"swarm-axis-tick-text scatter-axis-chart-text-y\";\n        }).style(\"text-anchor\", function (d, i) {\n          return \"end\";\n        }).text(function (d) {\n          return d.text;\n        }).attr(\"dy\", 0).call(wrap, 95);\n      };\n\n      var buildAverage = function buildAverage() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        var chartAnnotation = chartAverage.append(\"g\").attr(\"class\", \"swarm-annnotation\");\n\n        chartAnnotation.append(\"line\").attr(\"x1\", function () {\n          if (cut == \"race\") {\n            return xScale(.5);\n          }\n          return xScale(.65);\n        }).attr(\"x2\", function () {\n          if (cut == \"race\") {\n            return xScale(.55);\n          }\n          return xScale(.7);\n        }).attr(\"y1\", height - 20).attr(\"y2\", height - 20).attr(\"class\", \"swarm-annnotation-line\").attr(\"marker-end\", function (d) {\n          return \"url(#arrow-head)\";\n        });\n\n        chartAnnotation.append(\"text\").style(\"transform\", function () {\n          if (cut == \"race\") {\n            var transform = \"translate(\" + (xScale(.5) - 10) + \"px,\" + (height - 20) + \"px) rotate(0)\";\n            return transform;\n          }\n          var transform = \"translate(\" + (xScale(.65) - 10) + \"px,\" + (height - 20) + \"px) rotate(0)\";\n          return transform;\n        }).attr(\"class\", \"swarm-annnotation-text swarm-scatter-y-annnotation-text\").text(function (d) {\n          if (cut == \"race\") {\n            return \"People of Color Staff\";\n          }\n          return \"Women Staff\";\n        });\n\n        chartAnnotation.append(\"line\").attr(\"x1\", 20).attr(\"x2\", 20).attr(\"y1\", function () {\n          if (cut == \"race\") {\n            return yScale(.7);\n          }\n          return yScale(.75);\n        }).attr(\"y2\", 10).attr(\"class\", \"swarm-annnotation-line\").attr(\"marker-end\", function (d) {\n          return \"url(#arrow-head)\";\n        });\n\n        chartAnnotation.append(\"text\").style(\"transform\", function () {\n          if (cut == \"race\") {\n            var transform = \"translate(\" + 20 + \"px,\" + (yScale(.7) + 10) + \"px) rotate(270deg)\";\n            return transform;\n          }\n          var transform = \"translate(\" + 20 + \"px,\" + (yScale(.75) + 10) + \"px) rotate(270deg)\";\n          return transform;\n        }).attr(\"class\", \"swarm-annnotation-text swarm-scatter-y-annnotation-text\").text(function (d) {\n          if (cut == \"race\") {\n            return \"People of Color Leadership\";\n          }\n          return \"Women Leaders\";\n        });\n        chartAverage.append(\"circle\").attr(\"class\", \"swarm-circle swarm-circle-average\").attr(\"cx\", xScale(newsNestAverageT1)).attr(\"cy\", function (d) {\n          return yScale(newsNestSupAverageT1);\n        }).attr(\"r\", 6);\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", yScale(newsNestSupAverageT1) - 12).style(\"fill\", \"black\").text(\"Overall\");\n      };\n\n      cellCircle = cell.selectAll(\".swarm-circle\").on(\"mouseover\", function (d) {\n        var data = d;\n        mouseOverEvents(data, d3.select(this));\n      }).on(\"mouseout\", function (d) {\n        var data = d;\n        mouseOutEvents(data, d3.select(this));\n      });\n\n      cellCircle.transition().duration(duration).delay(function (d, i) {\n        return i * 10;\n      }).style(\"opacity\", 1).attr(\"cx\", function (d) {\n        if (cut == \"race\") {\n          return xScale(getPercentType(\"raceRaw\", d.value));\n        }\n        return xScale(getPercentType(\"gender\", d.value));\n        // return diffScale(d.value.diff);\n      }).attr(\"r\", function (d) {\n        return d.value.radius;\n      }).attr(\"cy\", function (d) {\n        if (cut == \"race\") {\n          return yScale(getPercentType(\"supWhite\", d.value));\n        }\n        return yScale(getPercentType(\"supGender\", d.value));\n      }).style(\"fill\", function (d) {\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        return null;\n      }).style(\"stroke\", function (d) {\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        return null;\n      });\n\n      cellCircle.filter(function (d) {\n        return +d.key == newsIDSearch;\n      }).style(\"stroke-opacity\", .5).style(\"z-index\", 1000000000).transition(\"border\").duration(1000).style(\"stroke-width\", \"10px\").transition(\"border\").duration(1000).style(\"stroke-width\", \"1px\").style(\"stroke-opacity\", 1);\n\n      cellImages = cell.selectAll(\".swarm-image-container\");\n\n      cellImages.transition().duration(duration).style(\"opacity\", 1).attr(\"transform\", function (d) {\n        if (cut == \"race\") {\n          return \"translate(\" + xScale(getPercentType(\"raceRaw\", d.value)) + \",\" + yScale(getPercentType(\"supWhite\", d.value)) + \")\";\n        }\n        return \"translate(\" + xScale(getPercentType(\"gender\", d.value)) + \",\" + yScale(getPercentType(\"supGender\", d.value)) + \")\";\n      });\n\n      if (rebuildAxis) {\n        chartAxis.select(\"g\").transition().duration(250).style(\"opacity\", 0).on(\"end\", function (d) {\n          d3.select(this).remove();\n          buildAxis();\n        });\n      }\n\n      if (rebuildAxis) {\n        buildAverage();\n      }\n    } else if (chartType == \"swarm\") {\n      var _buildAxis = function _buildAxis() {\n\n        console.log(\"buildingAxis\");\n\n        var chartAxisContainer = chartAxis.append(\"g\");\n\n        var tickData = [.2, .3, .5, .7, .8];\n        var midPoint = .5;\n        if (cut == \"race\") {\n          tickData = [-1, -.5, -.25, 0, .25, 1];\n          midPoint = 0;\n        }\n\n        var ticks = chartAxisContainer.append(\"g\").attr(\"class\", \"swarm-axis-tick-container\").selectAll(\"g\").data(tickData).enter().append(\"g\").attr(\"class\", \"swarm-axis-tick-g\");\n\n        ticks.append(\"line\").style(\"stroke\", function (d) {\n          if (d == midPoint) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", function (d, i) {\n          if (d == midPoint) {\n            return height / 2;\n          }\n          return 0;\n        }).attr(\"y2\", function (d) {\n          if (d == midPoint) {\n            return 0;\n          }\n          return height * .05;\n        }).attr(\"class\", \"swarm-axis-tick\");\n\n        ticks.append(\"text\").attr(\"x\", function (d) {\n          return xScale(d);\n        }).attr(\"y\", -9).attr(\"class\", \"swarm-axis-tick-text\").style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i == tickData.length - 1) {\n            return \"end\";\n          }\n          return null;\n        }).style(\"fill\", function (d, i) {\n          if (d == midPoint) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              return \"More White vs. City Census\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male Staff\";\n          }\n          if (i == tickData.length - 1) {\n            if (cut == \"race\") {\n              return \"More People of Color vs. City Census\";\n            }\n            return Math.floor(d * 100) + \"% Female Staff\";\n          }\n          if (d == midPoint) {\n            if (cut == \"race\") {\n              return \"Parity with City\";\n            }\n            return \"50/50  Split\";\n          }\n          if (d < midPoint) {\n            if (cut == \"race\") {\n              return \"+\" + Math.floor(Math.abs(d) * 100) + \"%\";\n            }\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          if (cut == \"race\") {\n            return \"+\" + Math.floor(Math.abs(d) * 100) + \"%\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n\n        chartAxisContainer.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n      };\n\n      var _buildAverage = function _buildAverage() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var chartAnnotation = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-annnotation\");\n\n        chartAnnotation.append(\"line\").attr(\"x1\", width - 147).attr(\"x2\", width - 10).attr(\"y1\", height / 2 + 25).attr(\"y2\", height / 2 + 25).attr(\"class\", \"swarm-annnotation-line\").attr(\"marker-end\", function (d) {\n          return \"url(#arrow-head)\";\n        });\n\n        chartAnnotation.append(\"text\").attr(\"x\", width - 147).attr(\"y\", height / 2 + 25).attr(\"class\", \"swarm-annnotation-text\").text(function (d) {\n          if (cut == \"race\") {\n            return \"More People of Color\";\n          }\n          return \"More Women\";\n        });\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\").style(\"opacity\", 0);\n\n        var highlightedAnnotationOffset = height - highlightedPosition[1];\n\n        var highlightedAnnotation = chartAverage.append(\"g\").attr(\"transform\", \"translate(\" + highlightedPosition[0] + \",\" + highlightedPosition[1] + \")\");\n\n        highlightedAnnotation.append(\"line\").attr(\"class\", \"swarm-axis-annotation-line\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", highlightedPosition[2]).attr(\"y2\", highlightedAnnotationOffset).style(\"stroke\", highlightedStrokeColor);\n\n        highlightedAnnotation.append(\"text\").text(newsIdMap.get(newsIdSelected).Company).attr(\"class\", \"swarm-axis-annotation-text\").attr(\"y\", highlightedAnnotationOffset + 10);\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 22).text(\"Overall\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 7).text(function () {\n          if (cut == \"race\") {\n            return Math.round(Math.abs(newsNestAverageT1) * 100) + \"% More White\";\n          }\n          return Math.round((1 - newsNestAverageT1) * 100) + \"% Male\";\n        });\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-average-line\").attr(\"x1\", xScale(newsNestAverageT1)).attr(\"x2\", xScale(newsNestAverageT1)).attr(\"y1\", height * .2).attr(\"y2\", height * .8);\n\n        chartAverage.transition().duration(duration).delay(duration).style(\"opacity\", 1);\n      };\n\n      var forceCollide = d3.forceCollide().radius(function (d) {\n        return d.value.radius + 1;\n      }).iterations(1);\n\n      var simulation = d3.forceSimulation(newsNest).force(\"x\", d3.forceX(function (d) {\n        return xScale(getPercentType(cut, d.value));\n      }).strength(1)).force(\"y\", d3.forceY(height / 2)).force(\"collide\", forceCollide).stop();\n\n      if (rebuildAxis) {\n        chartAxis.select(\"g\").transition().duration(500).style(\"opacity\", 0).on(\"end\", function (d) {\n          d3.select(this).remove();\n          _buildAxis();\n        });\n      }\n\n      for (var i = 0; i < 250; ++i) {\n        simulation.tick();\n      }cell.each(function (d) {\n        if (d.key == newsIdSelected) {\n          highlightedPosition = [d.x, d.y, d.value.radius];\n        }\n      });\n\n      cellCircle = cell.selectAll(\".swarm-circle\").on(\"mouseover\", function (d) {\n        var data = d;\n        mouseOverEvents(data, d3.select(this));\n      }).on(\"mouseout\", function (d) {\n        var data = d;\n        mouseOutEvents(data, d3.select(this));\n      });\n\n      cellCircle.transition().duration(duration).style(\"opacity\", 1).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).style(\"fill\", function (d) {\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        var value = getPercentType(cut, d.value);\n        return genderColorScale(value);\n      }).attr(\"r\", function (d) {\n        return d.value.radius;\n      }).style(\"stroke\", function (d) {\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        if (d.key == newsIdSelected) {\n          return highlightedStrokeColor;\n        }\n        var value = getPercentType(cut, d.value);\n        return d3.color(genderColorScale(value)).darker(1);\n      });\n\n      cellCircle.filter(function (d) {\n        return +d.key == newsIDSearch;\n      }).style(\"stroke-opacity\", .5).transition(\"border\").duration(1000).style(\"stroke-width\", \"10px\").transition(\"border\").duration(1000).style(\"stroke-width\", \"1px\").style(\"stroke-opacity\", 1);\n\n      cellImages = cell.selectAll(\".swarm-image-container\");\n\n      cellImages.transition().duration(duration).style(\"opacity\", 1).attr(\"transform\", function (d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      });\n\n      if (rebuildAxis) {\n        _buildAverage();\n      }\n    } else if (chartType == \"new\") {\n      var _buildAxis2 = function _buildAxis2() {\n\n        var chartAxisContainer = chartAxis.append(\"g\");\n\n        var tickData = [.2, .3, .5, .7, .8];\n        if (cut == \"race\") {\n          tickData = [0, .3, .5, .7, 1];\n        }\n\n        var ticks = chartAxisContainer.append(\"g\").attr(\"class\", \"swarm-axis-tick-container\").selectAll(\"g\").data(tickData).enter().append(\"g\").attr(\"class\", \"swarm-axis-tick-g\");\n\n        ticks.append(\"line\").style(\"stroke\", function (d) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", function (d, i) {\n          if (d == .5) {\n            return height / 2;\n          }\n          return 0;\n        }).attr(\"y2\", function (d) {\n          if (d == .5) {\n            return 0;\n          }\n          return height * .05;\n        }).attr(\"class\", \"swarm-axis-tick\");\n\n        ticks.append(\"text\").attr(\"x\", function (d) {\n          return xScale(d);\n        }).attr(\"y\", -9).attr(\"class\", \"swarm-axis-tick-text\").style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i == tickData.length - 1) {\n            return \"end\";\n          }\n          return null;\n        }).style(\"fill\", function (d, i) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              return Math.floor((1 - d) * 100) + \"% White Staff\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male Staff\";\n          }\n          if (i == tickData.length - 1) {\n            if (cut == \"race\") {\n              return Math.floor(d * 100) + \"% Non-White Staff\";\n            }\n            return Math.floor(d * 100) + \"% Female Staff\";\n          }\n          if (d == .5) {\n            return \"50/50  Split\";\n          }\n          if (d < .5) {\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n\n        chartAxisContainer.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n      };\n\n      var _buildAverage2 = function _buildAverage2() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var chartAnnotation = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-annnotation\");\n\n        chartAnnotation.append(\"line\").attr(\"x1\", width - 147).attr(\"x2\", width - 10).attr(\"y1\", height / 2 + 25).attr(\"y2\", height / 2 + 25).attr(\"class\", \"swarm-annnotation-line\").attr(\"marker-end\", function (d) {\n          return \"url(#arrow-head)\";\n        });\n\n        chartAnnotation.append(\"text\").attr(\"x\", width - 147).attr(\"y\", height / 2 + 25).attr(\"class\", \"swarm-annnotation-text\").text(function (d) {\n          if (cut == \"race\") {\n            return \"More People of Color\";\n          }\n          return \"More Women\";\n        });\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        var highlightedAnnotationOffset = height - highlightedPosition[1];\n\n        var highlightedAnnotation = chartAverage.append(\"g\").attr(\"transform\", \"translate(\" + highlightedPosition[0] + \",\" + highlightedPosition[1] + \")\");\n\n        highlightedAnnotation.append(\"line\").attr(\"class\", \"swarm-axis-annotation-line\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", highlightedPosition[2]).attr(\"y2\", highlightedAnnotationOffset).style(\"stroke\", highlightedStrokeColor);\n\n        highlightedAnnotation.append(\"text\").text(newsIdMap.get(newsIdSelected).Company).attr(\"class\", \"swarm-axis-annotation-text\").attr(\"y\", highlightedAnnotationOffset + 10);\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 22).text(\"Overall\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 7).text(function () {\n          if (cut == \"race\") {\n            return Math.round((1 - newsNestAverageT1) * 100) + \"% White\";\n          }\n          return Math.round((1 - newsNestAverageT1) * 100) + \"% Male\";\n        });\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-average-line\").attr(\"x1\", xScale(newsNestAverageT1)).attr(\"x2\", xScale(newsNestAverageT1)).attr(\"y1\", height * .2).attr(\"y2\", height * .8);\n      };\n\n      var capitalizeFirstLetter = function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      };\n\n      var forceCollide = d3.forceCollide().radius(function (d) {\n        return d.value.radius + 1;\n      }).iterations(1);\n\n      var simulation = d3.forceSimulation(newsNest).force(\"x\", d3.forceX(function (d) {\n        return xScale(getPercentType(\"gender\", d.value));\n      }).strength(1)).force(\"y\", d3.forceY(height / 2)).force(\"collide\", forceCollide).stop();\n\n      for (var i = 0; i < 250; ++i) {\n        simulation.tick();\n      }cell = chartG.selectAll(\"g\").data(newsNest).enter().append(\"g\").attr(\"class\", \"swarm-cell-g\").each(function (d) {\n        if (d.key == newsIdSelected) {\n          highlightedPosition = [d.x, d.y, d.value.radius];\n        }\n      });\n      cellLine = cell.append(\"path\").attr(\"class\", \"swarm-line\");\n\n      cellCircleTwo = cell.append(\"circle\").attr(\"class\", \"swarm-circle-two\").attr(\"r\", function (d) {\n        return 4;\n      }).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      });\n\n      cellCircle = cell.append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n        return d.value.radius;\n      }).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).on(\"mouseover\", function (d) {\n        var data = d;\n        mouseOverEvents(data, d3.select(this));\n      }).on(\"mouseout\", function (d) {\n        var data = d;\n        mouseOutEvents(data, d3.select(this));\n      }).style(\"fill\", function (d) {\n        var value = getPercentType(\"gender\", d.value);\n        return genderColorScale(value);\n        return colorScale(newsMap.get(d.NewsID).value.diff);\n      }).style(\"stroke\", function (d) {\n        var value = getPercentType(\"gender\", d.value);\n        return d3.color(genderColorScale(value)).darker(1);\n      }).each(function (d) {\n        if (d.key == newsIdSelected) {\n          highlightedItem(d3.select(this));\n        }\n      });\n\n      cellImages = cell.append(\"g\").attr(\"transform\", function (d, i) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      }).attr(\"class\", \"swarm-image-container\");\n\n      cellImages.append(\"image\").attr(\"class\", \"swarm-image\").attr(\"xlink:href\", function (d) {\n        if (d.value.companyName == \"the new york times\") {\n          return \"assets/ny-times-logo.svg\";\n        }\n        if (d.value.companyName == \"the wall street journal\") {\n          return \"assets/wsj-logo.svg\";\n        }\n        if (d.value.companyName == \"los angeles times\") {\n          return \"assets/la-times-logo.png\";\n        }\n        if (d.value.companyName == \"usa today\") {\n          return \"assets/usa-today-logo.svg\";\n        }\n        return null;\n      }).attr(\"width\", function (d) {\n        return d.value.radius * 2 * .7;\n      }).attr(\"height\", function (d) {\n        return d.value.radius * 2 * .7;\n      });\n\n\n      cellText = cell.append(\"text\").attr(\"x\", function (d, i) {\n        return d.x;\n      }).attr(\"y\", function (d, i) {\n        return d.y;\n      }).attr(\"class\", \"swarm-text\").style(\"opacity\", 0).attr(\"class\", \"swarm-text\").text(function (d) {\n        return d.value.companyName;\n      });\n\n      cellDash = cell.append(\"line\").attr(\"class\", \"swarm-text-dash\").style(\"opacity\", 0);\n\n      _buildAxis2();\n      _buildAverage2();\n    } else if (chartType == \"mini-multiple\") {\n      var getMiniX = function getMiniX(data, count) {\n        return count % miniMulitpleCount * (miniWidth + miniMargin.left + miniMargin.right);\n      };\n\n      var getMiniY = function getMiniY(data, count) {\n        return Math.floor(count / miniMulitpleCount) * (miniTextHeight + miniHeight + miniMargin.top + miniMargin.bottom);\n      };\n\n      if (rebuildAxis) {\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        chartAxis.select(\"g\").transition().duration(250).style(\"opacity\", 0).on(\"end\", function (d) {\n          d3.select(this).remove();\n        });\n      }\n\n      var miniMulitpleCount = Math.floor(width / (miniWidth + miniMargin.left + miniMargin.right));\n\n      var dataMini = newsNest.filter(function (d) {\n        return d.value.miniChart > -1;\n      });\n\n      miniMultipleWrapper = miniMultiple.append(\"div\").attr(\"class\", \"mini-multiple-div-container\").selectAll(\"div\").data(dataMini).enter().append(\"div\").attr(\"class\", \"mini-multiple-div\").style(\"transform\", function (d, i) {\n        return \"translate(\" + getMiniX(d, d.value.miniChart) + \"px,\" + getMiniY(d, d.value.miniChart) + \"px)\";\n      });\n      //\n      //\n      //\n      miniMultipleWrapper.append(\"div\").attr(\"class\", \"mini-multiple-text-container\").append(\"p\").attr(\"class\", \"mini-multiple-text\").style(\"margin-top\", 20).text(function (d) {\n        var company = newsIDName.get(d.value.values[0].NewsID).Company.replace(\"the\", \"\");\n        if (company.length > 20) {\n          return company.slice(0, 17) + \"...\";\n        }\n        return company;\n      });\n\n      var miniMultipleWrapperSvg = miniMultipleWrapper.append(\"svg\").attr(\"class\", \"slope-mini-svg\").attr(\"width\", miniWidth + miniMargin.left + miniMargin.right).attr(\"height\", miniHeight + miniMargin.top + miniMargin.bottom);\n\n      var miniMultipleWrapperG = miniMultipleWrapperSvg.append(\"g\").style(\"transform\", \"translate(\" + miniMargin.left + \"px\" + \",\" + miniMargin.top + \"px\" + \")\");\n\n      var miniMultipleWrapperAxis = miniMultipleWrapperG.append(\"g\").attr(\"class\", \"slope-line-axis-container\");\n\n      miniMultipleWrapperG.append(\"circle\").attr(\"cx\", function (d) {\n        return 0;\n      }).attr(\"cy\", function (d) {\n        return multipleY(getPercentType(\"gender-old\", d.value));\n      }).attr(\"r\", 3).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n        if (d.value.diff > 0) {\n          return \"blue\";\n        }\n        return \"red\";\n      });\n\n      miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n        return 0;\n      }).attr(\"y\", function (d, i) {\n        if (i == 0) {\n          return multipleY(getPercentType(\"gender-old\", d.value)) + 27;\n        }\n        return multipleY(getPercentType(\"gender-old\", d.value)) + 15;\n      }).attr(\"class\", \"slope-small-text\").text(function (d, i) {\n        if (i == 0) {\n          return Math.floor(100 * getPercentType(\"gender-old\", d.value)) + \"%\";\n        }\n        return Math.floor(100 * getPercentType(\"gender-old\", d.value));\n      });\n      //\n      miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n        return 0;\n      }).attr(\"y\", function (d, i) {\n        if (i == 0) {\n          return multipleY(getPercentType(\"gender-old\", d.value)) + 15;\n        }\n        return null;\n      }).attr(\"class\", \"slope-small-text slope-small-text-bold\").text(function (d, i) {\n        if (i == 0) {\n          return yearOld;\n        }\n        return null;\n      });\n      //\n      miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n        return miniWidth;\n      }).attr(\"y\", function (d, i) {\n        if (i == 0) {\n          return multipleY(getPercentType(\"gender\", d.value)) + 15;\n        }\n        return null;\n      }).attr(\"class\", \"slope-small-text slope-small-text-bold\").text(function (d, i) {\n        if (i == 0) {\n          return \"2016\";\n        }\n        return null;\n      }).style(\"text-anchor\", function (d, i) {\n        if (i == 0) {\n          return \"start\";\n        }\n        return null;\n      });\n      //\n      miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n        return miniWidth;\n      }).attr(\"y\", function (d, i) {\n        if (i == 0) {\n          return multipleY(getPercentType(\"gender\", d.value)) + 27;\n        }\n        return multipleY(getPercentType(\"gender\", d.value)) + 15;\n      }).attr(\"class\", \"slope-small-text\").text(function (d, i) {\n        if (i == 0) {\n          return Math.floor(100 * getPercentType(\"gender\", d.value)) + \"%\";\n        }\n        return Math.floor(100 * getPercentType(\"gender\", d.value));\n      }).style(\"text-anchor\", function (d, i) {\n        if (i == 0) {\n          return \"start\";\n        }\n        return null;\n      });\n\n      miniMultipleWrapperG.append(\"circle\").attr(\"cx\", function (d) {\n        return miniWidth;\n      }).attr(\"cy\", function (d) {\n        return multipleY(getPercentType(\"gender\", d.value));\n      }).attr(\"r\", 3).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n        if (d.value.diff > 0) {\n          return \"blue\";\n        }\n        return \"red\";\n        // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n      });\n\n      cellCircle.each(function (d) {\n        d.value.currentCx = d3.select(this).attr(\"cx\");\n      }).style(\"opacity\", function (d) {\n        if (d.value.miniChart > -1) {\n          return null;\n        }\n        return 0;\n      }).transition().duration(duration).delay(function (d, i) {\n        return i * 10;\n      }).attr(\"cx\", function (d) {\n        if (d.value.miniChart > -1) {\n          return getMiniX(d, d.value.miniChart) + miniMargin.left + miniWidth;\n        }\n        return d.value.currentCx;\n      }).style(\"fill\", function (d) {\n        if (d.value.diff > 0) {\n          return \"blue\";\n        }\n        return \"red\";\n        // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n      }).style(\"stroke\", function (d) {\n        if (d.value.diff > 0) {\n          return \"blue\";\n        }\n        return \"red\";\n      }).attr(\"r\", 3).attr(\"cy\", function (d) {\n        return multipleY(getPercentType(\"gender\", d.value)) + miniTextHeight + miniMargin.top + getMiniY(d, d.value.miniChart);\n      });\n      // if(cut == \"race\"){\n      //   return yScale(getPercentType(\"supWhite\",d.value));\n      // }\n      // return yScale(getPercentType(\"supGender\",d.value));\n      cellImages.style(\"opacity\", 0);\n\n      miniMultipleWrapperG.append(\"line\").attr(\"class\", \"slope-line\").attr(\"y1\", function (d) {\n        return multipleY(getPercentType(\"gender-old\", d.value));\n      }).attr(\"x1\", function (d) {\n        return 0;\n      }).attr(\"y2\", function (d) {\n        return multipleY(getPercentType(\"gender\", d.value));\n      }).attr(\"x2\", function (d) {\n        return miniWidth;\n      }).attr(\"stroke-linecap\", \"round\").attr(\"stroke-linejoin\", \"round\").attr(\"stroke-width\", 1.8).style(\"stroke\", function (d) {\n        if (d.value.diff > 0) {\n          return \"blue\";\n        }\n        return \"red\";\n        // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n      });\n      //\n      miniMultipleWrapperAxis.selectAll(\"line\").data([.2, .3, .4, .5]).enter().append(\"line\").attr(\"class\", \"slope-line-axis\").attr(\"y1\", function (d, i) {\n        return multipleY(d);\n        // return i*20+\"%\";\n      }).attr(\"x1\", function (d) {\n        return 0;\n      }).attr(\"y2\", function (d, i) {\n        return multipleY(d);\n      }).attr(\"x2\", function (d) {\n        return miniWidth;\n      }).style(\"stroke\", function (d) {\n        if (d == .5) {\n          return \"black\";\n        }\n      });\n    } else if (chartType == \"arrow-scatter\") {\n      var drawArrow = function drawArrow(t0, t1, topOffset) {\n        var d = t1 > t0 ?\n        // (\"M\"+t0+\",0 L\"+t1+\",0 Z\") :\n        \"M\" + (t1 - 6) + \",\" + topOffset + \" L\" + (t1 - 12) + \",\" + (topOffset + 4) + \" L\" + (t1 - 12) + \",\" + (topOffset + 1.5) + \" L\" + t0 + \",\" + topOffset + \" L\" + (t1 - 12) + \",\" + (topOffset - 1.5) + \" L\" + (t1 - 12) + \",\" + (topOffset - 4) + \" L\" + (t1 - 6) + \",\" + topOffset : \"M\" + (t1 + 6) + \",\" + topOffset + \" L\" + (t1 + 12) + \",\" + (topOffset + 4) + \" L\" + (t1 + 12) + \",\" + (topOffset + 1.5) + \" L\" + t0 + \",\" + topOffset + \" L\" + (t1 + 12) + \",\" + (topOffset - 1.5) + \" L\" + (t1 + 12) + \",\" + (topOffset - 4) + \" L\" + (t1 + 6) + \",\" + topOffset;\n\n        // (\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n        // (\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n        // (\"M0,\" + (t1+2) + \" L4,\" + (t1+8) + \" L1.5,\" + (t1+8) + \" L0,\" + t0 + \" L-1.5,\" + (t1+8) + \" L-4,\" + (t1+8) + \" Z\");\n        return d;\n      };\n\n      var drawDiamond = function drawDiamond(t0, t1) {\n        return \"M0,\" + (t1 - 4) + \" L4,\" + (t1 - 8)\n        // + \" L1.5,\" + (t1-8)\n        + \" L0,\" + (t1 - 12) + \" L-4,\" + (t1 - 8) + \" Z\";\n      };\n\n      var _buildAxis3 = function _buildAxis3() {\n        var chartAxisContainer = chartAxis.append(\"g\");\n        var chartAxisLines = chartAxisContainer.append(\"g\");\n\n        var linesData = [.2, .35, .5, .65, .8];\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-arrow-x-axis-lines\").selectAll(\"line\").data(linesData).enter().append(\"line\").attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", -10).attr(\"y2\", items * rowSpacing).attr(\"class\", \"swarm-axis-line\").style(\"stroke\", function (d, i) {\n          if (d == .5) {\n            return \"rgba(0, 0, 0, 0.09)\";\n          }\n          return null;\n        }).style(\"stroke-width\", function (d, i) {\n          if (d == .5) {\n            return \"2px\";\n          }\n          return null;\n        });\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-scatter-y-axis-lines\").selectAll(\"line\").data(d3.range(items)).enter().append(\"line\").attr(\"x1\", function (d, i) {\n          if (i == 0 || i == switchNum) {\n            return -140;\n          }\n          return -15;\n        }).attr(\"x2\", width + 15).attr(\"y1\", function (d, i) {\n          return i * rowSpacing; //yScale(d);\n        }).attr(\"y2\", function (d, i) {\n          return i * rowSpacing; //yScale(d);\n        }).attr(\"class\", \"swarm-axis-line\");\n\n        var chartAxisText = chartAxisContainer.append(\"g\");\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data(linesData).enter().append(\"text\").attr(\"x\", function (d, i) {\n          return xScale(d);\n        }).attr(\"y\", function (d, i) {\n          return 0;\n        }).attr(\"class\", function (d, i) {\n          return \"swarm-arrow-tick-text\";\n        }).style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (d == .8) {\n            return \"end\";\n          }\n          return null;\n        }).text(function (d, i) {\n          if (i == 0) {\n            return Math.floor((1 - d) * 100) + \"% Male\";\n          }\n          if (d < .5) {\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          if (d == .5) {\n            return \"50/50 Split\";\n          }\n          if (d == .8) {\n            return Math.floor(d * 100) + \"% Female\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n      };\n\n      var _buildAverage3 = function _buildAverage3() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        var chartAnnotation = chartAverage.append(\"g\").attr(\"class\", \"swarm-annnotation\");\n\n        var chartAnnotationTop = chartAnnotation.append(\"g\").selectAll(\"g\").data([\"gender-old\", \"gender\"]).enter().append(\"g\").attr(\"class\", \"swarm-arrow-annotation-top\").attr(\"transform\", function (d, i) {\n          return \"translate(\" + xScale(getPercentType(d, chartAnnotationData.value)) + \",\" + 0 + \")\";\n        }).style(\"opacity\", 0);\n\n        chartAnnotationTop.transition().duration(duration).delay(function (d, i) {\n          if (i == 0) {\n            return delay;\n          }\n          return 0;\n        }).style(\"opacity\", 1);\n\n        var chartAnnotationLeft = chartAnnotation.append(\"g\").selectAll(\"text\").data([\"Gender Diversity Improved\", \"Gender Diversity Dropped\"]).enter().append(\"text\").attr(\"class\", \"swarm-arrow-annotation-left\").attr(\"x\", 0).attr(\"y\", function (d, i) {\n          if (i == 0) {\n            return 0;\n          }\n          return rowSpacing * switchNum;\n        }).text(function (d) {\n          return d;\n        });\n\n        var chartAnnotationTopOffset = -30;\n\n        chartAnnotationTop.append(\"text\").attr(\"y\", chartAnnotationTopOffset).attr(\"x\", 0).attr(\"class\", \"swarm-arrow-annotation-top-text\").style(\"fill\", function (d) {\n          if (d == \"gender\") {\n            return \"#dab30b\";\n          }\n          return \"#888\";\n        }).text(function (d) {\n          if (d == \"gender\") {\n            return \"Staff in 2017\";\n          }\n          return \"Staff in 2001\";\n        });\n\n        chartAnnotationTop.append(\"line\").attr(\"y1\", 0).attr(\"y2\", chartAnnotationTopOffset).attr(\"x1\", 0).attr(\"x2\", 0).attr(\"class\", \"swarm-arrow-annotation-top-line\").style(\"stroke\", function (d) {\n          if (d == \"gender\") {\n            return \"#c1a427\";\n          }\n          return \"#888\";\n        });\n      };\n\n      var switchSet = false;\n      var switchNum = 0;\n\n      var rowSpacing = 15;\n      // cellCircle = cell.selectAll(\"circle\")\n      var chartAnnotationData;\n      var cellFiltered = cell.filter(function (d) {\n        return d.value.miniChart > -1;\n      }).sort(function (a, b) {\n        return b.value.diff - a.value.diff;\n      }).each(function (d, i) {\n        d.value.arrowSort = i;\n        if (d.value.diff < 0) {\n          if (!switchSet) {\n            console.log(d.value.companyName);\n            switchSet = true;\n            switchNum = i + 2;\n          }\n          d.value.arrowSort = i + 2;\n        }\n        if (i == 0) {\n          chartAnnotationData = d;\n        }\n      });\n\n      var items = cellFiltered.size() + 2;\n\n      var delay = 500;\n\n      cell.filter(function (d) {\n        return d.value.miniChart == -1;\n      }).style(\"opacity\", 0);\n\n      cellCircle.filter(function (d) {\n        return d.value.miniChart > -1;\n      }).style(\"opacity\", 1).style(\"fill\", null).style(\"stroke\", null).transition().duration(duration).attr(\"r\", 4).attr(\"cx\", function (d) {\n        // if(cut == \"race\"){\n        //   return xScale(getPercentType(\"raceRaw\",d.value));\n        // }\n        return xScale(getPercentType(\"gender\", d.value));\n      }).attr(\"cy\", function (d, i) {\n        return d.value.arrowSort * rowSpacing + rowSpacing / 2;\n        // if(cut == \"race\"){\n        //   return yScale(getPercentType(\"supWhite\",d.value));\n        // }\n        // return yScale(getPercentType(\"supGender\",d.value));\n      });\n\n      cellImages.filter(function (d) {\n        return d.value.miniChart > -1;\n      }).transition().duration(duration).style(\"opacity\", 0);\n\n      cellText.style(\"text-anchor\", null).style(\"fill\", null).filter(function (d) {\n        return d.value.miniChart > -1;\n      }).style(\"opacity\", null).transition().duration(duration).attr(\"x\", function (d) {\n        return 0;\n      }).attr(\"y\", function (d, i) {\n        return d.value.arrowSort * rowSpacing + rowSpacing / 2;\n        // if(cut == \"race\"){\n        //   return yScale(getPercentType(\"supWhite\",d.value));\n        // }\n        // return yScale(getPercentType(\"supGender\",d.value));\n      });\n\n      cellCircleTwo.filter(function (d) {\n        return d.value.miniChart > -1;\n      }).attr(\"r\", 4).attr(\"cx\", function (d) {\n        return xScale(getPercentType(\"gender-old\", d.value));\n      }).attr(\"cy\", function (d, i, j) {\n        return d.value.arrowSort * rowSpacing + rowSpacing / 2;\n      }).transition().duration(duration).delay(function (d) {\n        return d.value.arrowSort * 10 + delay;\n      }).style(\"opacity\", 1);\n\n      cellLine.filter(function (d) {\n        return d.value.miniChart > -1;\n      }).transition().duration(0).attr(\"d\", function (d) {\n        var t0 = xScale(getPercentType(\"gender-old\", d.value));\n        var t1 = xScale(getPercentType(\"gender-old\", d.value));\n        if (Math.abs(d.value.diff) < .02) {\n          return \"\";\n        }\n        if (d.value.diff > .02) {\n          return drawArrow(xScale(getPercentType(\"gender-old\", d.value)), xScale(getPercentType(\"gender-old\", d.value) + .02), d.value.arrowSort * rowSpacing + rowSpacing / 2);\n        }\n        return drawArrow(xScale(getPercentType(\"gender-old\", d.value)), xScale(getPercentType(\"gender-old\", d.value) - .02), d.value.arrowSort * rowSpacing + rowSpacing / 2);\n      }).attr(\"fill\", function (d) {\n        if (d.value.diff > 0) {\n          return \"url(#gradient-right)\";\n        }\n        return \"url(#gradient-left)\";\n      }).transition().duration(duration).delay(function (d) {\n        return d.value.arrowSort * 10 + delay + duration;\n      }).style(\"opacity\", 1).transition().duration(400).delay(function (d, i) {\n        return d.value.arrowSort * 15;\n      }).attrTween(\"d\", function (d) {\n        var t0 = xScale(getPercentType(\"gender-old\", d.value));\n        var t1 = xScale(getPercentType(\"gender\", d.value));\n        return function (t) {\n          if (Math.abs(d.value.diff) < .02) {\n            return \"\";\n          }\n          if (d.value.diff > .02) {\n            return drawArrow(xScale(getPercentType(\"gender-old\", d.value)), (xScale(getPercentType(\"gender\", d.value)) - xScale(getPercentType(\"gender-old\", d.value) + .02)) * t + xScale(getPercentType(\"gender-old\", d.value) + .02), d.value.arrowSort * rowSpacing + rowSpacing / 2);\n          } else if (d.value.diff < -.02) {\n            return drawArrow(xScale(getPercentType(\"gender-old\", d.value)), xScale(getPercentType(\"gender-old\", d.value) - .02) - Math.abs(xScale(getPercentType(\"gender\", d.value)) - xScale(getPercentType(\"gender-old\", d.value) - .02)) * t, d.value.arrowSort * rowSpacing + rowSpacing / 2);\n          }\n        };\n      });\n\n      // cellCircle\n      //   .filter(function(d){\n      //     return +d.key == newsIDSearch;\n      //   })\n      //   .style(\"stroke-opacity\",.5)\n      //   .style(\"z-index\",1000000000)\n      //   .transition(\"border\")\n      //   .duration(1000)\n      //   .style(\"stroke-width\",\"10px\")\n      //   .transition(\"border\")\n      //   .duration(1000)\n      //   .style(\"stroke-width\",\"1px\")\n      //   .style(\"stroke-opacity\",1)\n      //   ;\n      //\n      // cellImages = cell.selectAll(\".swarm-image-container\")\n      //\n      // cellImages\n      //   .transition()\n      //   .duration(duration)\n      //   .attr(\"transform\", function(d){\n      //     if(cut==\"race\"){\n      //       return \"translate(\" + xScale(getPercentType(\"raceRaw\",d.value)) + \",\" + yScale(getPercentType(\"supWhite\",d.value)) + \")\"\n      //     }\n      //     return \"translate(\" + xScale(getPercentType(\"gender\",d.value)) + \",\" + yScale(getPercentType(\"supGender\",d.value)) + \")\"\n      //   })\n      //   ;\n\n\n      if (rebuildAxis) {\n        chartAxis.select(\"g\").transition().duration(250).style(\"opacity\", 0).on(\"end\", function (d) {\n          d3.select(this).remove();\n          _buildAxis3();\n        });\n      }\n\n\n      if (rebuildAxis) {\n        _buildAverage3();\n      }\n    } else if (chartType == \"arrow-scatter-full\") {\n      var _drawArrow = function _drawArrow(t0, t1, topOffset) {\n        var d = t1 > t0 ?\n        // (\"M\"+t0+\",0 L\"+t1+\",0 Z\") :\n        \"M\" + (t1 - 6) + \",\" + topOffset + \" L\" + (t1 - 12) + \",\" + (topOffset + 4) + \" L\" + (t1 - 12) + \",\" + (topOffset + 1.5) + \" L\" + t0 + \",\" + topOffset + \" L\" + (t1 - 12) + \",\" + (topOffset - 1.5) + \" L\" + (t1 - 12) + \",\" + (topOffset - 4) + \" L\" + (t1 - 6) + \",\" + topOffset : \"M\" + (t1 + 6) + \",\" + topOffset + \" L\" + (t1 + 12) + \",\" + (topOffset + 4) + \" L\" + (t1 + 12) + \",\" + (topOffset + 1.5) + \" L\" + t0 + \",\" + topOffset + \" L\" + (t1 + 12) + \",\" + (topOffset - 1.5) + \" L\" + (t1 + 12) + \",\" + (topOffset - 4) + \" L\" + (t1 + 6) + \",\" + topOffset;\n\n        // (\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n        // (\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n        // (\"M0,\" + (t1+2) + \" L4,\" + (t1+8) + \" L1.5,\" + (t1+8) + \" L0,\" + t0 + \" L-1.5,\" + (t1+8) + \" L-4,\" + (t1+8) + \" Z\");\n        return d;\n      };\n\n      var _drawDiamond = function _drawDiamond(t0, t1, topOffset) {\n        return \"M\" + (t1 - 4) + \",\" + topOffset + \" L\" + (t1 - 8) + \",\" + (topOffset + 4)\n        // + \" L1.5,\" + (t1-8)\n        + \" L\" + (t1 - 12) + \",\" + (topOffset + 0) + \" L\" + (t1 - 8) + \",\" + (topOffset - 4) + \" Z\";\n      };\n\n      var _buildAxis4 = function _buildAxis4() {\n        var chartAxisContainer = chartAxis.append(\"g\");\n        var chartAxisLines = chartAxisContainer.append(\"g\");\n\n        var linesData = [.2, .35, .5, .65, .8];\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-arrow-x-axis-lines\").selectAll(\"line\").data(linesData).enter().append(\"line\").attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", -10).attr(\"y2\", items * rowSpacing).attr(\"class\", \"swarm-axis-line\").style(\"stroke\", function (d, i) {\n          if (d == .5) {\n            return \"rgba(0, 0, 0, 0.09)\";\n          }\n          return null;\n        }).style(\"stroke-width\", function (d, i) {\n          if (d == .5) {\n            return \"2px\";\n          }\n          return null;\n        });\n\n        //  chartAxisLines.append(\"g\")\n        //    .attr(\"class\",\"swarm-scatter-y-axis-lines\")\n        //    .selectAll(\"line\")\n        //    .data(d3.range(items))\n        //    .enter()\n        //    .append(\"line\")\n        //    .attr(\"x1\",function(d,i){\n        //      return -15\n        //    })\n        //    .attr(\"x2\",width+15)\n        //    .attr(\"y1\",function(d,i){\n        //      return i*rowSpacing;\n        //    })\n        //    .attr(\"y2\",function(d,i){\n        //      return i*rowSpacing;\n        //    })\n        //    .attr(\"class\",\"swarm-axis-line\")\n        //    .style(\"opacity\",function(d,i){\n        //      if(i%5 == 0){\n        //        return 1\n        //      }\n        //      return 0;\n        //    })\n        //    ;\n\n        var chartAxisText = chartAxisContainer.append(\"g\");\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data(linesData).enter().append(\"text\").attr(\"x\", function (d, i) {\n          return xScale(d);\n        }).attr(\"y\", function (d, i) {\n          return 0;\n        }).attr(\"class\", function (d, i) {\n          return \"swarm-arrow-tick-text\";\n        }).style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (d == .8) {\n            return \"end\";\n          }\n          return null;\n        }).text(function (d, i) {\n          if (i == 0) {\n            return Math.floor((1 - d) * 100) + \"% Male\";\n          }\n          if (d < .5) {\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          if (d == .5) {\n            return \"50/50 Split\";\n          }\n          if (d == .8) {\n            return Math.floor(d * 100) + \"% Female\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n      };\n\n      var _buildAverage4 = function _buildAverage4() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var annotationDataDiffData = [0, 0];\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        var chartAnnotation = chartAverage.append(\"g\").attr(\"class\", \"swarm-annnotation\");\n\n        chartAverage.append(\"g\")\n        // .attr(\"transform\",function(d,i){\n        //   return \"translate(\"+arrowXScale((newsNest.length-1)/2)+\",0)\"\n        // })\n        .append(\"path\").attr(\"class\", \"arrow-scatter-line arrow-scatter-line-average\").attr(\"d\", function (d) {\n          console.log(newsNestAverageT0, newsNestAverageT1);\n          var t0 = xScale(newsNestAverageT0);\n          var t1 = xScale(newsNestAverageT1);\n\n          if (Math.abs(newsNestAverageT1 - newsNestAverageT0) < .02) {\n            return _drawDiamond(t0, t1, height / 2 + 20);\n          }\n          // if(d.value.arrowSort==0){\n          //   return drawArrow(0,width,(d.value.arrowSort*rowSpacing + rowSpacing/2))\n          // }\n          return _drawArrow(t0, t1, height / 2 + 20);\n        }).attr(\"fill\", function (d) {\n          if (newsNestAverageT1 - newsNestAverageT0 > 0) {\n            return \"url(#gradient-average)\";\n          }\n          return \"url(#gradient)\";\n        }).attr(\"stroke\", \"none\").attr(\"fill-opacity\", 1);\n\n        var chartAverageText = chartAverage.append(\"g\").attr(\"class\", \"arrow-scatter-average-text\").attr(\"transform\", function (d, i) {\n          return \"translate(\" + xScale(newsNestAverageT1) + \",\" + (height / 2 + 20) + \")\";\n        });\n\n        chartAverageText.append(\"text\").attr(\"class\", \"arrow-scatter-average-text-label\").text(function (d) {\n          return \"Overall\";\n        });\n\n        for (var item in annotationDataDiff) {\n          if (annotationDataDiff[item] > .02) {\n            annotationDataDiffData[0] = annotationDataDiffData[0] + 1;\n          } else if (annotationDataDiff[item] < -.02) {\n            annotationDataDiffData[1] = annotationDataDiffData[1] + 1;\n          }\n        }\n\n        var chartAnnotationDiff = chartAnnotation.selectAll(\"text\").data(annotationDataDiffData).enter().append(\"text\").attr(\"class\", \"swarm-arrow-full-annotation-diff\").attr(\"transform\", function (d, i) {\n          if (i == 0) {\n            return \"translate(\" + xScale(.55) + \",\" + height * annotationDataDiffData[0] / items / 2 + \")\";\n          }\n          return \"translate(\" + xScale(.55) + \",\" + height * (1 - annotationDataDiffData[1] / items / 2) + \")\";\n        }).text(function (d, i) {\n          if (i == 0) {\n            return Math.round(d / items * 100) + \"% of newsrooms are comprised of more women vs. 2001\";\n          }\n          return Math.round(d / items * 100) + \"% of newsrooms are comprised of fewer women vs. 2001\";\n        }).style(\"fill\", function (d, i) {\n          if (i == 0) {\n            return d3.color(\"blue\");\n          }\n          return d3.color(\"red\");\n        }).attr(\"x\", 0).attr(\"y\", 0).attr(\"dy\", 0).call(wrapThree, 210);\n      };\n\n      var rowSpacing = 4;\n\n      var chartAnnotationData;\n\n      var annotationDataDiff = [];\n\n      var cellFiltered = cell.sort(function (a, b) {\n        return b.value.diff - a.value.diff;\n      }).each(function (d, i) {\n        annotationDataDiff.push(d.value.diff);\n        d.value.arrowSort = i;\n      });\n\n      var items = cellFiltered.size();\n\n      var delay = duration + 1000;\n\n      cellCircle.transition().duration(duration).style(\"opacity\", 0);\n\n      cellImages.transition().duration(duration).style(\"opacity\", 0);\n\n      var textAmount = 15;\n\n      cellText.style(\"opacity\", function (d, i) {\n        if (d.value.arrowSort % textAmount == 0) {\n          return 1;\n        }\n        return 0;\n      }).transition().duration(duration).attr(\"x\", function (d) {\n        if (Math.abs(d.value.diff) < .02) {\n          return xScale(getPercentType(\"gender\", d.value)) + 7;\n        }\n        if (d.value.diff > 0) {\n          return xScale(getPercentType(\"gender\", d.value)) + 6;\n        }\n        return xScale(getPercentType(\"gender\", d.value)) - 6;\n      }).style(\"fill\", function (d) {\n        if (Math.abs(d.value.diff) < .02) {\n          return \"#888\";\n        }\n        if (d.value.diff > 0) {\n          return \"blue\";\n        }\n        return \"red\";\n      }).attr(\"y\", function (d, i) {\n        return d.value.arrowSort * rowSpacing;\n        // if(cut == \"race\"){\n        //   return yScale(getPercentType(\"supWhite\",d.value));\n        // }\n        // return yScale(getPercentType(\"supGender\",d.value));\n      }).style(\"text-anchor\", function (d, i) {\n        if (Math.abs(d.value.diff) < .02) {\n          return \"start\";\n        }\n        if (d.value.diff > 0) {\n          return \"start\";\n        }\n        return \"end\";\n      }).style(\"transform\", \"none\");\n\n      cellDash.style(\"opacity\", function (d, i) {\n        if (d.value.arrowSort % textAmount == 0) {\n          return 1;\n        }\n        return 0;\n      }).attr(\"y1\", function (d, i) {\n        return d.value.arrowSort * rowSpacing;\n      }).attr(\"y2\", function (d, i) {\n        return d.value.arrowSort * rowSpacing;\n      }).attr(\"x1\", function (d) {\n        if (Math.abs(d.value.diff) < .02) {\n          return xScale(getPercentType(\"gender\", d.value)) + 5;\n        }\n        if (d.value.diff > 0) {\n          return xScale(getPercentType(\"gender\", d.value)) + 4;\n        }\n        return xScale(getPercentType(\"gender\", d.value)) - 4;\n      }).attr(\"x2\", function (d) {\n        if (Math.abs(d.value.diff) < .02) {\n          return xScale(getPercentType(\"gender\", d.value)) - 2;\n        }\n        if (d.value.diff > 0) {\n          return xScale(getPercentType(\"gender\", d.value)) - 4;\n        }\n        return xScale(getPercentType(\"gender\", d.value)) + 4;\n      });\n\n      cellLine.transition().duration(0).attr(\"d\", function (d) {\n        var t0 = xScale(getPercentType(\"gender-old\", d.value));\n        var t1 = xScale(getPercentType(\"gender\", d.value));\n\n        if (Math.abs(d.value.diff) < .02) {\n          return _drawDiamond(t0, t1, d.value.arrowSort * rowSpacing);\n        }\n        // if(d.value.arrowSort==0){\n        //   return drawArrow(0,width,(d.value.arrowSort*rowSpacing + rowSpacing/2))\n        // }\n        return _drawArrow(t0, t1, d.value.arrowSort * rowSpacing);\n      }).attr(\"fill\", function (d) {\n        if (Math.abs(d.value.diff) < .02) {\n          return \"#888\";\n        }\n        if (d.value.diff > 0) {\n          return \"url(#gradient-blue)\";\n        }\n        return \"url(#gradient-red)\";\n      }).style(\"stroke\", \"none\").style(\"opacity\", 1);\n\n      // cellCircle\n      //   .filter(function(d){\n      //     return +d.key == newsIDSearch;\n      //   })\n      //   .style(\"stroke-opacity\",.5)\n      //   .style(\"z-index\",1000000000)\n      //   .transition(\"border\")\n      //   .duration(1000)\n      //   .style(\"stroke-width\",\"10px\")\n      //   .transition(\"border\")\n      //   .duration(1000)\n      //   .style(\"stroke-width\",\"1px\")\n      //   .style(\"stroke-opacity\",1)\n      //   ;\n      //\n      // cellImages = cell.selectAll(\".swarm-image-container\")\n      //\n      // cellImages\n      //   .transition()\n      //   .duration(duration)\n      //   .attr(\"transform\", function(d){\n      //     if(cut==\"race\"){\n      //       return \"translate(\" + xScale(getPercentType(\"raceRaw\",d.value)) + \",\" + yScale(getPercentType(\"supWhite\",d.value)) + \")\"\n      //     }\n      //     return \"translate(\" + xScale(getPercentType(\"gender\",d.value)) + \",\" + yScale(getPercentType(\"supGender\",d.value)) + \")\"\n      //   })\n      //   ;\n\n      if (rebuildAxis) {\n        chartAxis.select(\"g\").transition().duration(250).style(\"opacity\", 0).on(\"end\", function (d) {\n          d3.select(this).remove();\n          _buildAxis4();\n        });\n      }\n\n\n      if (rebuildAxis) {\n        _buildAverage4();\n      }\n    } else if (chartType = \"table\") {\n      var buildTable = function buildTable() {\n        chartTableItem = chartDivContainerTable.selectAll(\"div\").data(tableData).enter().append(\"div\").attr(\"class\", \"swarm-chart-table-company-container\");\n\n        chartTableItem.transition().duration(500).delay(function (d, i) {\n          return i * 100;\n        }).style(\"opacity\", 1).style(\"transform\", \"translate(0px,0px)\");\n\n        chartTableItem.append(\"p\").attr(\"class\", \"swarm-chart-table-company-name\").text(function (d) {\n          return d.value.companyName;\n        });\n\n        var chartTableSection = chartTableItem.selectAll(\"div\").data(function (d, i) {\n          var itemCount = i;\n          var value = d;\n          return [\"leaders\", \"staff\", \"census\"].map(function (d) {\n            return { key: d, value: value, companyCount: itemCount };\n          });\n        }).enter().append(\"div\").attr(\"class\", \"swarm-chart-table-company-section\");\n\n        var chartTableRow = chartTableSection.selectAll(\"div\").data(function (d, i) {\n          var cat = d;\n          var years = [2017, 2001];\n          if (cat.key == \"census\") {\n            years = [2017];\n          }\n          return years.map(function (d) {\n            return { year: d, key: cat.key, value: cat.value, companyCount: cat.companyCount };\n          });\n        }).enter().append(\"div\").attr(\"class\", \"swarm-chart-table-company-row\");\n\n        var chartTablePercent = chartTableRow.selectAll(\".swarm-chart-table-company-percent\").data(function (d, i) {\n          var item = d;\n          var newThing = [\"white\", \"black\", \"asian\", \"female\"].map(function (d) {\n            return { year: item.year, key: item.key, value: item.value, cat: d, companyCount: item.companyCount };\n          });\n          return newThing;\n        }).enter().append(\"p\").attr(\"class\", \"swarm-chart-table-company-percent\").text(function (d) {\n          return \"5%\";\n        });\n\n        chartTablePercent.filter(function (d, i) {\n          return d.key == \"census\" && d.year == 2017 && i == 0;\n        }).append(\"span\").attr(\"class\", \"swarm-chart-table-company-row-top-label-census\").text(function (d) {\n          return \"Mesa, AZ\";\n        });\n\n        chartTablePercent.filter(function (d) {\n          return d.key == \"leaders\" && d.year == 2017;\n        }).append(\"span\").attr(\"class\", \"swarm-chart-table-company-row-top-label\").text(function (d) {\n          return d.cat;\n        });\n\n        chartTablePercent.filter(function (d, i) {\n          return i == 0 && d.companyCount == 0;\n        }).append(\"span\").attr(\"class\", \"swarm-chart-table-company-row-year\").text(function (d) {\n          return d.year;\n        });\n\n        chartTablePercent.filter(function (d, i) {\n          return i == 0 && d.companyCount == 0 && d.year == 2017;\n        }).append(\"span\").attr(\"class\", \"swarm-chart-table-company-row-key\").text(function (d) {\n          return d.key;\n        });\n      };\n\n      var _buildAverage5 = function _buildAverage5() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        var chartAnnotation = chartAverage.append(\"g\").attr(\"class\", \"swarm-annnotation\");\n      };\n\n      chartDivContainerTable.selectAll(\".swarm-chart-table-company-container\").remove();\n\n      cellCircle.transition().duration(500).style(\"opacity\", 0);\n\n      cellImages.transition().duration(500).style(\"opacity\", 0);\n\n      if (rebuildAxis) {\n        chartAxis.select(\"g\").transition().duration(500).style(\"opacity\", 0).on(\"end\", function (d) {\n          d3.select(this).remove();\n          var chartAxisContainer = chartAxis.append(\"g\");\n          buildTable();\n        });\n      }\n\n      if (rebuildAxis) {\n        _buildAverage5();\n      }\n    }\n  }\n  tableData = newsNest.slice(0, 4);\n  buildChart(\"new\");\n\n  var footerContainer = container.append(\"div\").attr(\"class\", \"footer-container\");\n\n  footerContainer.append(\"div\").attr(\"class\", \"news-lab-logo\");\n\n  footerContainer.append(\"div\").attr(\"class\", \"swarm-chart-source\").selectAll(\"p\").data([\"Source: ASNE Survey, 2017\", \"At least 50 staff\"]).enter().append(\"p\").attr(\"class\", \"swarm-chart-source-text\").text(function (d) {\n    return d;\n  });\n\n  function buildToggles() {\n    var toggles = footerContainer.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n    var sizeCats = [0, 20, 50, 100, 500];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == sizeCats.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      countMin = d;\n      buildChart(currentChart);\n    });\n\n    var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n    toggleType = toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type histogram-chart-toggle-first\");\n\n    toggleType.selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == raceGenderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"race\") {\n        return \"Race\";\n      }\n      return \"Gender\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      cut = d;\n      buildChart(currentChart);\n    });\n\n    var projection = d3.geoAlbersUsa();\n    // .scale(1280)\n    // .translate([width / 2, height / 2]);\n\n    var path = d3.geoPath().projection(projection)\n    // .pointRadius(1.5)\n    ;\n\n    function mapMakeBig() {\n      mapBig = true;\n      searchMap.classed(\"swarm-chart-min\", false);\n      searchMapClose.style(\"display\", \"block\");\n      searchMapLabel.style(\"display\", \"none\");\n      searchMapScreen.style(\"display\", \"none\");\n      mapSvg.style(\"pointer-events\", \"all\");\n      mapSelector.style(\"display\", \"block\");\n    }\n    function mapMakeSmall() {\n      mapBig = false;\n      searchMap.classed(\"swarm-chart-min\", true);\n      searchMapClose.style(\"display\", null);\n      searchMapLabel.style(\"display\", null);\n      mapSvg.style(\"pointer-events\", null);\n      mapSelector.style(\"display\", null);\n      searchMapScreen.style(\"display\", null);\n    }\n\n    searchMap = toggles.append(\"div\").attr(\"class\", \"swarm-chart-map swarm-chart-min\");\n\n    var searchMapScreen = searchMap.append(\"div\").attr(\"class\", \"map-screen\").on(\"click\", function (d) {\n      if (!mapBig) {\n        mapMakeBig();\n      } else {\n        console.log(\"small here\");\n        mapMakeSmall();\n      }\n    });\n\n    var searchMapClose = searchMap.append(\"div\").attr(\"class\", \"map-close\").on(\"click\", function (d) {\n      console.log(\"small there\");\n      mapMakeSmall();\n    });\n\n    searchMapClose.append(\"div\").attr(\"class\", \"map-close-icon\");\n\n    var searchMapLabel = searchMap.append(\"p\").attr(\"class\", \"map-label\").text(function (d) {\n      return \"Select Region\";\n    });\n\n    var mapSvg = searchMap.append(\"svg\").attr(\"class\", \"maps-chart-svg\").attr(\"viewBox\", \"0 0 960 600\").append(\"g\").attr(\"transform\", \"translate(\" + 0 + \",\" + 50 + \")\");\n\n    mapSvg.append(\"g\").attr(\"class\", \"states\").selectAll(\"path\").data(topojson.feature(stateTopo, stateTopo.objects.states).features).enter().append(\"path\").attr(\"d\", path);\n\n    mapSvg.append(\"g\").append(\"path\").attr(\"class\", \"state-borders\").attr(\"d\", path(topojson.mesh(stateTopo, stateTopo.objects.states, function (a, b) {\n      return a !== b;\n    })));\n\n    var mapMarkers = mapSvg.append(\"g\").attr(\"class\", \"map-markers\").selectAll(\"circle\").data(searchDataSet.sort(function (a, b) {\n      return radiusScale(+b.value.maxTotal) - radiusScale(+a.value.maxTotal);\n    })).enter().append(\"circle\").attr(\"class\", \"map-marker\").attr(\"r\", function (d) {\n      return radiusScale(+d.value.maxTotal);\n    }).style(\"fill\", function (d) {\n      if (d.value.hasLocation) {\n        return null;\n      }\n      return \"rgba(0,0,0,0)\";\n    }).attr(\"transform\", function (d) {\n      if (d.value.hasLocation) {\n        var location = d.value.location;\n        var project = projection([+location.longitude, location.latitude]);\n        return \"translate(\" + project + \")\";\n      }\n      return null;\n    }).on(\"click\", function (d) {\n      var location = d.value.location;\n      var project = projection([+location.longitude, location.latitude]);\n\n      mapSelector.transition().duration(750).attr(\"transform\", \"translate(\" + project + \")\");\n\n      var distanceArray = [];\n      mapMarkers.each(function (d) {\n        if (d.value.hasLocation) {\n          var itemB = d.value.location;\n          var distance = _geolib2.default.getDistanceSimple(location, itemB);\n          if (distance < 200000) {\n            distanceArray.push(d);\n          }\n        }\n      });\n\n      if (distanceArray.length > 4) {\n        distanceArray = distanceArray.sort(function (a, b) {\n          return +b.value.maxTotal - +a.value.maxTotal;\n        }).slice(0, 4);\n      }\n      tableData = distanceArray;\n      buildChart(\"table\");\n    });\n\n    var mapSelector = mapSvg.append(\"g\").attr(\"class\", \"map-selector\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height * .8 + \")\");\n\n    var selectorRadius = 20;\n\n    mapSelector.append(\"circle\").attr(\"class\", \"map-selector-circle\").attr(\"r\", selectorRadius);\n\n    mapSelector.append(\"text\").attr(\"class\", \"map-selector-target\").attr(\"transform\", \"translate(\" + 0 + \",\" + -1 + \")\").text(\"+\");\n\n    mapSelector.append(\"text\").attr(\"class\", \"map-selector-text\").text(\"Show Newsrooms Here\").attr(\"transform\", \"translate(\" + 0 + \",\" + (-selectorRadius - 15) + \")\");\n\n    var searchDiv = toggles.append(\"div\").attr(\"class\", \"swarm-chart-search-div\").attr(\"id\", \"search-results-box\");\n\n    searchInput = searchDiv.append(\"input\").attr(\"class\", \"swarm-chart-search\").attr(\"placeholder\", \"Find a Newsroom\").on(\"focus\", function (d) {\n      searchResultsContainer.style(\"display\", \"block\");\n    });\n\n    searchResultsContainer = searchDiv.append(\"div\").attr(\"class\", \"swarm-chart-search-results\");\n\n    var searchAlphaSort = searchResultsContainer.append(\"div\").attr(\"class\", \"swarm-chart-search-results-alpha-container\");\n\n    searchAlphaSort.append(\"p\").text(\"filter\").attr(\"class\", \"swarm-chart-search-results-alpha-label\");\n\n    searchAlphaSortLetters = searchAlphaSort.append(\"div\").attr(\"class\", \"swarm-chart-search-results-alpha-item-container\").selectAll(\"p\").data([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]).enter().append(\"p\").attr(\"class\", \"swarm-chart-search-results-alpha-item\").text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      alphaSort = d;\n      searchAlphaSortLetters.style(\"color\", function (d) {\n        if (d == alphaSort) {\n          return \"black\";\n        }\n        return null;\n      }).style(\"text-decoration\", function (d) {\n        if (d == alphaSort) {\n          return \"underline\";\n        }\n        return null;\n      });\n\n      searchResults.style(\"display\", function (d) {\n        if (d.value.chars.includes(alphaSort)) {\n          return \"block\";\n        }\n        return \"none\";\n      });\n    });\n\n    searchResults = searchResultsContainer.append(\"div\").attr(\"class\", \"swarm-chart-search-results-result-container\").selectAll(\"div\").data(searchDataSet).enter().append(\"div\").attr(\"class\", \"swarm-chart-search-results-result\").append(\"p\").attr(\"class\", \"swarm-chart-search-results-result-text\").text(function (d) {\n      return d.value.companyName;\n    }).on(\"click\", function (d) {\n      var node = d;\n      var key = +d.key;\n      var map = newsNest.map(function (d) {\n        return +d.key;\n      }).includes(key);\n      console.log(map);\n      if (map) {\n        newsIDSearch = key;\n        buildChart(currentChart);\n      } else {\n        newsIDSearch = key;\n        newsNest.push(node);\n\n        cell = chartG.selectAll(\"g\").data(newsNest, function (d) {\n          return +d.key;\n        });\n\n        var cellEnter = cell.enter().append(\"g\").attr(\"class\", \"swarm-cell-g\");\n\n        cellEnter.append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n          return d.value.radius;\n        }).attr(\"cx\", function (d) {\n          return 0;\n        }).attr(\"cy\", function (d) {\n          return 0;\n        }).on(\"mouseover\", function (d) {\n          var data = d;\n          mouseOverEvents(data, d3.select(this));\n        }).on(\"mouseout\", function (d) {\n          var data = d;\n          mouseOutEvents(data, d3.select(this));\n        }).style(\"fill\", function (d) {\n          return;\n          var value = getPercentType(\"gender\", d.value);\n          return genderColorScale(value);\n          return colorScale(newsMap.get(d.NewsID).value.diff);\n        }).style(\"stroke\", function (d) {\n          var value = getPercentType(\"gender\", d.value);\n          return d3.color(genderColorScale(value)).darker(1);\n        });\n\n        cellEnter.append(\"g\").attr(\"transform\", function (d, i) {\n          return \"translate(\" + 0 + \",\" + 0 + \")\";\n        }).attr(\"class\", \"swarm-image-container\").append(\"image\").attr(\"class\", \"swarm-image\").attr(\"xlink:href\", function (d) {\n          if (d.value.companyName == \"the new york times\") {\n            return \"assets/ny-times-logo.svg\";\n          }\n          if (d.value.companyName == \"the wall street journal\") {\n            return \"assets/wsj-logo.svg\";\n          }\n          if (d.value.companyName == \"los angeles times\") {\n            return \"assets/la-times-logo.png\";\n          }\n          if (d.value.companyName == \"usa today\") {\n            return \"assets/usa-today-logo.svg\";\n          }\n          return null;\n        }).attr(\"width\", function (d) {\n          return d.value.radius * 2 * .7;\n        }).attr(\"height\", function (d) {\n          return d.value.radius * 2 * .7;\n        });\n        cell = chartG.selectAll(\".swarm-cell-g\");\n\n        buildChart(currentChart);\n      }\n    });\n\n    var leaderToggleData = [\"all\", \"leader\"];\n    //\n    // toggles\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-chart-toggle-type\")\n    //   .selectAll(\"p\")\n    //   .data(leaderToggleData)\n    //   .enter()\n    //   .append(\"p\")\n    //   .attr(\"class\",function(d,i){\n    //     if(i==0){\n    //       return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    //     }\n    //     if(i==leaderToggleData.length-1){\n    //       return \"back-curve histogram-chart-toggle-item\";\n    //     }\n    //     return \"histogram-chart-toggle-item\";\n    //   })\n    //   .text(function(d){\n    //     if(d==\"all\"){\n    //       return \"All Staff\"\n    //     }\n    //     return \"Leadership\";\n    //   })\n    //   .on(\"click\",function(d){\n    //     var dataSelected = d;\n    //     d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\",function(d){\n    //       if(d==dataSelected){\n    //         return true;\n    //       }\n    //       return false;\n    //     })\n    //     group = d;\n    //     buildChart(currentChart);\n    //   })\n    //   ;\n  }\n  buildToggles();\n  searchSpectrum();\n  window.addEventListener('click', function (e) {\n    if (document.getElementById('search-results-box').contains(e.target)) {\n      // Clicked in box\n    } else {\n      searchResultsContainer.style(\"display\", null);\n    }\n  });\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// D3 is included by globally by default\n// import * as d3 from 'd3'\n// import loadData from './load-data'\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n  var cut = \"gender\";\n\n  var countMin = 100;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_num / d.total_num;\n      });\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +d.white_sup_num / d.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_sup_num / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +d.white_num / d.total_num;\n    });\n  }\n  //\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +data.male_num / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return +data.white_num / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n\n  var regionMap = d3.map(states, function (d) {\n    return d[1].toLowerCase();\n  });\n\n  var width = 500;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".table-rows\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data([0, 20, 50, 100, 500]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    countMin = d;\n    buildChart();\n  });\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data([\"race\", \"gender\", \"supWhite\", \"supGender\"]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    cut = d;\n    buildChart();\n  });\n\n  function buildChart() {\n\n    d3.selectAll(\".table-rows-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"table-rows-wrapper\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      return d.total_num > countMin;\n    });\n    var yearNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var extent = d3.extent(leaves, function (d) {\n        return d.Year;\n      });\n      return leaves.filter(function (d) {\n        return d.Year == extent[0] || d.Year == extent[1];\n      });\n    }).entries(filteredMapData);\n\n    //\n    var rows = chartDiv.selectAll(\"div\").data(yearNest).enter().append(\"div\").attr(\"class\", \"table-rows-row\");\n\n    rows.append(\"p\").text(function (d) {\n      return newsIDName.get(d.value[0].NewsID).Company;\n    }).attr(\"class\", \"table-rows-row-name\");\n\n    rows.selectAll(\"div\").data(function (d) {\n      return d.value;\n    }).enter().append(\"div\").sort(function (a, b) {\n      return a.Year - b.Year;\n    }).attr(\"class\", function (d) {\n      return \"table-rows-row-dot\";\n    }).style(\"background-color\", function (d) {\n      var state = null;\n      var region = null;\n      if (newsIdMap.has(d.NewsID)) {\n        state = newsIDName.get(d.NewsID).State;\n      }\n      if (regionMap.has(state)) {\n        region = regionMap.get(state)[3];\n      }\n      if (region == \"West\") {\n        return \"green\";\n      }\n      if (region == \"South\") {\n        return \"blue\";\n      }\n      if (region == \"Midwest\") {\n        return \"purple\";\n      }\n      if (region == \"Northeast\") {\n        return \"yellow\";\n      }\n      return \"grey\";\n    }).style(\"left\", function (d) {\n      return horzScale(getPercent(d)) + \"px\";\n    }).on(\"mouseover\", function (d) {\n      console.log(d);\n    }).append(\"p\").attr(\"class\", \"table-rows-row-dot-text\").html(function (d) {\n      return d.Year + \"<br>\" + Math.round(getPercent(d) * 100) + \"%\";\n    }).style(\"font-weight\", function (d, i) {\n      if (i == 1) {\n        return 700;\n      }\n    });\n  }\n\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! geolib 2.0.21 by Manuel Bieh\r\n* Library to provide geo functions like distance calculation,\r\n* conversion of decimal coordinates to sexagesimal and vice versa, etc.\r\n* WGS 84 (World Geodetic System 1984)\r\n* \r\n* @author Manuel Bieh\r\n* @url http://www.manuelbieh.com/\r\n* @version 2.0.21\r\n* @license MIT \r\n**/;(function(global, undefined) {\n\n    \"use strict\";\n\n    function Geolib() {}\n\n    // Constants\n    Geolib.TO_RAD = Math.PI / 180;\n    Geolib.TO_DEG = 180 / Math.PI;\n    Geolib.PI_X2 = Math.PI * 2;\n    Geolib.PI_DIV4 = Math.PI / 4;\n\n    // Setting readonly defaults\n    var geolib = Object.create(Geolib.prototype, {\n        version: {\n            value: \"2.0.21\"\n        },\n        radius: {\n            value: 6378137\n        },\n        minLat: {\n            value: -90\n        },\n        maxLat: {\n            value: 90\n        },\n        minLon: {\n            value: -180\n        },\n        maxLon: {\n            value: 180\n        },\n        sexagesimalPattern: {\n            value: /^([0-9]{1,3})°\\s*([0-9]{1,3}(?:\\.(?:[0-9]{1,2}))?)'\\s*(([0-9]{1,3}(\\.([0-9]{1,4}))?)\"\\s*)?([NEOSW]?)$/\n        },\n        measures: {\n            value: Object.create(Object.prototype, {\n                \"m\" : {value: 1},\n                \"km\": {value: 0.001},\n                \"cm\": {value: 100},\n                \"mm\": {value: 1000},\n                \"mi\": {value: (1 / 1609.344)},\n                \"sm\": {value: (1 / 1852.216)},\n                \"ft\": {value: (100 / 30.48)},\n                \"in\": {value: (100 / 2.54)},\n                \"yd\": {value: (1 / 0.9144)}\n            })\n        },\n        prototype: {\n            value: Geolib.prototype\n        },\n        extend: {\n            value: function(methods, overwrite) {\n                for(var prop in methods) {\n                    if(typeof geolib.prototype[prop] === 'undefined' || overwrite === true) {\n                        if(typeof methods[prop] === 'function' && typeof methods[prop].bind === 'function') {\n                            geolib.prototype[prop] = methods[prop].bind(geolib);\n                        } else {\n                            geolib.prototype[prop] = methods[prop];\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    if (typeof(Number.prototype.toRad) === 'undefined') {\n        Number.prototype.toRad = function() {\n            return this * Geolib.TO_RAD;\n        };\n    }\n\n    if (typeof(Number.prototype.toDeg) === 'undefined') {\n        Number.prototype.toDeg = function() {\n            return this * Geolib.TO_DEG;\n        };\n    }\n\n    // Here comes the magic\n    geolib.extend({\n\n        decimal: {},\n\n        sexagesimal: {},\n\n        distance: null,\n\n        getKeys: function(point) {\n\n            // GeoJSON Array [longitude, latitude(, elevation)]\n            if(Object.prototype.toString.call(point) == '[object Array]') {\n\n                return {\n                    longitude: point.length >= 1 ? 0 : undefined,\n                    latitude: point.length >= 2 ? 1 : undefined,\n                    elevation: point.length >= 3 ? 2 : undefined\n                };\n\n            }\n\n            var getKey = function(possibleValues) {\n\n                var key;\n\n                possibleValues.every(function(val) {\n                    // TODO: check if point is an object\n                    if(typeof point != 'object') {\n                        return true;\n                    }\n                    return point.hasOwnProperty(val) ? (function() { key = val; return false; }()) : true;\n                });\n\n                return key;\n\n            };\n\n            var longitude = getKey(['lng', 'lon', 'longitude']);\n            var latitude = getKey(['lat', 'latitude']);\n            var elevation = getKey(['alt', 'altitude', 'elevation', 'elev']);\n\n            // return undefined if not at least one valid property was found\n            if(typeof latitude == 'undefined' &&\n                typeof longitude == 'undefined' &&\n                typeof elevation == 'undefined') {\n                return undefined;\n            }\n\n            return {\n                latitude: latitude,\n                longitude: longitude,\n                elevation: elevation\n            };\n\n        },\n\n        // returns latitude of a given point, converted to decimal\n        // set raw to true to avoid conversion\n        getLat: function(point, raw) {\n            return raw === true ? point[this.getKeys(point).latitude] : this.useDecimal(point[this.getKeys(point).latitude]);\n        },\n\n        // Alias for getLat\n        latitude: function(point) {\n            return this.getLat.call(this, point);\n        },\n\n        // returns longitude of a given point, converted to decimal\n        // set raw to true to avoid conversion\n        getLon: function(point, raw) {\n            return raw === true ? point[this.getKeys(point).longitude] : this.useDecimal(point[this.getKeys(point).longitude]);\n        },\n\n        // Alias for getLon\n        longitude: function(point) {\n            return this.getLon.call(this, point);\n        },\n\n        getElev: function(point) {\n            return point[this.getKeys(point).elevation];\n        },\n\n        // Alias for getElev\n        elevation: function(point) {\n            return this.getElev.call(this, point);\n        },\n\n        coords: function(point, raw) {\n\n            var retval = {\n                latitude: raw === true ? point[this.getKeys(point).latitude] : this.useDecimal(point[this.getKeys(point).latitude]),\n                longitude: raw === true ? point[this.getKeys(point).longitude] : this.useDecimal(point[this.getKeys(point).longitude])\n            };\n\n            var elev = point[this.getKeys(point).elevation];\n\n            if(typeof elev !== 'undefined') {\n                retval['elevation'] = elev;\n            }\n\n            return retval;\n\n        },\n\n        // Alias for coords\n        ll: function(point, raw) {\n            return this.coords.call(this, point, raw);\n        },\n\n\n        // checks if a variable contains a valid latlong object\n        validate: function(point) {\n\n            var keys = this.getKeys(point);\n\n            if(typeof keys === 'undefined' || typeof keys.latitude === 'undefined' || keys.longitude === 'undefined') {\n                return false;\n            }\n\n            var lat = point[keys.latitude];\n            var lng = point[keys.longitude];\n\n            if(typeof lat === 'undefined' || !this.isDecimal(lat) && !this.isSexagesimal(lat)) {\n                return false;\n            }\n\n            if(typeof lng === 'undefined' || !this.isDecimal(lng) && !this.isSexagesimal(lng)) {\n                return false;\n            }\n\n            lat = this.useDecimal(lat);\n            lng = this.useDecimal(lng);\n\n            if(lat < this.minLat || lat > this.maxLat || lng < this.minLon || lng > this.maxLon) {\n                return false;\n            }\n\n            return true;\n\n        },\n\n        /**\n        * Calculates geodetic distance between two points specified by latitude/longitude using\n        * Vincenty inverse formula for ellipsoids\n        * Vincenty Inverse Solution of Geodesics on the Ellipsoid (c) Chris Veness 2002-2010\n        * (Licensed under CC BY 3.0)\n        *\n        * @param    object    Start position {latitude: 123, longitude: 123}\n        * @param    object    End position {latitude: 123, longitude: 123}\n        * @param    integer   Accuracy (in meters)\n        * @param    integer   Precision (in decimal cases)\n        * @return   integer   Distance (in meters)\n        */\n        getDistance: function(start, end, accuracy, precision) {\n\n            accuracy = Math.floor(accuracy) || 1;\n            precision = Math.floor(precision) || 0;\n\n            var s = this.coords(start);\n            var e = this.coords(end);\n\n            var a = 6378137, b = 6356752.314245,  f = 1/298.257223563;  // WGS-84 ellipsoid params\n            var L = (e['longitude']-s['longitude']).toRad();\n\n            var cosSigma, sigma, sinAlpha, cosSqAlpha, cos2SigmaM, sinSigma;\n\n            var U1 = Math.atan((1-f) * Math.tan(parseFloat(s['latitude']).toRad()));\n            var U2 = Math.atan((1-f) * Math.tan(parseFloat(e['latitude']).toRad()));\n            var sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);\n            var sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);\n\n            var lambda = L, lambdaP, iterLimit = 100;\n            do {\n                var sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);\n                sinSigma = (\n                    Math.sqrt(\n                        (\n                            cosU2 * sinLambda\n                        ) * (\n                            cosU2 * sinLambda\n                        ) + (\n                            cosU1 * sinU2 - sinU1 * cosU2 * cosLambda\n                        ) * (\n                            cosU1 * sinU2 - sinU1 * cosU2 * cosLambda\n                        )\n                    )\n                );\n                if (sinSigma === 0) {\n                    return geolib.distance = 0;  // co-incident points\n                }\n\n                cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;\n                sigma = Math.atan2(sinSigma, cosSigma);\n                sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;\n                cosSqAlpha = 1 - sinAlpha * sinAlpha;\n                cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;\n\n                if (isNaN(cos2SigmaM)) {\n                    cos2SigmaM = 0;  // equatorial line: cosSqAlpha=0 (§6)\n                }\n                var C = (\n                    f / 16 * cosSqAlpha * (\n                        4 + f * (\n                            4 - 3 * cosSqAlpha\n                        )\n                    )\n                );\n                lambdaP = lambda;\n                lambda = (\n                    L + (\n                        1 - C\n                    ) * f * sinAlpha * (\n                        sigma + C * sinSigma * (\n                            cos2SigmaM + C * cosSigma * (\n                                -1 + 2 * cos2SigmaM * cos2SigmaM\n                            )\n                        )\n                    )\n                );\n\n            } while (Math.abs(lambda-lambdaP) > 1e-12 && --iterLimit>0);\n\n            if (iterLimit === 0) {\n                return NaN;  // formula failed to converge\n            }\n\n            var uSq = (\n                cosSqAlpha * (\n                    a * a - b * b\n                ) / (\n                    b*b\n                )\n            );\n\n            var A = (\n                1 + uSq / 16384 * (\n                    4096 + uSq * (\n                        -768 + uSq * (\n                            320 - 175 * uSq\n                        )\n                    )\n                )\n            );\n\n            var B = (\n                uSq / 1024 * (\n                    256 + uSq * (\n                        -128 + uSq * (\n                            74-47 * uSq\n                        )\n                    )\n                )\n            );\n\n            var deltaSigma = (\n                B * sinSigma * (\n                    cos2SigmaM + B / 4 * (\n                        cosSigma * (\n                            -1 + 2 * cos2SigmaM * cos2SigmaM\n                        ) -B / 6 * cos2SigmaM * (\n                            -3 + 4 * sinSigma * sinSigma\n                        ) * (\n                            -3 + 4 * cos2SigmaM * cos2SigmaM\n                        )\n                    )\n                )\n            );\n\n            var distance = b * A * (sigma - deltaSigma);\n\n            distance = distance.toFixed(precision); // round to 1mm precision\n\n            //if (start.hasOwnProperty(elevation) && end.hasOwnProperty(elevation)) {\n            if (typeof this.elevation(start) !== 'undefined' && typeof this.elevation(end) !== 'undefined') {\n                var climb = Math.abs(this.elevation(start) - this.elevation(end));\n                distance = Math.sqrt(distance * distance + climb * climb);\n            }\n\n            return this.distance = Math.round(distance * Math.pow(10, precision) / accuracy) * accuracy / Math.pow(10, precision);\n\n            /*\n            // note: to return initial/final bearings in addition to distance, use something like:\n            var fwdAz = Math.atan2(cosU2*sinLambda,  cosU1*sinU2-sinU1*cosU2*cosLambda);\n            var revAz = Math.atan2(cosU1*sinLambda, -sinU1*cosU2+cosU1*sinU2*cosLambda);\n\n            return { distance: s, initialBearing: fwdAz.toDeg(), finalBearing: revAz.toDeg() };\n            */\n\n        },\n\n\n        /**\n        * Calculates the distance between two spots.\n        * This method is more simple but also far more inaccurate\n        *\n        * @param    object    Start position {latitude: 123, longitude: 123}\n        * @param    object    End position {latitude: 123, longitude: 123}\n        * @param    integer   Accuracy (in meters)\n        * @return   integer   Distance (in meters)\n        */\n        getDistanceSimple: function(start, end, accuracy) {\n\n            accuracy = Math.floor(accuracy) || 1;\n\n            var distance =\n                Math.round(\n                    Math.acos(\n                        Math.sin(\n                            this.latitude(end).toRad()\n                        ) *\n                        Math.sin(\n                            this.latitude(start).toRad()\n                        ) +\n                        Math.cos(\n                            this.latitude(end).toRad()\n                        ) *\n                        Math.cos(\n                            this.latitude(start).toRad()\n                        ) *\n                        Math.cos(\n                            this.longitude(start).toRad() - this.longitude(end).toRad()\n                        )\n                    ) * this.radius\n                );\n\n            return geolib.distance = Math.floor(Math.round(distance/accuracy)*accuracy);\n\n        },\n\n\n    /**\n        * Calculates the center of a collection of geo coordinates\n        *\n        * @param        array       Collection of coords [{latitude: 51.510, longitude: 7.1321}, {latitude: 49.1238, longitude: \"8° 30' W\"}, ...]\n        * @return       object      {latitude: centerLat, longitude: centerLng}\n        */\n        getCenter: function(coords) {\n\n            var coordsArray = coords;\n            if(typeof coords === 'object' && !(coords instanceof Array)) {\n\n                coordsArray = [];\n\n                for(var key in coords) {\n                    coordsArray.push(\n                        this.coords(coords[key])\n                    );\n                }\n\n            }\n\n            if(!coordsArray.length) {\n                return false;\n            }\n\n            var X = 0.0;\n            var Y = 0.0;\n            var Z = 0.0;\n            var lat, lon, hyp;\n\n            coordsArray.forEach(function(coord) {\n\n                lat = this.latitude(coord).toRad();\n                lon = this.longitude(coord).toRad();\n\n                X += Math.cos(lat) * Math.cos(lon);\n                Y += Math.cos(lat) * Math.sin(lon);\n                Z += Math.sin(lat);\n\n            }, this);\n\n            var nb_coords = coordsArray.length;\n            X = X / nb_coords;\n            Y = Y / nb_coords;\n            Z = Z / nb_coords;\n\n            lon = Math.atan2(Y, X);\n            hyp = Math.sqrt(X * X + Y * Y);\n            lat = Math.atan2(Z, hyp);\n\n            return {\n                latitude: (lat * Geolib.TO_DEG).toFixed(6),\n                longitude: (lon * Geolib.TO_DEG).toFixed(6)\n            };\n\n        },\n\n\n        /**\n        * Gets the max and min, latitude, longitude, and elevation (if provided).\n        * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return   object      {maxLat: maxLat,\n        *                     minLat: minLat\n        *                     maxLng: maxLng,\n        *                     minLng: minLng,\n        *                     maxElev: maxElev,\n        *                     minElev: minElev}\n        */\n        getBounds: function(coords) {\n\n            if (!coords.length) {\n                return false;\n            }\n\n            var useElevation = this.elevation(coords[0]);\n\n            var stats = {\n                maxLat: -Infinity,\n                minLat: Infinity,\n                maxLng: -Infinity,\n                minLng: Infinity\n            };\n\n            if (typeof useElevation != 'undefined') {\n                stats.maxElev = 0;\n                stats.minElev = Infinity;\n            }\n\n            for (var i = 0, l = coords.length; i < l; ++i) {\n\n                stats.maxLat = Math.max(this.latitude(coords[i]), stats.maxLat);\n                stats.minLat = Math.min(this.latitude(coords[i]), stats.minLat);\n                stats.maxLng = Math.max(this.longitude(coords[i]), stats.maxLng);\n                stats.minLng = Math.min(this.longitude(coords[i]), stats.minLng);\n\n                if (useElevation) {\n                    stats.maxElev = Math.max(this.elevation(coords[i]), stats.maxElev);\n                    stats.minElev = Math.min(this.elevation(coords[i]), stats.minElev);\n                }\n\n            }\n\n            return stats;\n\n        },\n\n        /**\n        * Calculates the center of the bounds of geo coordinates.\n        *\n        * On polygons like political borders (eg. states)\n        * this may gives a closer result to human expectation, than `getCenter`,\n        * because that function can be disturbed by uneven distribution of\n        * point in different sides.\n        * Imagine the US state Oklahoma: `getCenter` on that gives a southern\n        * point, because the southern border contains a lot more nodes,\n        * than the others.\n        *\n        * @param        array       Collection of coords [{latitude: 51.510, longitude: 7.1321}, {latitude: 49.1238, longitude: \"8° 30' W\"}, ...]\n        * @return       object      {latitude: centerLat, longitude: centerLng}\n        */\n        getCenterOfBounds: function(coords) {\n            var b = this.getBounds(coords);\n            var latitude = b.minLat + ((b.maxLat - b.minLat) / 2);\n            var longitude = b.minLng + ((b.maxLng - b.minLng) / 2);\n            return {\n                latitude: parseFloat(latitude.toFixed(6)),\n                longitude: parseFloat(longitude.toFixed(6))\n            };\n        },\n\n\n        /**\n        * Computes the bounding coordinates of all points on the surface\n        * of the earth less than or equal to the specified great circle\n        * distance.\n        *\n        * @param object Point position {latitude: 123, longitude: 123}\n        * @param number Distance (in meters).\n        * @return array Collection of two points defining the SW and NE corners.\n        */\n        getBoundsOfDistance: function(point, distance) {\n\n            var latitude = this.latitude(point);\n            var longitude = this.longitude(point);\n\n            var radLat = latitude.toRad();\n            var radLon = longitude.toRad();\n\n            var radDist = distance / this.radius;\n            var minLat = radLat - radDist;\n            var maxLat = radLat + radDist;\n\n            var MAX_LAT_RAD = this.maxLat.toRad();\n            var MIN_LAT_RAD = this.minLat.toRad();\n            var MAX_LON_RAD = this.maxLon.toRad();\n            var MIN_LON_RAD = this.minLon.toRad();\n\n            var minLon;\n            var maxLon;\n\n            if (minLat > MIN_LAT_RAD && maxLat < MAX_LAT_RAD) {\n\n                var deltaLon = Math.asin(Math.sin(radDist) / Math.cos(radLat));\n                minLon = radLon - deltaLon;\n\n                if (minLon < MIN_LON_RAD) {\n                    minLon += Geolib.PI_X2;\n                }\n\n                maxLon = radLon + deltaLon;\n\n                if (maxLon > MAX_LON_RAD) {\n                    maxLon -= Geolib.PI_X2;\n                }\n\n            } else {\n                // A pole is within the distance.\n                minLat = Math.max(minLat, MIN_LAT_RAD);\n                maxLat = Math.min(maxLat, MAX_LAT_RAD);\n                minLon = MIN_LON_RAD;\n                maxLon = MAX_LON_RAD;\n            }\n\n            return [\n                // Southwest\n                {\n                    latitude: minLat.toDeg(),\n                    longitude: minLon.toDeg()\n                },\n                // Northeast\n                {\n                    latitude: maxLat.toDeg(),\n                    longitude: maxLon.toDeg()\n                }\n            ];\n\n        },\n\n\n        /**\n        * Checks whether a point is inside of a polygon or not.\n        * Note that the polygon coords must be in correct order!\n        *\n        * @param        object      coordinate to check e.g. {latitude: 51.5023, longitude: 7.3815}\n        * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       bool        true if the coordinate is inside the given polygon\n        */\n        isPointInside: function(latlng, coords) {\n\n            for(var c = false, i = -1, l = coords.length, j = l - 1; ++i < l; j = i) {\n\n                if(\n                    (\n                        (this.longitude(coords[i]) <= this.longitude(latlng) && this.longitude(latlng) < this.longitude(coords[j])) ||\n                        (this.longitude(coords[j]) <= this.longitude(latlng) && this.longitude(latlng) < this.longitude(coords[i]))\n                    ) &&\n                    (\n                        this.latitude(latlng) < (this.latitude(coords[j]) - this.latitude(coords[i])) *\n                        (this.longitude(latlng) - this.longitude(coords[i])) /\n                        (this.longitude(coords[j]) - this.longitude(coords[i])) +\n                        this.latitude(coords[i])\n                    )\n                ) {\n                    c = !c;\n                }\n\n            }\n\n            return c;\n\n        },\n\n\n       /**\n        * Pre calculate the polygon coords, to speed up the point inside check.\n        * Use this function before calling isPointInsideWithPreparedPolygon()\n        * @see          Algorythm from http://alienryderflex.com/polygon/\n        * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        */\n        preparePolygonForIsPointInsideOptimized: function(coords) {\n\n            for(var i = 0, j = coords.length-1; i < coords.length; i++) {\n\n            if(this.longitude(coords[j]) === this.longitude(coords[i])) {\n\n                    coords[i].constant = this.latitude(coords[i]);\n                    coords[i].multiple = 0;\n\n                } else {\n\n                    coords[i].constant = this.latitude(coords[i]) - (\n                        this.longitude(coords[i]) * this.latitude(coords[j])\n                    ) / (\n                        this.longitude(coords[j]) - this.longitude(coords[i])\n                    ) + (\n                        this.longitude(coords[i])*this.latitude(coords[i])\n                    ) / (\n                        this.longitude(coords[j])-this.longitude(coords[i])\n                    );\n\n                    coords[i].multiple = (\n                        this.latitude(coords[j])-this.latitude(coords[i])\n                    ) / (\n                        this.longitude(coords[j])-this.longitude(coords[i])\n                    );\n\n                }\n\n                j=i;\n\n            }\n\n        },\n\n      /**\n       * Checks whether a point is inside of a polygon or not.\n       * \"This is useful if you have many points that need to be tested against the same (static) polygon.\"\n       * Please call the function preparePolygonForIsPointInsideOptimized() with the same coords object before using this function.\n       * Note that the polygon coords must be in correct order!\n       *\n       * @see          Algorythm from http://alienryderflex.com/polygon/\n       *\n       * @param     object      coordinate to check e.g. {latitude: 51.5023, longitude: 7.3815}\n       * @param     array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n       * @return        bool        true if the coordinate is inside the given polygon\n       */\n        isPointInsideWithPreparedPolygon: function(point, coords) {\n\n            var flgPointInside = false,\n            y = this.longitude(point),\n            x = this.latitude(point);\n\n            for(var i = 0, j = coords.length-1; i < coords.length; i++) {\n\n                if ((this.longitude(coords[i]) < y && this.longitude(coords[j]) >=y ||\n                    this.longitude(coords[j]) < y && this.longitude(coords[i]) >= y)) {\n\n                    flgPointInside^=(y*coords[i].multiple+coords[i].constant < x);\n\n                }\n\n                j=i;\n\n            }\n\n            return flgPointInside;\n\n        },\n\n\n        /**\n        * Shortcut for geolib.isPointInside()\n        */\n        isInside: function() {\n            return this.isPointInside.apply(this, arguments);\n        },\n\n\n        /**\n        * Checks whether a point is inside of a circle or not.\n        *\n        * @param        object      coordinate to check (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      coordinate of the circle's center (e.g. {latitude: 51.4812, longitude: 7.4025})\n        * @param        integer     maximum radius in meters\n        * @return       bool        true if the coordinate is within the given radius\n        */\n        isPointInCircle: function(latlng, center, radius) {\n            return this.getDistance(latlng, center) < radius;\n        },\n\n\n        /**\n        * Shortcut for geolib.isPointInCircle()\n        */\n        withinRadius: function() {\n            return this.isPointInCircle.apply(this, arguments);\n        },\n\n\n        /**\n        * Gets rhumb line bearing of two points. Find out about the difference between rhumb line and\n        * great circle bearing on Wikipedia. It's quite complicated. Rhumb line should be fine in most cases:\n        *\n        * http://en.wikipedia.org/wiki/Rhumb_line#General_and_mathematical_description\n        *\n        * Function heavily based on Doug Vanderweide's great PHP version (licensed under GPL 3.0)\n        * http://www.dougv.com/2009/07/13/calculating-the-bearing-and-compass-rose-direction-between-two-latitude-longitude-coordinates-in-php/\n        *\n        * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      destination coordinate\n        * @return       integer     calculated bearing\n        */\n        getRhumbLineBearing: function(originLL, destLL) {\n\n            // difference of longitude coords\n            var diffLon = this.longitude(destLL).toRad() - this.longitude(originLL).toRad();\n\n            // difference latitude coords phi\n            var diffPhi = Math.log(\n                Math.tan(\n                    this.latitude(destLL).toRad() / 2 + Geolib.PI_DIV4\n                ) /\n                Math.tan(\n                    this.latitude(originLL).toRad() / 2 + Geolib.PI_DIV4\n                )\n            );\n\n            // recalculate diffLon if it is greater than pi\n            if(Math.abs(diffLon) > Math.PI) {\n                if(diffLon > 0) {\n                    diffLon = (Geolib.PI_X2 - diffLon) * -1;\n                }\n                else {\n                    diffLon = Geolib.PI_X2 + diffLon;\n                }\n            }\n\n            //return the angle, normalized\n            return (Math.atan2(diffLon, diffPhi).toDeg() + 360) % 360;\n\n        },\n\n\n        /**\n        * Gets great circle bearing of two points. See description of getRhumbLineBearing for more information\n        *\n        * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      destination coordinate\n        * @return       integer     calculated bearing\n        */\n        getBearing: function(originLL, destLL) {\n\n            destLL['latitude'] = this.latitude(destLL);\n            destLL['longitude'] = this.longitude(destLL);\n            originLL['latitude'] = this.latitude(originLL);\n            originLL['longitude'] = this.longitude(originLL);\n\n            var bearing = (\n                (\n                    Math.atan2(\n                        Math.sin(\n                            destLL['longitude'].toRad() -\n                            originLL['longitude'].toRad()\n                        ) *\n                        Math.cos(\n                            destLL['latitude'].toRad()\n                        ),\n                        Math.cos(\n                            originLL['latitude'].toRad()\n                        ) *\n                        Math.sin(\n                            destLL['latitude'].toRad()\n                        ) -\n                        Math.sin(\n                            originLL['latitude'].toRad()\n                        ) *\n                        Math.cos(\n                            destLL['latitude'].toRad()\n                        ) *\n                        Math.cos(\n                            destLL['longitude'].toRad() - originLL['longitude'].toRad()\n                        )\n                    )\n                ).toDeg() + 360\n            ) % 360;\n\n            return bearing;\n\n        },\n\n\n        /**\n        * Gets the compass direction from an origin coordinate to a destination coordinate.\n        *\n        * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      destination coordinate\n        * @param        string      Bearing mode. Can be either circle or rhumbline\n        * @return       object      Returns an object with a rough (NESW) and an exact direction (NNE, NE, ENE, E, ESE, etc).\n        */\n        getCompassDirection: function(originLL, destLL, bearingMode) {\n\n            var direction;\n            var bearing;\n\n            if(bearingMode == 'circle') {\n                // use great circle bearing\n                bearing = this.getBearing(originLL, destLL);\n            } else {\n                // default is rhumb line bearing\n                bearing = this.getRhumbLineBearing(originLL, destLL);\n            }\n\n            switch(Math.round(bearing/22.5)) {\n                case 1:\n                    direction = {exact: \"NNE\", rough: \"N\"};\n                    break;\n                case 2:\n                    direction = {exact: \"NE\", rough: \"N\"};\n                    break;\n                case 3:\n                    direction = {exact: \"ENE\", rough: \"E\"};\n                    break;\n                case 4:\n                    direction = {exact: \"E\", rough: \"E\"};\n                    break;\n                case 5:\n                    direction = {exact: \"ESE\", rough: \"E\"};\n                    break;\n                case 6:\n                    direction = {exact: \"SE\", rough: \"E\"};\n                    break;\n                case 7:\n                    direction = {exact: \"SSE\", rough: \"S\"};\n                    break;\n                case 8:\n                    direction = {exact: \"S\", rough: \"S\"};\n                    break;\n                case 9:\n                    direction = {exact: \"SSW\", rough: \"S\"};\n                    break;\n                case 10:\n                    direction = {exact: \"SW\", rough: \"S\"};\n                    break;\n                case 11:\n                    direction = {exact: \"WSW\", rough: \"W\"};\n                    break;\n                case 12:\n                    direction = {exact: \"W\", rough: \"W\"};\n                    break;\n                case 13:\n                    direction = {exact: \"WNW\", rough: \"W\"};\n                    break;\n                case 14:\n                    direction = {exact: \"NW\", rough: \"W\"};\n                    break;\n                case 15:\n                    direction = {exact: \"NNW\", rough: \"N\"};\n                    break;\n                default:\n                    direction = {exact: \"N\", rough: \"N\"};\n            }\n\n            direction['bearing'] = bearing;\n            return direction;\n\n        },\n\n\n        /**\n        * Shortcut for getCompassDirection\n        */\n        getDirection: function(originLL, destLL, bearingMode) {\n            return this.getCompassDirection.apply(this, arguments);\n        },\n\n\n        /**\n        * Sorts an array of coords by distance from a reference coordinate\n        *\n        * @param        object      reference coordinate e.g. {latitude: 51.5023, longitude: 7.3815}\n        * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       array       ordered array\n        */\n        orderByDistance: function(latlng, coords) {\n\n            var coordsArray = [];\n\n            for(var coord in coords) {\n\n                var distance = this.getDistance(latlng, coords[coord]);\n                var augmentedCoord = Object.create(coords[coord]);\n                augmentedCoord.distance = distance;\n                augmentedCoord.key = coord;\n\n                coordsArray.push(augmentedCoord);\n\n            }\n\n            return coordsArray.sort(function(a, b) {\n                return a.distance - b.distance;\n            });\n\n        },\n\n        /**\n        * Check if a point lies in line created by two other points\n        *\n        * @param    object    Point to check: {latitude: 123, longitude: 123}\n        * @param    object    Start of line {latitude: 123, longitude: 123}\n        * @param    object    End of line {latitude: 123, longitude: 123}\n        * @return   boolean\n        */\n        isPointInLine: function(point, start, end) {\n\n            return (this.getDistance(start, point, 1, 3)+this.getDistance(point, end, 1, 3)).toFixed(3)==this.getDistance(start, end, 1, 3);\n        },\n\n                /**\n        * Check if a point lies within a given distance from a line created by two other points\n        *\n        * @param    object    Point to check: {latitude: 123, longitude: 123}\n        * @param    object    Start of line {latitude: 123, longitude: 123}\n        * @param    object    End of line {latitude: 123, longitude: 123}\n        * @pararm   float     maximum distance from line\n        * @return   boolean\n        */\n        isPointNearLine: function(point, start, end, distance) {\n            return this.getDistanceFromLine(point, start, end) < distance;\n        },\n\n                     /**\n        * return the minimum distance from a point to a line\n        *\n        * @param    object    Point away from line\n        * @param    object    Start of line {latitude: 123, longitude: 123}\n        * @param    object    End of line {latitude: 123, longitude: 123}\n        * @return   float     distance from point to line\n        */\n        getDistanceFromLine: function(point, start, end) {\n            var d1 = this.getDistance(start, point, 1, 3);\n            var d2 = this.getDistance(point, end, 1, 3);\n            var d3 = this.getDistance(start, end, 1, 3);\n            var distance = 0;\n\n            // alpha is the angle between the line from start to point, and from start to end //\n            var alpha = Math.acos((d1*d1 + d3*d3 - d2*d2)/(2*d1*d3));\n            // beta is the angle between the line from end to point and from end to start //\n            var beta = Math.acos((d2*d2 + d3*d3 - d1*d1)/(2*d2*d3));\n\n            // if the angle is greater than 90 degrees, then the minimum distance is the\n            // line from the start to the point //\n            if(alpha>Math.PI/2) {\n                distance = d1;\n            }\n            // same for the beta //\n            else if(beta > Math.PI/2) {\n                distance = d2;\n            }\n            // otherwise the minimum distance is achieved through a line perpendular to the start-end line,\n            // which goes from the start-end line to the point //\n            else {\n                distance = Math.sin(alpha) * d1;\n            }\n\n            return distance;\n        },\n\n        /**\n        * Finds the nearest coordinate to a reference coordinate\n        *\n        * @param        object      reference coordinate e.g. {latitude: 51.5023, longitude: 7.3815}\n        * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       array       ordered array\n        */\n        findNearest: function(latlng, coords, offset, limit) {\n\n            offset = offset || 0;\n            limit = limit || 1;\n            var ordered = this.orderByDistance(latlng, coords);\n\n            if(limit === 1) {\n                return ordered[offset];\n            } else {\n                return ordered.splice(offset, limit);\n            }\n\n        },\n\n\n        /**\n        * Calculates the length of a given path\n        *\n        * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       integer     length of the path (in meters)\n        */\n        getPathLength: function(coords) {\n\n            var dist = 0;\n            var last;\n\n            for (var i = 0, l = coords.length; i < l; ++i) {\n                if(last) {\n                    //console.log(coords[i], last, this.getDistance(coords[i], last));\n                    dist += this.getDistance(this.coords(coords[i]), last);\n                }\n                last = this.coords(coords[i]);\n            }\n\n            return dist;\n\n        },\n\n\n        /**\n        * Calculates the speed between to points within a given time span.\n        *\n        * @param        object      coords with javascript timestamp {latitude: 51.5143, longitude: 7.4138, time: 1360231200880}\n        * @param        object      coords with javascript timestamp {latitude: 51.5502, longitude: 7.4323, time: 1360245600460}\n        * @param        object      options (currently \"unit\" is the only option. Default: km(h));\n        * @return       float       speed in unit per hour\n        */\n        getSpeed: function(start, end, options) {\n\n            var unit = options && options.unit || 'km';\n\n            if(unit == 'mph') {\n                unit = 'mi';\n            } else if(unit == 'kmh') {\n                unit = 'km';\n            }\n\n            var distance = geolib.getDistance(start, end);\n            var time = ((end.time*1)/1000) - ((start.time*1)/1000);\n            var mPerHr = (distance/time)*3600;\n            var speed = Math.round(mPerHr * this.measures[unit] * 10000)/10000;\n            return speed;\n\n        },\n\n\n        /**\n         * Computes the destination point given an initial point, a distance\n         * and a bearing\n         *\n         * see http://www.movable-type.co.uk/scripts/latlong.html for the original code\n         *\n         * @param        object     start coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n         * @param        float      longitude of the inital point in degree\n         * @param        float      distance to go from the inital point in meter\n         * @param        float      bearing in degree of the direction to go, e.g. 0 = north, 180 = south\n         * @param        float      optional (in meter), defaults to mean radius of the earth\n         * @return       object     {latitude: destLat (in degree), longitude: destLng (in degree)}\n         */\n        computeDestinationPoint: function(start, distance, bearing, radius) {\n\n            var lat = this.latitude(start);\n            var lng = this.longitude(start);\n\n            radius = (typeof radius === 'undefined') ? this.radius : Number(radius);\n\n            var δ = Number(distance) / radius; // angular distance in radians\n            var θ = Number(bearing).toRad();\n\n            var φ1 = Number(lat).toRad();\n            var λ1 = Number(lng).toRad();\n\n            var φ2 = Math.asin( Math.sin(φ1)*Math.cos(δ) +\n                Math.cos(φ1)*Math.sin(δ)*Math.cos(θ) );\n            var λ2 = λ1 + Math.atan2(Math.sin(θ)*Math.sin(δ)*Math.cos(φ1),\n                    Math.cos(δ)-Math.sin(φ1)*Math.sin(φ2));\n            λ2 = (λ2+3*Math.PI) % (2*Math.PI) - Math.PI; // normalise to -180..+180°\n\n            return {\n                latitude: φ2.toDeg(),\n                longitude: λ2.toDeg()\n            };\n\n        },\n\n\n        /**\n        * Converts a distance from meters to km, mm, cm, mi, ft, in or yd\n        *\n        * @param        string      Format to be converted in\n        * @param        float       Distance in meters\n        * @param        float       Decimal places for rounding (default: 4)\n        * @return       float       Converted distance\n        */\n        convertUnit: function(unit, distance, round) {\n\n            if(distance === 0) {\n\n                return 0;\n\n            } else if(typeof distance === 'undefined') {\n\n                if(this.distance === null) {\n                    throw new Error('No distance was given');\n                } else if(this.distance === 0) {\n                    return 0;\n                } else {\n                    distance = this.distance;\n                }\n\n            }\n\n            unit = unit || 'm';\n            round = (null == round ? 4 : round);\n\n            if(typeof this.measures[unit] !== 'undefined') {\n                return this.round(distance * this.measures[unit], round);\n            } else {\n                throw new Error('Unknown unit for conversion.');\n            }\n\n        },\n\n\n        /**\n        * Checks if a value is in decimal format or, if neccessary, converts to decimal\n        *\n        * @param        mixed       Value(s) to be checked/converted (array of latlng objects, latlng object, sexagesimal string, float)\n        * @return       float       Input data in decimal format\n        */\n        useDecimal: function(value) {\n\n            if(Object.prototype.toString.call(value) === '[object Array]') {\n\n                var geolib = this;\n\n                value = value.map(function(val) {\n\n                    //if(!isNaN(parseFloat(val))) {\n                    if(geolib.isDecimal(val)) {\n\n                        return geolib.useDecimal(val);\n\n                    } else if(typeof val == 'object') {\n\n                        if(geolib.validate(val)) {\n\n                            return geolib.coords(val);\n\n                        } else {\n\n                            for(var prop in val) {\n                                val[prop] = geolib.useDecimal(val[prop]);\n                            }\n\n                            return val;\n\n                        }\n\n                    } else if(geolib.isSexagesimal(val)) {\n\n                        return geolib.sexagesimal2decimal(val);\n\n                    } else {\n\n                        return val;\n\n                    }\n\n                });\n\n                return value;\n\n            } else if(typeof value === 'object' && this.validate(value)) {\n\n                return this.coords(value);\n\n            } else if(typeof value === 'object') {\n\n                for(var prop in value) {\n                    value[prop] = this.useDecimal(value[prop]);\n                }\n\n                return value;\n\n            }\n\n\n            if (this.isDecimal(value)) {\n\n                return parseFloat(value);\n\n            } else if(this.isSexagesimal(value) === true) {\n\n                return parseFloat(this.sexagesimal2decimal(value));\n\n            }\n\n            throw new Error('Unknown format.');\n\n        },\n\n        /**\n        * Converts a decimal coordinate value to sexagesimal format\n        *\n        * @param        float       decimal\n        * @return       string      Sexagesimal value (XX° YY' ZZ\")\n        */\n        decimal2sexagesimal: function(dec) {\n\n            if (dec in this.sexagesimal) {\n                return this.sexagesimal[dec];\n            }\n\n            var tmp = dec.toString().split('.');\n\n            var deg = Math.abs(tmp[0]);\n            var min = ('0.' + (tmp[1] || 0))*60;\n            var sec = min.toString().split('.');\n\n            min = Math.floor(min);\n            sec = (('0.' + (sec[1] || 0)) * 60).toFixed(2);\n\n            this.sexagesimal[dec] = (deg + '° ' + min + \"' \" + sec + '\"');\n\n            return this.sexagesimal[dec];\n\n        },\n\n\n        /**\n        * Converts a sexagesimal coordinate to decimal format\n        *\n        * @param        float       Sexagesimal coordinate\n        * @return       string      Decimal value (XX.XXXXXXXX)\n        */\n        sexagesimal2decimal: function(sexagesimal) {\n\n            if (sexagesimal in this.decimal) {\n                return this.decimal[sexagesimal];\n            }\n\n            var regEx = new RegExp(this.sexagesimalPattern);\n            var data = regEx.exec(sexagesimal);\n            var min = 0, sec = 0;\n\n            if(data) {\n                min = parseFloat(data[2]/60);\n                sec = parseFloat(data[4]/3600) || 0;\n            }\n\n            var dec = ((parseFloat(data[1]) + min + sec)).toFixed(8);\n            //var   dec = ((parseFloat(data[1]) + min + sec));\n\n                // South and West are negative decimals\n                dec = (data[7] == 'S' || data[7] == 'W') ? parseFloat(-dec) : parseFloat(dec);\n                //dec = (data[7] == 'S' || data[7] == 'W') ? -dec : dec;\n\n            this.decimal[sexagesimal] = dec;\n\n            return dec;\n\n        },\n\n\n        /**\n        * Checks if a value is in decimal format\n        *\n        * @param        string      Value to be checked\n        * @return       bool        True if in sexagesimal format\n        */\n        isDecimal: function(value) {\n\n            value = value.toString().replace(/\\s*/, '');\n\n            // looks silly but works as expected\n            // checks if value is in decimal format\n            return (!isNaN(parseFloat(value)) && parseFloat(value) == value);\n\n        },\n\n\n        /**\n        * Checks if a value is in sexagesimal format\n        *\n        * @param        string      Value to be checked\n        * @return       bool        True if in sexagesimal format\n        */\n        isSexagesimal: function(value) {\n\n            value = value.toString().replace(/\\s*/, '');\n\n            return this.sexagesimalPattern.test(value);\n\n        },\n\n        round: function(value, n) {\n            var decPlace = Math.pow(10, n);\n            return Math.round(value * decPlace)/decPlace;\n        }\n\n    });\n\n    // Node module\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\n        module.exports = geolib;\n\n        // react native\n        if (typeof global === 'object') {\n          global.geolib = geolib;\n        }\n\n    // AMD module\n    } else if (true) {\n\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return geolib;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n    // we're in a browser\n    } else {\n\n        global.geolib = geolib;\n\n    }\n\n}(this));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

eval("(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&\"object\"==typeof b&&\"function\"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}\nfunction r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?\"function\"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&(\"function\"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};\nfunction w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype[\"catch\"]=n.prototype.g);}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb21pcy9wcm9taXNlLmpzPzNhNTUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7J3VzZSBzdHJpY3QnO3ZhciBmLGc9W107ZnVuY3Rpb24gbChhKXtnLnB1c2goYSk7MT09Zy5sZW5ndGgmJmYoKX1mdW5jdGlvbiBtKCl7Zm9yKDtnLmxlbmd0aDspZ1swXSgpLGcuc2hpZnQoKX1mPWZ1bmN0aW9uKCl7c2V0VGltZW91dChtKX07ZnVuY3Rpb24gbihhKXt0aGlzLmE9cDt0aGlzLmI9dm9pZCAwO3RoaXMuZj1bXTt2YXIgYj10aGlzO3RyeXthKGZ1bmN0aW9uKGEpe3EoYixhKX0sZnVuY3Rpb24oYSl7cihiLGEpfSl9Y2F0Y2goYyl7cihiLGMpfX12YXIgcD0yO2Z1bmN0aW9uIHQoYSl7cmV0dXJuIG5ldyBuKGZ1bmN0aW9uKGIsYyl7YyhhKX0pfWZ1bmN0aW9uIHUoYSl7cmV0dXJuIG5ldyBuKGZ1bmN0aW9uKGIpe2IoYSl9KX1mdW5jdGlvbiBxKGEsYil7aWYoYS5hPT1wKXtpZihiPT1hKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIGM9ITE7dHJ5e3ZhciBkPWImJmIudGhlbjtpZihudWxsIT1iJiZcIm9iamVjdFwiPT10eXBlb2YgYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZCl7ZC5jYWxsKGIsZnVuY3Rpb24oYil7Y3x8cShhLGIpO2M9ITB9LGZ1bmN0aW9uKGIpe2N8fHIoYSxiKTtjPSEwfSk7cmV0dXJufX1jYXRjaChlKXtjfHxyKGEsZSk7cmV0dXJufWEuYT0wO2EuYj1iO3YoYSl9fVxuZnVuY3Rpb24gcihhLGIpe2lmKGEuYT09cCl7aWYoYj09YSl0aHJvdyBuZXcgVHlwZUVycm9yO2EuYT0xO2EuYj1iO3YoYSl9fWZ1bmN0aW9uIHYoYSl7bChmdW5jdGlvbigpe2lmKGEuYSE9cClmb3IoO2EuZi5sZW5ndGg7KXt2YXIgYj1hLmYuc2hpZnQoKSxjPWJbMF0sZD1iWzFdLGU9YlsyXSxiPWJbM107dHJ5ezA9PWEuYT9cImZ1bmN0aW9uXCI9PXR5cGVvZiBjP2UoYy5jYWxsKHZvaWQgMCxhLmIpKTplKGEuYik6MT09YS5hJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgZD9lKGQuY2FsbCh2b2lkIDAsYS5iKSk6YihhLmIpKX1jYXRjaChoKXtiKGgpfX19KX1uLnByb3RvdHlwZS5nPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmModm9pZCAwLGEpfTtuLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gbmV3IG4oZnVuY3Rpb24oZCxlKXtjLmYucHVzaChbYSxiLGQsZV0pO3YoYyl9KX07XG5mdW5jdGlvbiB3KGEpe3JldHVybiBuZXcgbihmdW5jdGlvbihiLGMpe2Z1bmN0aW9uIGQoYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe2hbY109ZDtlKz0xO2U9PWEubGVuZ3RoJiZiKGgpfX12YXIgZT0wLGg9W107MD09YS5sZW5ndGgmJmIoaCk7Zm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKz0xKXUoYVtrXSkuYyhkKGspLGMpfSl9ZnVuY3Rpb24geChhKXtyZXR1cm4gbmV3IG4oZnVuY3Rpb24oYixjKXtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoO2QrPTEpdShhW2RdKS5jKGIsYyl9KX07d2luZG93LlByb21pc2V8fCh3aW5kb3cuUHJvbWlzZT1uLHdpbmRvdy5Qcm9taXNlLnJlc29sdmU9dSx3aW5kb3cuUHJvbWlzZS5yZWplY3Q9dCx3aW5kb3cuUHJvbWlzZS5yYWNlPXgsd2luZG93LlByb21pc2UuYWxsPXcsd2luZG93LlByb21pc2UucHJvdG90eXBlLnRoZW49bi5wcm90b3R5cGUuYyx3aW5kb3cuUHJvbWlzZS5wcm90b3R5cGVbXCJjYXRjaFwiXT1uLnByb3RvdHlwZS5nKTt9KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb21pcy9wcm9taXNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ })
/******/ ]);