(function() {
    var A = this.A || {};
    var C = this.C || {};
    var Utils = {
        getUniqueName: function(prefix) {
            var ns = Opts.getNamespace("nytg.map");
            var count = ns.__unique || 0;
            ns.__unique = count + 1;
            return (prefix || "__id_") + count
        },
        reduce: function(arr, val, func, ctx) {
            for (var i = 0, len = arr.length; i < len; i++) {
                val = func.call(ctx || null, arr[i], val, i)
            }
            return val
        },
        repeat: function(func, times) {
            times = times > 0 && times || 1;
            while (times--) {
                func()
            }
        },
        map: function(src, func, ctx) {
            var dest, val;
            if (Utils.isArray(src) || src.length) {
                dest = [];
                for (var i = 0, len = src.length; i < len; i++) {
                    val = func.call(ctx, src[i], i);
                    dest.push(val)
                }
            } else {
                dest = {};
                for (var key in src) {
                    if (src.hasOwnProperty(key)) {
                        dest[key] = func.call(ctx, src[key], key)
                    }
                }
            }
            return dest
        },
        isFunction: function(obj) {
            return typeof obj == "function"
        },
        isObject: function(obj) {
            return obj === Object(obj)
        },
        isArray: function(obj) {
            return obj instanceof Array
        },
        isNumber: function(obj) {
            return toString.call(obj) == "[object Number]"
        },
        isString: function(obj) {
            return obj != null && obj.constructor === String
        },
        clamp: function(val, min, max) {
            return val < min ? min : val > max ? max : val
        },
        interpolate: function(val1, val2, pct) {
            return val1 * (1 - pct) + val2 * pct
        },
        getConstructorName: function(obj) {
            var matches = String(obj.constructor).match(/^function ([^(]+)\(/);
            return matches && matches[1] || ""
        },
        toString: function(obj, validJS) {
            validJS = validJS !== false;
            var str;
            var type = typeof obj;
            if (type == "function") {
                str = '"[function]"'
            } else if (obj === undefined || obj === null) {
                str = String(obj)
            } else if (Utils.isArray(obj)) {
                str = "[" + Utils.map(obj, function(o) {
                    return Utils.toString(o, validJS)
                }).join(", ") + "]"
            } else if (obj.constructor == Object) {
                var parts = [];
                for (var key in obj) {
                    parts.push('"' + key + '":' + Utils.toString(obj[key], validJS))
                }
                str = "{" + parts.join(", ") + "}"
            } else if (obj.nodeName) {
                var idStr = obj.id ? " id=" + obj.id : "";
                str = '"[' + obj.nodeName + idStr + ']"'
            } else if (type == "object" && obj.hasOwnProperty && !obj.hasOwnProperty("toString") && !obj.constructor.prototype.hasOwnProperty("toString")) {
                str = '"[' + (Utils.getConstructorName(obj) || "unknown object") + ']"'
            } else {
                str = String(obj);
                if (Utils.isString(obj)) {
                    if (validJS) {
                        str = '"' + Utils.addslashes(str) + '"'
                    } else if (str.length > 400) {
                        str = str.substr(0, 400) + " ..."
                    }
                }
            }
            return str
        },
        strval: function(o) {
            return Utils.toString(o, false)
        },
        serialize: function(o) {
            return Utils.toString(o, true)
        },
        addslashes: function(str) {
            return (str + "").replace(/[\\"']/g, "\\$&").replace(/\u0000/g, "\\0")
        }
    };
    var Opts = {
        copyNewParams: function(targ, src) {
            return Opts.__copyParams(targ, src, false)
        },
        copyAllParams: function(targ, src) {
            return Opts.__copyParams(targ, src, true)
        },
        updateParams: function(targ, src) {
            return Opts.__copyParams(targ, src, true, true)
        },
        __copyParams: function(targ, src, replace, updateOnly) {
            if (!src || !targ) {
                A.VERBOSE && trace("[Opts.__copyParams()] Missing target or source object; src:", src, "dest:", targ);
                return src || targ
            }
            for (var key in src) {
                if (replace || targ[key] === undefined) {
                    var val = src[key];
                    if (Object.prototype[key] === val) {
                        continue
                    }
                    if (!updateOnly || targ[key] !== undefined) {
                        targ[key] = val
                    }
                }
            }
            return targ
        },
        extendPrototype: function(targ, src) {
            var targProto = targ.prototype;
            src = src.prototype || src;
            var sup = targProto.__super__;
            if (!sup) {
                sup = targProto.__super__ = {}
            }
            for (var key in src) {
                if (key in targProto) {
                    sup[key] = targProto[key]
                }
                targProto[key] = src[key]
            }
            targProto.constructor = targ
        },
        inherit: function(targ, src) {
            var f = function() {
                if (this.__super__ == f) {
                    this.__super__ = src.prototype.__super__;
                    src.apply(this, arguments);
                    delete this.__super__
                }
            };
            f.prototype = src.prototype;
            targ.prototype = new f;
            targ.prototype.constructor = targ;
            targ.prototype.__super__ = f
        },
        namespaceExists: function(name) {
            var node = window;
            var parts = name.split(".");
            var exists = Utils.reduce(parts, true, function(part, val) {
                if (val !== false) {
                    if (node[part] == null) {
                        val = false
                    } else {
                        node = node[part]
                    }
                }
                return val
            });
            return exists
        },
        getNamespace: function(name) {
            var node = window;
            var parts = name.split(".");
            for (var i = 0, len = parts.length; i < len; i++) {
                var part = parts[i];
                if (!part) {
                    continue
                }
                if (!node[part]) {
                    node[part] = {}
                }
                node = node[part]
            }
            return node
        },
        readParam: function(param, defaultVal) {
            return param === undefined ? defaultVal : param
        },
        extendNamespace: function(ns, obj) {
            var nsObj = typeof ns == "string" ? Opts.getNamespace(ns) : ns;
            Opts.copyAllParams(nsObj, obj)
        },
        exportObject: function(fullname, obj) {
            var parts = fullname.split(".");
            var oname = parts.pop();
            if (oname) {
                var ns = Opts.getNamespace(parts.join("."));
                ns[oname] = obj
            }
        }
    };
    var trace = function() {
        if (typeof Browser != "undefined") {
            Browser.trace.apply(Browser, arguments)
        }
    };
    var error = function() {
        var msg = Utils.map(arguments, Utils.toString).join(" ");
        throw new Error(msg)
    };
    var assert = function(ok) {
        if (!ok) {
            arguments[0] = "ASSERTION FAILED:";
            error.apply(null, arguments)
        }
    };
    var T = {
        stack: [],
        start: function() {
            this.stack.push(+new Date)
        },
        stop: function(note) {
            var startTime = this.stack.pop();
            var msg = +new Date - startTime + "ms";
            if (this.stack.length > 0) {
                msg += " (nested " + this.stack.length + " deep)."
            }
            if (note) {
                msg = note + " " + msg
            }
            trace(msg);
            return msg
        }
    };

    function BoundEvent(type, target, callback, context, priority) {
        this.type = type;
        this.target = target;
        this.callback = callback;
        this.context = context;
        this.priority = priority | 0;
        if (typeof callback != "function") {
            trace("[BoundEvent] Error: callback is not a function; event:", this, "target:", target, "Callback:", callback)
        }
    }
    BoundEvent.prototype.trigger = function(obj) {
        if (obj) {
            Opts.copyAllParams(this, obj);
            this.data = obj
        }
        this.callback.call(this.context, this)
    };
    BoundEvent.prototype.toString = function() {
        var str = "type:" + this.type + ", target: " + Utils.strval(this.target);
        if (this.data) {
            str += ", data:" + Utils.strval(this.data)
        }
        str = "[BoundEvent]: {" + str + "}";
        return str
    };

    function EventDispatcher() {}
    EventDispatcher.prototype.dispatchEvent = EventDispatcher.prototype.trigger = function(type, obj, ctx) {
        if (typeof type != "string") {
            trace("[dispatchEvent()] requires a string argument; type:", type, "data:", obj, "target:", ctx);
            return
        }
        var listeners = this._listeners;
        if (listeners) {
            for (var i = 0, len = listeners.length; i < len; i++) {
                var evt = listeners[i];
                if (evt.type == type && (!ctx || evt.context == ctx)) {
                    evt.trigger(obj)
                }
            }
            if (type == "ready") {
                this.removeEventListeners(type, null, ctx)
            }
        }
    };
    EventDispatcher.prototype.on = EventDispatcher.prototype.addEventListener = function(type, callback, context, priority) {
        if (!context) {
            context = this
        }
        priority = priority || 0;
        var evt = new BoundEvent(type, this, callback, context, priority);
        if (type == "ready" && this._ready) {
            trace("Warning: Waiter.waitFor() no longer uses this");
            evt.trigger();
            return this
        }
        var listeners = this._listeners || (this._listeners = []);
        var idx = 0;
        for (var i = 0, len = listeners.length; i < len; i++) {
            var priorEvent = listeners[i];
            if (priorEvent.type == evt.type && priorEvent.callback == evt.callback && priorEvent.context == evt.context) {
                trace("*** [EventDispatcher.addEventListener()] Found duplicate event, skipping. Type:", type, "ctx:", context, "this:", this);
                return this
            }
            if (evt.priority <= priorEvent.priority) {
                idx = i + 1
            }
        }
        listeners.splice(idx, 0, evt);
        return this
    };
    EventDispatcher.prototype.countEventListeners = function(type) {
        var listeners = this._listeners,
            len = listeners && listeners.length || 0,
            count = 0;
        if (!type) return len;
        for (var i = 0; i < len; i++) {
            if (listeners[i].type === type) count++
        }
        return count
    };
    EventDispatcher.prototype.removeEventListener = function(type, callback, context) {
        context = context || this;
        return this.removeEventListeners(type, callback, context)
    };
    EventDispatcher.prototype.removeEventListeners = function(type, callback, context) {
        var listeners = this._listeners;
        var newArr = [];
        var count = 0;
        for (var i = 0; listeners && i < listeners.length; i++) {
            var evt = listeners[i];
            if ((!type || type == evt.type) && (!callback || callback == evt.callback) && (!context || context == evt.context)) {
                count += 1
            } else {
                newArr.push(evt)
            }
        }
        this._listeners = newArr;
        return count
    };

    function Waiter() {}
    Opts.inherit(Waiter, EventDispatcher);
    Waiter.prototype._testReady = function() {
        if (!this._ready && !this._waitCount && this._started) {
            this._ready = true;
            this.handleReadyState && this.handleReadyState();
            this.dispatchEvent("ready")
        }
    };
    Waiter.prototype._handleDependentReady = function(evt) {
        if (!this._waitCount) {
            trace("[Waiter.onDependendReady()]", "Counting error. Event: " + Utils.strval(evt) + "; ready? " + this._ready);
            return
        }
        this._waitCount -= 1;
        this._testReady()
    };
    Waiter.prototype.isReady = function() {
        return this._ready == true
    };
    Waiter.prototype.waitFor = function(dep, type) {
        if (!dep) {
            trace("[Waiter.waitFor()] missing object; this:", this);
            return this
        } else if (!dep.addEventListener) {
            trace("[Waiter.waitFor()] Need an EventDispatcher; this:", this);
            return this
        }
        if (!type) {
            type = "ready"
        }
        if (this._ready) {
            if (type == "ready" && dep.isReady()) {
                return
            }
            trace("[Waiter.waitFor()] already READY; resetting to isReady() == false;");
            this._ready = false
        }
        if (type != "ready" || dep.isReady() == false) {
            this._waitCount = this._waitCount ? this._waitCount + 1 : 1;
            dep.addEventListener(type, this._handleDependentReady, this)
        }
        return this
    };
    Waiter.prototype.startWaiting = function(callback, ctx) {
        typeof callback == "function" && this.addEventListener("ready", callback, ctx);
        this._started = true;
        this._testReady();
        return this
    };
    var inNode = typeof module !== "undefined" && !!module.exports;
    var inPhantom = !inNode && !!(window.phantom && window.phantom.exit);
    var inBrowser = !inNode;
    var Browser = {
        iPhone: inBrowser && !!navigator.userAgent.match(/iPhone/i),
        iPad: inBrowser && !!navigator.userAgent.match(/iPad/i),
        ieEvents: inBrowser && !!window.attachEvent && !window.addEventListener,
        touchEnabled: inBrowser && "ontouchstart" in window,
        canvas: inBrowser && !!document.createElement("canvas").getContext,
        inNode: inNode,
        inPhantom: inPhantom,
        ieVersion: function() {
            return inBrowser && /MSIE ([0-9]+)/.exec(navigator.appVersion) && parseInt(RegExp.$1) || NaN
        },
        log: function(msg) {
            if (typeof console != "undefined" && console.log) {
                if (console.log.call) {
                    console.log.call(console, msg)
                } else {
                    console.log(msg)
                }
            }
        },
        trace: function() {
            var debug = Browser.getQueryVar("debug");
            var enabled = Browser.inNode || inPhantom || debug != null && debug != "false";
            if (enabled) {
                Browser.log(Utils.map(arguments, Utils.strval).join(" "))
            }
        },
        getViewportWidth: function() {
            return document.documentElement.clientWidth
        },
        getViewportHeight: function() {
            return document.documentElement.clientHeight
        },
        createElement: function(type, css, classes) {
            try {
                var el = document.createElement(type)
            } catch (err) {
                trace("[Browser.createElement()] Error creating element of type:", type);
                return null
            }
            if (type.toLowerCase() == "canvas" && window.CanvasSwf) {
                CanvasSwf.initElement(el)
            }
            if (css) {
                el.style.cssText = css
            }
            if (classes) {
                el.className = classes
            }
            return el
        },
        getElement: function(ref) {
            var el;
            if (typeof ref == "string") {
                if (ref.charAt(0) == "#") {
                    ref = ref.substr(1)
                }
                if (ref == "body") {
                    el = document.getElementsByTagName("body")[0]
                } else {
                    el = document.getElementById(ref)
                }
            } else if (ref && ref.nodeType !== void 0) {
                el = ref
            }
            return el || null
        },
        removeElement: function(el) {
            el && el.parentNode && el.parentNode.removeChild(el)
        },
        elementIsFixed: function(el) {
            var body = document.body;
            while (el && el != body) {
                var parent = el;
                el = el.offsetParent
            }
            var styleObj = parent && (parent.currentStyle || window.getComputedStyle && window.getComputedStyle(parent, "")) || {};
            var fixed = styleObj["position"] == "fixed";
            return fixed
        },
        getElementFromPageXY: function(x, y) {
            var viewX = this.pageXToViewportX(x);
            var viewY = this.pageYToViewportY(y);
            return document.elementFromPoint(viewX, viewY)
        },
        getPageXY: function(el) {
            var x = 0,
                y = 0;
            if (el.getBoundingClientRect) {
                var box = el.getBoundingClientRect();
                x = box.left - Browser.pageXToViewportX(0);
                y = box.top - Browser.pageYToViewportY(0)
            } else {
                var fixed = Browser.elementIsFixed(el);
                while (el) {
                    x += el.offsetLeft || 0;
                    y += el.offsetTop || 0;
                    el = el.offsetParent
                }
                if (fixed) {
                    var offsX = -Browser.pageXToViewportX(0);
                    var offsY = -Browser.pageYToViewportY(0);
                    x += offsX;
                    y += offsY
                }
            }
            var obj = {
                x: x,
                y: y
            };
            return obj
        },
        __getIEPageElement: function() {
            var d = document.documentElement;
            return d.clientHeight ? d : document.body
        },
        pageXToViewportX: function(x) {
            var xOffs = window.pageXOffset;
            if (xOffs === undefined) {
                xOffs = Browser.__getIEPageElement().scrollLeft
            }
            return x - xOffs
        },
        pageYToViewportY: function(y) {
            var yOffs = window.pageYOffset;
            if (yOffs === undefined) {
                yOffs = Browser.__getIEPageElement().scrollTop
            }
            return y - yOffs
        },
        _nodeIndex: {},
        __findNodeListener: function(listeners, type, func, ctx) {
            for (var i = 0, len = listeners.length; i < len; i++) {
                var evt = listeners[i];
                if (evt.type == type && evt.callback == func && evt.context == ctx) {
                    return i
                }
            }
            return -1
        },
        __touchSubs: {},
        __validateEventType: function(type) {
            if ("move,down,up".indexOf(type) != -1) {}
            return type
        },
        addEventListener: function(el, type, func, ctx) {
            if (Utils.isString(el)) {
                el = Browser.getElement(el)
            }
            if (el === window && "mousemove,mousedown,mouseup,mouseover,mouseout".indexOf(type) != -1) {
                trace("[Browser.addEventListener()] In ie8-, window doesn't support mouse events")
            }
            var listeners = this.__getNodeListeners(el);
            if (listeners.length > 0) {
                if (this.__findNodeListener(listeners, type, func, ctx) != -1) {
                    return
                }
            }
            var evt = new BoundEvent(type, el, func, ctx);
            var handler = function(e) {
                if (!e || !(e.pageX || e.touches)) {
                    var evt = e || window.event;
                    e = {
                        target: evt.srcElement,
                        relatedTarget: type == "mouseout" && evt.toElement || type == "mouseover" && evt.fromElement || null,
                        currentTarget: el
                    };
                    if (evt.clientX !== void 0) {
                        e.pageX = evt.pageX || evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                        e.pageY = evt.pageY || evt.clientY + document.body.scrollTop + document.documentElement.scrollTop
                    }
                }
                if (type == "mouseover" || type == "mouseout") {
                    var rel = e.relatedTarget;
                    while (rel && rel != el && rel.nodeName != "BODY") {
                        rel = rel.parentNode
                    }
                    if (rel == el) {
                        return
                    }
                    if (el == window && e.relatedTarget != null) {
                        return
                    }
                }
                var retn = func.call(ctx, e);
                if (retn === false) {
                    trace("[Browser] Event handler blocking event:", type);
                    e.preventDefault && e.preventDefault()
                }
                return retn
            };
            evt.handler = handler;
            if (el == window && type == "load" && document.readyState == "complete") {
                evt.trigger();
                return
            }
            listeners.push(evt);
            if (this.ieEvents) {
                el.attachEvent("on" + type, handler)
            } else {
                el.addEventListener(type, handler, false)
            }
        },
        removeEventListener: function(el, type, func, ctx) {
            var listeners = this.__getNodeListeners(el);
            var idx = this.__findNodeListener(listeners, type, func, ctx);
            if (idx == -1) {
                trace("[Browser.removeEventListener()] Event not found; ignoring.");
                return
            }
            var evt = listeners[idx];
            this.__removeDOMListener(el, type, evt.handler);
            listeners.splice(idx, 1)
        },
        __getNodeKey: function(el) {
            if (!el) {
                return ""
            } else if (el == window) {
                return "#"
            }
            return el.__evtid__ || (el.__evtid__ = Utils.getUniqueName())
        },
        __getNodeListeners: function(el) {
            var id = this.__getNodeKey(el);
            var index = this._nodeIndex;
            var listeners = index[id] || (index[id] = []);
            return listeners
        },
        __removeDOMListener: function(el, type, func) {
            if (this.ieEvents) {
                el.detachEvent("on" + type, func)
            } else {
                el.removeEventListener(type, func, false)
            }
        },
        removeEventListeners: function(el) {
            var listeners = this.__getNodeListeners(el);
            for (var i = 0, len = listeners.length; i < len; i++) {
                var evt = listeners[i];
                this.__removeDOMListener(el, evt.type, evt.handler)
            }
            delete this._nodeIndex[this.__getNodeKey(el)]
        },
        getPageUrl: function() {
            return inNode ? "" : window.location.href.toString()
        },
        getQueryString: function(url) {
            var match = /^[^?]+\?(.*)/.exec(url);
            return match && match[1] || ""
        },
        cacheBustUrl: function(url, minutes) {
            minutes = minutes || 1;
            var minPerWeek = 60 * 24 * 7;
            var utcMinutes = +new Date / 6e4;
            var code = Math.round(utcMinutes % minPerWeek / minutes);
            url = Browser.extendUrl(url, "c=" + code);
            return url
        },
        extendUrl: function(url, obj) {
            var extended = url + (url.indexOf("?") == -1 ? "?" : "&");
            if (Utils.isString(obj)) {
                extended += obj
            } else if (Utils.isObject(obj)) {
                var parts = [];
                Utils.forEach(obj, function(val, key) {
                    parts.push(encodeURIComponent(key) + "=" + encodeURIComponent(val))
                });
                extended += parts.join("&")
            } else {
                error("Argument must be string or object")
            }
            return extended
        },
        parseUrl: function parseUrl(url) {
            var obj, matches = /^(http):\/\/([^\/]+)(.*)/.exec(url);
            if (matches) {
                obj = {
                    protocol: matches[1],
                    host: matches[2],
                    path: matches[3]
                }
            } else {
                trace("[Browser.parseUrl()] unable to parse:", url)
            }
            return obj
        },
        getQueryVars: function() {
            var matches, rxp = /([^=&]+)=?([^&]*)/g,
                q = this.getQueryString(this.getPageUrl()),
                vars = {};
            while (matches = rxp.exec(q)) {
                vars[matches[1]] = decodeURIComponent(matches[2])
            }
            return vars
        },
        getQueryVar: function(name) {
            return Browser.getQueryVars()[name]
        },
        getClassNameRxp: function(cname) {
            return new RegExp("(^|\\s)" + cname + "(\\s|$)")
        },
        hasClass: function(el, cname) {
            var rxp = this.getClassNameRxp(cname);
            return el && rxp.test(el.className)
        },
        addClass: function(el, cname) {
            if (!el) {
                trace("[Browser.addClass()] null object; class:", cname);
                return
            }
            var classes = el.className;
            if (!classes) {
                classes = cname
            } else if (!this.hasClass(el, cname)) {
                classes = classes + " " + cname
            }
            el.className = classes
        },
        removeClass: function(el, cname) {
            var rxp = this.getClassNameRxp(cname);
            el.className = el.className.replace(rxp, "$2")
        },
        replaceClass: function(el, c1, c2) {
            var r1 = this.getClassNameRxp(c1);
            el.className = el.className.replace(r1, "$1" + c2 + "$2")
        },
        mergeCSS: function(s1, s2) {
            var div = this._cssdiv;
            if (!div) {
                div = this._cssdiv = Browser.createElement("div")
            }
            div.style.cssText = s1 + ";" + s2;
            return div.style.cssText
        },
        addCSS: function(el, css) {
            el.style.cssText = Browser.mergeCSS(el.style.cssText, css)
        },
        makeUnselectable: function(el) {
            var noSel = "-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-moz-user-focus:ignore;-o-user-select:none;user-select: none;";
            noSel += "-webkit-tap-highlight-color: rgba(0,0,0,0);";
            Browser.addCSS(el, noSel);
            el.onselectstart = function() {
                return false
            }
        },
        makeUndraggable: function(el) {
            el.ondragstart = function() {
                return false
            };
            el.draggable = false
        },
        loadStylesheet: function(cssUrl) {
            trace("loadStylesheet:", cssUrl);
            var link = document.createElement("link");
            link.rel = "stylesheet";
            link.type = "text/css";
            link.href = cssUrl;
            Browser.appendToHead(link)
        },
        appendToHead: function(el) {
            var head = document.getElementsByTagName("head")[0];
            head.appendChild(el)
        },
        navigateToURL: function(url) {
            window.location.href = url
        }
    };
    Browser.on = Browser.addEventListener;
    Utils.contains = function(container, item) {
        if (Utils.isString(container)) {
            return container.indexOf(item) != -1
        } else if (Utils.isArray(container)) {
            return Utils.indexOf(container, item) != -1
        }
        error("Expected Array or String argument")
    };
    Utils.findInArray = function(obj, arr, prop) {
        return Utils.indexOf(arr, obj, prop)
    };
    Utils.indexOf = function(arr, item, prop) {
        for (var i = 0, len = arr.length || 0; i < len; i++) {
            if (!prop) {
                if (arr[i] === item) {
                    return i
                }
            } else if (arr[i][prop] === item) {
                return i
            }
        }
        return -1
    };
    Utils.getClassId = function(val, breaks) {
        var id = -1;
        if (!isNaN(val)) {
            id = 0;
            for (var j = 0, len = breaks.length; j < len; j++) {
                var breakVal = breaks[j];
                if (val < breakVal) {
                    break
                }
                id = j + 1
            }
        }
        return id
    };
    Utils.getInnerBreaks = function(v1, v2, breaks) {
        var id1 = Utils.getClassId(v1, breaks);
        var id2 = Utils.getClassId(v2, breaks);
        var retn = [];
        if (id1 == id2) {
            return retn
        } else if (id1 < id2) {
            var start = id1;
            var end = id2;
            var inv = false
        } else {
            start = id2;
            end = id1;
            inv = true
        }
        for (var i = start; i < end; i++) {
            retn.push(breaks[i])
        }
        if (inv) {
            retn.reverse()
        }
        return retn
    };
    Utils.nextItem = function(arr, item, prev) {
        var nextIdx, idx = Utils.indexOf(arr, item);
        if (idx == -1) {
            return null
        }
        if (prev) {
            nextIdx = idx == 0 ? arr.length - 1 : idx - 1
        } else {
            nextIdx = idx >= arr.length - 1 ? 0 : idx + 1
        }
        return arr[nextIdx]
    };
    Utils.range = function(len, start, inc) {
        start = start || 0;
        inc = inc || 1;
        var arr = [];
        for (var i = 0; i < len; i++) {
            arr.push(start + i * inc)
        }
        return arr
    };
    Utils.sum = function(arr) {
        var tot = 0;
        for (var i = 0, len = arr.length; i < len; i++) {
            var val = arr[i];
            if (val === !val) {
                error("Array contains NaN")
            } else {
                tot += val
            }
        }
        return tot
    };
    Utils.getArrayBounds = function(arr) {
        var min = Infinity,
            max = -Infinity,
            nan = 0;
        for (var i = 0, len = arr.length; i < len; i++) {
            var val = arr[i];
            if (val !== val) {
                nan++
            } else if (val < min) {
                min = val
            } else if (val > max) {
                max = val
            }
        }
        return {
            min: min,
            max: max,
            nan: nan
        }
    };
    Utils.average = function(arr) {
        assert(arr.length > 0, "Tried to find average of empty array");
        return Utils.sum(arr) / arr.length
    };
    Utils.invertIndex = function(obj) {
        var inv = {};
        for (var key in obj) {
            inv[obj[key]] = key
        }
        return inv
    };
    Utils.getKeys = function(obj) {
        var arr = [];
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                arr.push(key)
            }
        }
        return arr
    };
    Utils.uniqueArray = function(src) {
        var copy = src.concat();
        copy.sort();
        var retn = Utils.filter(copy, function(el, i) {
            return i == 0 || el !== copy[i - 1] ? true : false
        });
        return retn
    };
    Utils.filter = function(src, func, ctx) {
        var dest = [];
        for (var i = 0, len = src.length; i < len; i++) {
            var val = src[i];
            if (func.call(ctx, val, i)) {
                dest.push(val)
            }
        }
        return dest
    };
    Utils.arrayToLookupTable = function(arr, multi) {
        multi = !!multi;
        var index = {};
        for (var i = 0, len = arr.length; i < len; i++) {
            var val = arr[i];
            if (val in index) {
                if (multi) {
                    index[val].push(i)
                } else {
                    trace("[Utils.arrayToLookupTable()] Trying to enter same value multiple times:", val)
                }
            } else if (multi) {
                index[val] = [i]
            } else {
                index[val] = i
            }
        }
        return index
    };
    Utils.arrayToIndex = function(arr, arg2) {
        var obj = {},
            haveVals = false,
            haveKey = false;
        if (arg2) {
            if (Utils.isArray(arg2)) {
                haveVals = true
            } else if (Utils.isString(arg2)) {
                haveKey = true
            }
        }
        for (var i = 0, len = arr.length; i < len; i++) {
            var arrval = arr[i];
            if (haveVals) {
                obj[arrval] = arg2[i]
            } else if (haveKey) {
                var key = arrval[arg2];
                if (key in obj) {
                    trace("[Utils.arrayToIndex()] Warning: duplicate key:", key)
                }
                obj[key] = arr[i]
            } else {
                obj[arrval] = true
            }
        }
        return obj
    };
    Utils.forEach = function(obj, func, ctx) {
        if (Utils.isArray(obj) || obj.length) {
            for (var i = 0, len = obj.length; i < len; i++) {
                func.call(ctx, obj[i], i)
            }
        } else {
            for (var key in obj) {
                obj.hasOwnProperty(key) && func.call(ctx, obj[key], key)
            }
        }
    };
    Utils.createRandomArray = function(size, values) {
        var len = values.length;
        var func = function(i) {
            return values[Math.floor(Math.random() * len)]
        };
        return Utils.createArray(size, func)
    };
    Utils.initializeArray = function(arr, init) {
        var callable = typeof init == "function";
        for (var i = 0, len = arr.length; i < len; i++) {
            arr[i] = callable ? init() : init
        }
        return arr
    };
    Utils.createArray = function(size, init) {
        return Utils.initializeArray(new Array(size), init)
    };
    Utils.createIndexArray = function(size, func) {
        var arr = new Array(size);
        for (var i = 0; i < size; i++) {
            arr[i] = func ? func(i) : i
        }
        return arr
    };
    Utils.sortOnKeyFunction = function(arr, getter) {
        if (!arr || arr.length == 0) {
            return
        }
        var p = arr[0].constructor.prototype;
        var tmp = p.toString;
        p.toString = getter;
        arr.sort();
        p.toString = tmp
    };
    Utils.sortOn = function(arr) {
        var js = "var aval, bval;\n";
        for (var i = 1; i < arguments.length; i += 2) {
            var prop = arguments[i];
            var asc = arguments[i + 1] !== false;
            var op = asc ? ">" : "<";
            js += "aval = a['" + prop + "'];\nbval = b['" + prop + "'];\n";
            js += "if (aval" + op + "bval) return 1;\n";
            js += "if (bval" + op + "aval) return -1;\n"
        }
        js += "return 0;";
        arr.sort(new Function("a", "b", js))
    };
    Utils.sortNumbers = function(arr, asc) {
        asc = asc !== false;
        var func = function(a, b) {
            if (a === b) return 0;
            if (asc && a > b || !asc && a < b) return 1;
            return -1
        };
        arr.sort(func)
    };
    Utils.replaceArray = function(arr, arr2) {
        arr.splice(0, arr.length);
        arr.push.apply(arr, arr2)
    };
    Utils.reorderArray = function(arr, idxs) {
        var len = idxs.length;
        var arr2 = [];
        for (var i = 0; i < len; i++) {
            var idx = idxs[i];
            assert(idx >= 0 && idx < len, "Out-of-bounds array idx");
            arr2[i] = arr[idx]
        }
        Utils.replaceArray(arr, arr2)
    };
    Utils.sortArrayByKeys = function(arr, keys, asc) {
        var ids = Utils.getSortedIds(keys, asc);
        Utils.reorderArray(arr, ids)
    };
    Utils.getSortedIds = function(arr, asc) {
        var ids = Utils.range(arr.length);
        Utils.sortArrayIndex(ids, arr, asc);
        return ids
    };
    Utils.sortArrayIndex = function(ids, arr, asc) {
        var asc = asc !== false;
        ids.sort(function(i, j) {
            var a = arr[i],
                b = arr[j];
            if (asc && a > b || !asc && a < b || a === b && i < j) return 1;
            else return -1
        })
    };

    function Elements(sel) {
        if (this instanceof Elements == false) {
            return new Elements(sel)
        }
        this.elements = [];
        this.select(sel);
        this.tmp = new El
    }
    Elements.prototype = {
        size: function() {
            return this.elements.length
        },
        select: function(sel) {
            this.elements = Elements.__select(sel);
            return this
        },
        addClass: function(className) {
            this.forEach(function(el) {
                el.addClass(className)
            });
            return this
        },
        removeClass: function(className) {
            this.forEach(function(el) {
                el.removeClass(className)
            });
            return this
        },
        forEach: function(callback, ctx) {
            var tmp = this.tmp;
            for (var i = 0, len = this.elements.length; i < len; i++) {
                tmp.el = this.elements[i];
                callback.call(ctx, tmp, i)
            }
            return this
        }
    };
    var classSelectorRE = /^\.([\w-]+)$/,
        idSelectorRE = /^#([\w-]+)$/,
        tagSelectorRE = /^[\w-]+$/,
        tagOrIdSelectorRE = /^#?[\w-]+$/;
    Elements.__select = function(selector, root) {
        root = root || document;
        var els;
        if (classSelectorRE.test(selector)) {
            els = root.getElementsByClassName(RegExp.$1)
        } else if (tagSelectorRE.test(selector)) {
            els = root.getElementsByTagName(selector)
        } else if (document.querySelectorAll) {
            els = root.querySelectorAll(selector)
        } else if (Browser.ieVersion() < 8) {
            els = Elements.__ie7QSA(selector, root)
        } else {
            error("This browser doesn't support CSS query selectors")
        }
        return Array.prototype.slice.call(els)
    };
    Elements.__ie7QSA = function(selector, root) {
        var styleTag = Browser.createElement("STYLE");
        Browser.appendToHead(styleTag);
        document.__qsaels = [];
        styleTag.styleSheet.cssText = selector + "{x:expression(document.__qsaels.push(this))}";
        window.scrollBy(0, 0);
        var els = document.__qsaels;
        Browser.removeElement(styleTag);
        if (root != document) {
            els = Utils.filter(els, function(node) {
                while (node && node != root) {
                    node = node.parentNode
                }
                return !!node
            })
        }
        return els
    };
    Element.toCamelCase = function(str) {
        var camel = str.replace(/-([a-z])/g, function(g) {
            return g[1].toUpperCase()
        });
        trace(">>> camelize; pre:", str, "post:", camel);
        return camel
    };
    Element.pixelIndex = Utils.arrayToIndex("width,height,top,left,right,bottom,minWidth,maxWidth,minHeight,maxHeight,paddingTop,paddingRight,paddingBottom,paddingLeft,marginTop,marginRight,marginBottom,marginLeft".split(","));
    Element.setStyle = function(el, name, val) {
        var jsName = Element.toCamelCase(name);
        if (el.style[jsName] == void 0) {
            trace("[Element.setStyle()] css property:", jsName);
            return
        }
        var cssVal = val;
        if (isFinite(val)) {
            cssVal = String(val);
            if (jsName in Element.pixelIndex) {
                cssVal += "px"
            }
        }
        el.style[jsName] = cssVal
    };

    function Element(ref) {
        this.el = Browser.getElement(ref) || Browser.createElement(ref)
    }
    Element.prototype.node = function() {
        return this.el
    };
    Element.prototype.css = function(css, val) {
        if (val != null) {
            Element.setStyle(this.el, css, val)
        } else if (Utils.isString(css)) {
            Browser.addCSS(this.el, css)
        } else if (Utils.isObject(css)) {
            Utils.forEach(css, function(val, key) {
                Element.setStyle(this.el, key, val)
            })
        }
        return this
    };
    Element.prototype.attr = function(obj, value) {
        if (Utils.isString(obj)) {
            this.el[obj] = value
        } else if (!value) {
            Opts.copyAllParams(this.el, obj)
        }
        return this
    };
    Element.prototype.appendChild = function(el) {
        this.el.appendChild(el.el || el);
        return this
    };
    Element.prototype.addClass = function(className) {
        Browser.addClass(this.el, className);
        return this
    };
    Element.prototype.removeClass = function(className) {
        Browser.removeClass(this.el, className);
        return this
    };
    Element.prototype.hasClass = function(className) {
        return Browser.hasClass(this.el, className)
    };
    Element.prototype.hide = function() {
        this.css("display:none;");
        return this
    };
    Element.prototype.show = function(type) {
        this.css("display", type || "block");
        return this
    };
    Element.prototype.html = function(html) {
        this.el.innerHTML = html;
        return this
    };
    Element.prototype.text = function(obj) {
        if (Utils.isArray(obj)) {
            for (var i = 0, el = this; i < obj.length && el; el = el.sibling(), i++) {
                el.text(obj[i])
            }
        } else {
            this.html(obj)
        }
        return this
    };
    Element.prototype.id = function(id) {
        if (id) {
            this.el.id = id;
            return this
        }
        return this.el.id
    };
    Element.prototype.on = function(type, func, ctx) {
        Browser.addEventListener(this.el, type, func, ctx);
        return this
    };

    function El(ref) {
        if (ref instanceof El || ref instanceof Element) {
            return new El(ref.node())
        } else if (!(this instanceof El)) {
            return new El(ref)
        }
        if (Utils.isString(ref) && !tagOrIdSelectorRE.test(ref)) {
            var node = Elements.__super__(ref)[0];
            assert(!!node, "Unmatched selector:", ref);
            ref = node
        }
        ref && this.__super__(ref)
    }
    Opts.inherit(El, Element);
    El.prototype.find = function(sel) {
        var node = Elements.__select(sel, this.el)[0];
        assert(!!node, "Unmatched selector:", sel);
        return new El(node)
    };
    Element.prototype.appendTo = function(ref) {
        var parent = ref instanceof Element ? ref.el : Browser.getElement(ref);
        if (this._siblings) {
            for (var i = 0, len = this._siblings.length; i < len; i++) {
                parent.appendChild(this._siblings[i])
            }
        }
        parent.appendChild(this.el);
        return this
    };
    El.prototype.sibling = function(tagName) {
        var el = this.el;
        if (!tagName) {
            return new El(el.nextSibling)
        }
        var sib = Browser.createElement(tagName),
            e = new El(sib),
            par = el.parentNode;
        if (par) {
            el.nextSibling ? par.insertBefore(sib, el.nextSibling) : par.appendChild(sib)
        } else {
            trace("&&& El.sibling() warning: no parent");
            var sibs = this._siblings || [];
            sibs.push(el);
            e._siblings = sibs
        }
        return e
    };
    El.prototype.child = function(tagName) {
        var ch, el = this.el;
        if (!tagName) {
            ch = el.firstChild;
            while (ch && ch.nodeType != 1) {
                ch = ch.nextSibling
            }
        } else {
            if (!el.parentNode) {}
            ch = Browser.createElement(tagName);
            el.appendChild(ch)
        }
        return new El(ch)
    };
    El.prototype.parent = function(tagName) {
        var p = this.el.parentNode;
        if (tagName) {
            tagName = tagName.toUpperCase();
            while (p && p.tagName != tagName) {
                p = p.parentNode
            }
        }
        return p ? new El(p) : null
    };
    El.prototype.empty = function() {
        this.el.innerHTML = "";
        return this
    };
    Opts.copyNewParams(C, {
        N: "n",
        E: "e",
        W: "w",
        S: "s",
        NW: "nw",
        NE: "ne",
        SE: "se",
        SW: "sw",
        TOP: "top",
        LEFT: "left",
        RIGHT: "right",
        BOTTOM: "bottom",
        CENTER: "c"
    });

    function Point(x, y) {
        this.x = x;
        this.y = y
    }
    Point.prototype.clone = function() {
        return new Point(this.x, this.y)
    };
    Point.prototype.toString = function() {
        return "{x:" + this.x + ", y:" + this.y + "}"
    };
    Point.prototype.distanceToXY = function(x, y) {
        return Point.distance(this.x, this.y, x, y)
    };
    Point.prototype.distanceToPoint = function(p) {
        return Point.distance(this.x, this.y, p.x, p.y)
    };
    Point.distance = function(x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))
    };
    Point.prototype.equals = function(p) {
        return this.x === p.x && this.y === p.y
    };

    function GeoPoint(lat, lng) {
        this.lat = lat;
        this.lng = lng
    }
    GeoPoint.prototype.clone = function() {
        return new GeoPoint(this.lat, this.lng)
    };
    GeoPoint.prototype.toString = function() {
        var str = "[GeoPoint]: {lat:" + this.lat + ", lng:" + this.lng + "}";
        return str
    };

    function FourSides(l, t, r, b) {
        this.left = l || 0;
        this.top = t || 0;
        this.right = r || 0;
        this.bottom = b || 0
    }
    FourSides.prototype.toString = function() {
        return "{l:" + this.left + ", t:" + this.top + ", r:" + this.right + ", b:" + this.bottom + "}"
    };

    function BoundingBox() {
        this._flipped = false;
        if (arguments.length == 4) {
            this.setBounds.apply(this, arguments)
        }
    }
    Opts.extendPrototype(BoundingBox, FourSides);
    BoundingBox.prototype.hasBounds = function() {
        return this.left !== undefined
    };
    BoundingBox.prototype.hasSameBounds = function(bb) {
        return this.left == bb.left && this.top == bb.top && this.right == bb.right && this.bottom == bb.bottom
    };
    BoundingBox.prototype.width = function() {
        return this.right - this.left | 0
    };
    BoundingBox.prototype.height = function() {
        return Math.abs(this.top - this.bottom) | 0
    };
    BoundingBox.prototype.setBounds = function(l, t, r, b) {
        if (l && t === void 0) {
            b = l.bottom;
            r = l.right;
            t = l.top;
            l = l.left
        }
        this.left = l;
        this.top = t;
        this.right = r;
        this.bottom = b;
        this._flipped = b > t;
        return this
    };
    BoundingBox.prototype.getCenterPoint = function() {
        if (this.hasBounds()) {
            return new Point(this.centerX(), this.centerY())
        }
        return new Point(0, 0)
    };
    BoundingBox.prototype.centerX = function() {
        var x = (this.left + this.right) * .5;
        return x
    };
    BoundingBox.prototype.centerY = function() {
        var y = (this.top + this.bottom) * .5;
        return y
    };
    BoundingBox.prototype.containsPoint = function(x, y) {
        if (x >= this.left && x <= this.right && y <= this.top && y >= this.bottom) {
            return true
        }
        return false
    };
    BoundingBox.prototype.containsBufferedPoint = function(x, y, buf) {
        if (x + buf > this.left && x - buf < this.right) {
            if (y - buf < this.top && y + buf > this.bottom) {
                return true
            }
        }
        return false
    };
    BoundingBox.prototype.intersects = function(bb) {
        if (bb.left < this.right && bb.right > this.left && bb.top > this.bottom && bb.bottom < this.top) {
            return true
        }
        return false
    };
    BoundingBox.prototype.contains = function(bb) {
        if (bb.left >= this.left && bb.top <= this.top && bb.right <= this.right && bb.bottom >= this.bottom) {
            return true
        }
        return false
    };
    BoundingBox.prototype.translate = function(x, y) {
        this.setBounds(this.left + x, this.top + y, this.right + x, this.bottom + y)
    };
    BoundingBox.prototype.padBounds = function(l, t, r, b) {
        this.left -= l;
        this.top += t;
        this.right += r;
        this.bottom -= b
    };
    BoundingBox.prototype.scale = function(pct, pctY) {
        var halfWidth = (this.right - this.left) * .5;
        var halfHeight = (this.top - this.bottom) * .5;
        var kx = pct - 1;
        var ky = pctY === undefined ? kx : pctY - 1;
        this.left -= halfWidth * kx;
        this.top += halfHeight * ky;
        this.right += halfWidth * kx;
        this.bottom -= halfHeight * ky
    };
    BoundingBox.prototype.cloneBounds = function() {
        var bb = new BoundingBox;
        if (this.hasBounds()) {
            bb.setBounds(this.left, this.top, this.right, this.bottom)
        }
        return bb
    };
    BoundingBox.prototype.clearBounds = function() {
        this.setBounds(new BoundingBox)
    };
    BoundingBox.prototype.mergePoint = function(x, y) {
        if (this.left === undefined) {
            this.setBounds(x, y, x, y)
        } else {
            if (x < this.left) this.left = x;
            else if (x > this.right) this.right = x;
            if (y < this.bottom) this.bottom = y;
            else if (y > this.top) this.top = y
        }
    };
    BoundingBox.prototype.mergeBounds = function(bb) {
        if (!bb || !bb.hasBounds()) {
            return
        }
        if (this.hasBounds()) {
            if (bb.left < this.left) {
                this.left = bb.left
            }
            if (bb.right > this.right) {
                this.right = bb.right
            }
            if (bb.top > this.top) {
                this.top = bb.top
            }
            if (bb.bottom < this.bottom) {
                this.bottom = bb.bottom
            }
        } else {
            this.setBounds(bb.left, bb.top, bb.right, bb.bottom)
        }
    };

    function Transform() {
        this.mx = this.my = 1;
        this.bx = this.by = 0
    }
    Transform.prototype = {
        useTileBounds: function(wPix, hPix, bb) {
            var ppm = wPix / (bb.right - bb.left);
            this.mx = ppm;
            this.my = hPix / (bb.bottom - bb.top);
            this.bx = -ppm * bb.left;
            this.by = -this.my * bb.top;
            return this
        },
        fromPixels: function(x, y, xy) {
            xy = xy || [];
            xy[0] = (x - this.bx) / this.mx;
            xy[1] = (y - this.by) / this.my;
            return xy
        },
        toPixels: function(x, y, xy) {
            xy = xy || [];
            xy[0] = x * this.mx + this.bx;
            xy[1] = y * this.my + this.by;
            return xy
        }
    };

    function TileExtent(w, h) {
        this.mx = this.my = 1;
        this.bx = this.by = 0;
        this.widthInPixels = w || 256;
        this.heightInPixels = h || 256
    }
    Opts.inherit(TileExtent, BoundingBox);
    TileExtent.prototype.setBounds = function(bb, t, r, b) {
        if (b) {
            bb = (new BoundingBox).setBounds(bb, t, r, b)
        }
        this.mergeBounds(this, bb);
        var ppm = this.widthInPixels / (bb.right - bb.left);
        this.mx = ppm;
        this.my = this.heightInPixels / (bb.bottom - bb.top);
        this.bx = -ppm * bb.left;
        this.by = -this.my * bb.top;
        this.metersPerPixel = 1 / ppm
    };
    TileExtent.prototype.updateBounds = TileExtent.prototype.setBounds;
    TileExtent.prototype.addPixelMargins = function(l, t, r, b) {
        this.bx += l;
        this.by -= b;
        this.mx *= 1 - (l + r) / this.widthInPixels;
        this.my *= 1 - (t + b) / this.heightInPixels
    };
    TileExtent.prototype.transformXY = function(x, y, xy) {
        xy = xy || new Point;
        var xPix = x * this.mx + this.bx;
        var yPix = y * this.my + this.by;
        xy.x = xPix;
        xy.y = yPix;
        return xy
    };
    TileExtent.prototype.clone = function() {
        var ext = new TileExtent(this.widthInPixels, this.heightInPixels);
        ext.setBounds(this);
        return ext
    };

    function TouchHandler(surface, mapBounds) {
        var downOverMap = false;
        var touchOff = false;
        var numTouches = 0;
        var globalX, globalY, pristineTouch;
        var captureTouches = A.captureTouches !== false;
        var DOUBLE_TAP_TIMEOUT = 600;
        var SINGLE_TAP_TIMEOUT = 400;
        var self = this,
            isActive = false,
            doubleTapStarted = false,
            singleTapStartTime = 0,
            singleTapStartData, singleTapStarted = false,
            prevTouchCount = 0;
        var pinching = false;
        var pinchStartX, pinchStartY, pinchStartRadius;
        var pinchData;
        var dragging = false;
        var dragStartX, dragStartY;
        var touchId = 1;
        var prevX, prevY, prevRadius;
        Browser.addEventListener(surface, "touchstart", handleTouchStart);
        Browser.addEventListener(document, "touchstart", handleGlobalStart);
        Browser.addEventListener(document, "touchend", handleTouchEnd);
        Browser.addEventListener(document, "touchmove", handleTouchMove);
        self.on("touchoff", function() {});

        function getTouchData(touches) {
            var obj = {
                zoomRatio: 1,
                deltaScale: 1,
                deltaX: 0,
                deltaY: 0,
                shiftX: 0,
                shiftY: 0
            };
            var len = touches.length;
            var touchCenterX = 0,
                touchCenterY = 0;
            var i, touch;
            var insideCount = 0;
            for (i = 0; i < len; i++) {
                touch = touches[i];
                var weight = 1 / (i + 1);
                var pageX = touch.pageX;
                var pageY = touch.pageY;
                if (mapBounds.containsPoint(pageX, pageY)) {
                    insideCount += 1
                }
                touchCenterX = weight * pageX + (1 - weight) * touchCenterX;
                touchCenterY = weight * pageY + (1 - weight) * touchCenterY
            }
            obj.inside = insideCount;
            var dist = 0;
            if (len > 0) {
                for (i = 0; i < len; i++) {
                    touch = touches[i];
                    dist += Point.distance(touchCenterX, touchCenterY, touch.pageX, touch.pageY)
                }
                dist /= len
            }
            obj.pageX = touchCenterX;
            obj.pageY = touchCenterY;
            obj.mapX = touchCenterX - mapBounds.left;
            obj.mapY = touchCenterY - mapBounds.bottom;
            obj.centerX = mapBounds.centerX();
            obj.centerY = mapBounds.centerY();
            obj.radius = dist;
            obj.time = now();
            return obj
        }

        function handleTouchChange(e) {
            var touches = e.touches;
            numTouches = touches.length;
            var prevTouches = prevTouchCount;
            if (numTouches != 1 && dragging) {
                dragging = false;
                self.dispatchEvent("dragend")
            }
            if (numTouches < 2 && pinching) {
                pinching = false;
                self.dispatchEvent("pinchend")
            }
            if (numTouches == 0) {
                if (doubleTapStarted) {
                    if (prevTouches == 1) {
                        self.dispatchEvent("doubletap", singleTapStartData)
                    }
                    doubleTapStarted = false
                }
                if (singleTapStarted) {
                    if (prevTouches == 1) {
                        doubleTapStarted = true
                    }
                    singleTapStarted = false
                }
                prevTouchCount = numTouches;
                return
            }
            var obj = getTouchData(touches);
            obj.touchEvent = e;
            obj.touchId = touchId;
            var pageX = obj.pageX;
            var pageY = obj.pageY;
            if (numTouches > prevTouches && obj.inside == 0) {
                return
            }
            if (numTouches == 1) {
                if (prevTouches == 0) {
                    if (doubleTapStarted) {
                        var dist = Point.distance(pageX, pageY, singleTapStartData.pageX, singleTapStartData.pageY);
                        var timeElapsed = obj.time - singleTapStartData.time;
                        if (timeElapsed > DOUBLE_TAP_TIMEOUT || dist > 12) {
                            doubleTapStarted = false
                        } else {
                            if (numTouches == 1 && doubleTapStarted) {
                                e.preventDefault()
                            }
                        }
                    }
                    if (doubleTapStarted == false) {
                        singleTapStarted = true;
                        singleTapStartData = obj;
                        singleTapStartTime = obj.time
                    }
                }
                if (!dragging) {
                    prevX = dragStartX = pageX;
                    prevY = dragStartY = pageY;
                    dragging = true;
                    touchId += 1;
                    obj.touchId = touchId;
                    self.dispatchEvent("dragstart", obj)
                } else {
                    obj.shiftX = pageX - dragStartX;
                    obj.shiftY = pageY - dragStartY;
                    obj.deltaX = pageX - prevX;
                    obj.deltaY = pageY - prevY;
                    self.dispatchEvent("drag", obj);
                    prevX = pageX;
                    prevY = pageY
                }
            } else if (numTouches > 1) {
                if (!pinching) {
                    pinching = true;
                    prevRadius = pinchStartRadius = obj.radius;
                    prevX = pinchStartX = obj.pageX;
                    prevY = pinchStartY = obj.pageY;
                    pinchData = obj;
                    touchId += 1;
                    obj.touchId = touchId;
                    self.dispatchEvent("pinchstart", obj)
                } else {
                    obj.startX = pinchStartX;
                    obj.startY = pinchStartY;
                    obj.zoomRatio = obj.radius / pinchStartRadius;
                    obj.deltaScale = obj.radius / prevRadius;
                    obj.shiftX = obj.pageX - obj.startX;
                    obj.shiftY = obj.pageY - obj.startY;
                    obj.deltaX = obj.pageX - prevX;
                    obj.deltaY = obj.pageY - prevY;
                    pinchData = obj;
                    self.dispatchEvent("pinch", obj);
                    prevX = obj.pageX;
                    prevY = obj.pageY;
                    prevRadius = obj.radius
                }
            }
            if (numTouches == 0) {}
            prevTouchCount = numTouches
        }

        function start() {
            isActive = true;
            singleTapStartData && self.dispatchEvent("touchstart", {
                pageX: singleTapStartData.pageX,
                pageY: singleTapStartData.pageY
            })
        }

        function end() {
            if (isActive) {
                isActive = false;
                self.dispatchEvent("touchend")
            }
        }

        function now() {
            return (new Date).getTime()
        }

        function handleGlobalStart(e) {
            var touches = e.touches;
            numTouches = touches.length;
            if (numTouches == 1) {
                var obj = getTouchData(touches);
                globalX = obj.pageX;
                globalY = obj.pageY;
                pristineTouch = true
            }
        }

        function handleTouchStart(e) {
            downOverMap = true;
            handleTouchChange(e)
        }

        function handleTouchEnd(e) {
            if (downOverMap) {
                handleTouchChange(e)
            }
            elapsed = now() - singleTapStartTime;
            if (downOverMap && elapsed < SINGLE_TAP_TIMEOUT) {
                start()
            } else {
                if (pristineTouch) {
                    end()
                }
            }
            if (numTouches == 0) {
                downOverMap = false
            }
        }

        function handleTouchMove(e) {
            pristineTouch = false;
            if (!downOverMap) {
                return
            }
            handleTouchChange(e)
        }
    }
    Opts.extendPrototype(TouchHandler, EventDispatcher);

    function HybridMouse() {
        this._ignoredElements = [];
        this.dragging = false;
        this._overMap = false;
        this._boundsOnPage = new BoundingBox;
        if (!Browser.touchEnabled) {
            Browser.addEventListener(document, "mousemove", this.throttledMouseMove, this);
            Browser.addEventListener(document.body, "mousedown", this.handleMouseDown, this);
            Browser.addEventListener(document, "mouseup", this.handleMouseUp, this)
        }
    }
    Opts.inherit(HybridMouse, Waiter);
    HybridMouse.prototype.ignoreElement = function(el) {
        if (!el || Utils.contains(this._ignoredElements, el)) {
            return
        }
        this._ignoredElements.push(el)
    };
    HybridMouse.prototype.setMapContainer = function(surface) {
        if (!surface) {
            trace("!!! [HybridMouse.setMapContainer()] surfac is empty");
            return
        }
        if (this._mapContainer) {
            return
        }
        this._mapContainer = surface;
        var self = this;
        trace("[HybridMouse] setMapContainer() touchEnabled?:", Browser.touchEnabled);
        if (Browser.iPhone || Browser.touchEnabled) {
            var touch = new TouchHandler(surface, this._boundsOnPage);
            touch.addEventListener("touchstart", this.handleTouchStart, this);
            touch.addEventListener("touchend", this.handleTouchEnd, this);
            this.touch = touch
        }
        Browser.addEventListener(surface, "mouseover", handleMouseOver, this);
        Browser.addEventListener(surface, "dblclick", handleDoubleClick, this);

        function handleMouseOver(e) {
            self.triggerMouseOver()
        }

        function handleDoubleClick(e) {
            if (self.overMap()) {
                var obj = self.getStandardMouseData(e);
                self.dispatchEvent("dblclick", obj)
            }
        }
        this.isReady() == false && this.startWaiting()
    };
    HybridMouse.prototype.overMap = function() {
        return this._overMap
    };
    HybridMouse.prototype.mouseDown = function() {
        return !!this._mouseDown
    };
    HybridMouse.prototype.handleTouchStart = function(evt) {
        this.triggerMouseOver();
        this.handleMouseMove(evt)
    };
    HybridMouse.prototype.handleTouchEnd = function(evt) {
        this.triggerMouseOut()
    };
    HybridMouse.prototype.handleMouseOut = function(e) {
        var target = e.target ? e.target : e.srcElement;
        var surface = this._mapContainer;
        while (target && target.nodeName != "BODY" && target != window) {
            if (target == surface || Utils.contains(this._ignoredElements, target)) {
                this._deferringMouseOut = true;
                return
            }
            target = target.parentNode
        }
        this.triggerMouseOut()
    };
    HybridMouse.prototype.triggerMouseOut = function() {
        if (this._overMap) {
            this._overMap = false;
            if (true) {
                Browser.removeEventListener(this._mapContainer, "mouseout", this.handleMouseOut, this)
            } else {
                Browser.removeEventListener(document.body, "mouseover", this.handleMouseOut, this);
                Browser.removeEventListener(window, "mouseout", this.handleMouseOut, this)
            }
            this.dispatchEvent("mouseout")
        }
    };
    HybridMouse.prototype.triggerMouseOver = function() {
        this._deferringMouseOut = false;
        if (!this._overMap) {
            this._overMap = true;
            if (true) {
                Browser.addEventListener(this._mapContainer, "mouseout", this.handleMouseOut, this)
            } else {
                this._mapContainer != document.body && Browser.addEventListener(document.body, "mouseover", this.handleMouseOut, this);
                Browser.addEventListener(window, "mouseout", this.handleMouseOut, this)
            }
            this.dispatchEvent("mouseover")
        }
    };
    HybridMouse.prototype.updateDragging = function(obj) {
        var overMap = this.overMap();
        var mouseDown = this.mouseDown();
        if (!this.dragging) {
            if (mouseDown && overMap) {
                this._dragStartData = obj;
                this.dragging = true;
                this._prevX = obj.pageX;
                this._prevY = obj.pageY;
                this.dispatchEvent("dragstart", obj)
            }
        } else if (!mouseDown) {
            this.dragging = false;
            this.dispatchEvent("dragend", obj)
        } else {
            obj.shiftX = obj.pageX - this._dragStartData.pageX;
            obj.shiftY = obj.pageY - this._dragStartData.pageY;
            obj.deltaX = obj.pageX - this._prevX;
            obj.deltaY = obj.pageY - this._prevY;
            this.dispatchEvent("drag", obj);
            this._prevX = obj.pageX;
            this._prevY = obj.pageY
        }
    };
    HybridMouse.prototype.handleMouseDown = function(e) {
        this._mouseDown = true;
        if (this.overMap()) {
            var data = this.getStandardMouseData(e);
            data.downTime = (new Date).getTime();
            this._downData = data;
            this.updateDragging(data)
        }
    };
    HybridMouse.prototype.handleMouseUp = function(e) {
        this._mouseDown = false;
        var upData = this.getStandardMouseData(e);
        this.updateDragging(upData);
        var downData = this._downData;
        if (downData && this.overMap()) {
            if (Math.abs(downData.pageX - upData.pageX) + Math.abs(downData.pageY - upData.pageY) < 6) {
                var elapsed = (new Date).getTime() - downData.downTime;
                if (elapsed < 500) {
                    this.dispatchEvent("click", upData)
                }
            }
        }
    };
    HybridMouse.prototype.updateContainerBounds = function(l, t, r, b) {
        this._boundsOnPage.setBounds(l, t, r, b)
    };
    HybridMouse.prototype.getStandardMouseData = function(e) {
        e = this.standardizeMouseEvent(e);
        var pageX = e.pageX;
        var pageY = e.pageY;
        var bounds = this._boundsOnPage;
        var mapX = pageX - bounds.left;
        var mapY = pageY - bounds.bottom;
        return {
            pageX: pageX,
            pageY: pageY,
            mapX: mapX,
            mapY: mapY,
            centerX: bounds.centerX(),
            centerY: bounds.centerY(),
            deltaX: 0,
            deltaY: 0,
            deltaScale: 1
        }
    };
    HybridMouse.prototype.getCurrentMouseData = function() {
        var obj = {};
        if (this._moveData) {
            Opts.copyAllParams(obj, this._moveData)
        }
        return obj
    };
    HybridMouse.prototype.pageX = function() {
        return this._moveData.pageX
    };
    HybridMouse.prototype.pageY = function() {
        return this._moveData.pageY
    };
    var moveCount = 0;
    var moveSecond = 0;
    HybridMouse.prototype.standardizeMouseEvent = function(e) {
        if (e && e.pageX !== void 0) {
            return e
        }
        e = e || window.event;
        var o = {
            pageX: e.pageX || e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft,
            pageY: e.pageY || e.clientY + document.body.scrollTop + document.documentElement.scrollTop
        };
        return o
    };
    HybridMouse.prototype.throttledMouseMove = function(e) {
        var minInterval = 40;
        var now = (new Date).getTime();
        var elapsed = now - (this._prevMoveTime || 0);
        if (elapsed > minInterval) {
            this._prevMoveTime = now;
            this.handleMouseMove(e)
        }
    };
    HybridMouse.prototype.handleMouseMove = function(e) {
        this._moveData = this.getStandardMouseData(e);
        this.triggerMouseMove()
    };
    HybridMouse.prototype.triggerMouseMove = function() {
        var obj = this._moveData;
        if (!obj) {
            return
        }
        var isOver = this._boundsOnPage.containsPoint(obj.pageX, obj.pageY);
        if (!this._mapContainer) {
            var wasOver = this._overMap;
            if (isOver && !wasOver) {
                this.triggerMouseOver()
            } else if (!isOver && wasOver) {
                this.triggerMouseOut()
            }
        } else if (this._deferringMouseOut) {
            this._deferringMouseOut = false;
            this.triggerMouseOut()
        }
        if (this._overMap) {
            this.dispatchEvent("mousemove", obj)
        }
        this.updateDragging(obj)
    };

    function joinDataTables(dest, destKey, src, srcKey, srcFilter) {
        if (!dest.isReady() || !src.isReady()) {
            trace("[JoinedTable.joinTables()] Source or destination table is not ready; src:", src.isReady(), "dest:", dest.isReady());
            return
        }
        if (!dest.fieldExists(destKey)) {
            trace("[JoinedTable.joinTable()] destination table is missing its key field: ", destKey);
            return
        }
        if (!src.fieldExists(srcKey)) {
            trace("[JoinedTable.joinTable()] source table is missing its key field:", srcKey);
            return
        }
        var filtered = srcFilter && typeof srcFilter == "function";
        var destSchema = dest.schema;
        var srcSchema = src.schema;
        var destLen = dest.size();
        var srcLen = src.size();
        var keyArr = Utils.getKeys(srcSchema);
        keyArr = Utils.filter(keyArr, function(fieldName) {
            return !(fieldName == destKey)
        });
        var fieldCount = keyArr.length;
        var destDataArr = Utils.createArray(fieldCount, function() {
            return new Array(destLen)
        });
        var srcDataArr = Utils.map(keyArr, function(key) {
            return src.getFieldData(key)
        });
        var index = dest.__getIndex(destKey);
        var srcKeyArr = src.getFieldData(srcKey);
        var lookup = new Array(destLen);
        var filterRec = src.getRecordById(0);
        for (var i = 0; i < srcLen; i++) {
            if (filtered) {
                filterRec.id = i;
                if (!srcFilter(filterRec)) {
                    continue
                }
            }
            var val = srcKeyArr[i];
            var destId = index[val];
            lookup[i] = destId
        }
        for (var i = 0; i < fieldCount; i++) {
            var destArr = destDataArr[i];
            var srcArr = srcDataArr[i];
            for (var j = 0; j < srcLen; j++) {
                var destId = lookup[j];
                if (destId !== undefined) {
                    destArr[destId] = srcArr[j]
                }
            }
        }
        var schema = {};
        var data = {};
        Opts.copyAllParams(schema, destSchema);
        Opts.copyAllParams(data, dest.data);
        Opts.copyNewParams(schema, srcSchema);
        Opts.copyAllParams(data, Utils.arrayToIndex(keyArr, destDataArr));
        dest.populate(data, schema)
    }
    Opts.copyAllParams(C, {
        INTEGER: "integer",
        STRING: "string",
        DOUBLE: "double",
        OBJECT: "object"
    });

    function DataTable() {
        if (arguments.length > 0) {
            var arg0 = arguments[0];
            if (arg0 == null) {
                error("Received empty data object -- check data source")
            }
            if (arg0 && arg0.schema) {
                this.populate(arg0.data || null, arg0.schema)
            }
        } else {
            this.__initEmptyTable()
        }
    }
    Opts.inherit(DataTable, Waiter);
    DataTable.validateFieldType = function(raw) {
        raw = raw.toLowerCase();
        var type = C.STRING;
        switch (raw) {
            case "string":
            case "str":
                type = C.STRING;
                break;
            case "int":
            case "integer":
                type = C.INTEGER;
                break;
            case "double":
            case "decimal":
            case "number":
                type = C.DOUBLE;
                break;
            case "obj":
            case "object":
                type = C.OBJECT;
                break
        }
        return type
    };
    DataTable.prototype.toString = function() {
        var str = "[DataTable length:" + this.size() + ", schema:" + Utils.toString(this.schema) + "]";
        return str
    };
    DataTable.prototype.handleReadyState = function() {
        this._indexedField && this.indexOnField(this._indexedField)
    };
    DataTable.prototype.size = function() {
        return this.length
    };
    DataTable.prototype.joinTableByKey = function(localKey, otherTable, otherKey, filter) {
        this.waitFor(otherTable);
        this.addEventListener("ready", callback, this, 999);

        function callback() {
            joinDataTables(this, localKey, otherTable, otherKey, filter)
        }
        return this
    };
    DataTable.prototype.importObjectRecords = function(arr, schema) {
        assert(arr && arr.length > 0, "Missing array of data values");
        var rec0 = arr[0];
        assert(Utils.isObject(rec0), "Expected an array of objects");
        var fields, types;
        if (schema) {
            types = [];
            fields = [];
            Utils.forEach(schema, function(val, key) {
                types.push(val);
                fields.push(val)
            })
        } else {
            fields = Utils.getKeys(rec0)
        }
        return this.importArrayRecords(arr, fields, types)
    };
    DataTable.prototype.importArrayRecords = function(arr, fields, types) {
        assert(arr && arr.length > 0, "Missing array of data values");
        var rec0 = arr[0];
        var fieldIndex;
        if (Utils.isObject(rec0)) {
            fieldIndex = fields
        } else if (Utils.isArray(rec0)) {
            fieldIndex = Utils.map(fields, function(val, i) {
                return i
            })
        } else {
            error("Invalid record type; expected Arrays or Objects")
        }
        if (!types) {
            types = [];
            Utils.forEach(fieldIndex, function(fieldId, i) {
                var val = rec0[fieldId];
                if (Utils.isString(val)) {
                    types.push("string")
                } else if (!isNaN(val)) {
                    types.push("double")
                } else {
                    trace("[DataTable.importArrayRecords()] unrecognized type of field:", fields[i], "-- using 'object' type");
                    types.push("object")
                }
            })
        } else {
            assert(types.length == fields.length, "Mismatched types and fields; types:", types, "fields:", fields)
        }
        var columns = Utils.map(fields, function() {
            return []
        });
        for (var rid = 0, len = arr.length; rid < len; rid++) {
            var rec = arr[rid];
            for (var j = 0, numFields = fields.length; j < numFields; j++) {
                columns[j].push(rec[fieldIndex[j]])
            }
        }
        var data = {},
            schema = {};
        Utils.forEach(fields, function(fname, i) {
            data[fname] = columns[i];
            schema[fname] = types[i]
        });
        this.populate(data, schema);
        return this
    };
    DataTable.prototype.getFields = function() {
        return Utils.getKeys(this.data)
    };
    DataTable.prototype.__initEmptyTable = function(rawSchema) {
        this.data = {};
        this.length = 0;
        this.schema = {};
        this._rec = new Record(this, -1);
        if (rawSchema) {
            for (var key in rawSchema) {
                if (!rawSchema.hasOwnProperty(key)) {
                    continue
                }
                var type = DataTable.validateFieldType(rawSchema[key]);
                if (!type) {
                    trace("[DataTable.__initEmptyTable()] invalid type for field: ", key, ":", rawSchema[key]);
                    continue
                }
                this.schema[key] = type;
                this.data[key] = []
            }
        }
    };
    DataTable.prototype.populate = function(data, schema) {
        assert(!!schema, "Missing schema object");
        if (!data) {
            this.__initEmptyTable(schema)
        } else if (Utils.isArray(data)) {
            this.__initEmptyTable(schema);
            for (var i = 0, len = data.length; i < len; i++) {
                this.appendRecordData(data[i])
            }
        } else {
            this.__initEmptyTable();
            var len = 0;
            for (var key in schema) {
                if (!schema.hasOwnProperty(key)) {
                    continue
                }
                if (!data) {
                    this.data[key] = [];
                    continue
                }
                this.schema[key] = DataTable.validateFieldType(schema[key]);
                if (!data[key]) {
                    trace("[DataTable.populate()] Missing data for field:", key, "schema:", schema);
                    continue
                }
                var thisLen = data[key].length;
                this.data[key] = data[key];
                if (len > 0 && thisLen != len) {
                    trace("[DataTable.populate()] Warning: inconsistent field length. Expected length:", len, "Field name:", key, "Field length:", thisLen)
                } else {
                    len = thisLen
                }
            }
            this.length = len
        }
        if (this.isReady()) {
            if (this._indexedField) {
                this.indexOnField(this._indexedField)
            }
            this.dispatchEvent("change")
        } else {
            this.startWaiting()
        }
        return this
    };
    DataTable.prototype.getRecordById = function(id) {
        this._rec.id = id;
        return this._rec
    };
    DataTable.prototype.fieldExists = function(f) {
        return !!(this.schema && this.schema[f])
    };
    DataTable.prototype.getFieldType = function(f) {
        return this.schema[f]
    };
    DataTable.prototype.getIndexedRecord = function(v, fast) {
        var rec = fast ? this._rec : new Record(this, -1);
        var idx = this._index[v];
        if (idx == null) {
            idx = -1
        }
        rec.id = idx;
        return rec
    };
    DataTable.prototype.indexOnField = function(fname) {
        this._indexedField = fname;
        if (!this.isReady()) {
            trace("[DataTable.indexOnField()] Table not READY; deferring indexing.]");
            return
        }
        this._index = this.__getIndex(fname)
    };
    DataTable.prototype.__getIndex = function(fname) {
        assert(this.fieldExists(fname), "Missing field:", fname);
        var index = {};
        var arr = this.data[fname];
        for (var i = 0, len = this.size(); i < len; i++) {
            index[arr[i]] = i
        }
        return index
    };
    DataTable.prototype.getFieldData = function(f) {
        var arr = this.data[f];
        return arr ? arr : []
    };
    DataTable.prototype.addField = function(f, type, def) {
        var arr = Utils.createArray(this.size(), def);
        this.insertFieldData(f, type, arr)
    };
    DataTable.prototype.initField = function(f, val) {
        if (this.fieldExists(f) == false) {
            trace("[DataTAble.initField()] field does not exists:", f);
            return
        }
        var arr = Utils.createArray(this.size(), val);
        this.insertFieldData(f, this.getFieldType(f), arr)
    };
    DataTable.prototype.deleteField = function(f) {
        if (this._indexedField == f) {
            this._indexedField = null
        }
        delete this.schema[f];
        delete this.data[f];
        if (Utils.getKeys(this.schema).length == 0) {
            this.length = 0
        }
    };
    DataTable.prototype.insertFieldData = function(f, type, arr) {
        type = DataTable.validateFieldType(type);
        this.schema[f] = type;
        this.data[f] = arr;
        if (this.length == 0) {
            this.length == arr.length
        } else if (arr.length != this.length) {
            trace("[DataTable.insertFieldData() Warning: column size mismatch")
        }
        if (this._indexedField == f) {
            this.indexOnField(f)
        }
    };
    DataTable.prototype.getNullValueForType = function(type) {
        var nullVal = null;
        if (type == C.INTEGER) {
            nullVal = 0
        } else if (type == C.STRING) {
            nullVal = ""
        } else if (type == C.DOUBLE) {
            nullVal = NaN
        }
        return nullVal
    };
    DataTable.prototype.appendRecordData = function(obj, niceNull) {
        var dest = this.data;
        var ifield = this._indexedField || void 0;
        for (var fname in dest) {
            var val = obj[fname];
            if (val === void 0 && niceNull) {
                var type = this.schema[fname];
                val = this.getNullValueForType(type);
                if (type == "double" && isNaN(val)) {
                    val = 0
                }
            }
            dest[fname].push(val);
            if (fname === ifield) {
                this._index[val] = this.length
            }
        }
        this.length += 1;
        return new Record(this, this.length - 1)
    };
    DataTable.prototype.insertMappedValues = function(f, type, func, ctx) {
        var arr = this.map(func, ctx);
        this.insertFieldData(f, type, arr)
    };
    DataTable.prototype.updateField = function(f, func, ctx) {
        if (this.fieldExists(f)) {
            var type = this.getFieldType(f);
            this.insertMappedValues(f, type, func, ctx)
        } else {
            trace("[DataTable.updateField()] Field not found:", f)
        }
    };
    DataTable.prototype.updateValue = function(f, id, val) {
        if (id < 0 || id >= this.length || !this.data[f]) {
            error("[DataTable.updateValue()] invalid field or id:", f, id)
        }
        this.data[f][id] = val;
        if (this._indexedField === f) {
            this._index[val] = id
        }
    };
    DataTable.prototype.map = function(func, ctx) {
        var arr = [];
        var rec = this._rec;
        for (var rid = 0, len = this.size(); rid < len; rid++) {
            rec.id = rid;
            arr.push(func.call(ctx, rec))
        }
        return arr
    };
    DataTable.prototype.insertMappedFields = function(fields, types, func) {
        var numFields = fields.length;
        var dataArr = Utils.createArray(numFields, Array);
        var rec = this._rec;
        var tmp = [];
        for (var rid = 0, len = this.size(); rid < len; rid++) {
            rec.id = rid;
            func(rec, tmp);
            for (var j = 0, len2 = numFields; j < numFields; j++) {
                dataArr[j].push(tmp[j])
            }
        }
        var schema = Utils.arrayToIndex(fields, types);
        var data = Utils.arrayToIndex(fields, dataArr);
        this.populate(data, schema)
    };
    DataTable.prototype.getRecordSet = function() {
        var ids = Utils.range(this.size());
        return new RecordSet(this, ids)
    };
    DataTable.prototype.records = DataTable.prototype.getRecordSet;
    DataTable.prototype.getMatchingRecord = function() {
        var set = this.getMatchingRecordSet.apply(this, arguments);
        var rec = set.hasNext() ? set.nextRecord : new Record(null, -1);
        return rec
    };
    DataTable.prototype.filter = function(func, ctx) {
        return this.getFilteredCopy(this.getRecordSet().filter(func, ctx).getIds())
    };
    DataTable.prototype.copyFields = function(fields) {
        var src = this;
        var dest = new DataTable;
        Utils.forEach(fields, function(f) {
            if (!src.fieldExists(f)) {
                trace("[DataTable.copyFields()] Missing field:", f);
                return
            }
            dest.insertFieldData(f, src.getFieldType(f), src.getFieldData(f))
        });
        return dest.startWaiting()
    };
    DataTable.prototype.getFilteredCopy = function(ids) {
        var schema = Opts.copyAllParams({}, this.schema);
        var newLen = ids.length;
        var dest = Utils.map(this.data, function(arr, key) {
            return Utils.getFilteredCopy(arr, ids)
        });
        var newTable = (new DataTable).populate(dest, schema);
        if (this._indexedField) {
            newTable.indexOnField(this._indexedField)
        }
        return newTable
    };
    DataTable.prototype.getMatchingIds = function(f, v, ids) {
        var matching = [],
            data = this.getFieldData(f),
            func = typeof v == "function",
            indexed = !!ids,
            matchArr = Utils.isArray(v),
            len = indexed ? ids.length : this.size();
        for (var i = 0; i < len; i++) {
            var idx = indexed ? ids[i] : i;
            var val = data[idx];
            if (matchArr) {
                Utils.indexOf(v, val) != -1 && matching.push(idx)
            } else if (func ? v(val) : val === v) {
                matching.push(idx)
            }
        }
        return matching
    };
    DataTable.prototype.getMatchingRecordSet = function() {
        var ids, f, v;
        for (var i = 0; i < arguments.length; i += 2) {
            f = arguments[i];
            v = arguments[i + 1];
            ids = this.getMatchingIds(f, v, ids)
        }
        return new RecordSet(this, ids || [])
    };

    function RecordSet(table, ids) {
        this._idx = 0;
        this.nextRecord = new Record(table, -1);
        this.size = function() {
            return ids.length
        };
        this.hasNext = function() {
            if (this._idx >= ids.length) {
                this.nextRecord.id = -1;
                this._idx = 0;
                return false
            }
            this.nextRecord.id = ids[this._idx++];
            return true
        };
        this.getIds = function() {
            return ids
        };
        this.getFieldData = function(f) {
            var o = [];
            var data = table.getFieldData(f);
            for (var i = 0, len = ids.length; i < len; i++) {
                o.push(data[ids[i]])
            }
            return o
        };
        this.sortOnField = function(f, asc) {
            Utils.sortArrayIndex(ids, table.getFieldData(f), asc);
            return this
        };
        this.filter = function(func, ctx) {
            var rec = new Record(table, -1);
            var oldIds = ids.splice(0, ids.length);
            for (var i = 0, len = oldIds.length; i < len; i++) {
                var id = oldIds[i];
                rec.id = id;
                func.call(ctx, rec) && ids.push(id)
            }
            return this
        };
        this.forEach = function(func, ctx) {
            while (this.hasNext()) {
                func.call(ctx, this.nextRecord)
            }
        };
        this.toTable = function() {
            return table.getFilteredCopy(ids)
        }
    }

    function Record(table, rid) {
        this.id = rid;
        this._table = table;
        this._data = table ? table.data : {}
    }

    function NullRecord() {
        this.__super__(null, -1)
    }
    Opts.inherit(NullRecord, Record);
    Record.prototype.toString = function() {
        var obj = this.getDataAsObject();
        obj.id = this.id;
        return "[Record" + Utils.strval(obj) + "]"
    };
    Record.prototype.isNull = function() {
        return this.id < 0
    };
    Record.prototype.clone = function() {
        return new Record(this._table, this.id)
    };
    Record.prototype.getString = function(f) {
        return this.get(f) || ""
    };
    Record.prototype.getNumber = function(f) {
        return this.get(f) * 1
    };
    Record.prototype.getInteger = function(f) {
        return this.get(f) << 0
    };
    Record.prototype.get = function(f) {
        var arr = this._data[f];
        var val = arr && arr[this.id];
        return val
    };
    Record.prototype.set = function(f, v) {
        this._table.updateValue(f, this.id, v)
    };
    Record.prototype.getDataAsObject = function(objRef) {
        var obj = Utils.map(this._data, function(arr) {
            return arr[this.id]
        }, this);
        return obj
    };

    function LinkedDataSource(geoTable, geoKey, dataTable, dataKey) {
        this._geo = geoTable;
        this._geoKey = geoKey;
        this.waitFor(geoTable);
        this._data = dataTable;
        this._dataKey = dataKey;
        this.waitFor(dataTable);
        dataTable.addEventListener("change", this.handleDataChange, this);
        this.startWaiting()
    }
    Opts.inherit(LinkedDataSource, Waiter);
    LinkedDataSource.prototype.handleReadyState = function() {
        this._data.indexOnField(this._dataKey)
    };
    LinkedDataSource.prototype.handleDataChange = function(evt) {
        trace("[LinkedDataSource.handleDataChange()] data changed");
        this.isReady() && this.dispatchEvent("change")
    };
    LinkedDataSource.prototype.getRecordById = function(id) {
        if (!this._ready) {
            trace("[LinkedDataSource.getRecordById()] not READY");
            return null
        }
        var geoRec = this._geo.getRecordById(id);
        var keyVal = geoRec.get(this._geoKey);
        var dataRec = this._data.getIndexedRecord(keyVal);
        return dataRec
    };
    LinkedDataSource.prototype.size = function() {
        return this._geo.size()
    };
    LinkedDataSource.prototype.getFieldData = function(f) {
        var arr = [];
        if (!this._ready) {
            trace("[LinkedDataSource.getDataArray()] not READY");
            return arr
        }
        var len = this._geo.size();
        for (var i = 0; i < len; i++) {
            var rec = this.getRecordById(i);
            var val = rec.get(f);
            arr.push(val)
        }
        return arr
    };

    function ShapeVector(id, vertexSet) {
        this.id = id;
        this.parts = [];
        if (vertexSet) {
            this.addPartData(vertexSet)
        }
        this.sortKey = "";
        this.reset()
    }
    Opts.extendPrototype(ShapeVector, BoundingBox);
    ShapeVector.prototype.addPartData = function(vertexSet) {
        this.parts.push(vertexSet);
        this.mergeBounds(vertexSet)
    };
    ShapeVector.prototype.drawPath = function drawPath(context, ext) {
        var numParts = this.parts.length;
        for (var j = 0; j < numParts; j++) {
            var vec = this.parts[j];
            vec.draw(context, ext)
        }
    };
    ShapeVector.prototype.getSortKey = function() {
        return this.sortKey
    };
    ShapeVector.prototype.reset = function() {
        this.__setPart(-1)
    };
    ShapeVector.prototype.__setPart = function(i) {
        this._currPart = this.parts[i] || null;
        this._partId = i;
        this._pointId = 0
    };
    ShapeVector.prototype.nextPart = function() {
        var partId = this._partId + 1;
        if (partId >= this.parts.length) {
            this.reset();
            return false
        }
        this.__setPart(partId);
        return true
    };
    ShapeVector.prototype.nextPoint = function() {
        var vec = this._currPart;
        if (!vec || !vec.hasNext()) {
            return false
        }
        this.x = vec.nextX;
        this.y = vec.nextY;
        this.i = this._pointId++;
        return true
    };
    ShapeVector.prototype.hasNext = function() {
        return this.nextPoint() || this.nextPart() && this.nextPoint()
    };

    function VertexSet(xx, yy) {
        this.xx = xx;
        this.yy = yy;
        this._idx = 0;
        this.nextX = 0;
        this.nextY = 0
    }
    VertexSet.prototype = new BoundingBox;
    VertexSet.prototype.size = function() {
        return this.xx && this.xx.length || 0
    };
    VertexSet.prototype.hasNext = function() {
        var idx = this._idx;
        if (idx >= this.xx.length) {
            this._idx = 0;
            return false
        }
        this.nextX = this.xx[idx];
        this.nextY = this.yy[idx];
        this._idx = idx + 1;
        return true
    };
    VertexSet.prototype.calcBounds = function calcBounds() {
        var len = this.size();
        if (len == 0) {
            return
        }
        var xx = this.xx;
        var yy = this.yy;
        var maxx = xx[0];
        var maxy = yy[0];
        var minx = maxx;
        var miny = maxy;
        for (var i = 1; i < len; i++) {
            var x = xx[i];
            var y = yy[i];
            if (x > maxx) maxx = x;
            else if (x < minx) minx = x;
            if (y > maxy) maxy = y;
            else if (y < miny) miny = y
        }
        this.setBounds(minx, maxy, maxx, miny)
    };
    VertexSet.prototype.addPoint = function(x, y) {
        this.xx.push(x);
        this.yy.push(y)
    };
    VertexSet.prototype.draw = function(context, ext) {
        var x, y, mx = ext.mx,
            my = ext.my,
            bx = ext.bx,
            by = ext.by,
            first = true;
        while (this.hasNext()) {
            x = this.nextX * mx + bx;
            y = this.nextY * my + by;
            if (first) {
                first = false;
                context.moveTo(x, y)
            } else {
                context.lineTo(x, y)
            }
        }
    };

    function Utf16Array(str) {
        this._str = str;
        this._idx = 0;
        this._aligned = true;
        this._offByte = 0;
        this._useBE = true;
        this.rewind = function() {
            this._idx = 0;
            this._aligned = true
        };
        this.useBigEndian = function() {
            this._useBE = true
        };
        this.useLittleEndian = function() {
            this._useBE = false
        };
        this.readUnsignedInt = function() {
            var s1 = this.readUnsignedShort();
            var s2 = this.readUnsignedShort();
            var val = this._useBE ? s1 << 16 | s2 : s2 << 16 | s1;
            return val
        }
    }
    Utf16Array.prototype.readByte = function() {
        var val;
        if (this._aligned) {
            var code = this.readUnsignedShort(true);
            this._offByte = code & 255;
            val = code >> 8;
            this._aligned = false
        } else {
            val = this._offByte;
            this._aligned = true
        }
        return val
    };
    Utf16Array.prototype.readUnsignedShort = function(forceBE) {
        var code = this._str.charCodeAt(this._idx++);
        var val;
        if (code >= 55295 && code <= 57343) {
            if (code == 55295) {
                code = 0
            } else {
                var secondPart = this._str.charCodeAt(this._idx++);
                code = 1024 * (code - 55296) + (secondPart - 56320)
            }
        }
        if (this._aligned === true) {
            val = code
        } else {
            val = this._offByte << 8 | code >> 8;
            this._offByte = code & 255
        }
        if (!(forceBE || this._useBE)) {
            val = (val & 255) << 8 | val >> 8
        }
        return val
    };
    Utf16Array.prototype.readDouble = function() {
        var val;
        var b7 = this.readByte();
        var b6 = this.readByte();
        var b5 = this.readByte();
        var b4 = this.readByte();
        var b3 = this.readByte();
        var b2 = this.readByte();
        var b1 = this.readByte();
        var b0 = this.readByte();
        var isNegative = (b0 & 128) > 0;
        var biasedExp = ((b0 & 127) << 4) + ((b1 & 240) >> 4);
        var exp = biasedExp - 1023;
        b1 = b1 & 15;
        var mant = b7 + (b6 << 8) + (b5 << 16);
        var f = 16777216;
        mant += b4 * f;
        f *= 256;
        mant += b3 * f;
        f *= 256;
        mant += b2 * f;
        f *= 256;
        mant += b1 * f;
        if (biasedExp == 2047) {
            if (mant != 0) {
                val = NaN
            } else if (isNegative) {
                val = -Infinity
            } else {
                val = Infinity
            }
        } else {
            mant *= Math.pow(2, -52);
            if (biasedExp > 0) {
                mant += 1
            }
            val = mant * Math.pow(2, exp);
            if (isNegative) {
                val *= -1
            }
        }
        return val
    };

    function TopologyIndex(xx, yy, zz, scale) {
        this._vectorIds = [];
        this._shapeIds = [];
        this._reversed = [];
        this._nextArcIds = [];
        this._neighborArcIds = [];
        this._ringIds = [];
        this.arcCount = 0;
        this.shapeCount = 0;
        var reversedIndex = {};
        this.addArc = function(vectorId, ringId, reversed) {
            var currArcId = this.arcCount++;
            if (reversed) {
                reversedIndex[vectorId] = currArcId
            }
            this._reversed.push(reversed);
            this._vectorIds.push(vectorId);
            this._ringIds.push(ringId)
        };
        this.getMergedVertexSet = function(arcIds) {
            var vec = new MshpVertexSet(scale);
            for (var i = 0, len = arcIds.length; i < len; i++) {
                var arcId = arcIds[i];
                var vectorId = this._vectorIds[arcId];
                var reversed = this._reversed[arcId];
                vec.extend(xx[vectorId], yy[vectorId], zz[vectorId], reversed)
            }
            vec.calcBounds();
            return vec
        };
        this.buildTopology = function(index, numShapes) {
            if (!numShapes) {
                trace("[TopoIndex.buildTopology()] missing a valid shape count.")
            }
            this.shapeCount = numShapes || 0;
            var nextRingId, currRingId, nextArcId, prevRingId = -1,
                firstArcId = -1;
            for (var arcId = 0, maxArcId = this.arcCount - 1; arcId <= maxArcId; arcId++) {
                var reversed = this._reversed[arcId];
                var vectorId = this._vectorIds[arcId];
                if (!reversed) {
                    var neighborArcId = reversedIndex[vectorId];
                    if (neighborArcId != null) {
                        this._neighborArcIds[arcId] = neighborArcId;
                        this._neighborArcIds[neighborArcId] = arcId
                    }
                }
                var currRingId = this._ringIds[arcId];
                nextRingId = arcId == maxArcId ? currRingId : this._ringIds[arcId + 1];
                if (prevRingId != currRingId) {
                    firstArcId = arcId
                }
                if (nextRingId == currRingId) {
                    nextArcId = arcId + 1
                } else if (firstArcId == arcId) {
                    nextArcId = -1
                } else {
                    nextArcId = firstArcId
                }
                this._nextArcIds[arcId] = nextArcId;
                prevRingId = currRingId;
                var shapeId = index[currRingId];
                this._shapeIds[arcId] = shapeId;
                if (shapeId === undefined) {
                    trace("[TopologyIndex.addRingIndex()] Undefined shape index for ring:", currRingId, "and arc:", arcId)
                }
            }
            this._ringIds = null;
            reversedIndex = null
        }
    }
    TopologyIndex.prototype.mergeShapes = function(shapeIds) {
        var shapeIndex = Utils.arrayToIndex(shapeIds);
        var arcIds = [];
        for (var i = 0, len = this.arcCount; i < len; i++) {
            var shapeId = this._shapeIds[i];
            if (shapeId in shapeIndex) {
                arcIds.push(i)
            }
        }
        var numArcs = arcIds.length;
        var visitedIndex = {};
        this.getAnotherArcId = function() {
            for (var i = 0; i < numArcs; i++) {
                var arcId = arcIds[i];
                if (!visitedIndex[arcId]) {
                    if (this.arcIsDissolved(arcId)) {
                        visitedIndex[arcId] = true
                    } else {
                        return arcId
                    }
                }
            }
            return -1
        };
        this.getNextArcId = function(firstArcId) {
            var nextArcId, arcId = firstArcId;
            while (arcId != -1 && arcId != null) {
                if (visitedIndex[arcId]) {
                    return -1
                }
                visitedIndex[arcId] = true;
                nextArcId = this._nextArcIds[arcId];
                if (nextArcId == firstArcId) {
                    return -1
                } else if (nextArcId == -1 || nextArcId == null) {
                    return -1
                }
                var shapeId = this._shapeIds[arcId];
                var nextShapeId = this._shapeIds[nextArcId];
                if (shapeId != nextShapeId) {
                    trace("*** [getNextArcId()] *** ran onto another shape; internal topology error.");
                    trace("  * currShape:", shapeId, "nextShape:", nextShapeId);
                    return -1
                }
                if (this.arcIsDissolved(nextArcId)) {
                    arcId = this._neighborArcIds[nextArcId]
                } else {
                    return nextArcId
                }
            }
            return -1
        };
        this.arcIsDissolved = function(arcId) {
            var neighborId = this._neighborArcIds[arcId];
            if (neighborId != null) {
                var neighborShapeId = this._shapeIds[neighborId];
                if (neighborShapeId in shapeIndex) {
                    return true
                }
            }
            return false
        };
        var shp = null;
        var startingArcId = this.getAnotherArcId();
        while (startingArcId != -1) {
            if (startingArcId == null) {
                trace("[] !!!! startingArcId is null; breaking");
                break
            }
            var mergedIds = [startingArcId];
            var nextArcId = this.getNextArcId(startingArcId);
            while (nextArcId != -1 && nextArcId != startingArcId) {
                mergedIds.push(nextArcId);
                nextArcId = this.getNextArcId(nextArcId)
            }
            var vec = this.getMergedVertexSet(mergedIds);
            if (!shp) {
                shp = new ShapeVector(0, vec)
            } else {
                shp.addPartData(vec)
            }
            startingArcId = this.getAnotherArcId()
        }
        return shp
    };
    var types = {
        POLYGONS: "polygons",
        POLYLINES: "polylines",
        POINTS: "points",
        OUTERLINES: "outerlines",
        INNERLINES: "innerlines",
        TOPOLOGY: "topology",
        OUTLINE: "outline"
    };
    Opts.copyNewParams(C, types);

    function MshpVertexSet(scale, xx, yy, zz, reversed) {
        this._scale = scale;
        this._idx = 0;
        if (!xx) {
            xx = [];
            yy = [];
            zz = []
        } else if (reversed) {
            xx = xx.concat().reverse();
            yy = yy.concat().reverse();
            zz = zz.concat().reverse()
        }
        this.xx = xx;
        this.yy = yy;
        this.zz = zz;
        this._size = xx.length
    }
    MshpVertexSet.prototype = new BoundingBox;
    MshpVertexSet.prototype.extend = function extend(xx, yy, zz, reversed) {
        if (!xx || xx.length < 2) {
            return
        }
        var len = this._size;
        var _xx = this.xx;
        var _yy = this.yy;
        var _zz = this.zz;
        if (reversed) {
            xx = xx.concat().reverse();
            yy = yy.concat().reverse();
            zz = zz.concat().reverse()
        }
        if (len > 0) {
            _xx.pop();
            _yy.pop();
            _zz.push(99)
        }
        _xx.push.apply(_xx, xx);
        _yy.push.apply(_yy, yy);
        _zz.push.apply(_zz, zz);
        this._size = _xx.length
    };
    MshpVertexSet.prototype.calcBounds = VertexSet.prototype.calcBounds;
    MshpVertexSet.prototype.draw = function draw(context, ext) {
        var mx = ext.mx,
            my = ext.my,
            bx = ext.bx,
            by = ext.by,
            xx = this.xx,
            yy = this.yy,
            zz = this.zz,
            level = this._scale.level,
            lastIdx = this._size - 1;
        if (lastIdx < 1) {
            return
        }
        var x = xx[0] * mx + bx;
        var y = yy[0] * my + by;
        context.moveTo(x, y);
        for (var i = 1; i <= lastIdx; i++) {
            var z = zz[i - 1];
            if (z >= level || i == lastIdx) {
                x = xx[i] * mx + bx;
                y = yy[i] * my + by;
                context.lineTo(x, y)
            }
        }
    };
    MshpVertexSet.prototype.hasNext = function hasNext(rev) {
        var idx = this._idx;
        var lastIdx = this._size - 1;
        if (idx >= this._size) {
            this._idx = 0;
            return false
        }
        var level = this._scale.level;
        var i = idx,
            inc = 1;
        if (rev) {
            i = lastIdx - idx;
            inc = -1
        }
        if (level > 0 && idx > 0) {
            var zz = this.zz;
            while (idx < lastIdx) {
                var thresh = zz[i - 1];
                if (thresh >= level) {
                    break
                }
                i += inc;
                idx++
            }
        }
        this.nextX = this.xx[i];
        this.nextY = this.yy[i];
        this._idx = idx + 1;
        return true
    };
    MshpVertexSet.prototype.size = function() {
        return this._size
    };

    function MshpScale(numLevels, interval, levelOneThreshold, scaleAdjustment) {
        var haveLevels = numLevels > 0 && interval > 1 && levelOneThreshold > 0;
        this.level = 0;
        this.updateContentWidth = function(wPix) {
            if (haveLevels === false) {
                return
            }
            var effectiveWidth = wPix *= scaleAdjustment;
            var maxCode = numLevels;
            var levelCode = 0;
            var levelThreshold = levelOneThreshold;
            while (effectiveWidth < levelThreshold && levelCode < maxCode) {
                levelCode++;
                levelThreshold /= interval
            }
            this.level = levelCode
        }
    }

    function MshpParser(mshpStr, transform, types) {
        if (!Utils.isArray(types)) {
            trace("[MshpParser()] Requires an array of shape types.");
            return
        }
        var typeIndex = Utils.arrayToIndex(types);
        var bytes = new Utf16Array(mshpStr);
        bytes.useLittleEndian();
        var metaData = this.parseHeader(bytes);
        if (!metaData) {
            trace("[MshpParser.parseByteArray()] error parsing file header; stopping.");
            return
        }
        if (!(metaData.shp_type == 5 && metaData.topology)) {
            trace("[MshpParser] Unable to parse; Parser currently only supports polygon data with topology. Found type:", metaData.shp_type, "topology?", metaData.topology);
            return
        }
        var simplifiedLevels = metaData.simplified_levels;
        var levelStepFactor = 2;
        if (simplifiedLevels > 0 && metaData.level_resolution > 1) {
            levelStepFactor = Math.pow(2, 1 / metaData.level_resolution)
        }
        var scaleAdjustment = Browser.iPhone || Browser.iPad ? .4 : .7;
        var levelOneThreshold = 1 << metaData.level_one_precision;
        this._vectorScale = new MshpScale(simplifiedLevels, levelStepFactor, levelOneThreshold, scaleAdjustment);
        this._layerBounds = this.parseVectors(bytes, transform || null, metaData);
        var extractPolygons = C.POLYGONS in typeIndex;
        var buildSharedArcIndex = C.INNERLINES in typeIndex || C.OUTERLINES in typeIndex;
        var buildTopology = C.TOPOLOGY in typeIndex || C.OUTLINE in typeIndex;
        this._polygonShapes = this.parseTopologyData(bytes, extractPolygons, buildSharedArcIndex, buildTopology);
        var sharedArcIndex = this._sharedArcIndex;
        if (C.POLYLINES in typeIndex) {
            this._lineShapes = this.initLines(C.POLYLINES)
        }
        if (C.OUTERLINES in typeIndex) {
            this._outerShapes = this.initLines(C.OUTERLINES, sharedArcIndex)
        }
        if (C.INNERLINES in typeIndex) {
            this._innerShapes = this.initLines(C.INNERLINES, sharedArcIndex)
        }
        this._xx = null;
        this._yy = null;
        this._zz = null
    }
    MshpParser.prototype.getBounds = function() {
        return this._layerBounds.cloneBounds()
    };
    MshpParser.prototype.initLines = function(type, sharedIndex) {
        var getInner = type == C.INNERLINES;
        var getOuter = type == C.OUTERLINES;
        var getAll = !(getInner || getOuter);
        var scaleObj = this._vectorScale;
        var shapes = [];
        var xx = this._xx;
        var yy = this._yy;
        var zz = this._zz;
        var len = xx.length;
        var shapeCount = 0;
        for (var arcId = 0; arcId < len; arcId++) {
            if (getInner && !sharedIndex[arcId] || getOuter && sharedIndex[arcId] === true) {
                continue
            }
            var vec = new MshpVertexSet(scaleObj, xx[arcId], yy[arcId], zz[arcId]);
            vec.calcBounds();
            var shp = new ShapeVector(shapeCount, vec);
            shapes.push(shp);
            shapeCount += 1
        }
        return shapes
    };
    MshpParser.prototype.parseHeader = function(bytes) {
        var meta = {};
        meta.topology = true;
        var versionCode = bytes.readByte();
        var shpType = bytes.readByte();
        meta.shp_type = shpType;
        if (shpType != 5 && shpType != 3) {
            trace("[MshpParser.parseHeader()]", "unsupported shape type, stopping: " + shpType + " format:", versionCode);
            return null
        }
        meta.num_arcs = bytes.readUnsignedInt();
        if (versionCode >= 64) {
            bytes.readUnsignedInt();
            bytes.readUnsignedInt();
            bytes.readUnsignedInt()
        }
        meta.minx = bytes.readDouble();
        meta.miny = bytes.readDouble();
        meta.maxx = bytes.readDouble();
        meta.maxy = bytes.readDouble();
        meta.m_pack = bytes.readDouble();
        meta.bx_pack = bytes.readDouble();
        meta.by_pack = bytes.readDouble();
        meta.bit_precision = bytes.readByte();
        meta.bitShift = 1 << meta.bit_precision - 1;
        meta.simplified_levels = bytes.readByte();
        meta.level_resolution = bytes.readByte();
        meta.level_one_precision = bytes.readByte();
        meta.extract_levels = 0;
        meta.min_available_level = 0;
        if (versionCode == 3) {
            meta.extract_levels = bytes.readByte();
            meta.min_available_level = meta.simplified_levels - meta.extract_levels + 1
        }
        meta.mUnpack = 1 / meta.m_pack;
        meta.bxUnpack = -meta.bx_pack * meta.mUnpack;
        meta.byUnpack = -meta.by_pack * meta.mUnpack;
        return meta
    };
    MshpParser.prototype.extractMergedShape = function(ids) {
        if (!this._topology) {
            trace("[MshpParser.extractMergedShape()] Missing topology data; initialize with type C.TOPOLOGY");
            return null
        }
        var shp = this._topology.mergeShapes(ids);
        return shp
    };
    MshpParser.prototype.extractMergedShapeSet = function(index) {
        var shapes = Utils.map(index, function(shapeIds, i) {
            var shp = this.extractMergedShape(shapeIds);
            shp.id = i;
            return shp
        }, this);
        return shapes
    };
    MshpParser.prototype.extractProjectedShapes = function(type) {
        var shapes;
        if (type == C.POLYGONS) {
            shapes = this._polygonShapes
        } else if (type == C.POLYGONS) {
            shapes = this._lineShapes
        } else if (type == C.INNERLINES) {
            shapes = this._innerShapes
        } else if (type == C.OUTERLINES) {
            shapes = this._outerShapes
        } else if (type == C.TOPOLOGY) {
            shapes = []
        } else if (type == C.OUTLINE) {
            var allIds = Utils.sequence(this._topology.shapeCount);
            var shp = this.extractMergedShape(allIds);
            shapes = [shp]
        }
        if (!shapes) {
            trace("[MshpParser.extractProjectedShapes()] Shapes are not available for type:", type);
            shapes = []
        }
        var data = {
            bounds: this._layerBounds.cloneBounds(),
            polygons: type == C.POLYGONS || type == C.TOPOLOGY || type == C.OUTLINE,
            shapes: shapes,
            vectorScaler: this._vectorScale
        };
        return data
    };
    MshpParser.prototype.parseTopologyData = function(bytes, extractPolygons, buildSharedArcIndex, buildTopology) {
        var shapeRings = [];
        var newRing;
        var topoIndex = [];
        var topology = new TopologyIndex(this._xx, this._yy, this._zz, this._vectorScale);
        var arcs = [];
        var numRingArcs = bytes.readUnsignedInt();
        var ringCount = 0;
        var bounds = new BoundingBox;
        for (var j = 0; j < numRingArcs; j++) {
            var code = bytes.readByte();
            if (code == 1) {
                ringCount++
            }
            var ringId = ringCount - 1;
            var arcId = bytes.readUnsignedShort();
            var reverseFlag = bytes.readByte() === 0;
            if (buildSharedArcIndex && reverseFlag === true) {
                topoIndex[arcId] = true
            }
            if (buildTopology) {
                topology.addArc(arcId, ringId, reverseFlag)
            }
            if (extractPolygons) {
                newRing = shapeRings[ringId];
                if (!newRing) {
                    newRing = new MshpVertexSet(this._vectorScale);
                    shapeRings[ringId] = newRing
                }
                newRing.extend(this._xx[arcId], this._yy[arcId], this._zz[arcId], reverseFlag)
            }
        }
        if (buildSharedArcIndex) {
            this._sharedArcIndex = topoIndex
        }
        if (!extractPolygons) {
            return null
        }
        var numParts = bytes.readUnsignedInt();
        var shapeCount = 0;
        var shapeVectors = [];
        var ringShapeTable = [];
        for (var i = 0; i < numParts; i++) {
            var haveShape = false;
            do {
                var code = bytes.readByte();
                var partId = bytes.readUnsignedShort();
                bytes.readByte();
                if (code == 1) {
                    shapeCount++
                }
                var shapeId = shapeCount - 1;
                if (partId == 65535) {
                    trace("[MshpParser.parseTopologyData()] Found null shape; part id:", i);
                    shapeVectors[shapeId] = new ShapeVector(i)
                } else {
                    haveShape = true;
                    ringShapeTable[partId] = shapeId
                }
            } while (!haveShape);
            var newRing = shapeRings[partId];
            if (!newRing) {
                trace("@@@ Missing ring:", partId, "in MshpParser.unpackShapes(). skipping");
                continue
            }
            newRing.calcBounds();
            var shape = shapeVectors[shapeId];
            if (!shape) {
                shape = new ShapeVector(shapeId, newRing);
                shapeVectors[shapeId] = shape
            } else {
                shape.addPartData(newRing)
            }
        }
        if (topology) {
            topology.buildTopology(ringShapeTable, shapeCount);
            this._topology = topology
        }
        return shapeVectors
    };
    MshpParser.prototype.parseVectors = function(bytes, transform, metaData) {
        this._xx = [];
        this._yy = [];
        this._zz = [];
        var minx = Infinity,
            maxx = -Infinity,
            miny = Infinity,
            maxy = -Infinity;
        var nullVec = new VertexSet([], []);
        var bitPrecision = metaData.bit_precision;
        var useShort = bitPrecision <= 16;
        var x, y, xdiff, ydiff, rawx, rawy, xy;
        var numArcs = metaData.num_arcs;
        var shift = metaData.bitShift;
        var mUnpack = metaData.mUnpack;
        var bxUnpack = metaData.bxUnpack;
        var byUnpack = metaData.byUnpack;
        var xy = new Point;
        for (var arcId = 0; arcId < numArcs; arcId++) {
            var size = bytes.readUnsignedShort();
            var innerVertices = size < 2 ? 0 : size - 2;
            var thresholdBytes = metaData.simplified_levels > 0 ? innerVertices : 0;
            var xarr = new Array(size);
            var yarr = new Array(size);
            if (size > 0) {
                rawx = bytes.readUnsignedShort();
                rawy = bytes.readUnsignedShort();
                rawx = rawx * mUnpack + bxUnpack;
                rawy = rawy * mUnpack + byUnpack;
                if (transform) {
                    xy = transform.transformXY(rawx, rawy, xy);
                    x = xy.x;
                    y = xy.y
                } else {
                    x = rawx;
                    y = rawy
                }
                xarr[0] = x;
                yarr[0] = y;
                var lastIdx = size - 1;
                for (var i = 1; i <= lastIdx; i++) {
                    xdiff = bytes.readUnsignedShort() - shift;
                    ydiff = bytes.readUnsignedShort() - shift;
                    rawx += xdiff * mUnpack;
                    rawy += ydiff * mUnpack;
                    if (transform !== null) {
                        xy = transform.transformXY(rawx, rawy, xy);
                        x = xy.x;
                        y = xy.y
                    } else {
                        x = rawx;
                        y = rawy
                    }
                    if (x < minx) minx = x;
                    else if (x > maxx) maxx = x;
                    if (y < miny) miny = y;
                    else if (y > maxy) maxy = y;
                    xarr[i] = x;
                    yarr[i] = y
                }
            }
            var zarr = new Array(thresholdBytes);
            for (var j = 0; j < thresholdBytes; j++) {
                zarr[j] = bytes.readByte()
            }
            if (xarr.length > 0) {
                this._xx.push(xarr);
                this._yy.push(yarr);
                this._zz.push(zarr)
            } else {
                this._xx.push(null);
                this._yy.push(null);
                this._zz.push(null)
            }
        }
        return (new BoundingBox).setBounds(minx, maxy, maxx, miny)
    };
    var ShapeSource;

    function useHTML5Shapes() {
        ShapeData.prototype.handleReadyState = function() {
            if (this._utf16Str) {
                this._parser = new MshpParser(this._utf16Str, this._transform, this._types)
            }
        };
        ShapeData.prototype.extractProjectedShapes = function(type) {
            if (this._parser) {
                return this._parser.extractProjectedShapes(type)
            } else if (this._shapes) {
                return this._shapes
            }
        };
        ShapeData.prototype.extractMergedShape = function(ids) {
            var shp = this._parser.extractMergedShape(ids);
            return shp
        };
        ShapeData.prototype.getBounds = function() {
            if (this._shapes && this._shapes.bounds) {
                return this._shapes.bounds.cloneBounds()
            }
            if (this._parser) {
                return this._parser.getBounds()
            }
            trace("[ShapeData.getBounds()] Missing bounds data.");
            return null
        };
        ShapeSource = function(loader, type) {
            var _shapes;
            var _bounds;
            var _vectorScaler;
            var _selectedIds;
            this.getBounds = function() {
                return _bounds
            };
            this.mergeShapesById = function(ids) {
                if (type != C.TOPOLOGY) {
                    trace("[ShapeSource.mergeShapesById()] ShapeSource type should be:", C.TOPOLOGY, " -- found:", type);
                    return
                }
                _selectedIds = ids || [];
                if (this.isReady()) {
                    if (_selectedIds.length > 0) {
                        var shp = loader.extractMergedShape(ids);
                        _bounds = shp.cloneBounds();
                        _shapes = [shp]
                    } else {
                        _bounds = new BoundingBox;
                        _shapes = []
                    }
                }
            };
            this.handleReadyState = function() {
                var obj = loader.extractProjectedShapes(type);
                _shapes = obj.shapes;
                _bounds = obj.bounds;
                _vectorScaler = obj.vectorScaler;
                this._index = new ShapeIndex;
                this._index.init(_shapes, _bounds);
                if (_selectedIds) {
                    this.mergeShapesById(_selectedIds)
                }
            };
            this.updateContentSize = function(w, h) {
                _vectorScaler && _vectorScaler.updateContentWidth(w)
            };
            this.setFullDetail = function() {
                _vectorScaler.level = 0
            };
            this.getShapes = function() {
                return _shapes
            };
            this.getShapesInBoundingBox = function(bb, hiddenList) {
                if (!this.isReady()) {
                    return
                }
                var haveHidden = !!hiddenList;
                if (!haveHidden && bb.containsPoint(_bounds.left, _bounds.top) && bb.containsPoint(_bounds.right, _bounds.bottom)) {
                    return _shapes.concat()
                }
                if (_selectedIds) {
                    return _shapes.concat()
                }
                var arr = this._index.getSymbolsInBoundingBox(bb, hiddenList);
                return arr
            };
            this.getShapeById = function(id) {
                if (_shapes) {
                    return _shapes[id]
                }
                return null
            };
            this.waitFor(loader);
            this.startWaiting()
        };
        Opts.inherit(ShapeSource, Waiter)
    }

    function ProjectionBase() {
        this.useEllipsoid = true;
        this._DEG2RAD = Math.PI / 180;
        this._RAD2DEG = 180 / Math.PI;
        this._R = 6378137;
        this._E = .0818191908426215;
        this._A = 6378137;
        this._x0 = 0;
        this._y0 = 0;
        this._k0 = 1;
        this._tmpLatLng = new GeoPoint;
        this._tmpXY = new Point;
        var self = this;
        this.projectXY = function(x, y, arr) {
            arr = arr || [];
            self.projectLatLng(y, x, arr);
            return arr
        }
    }

    function NullProjection() {
        this.__super__();
        this.useEllipsoid = false
    }
    Opts.inherit(NullProjection, ProjectionBase);
    ProjectionBase.prototype.projectLatLng = function(lat, lng, xy) {
        xy = xy || new Point;
        xy.y = lat;
        xy.x = lng;
        return xy
    };
    ProjectionBase.prototype.projectLatLngBoundingBox = function(lngMin, latMax, lngMax, latMin) {
        if (latMax < latMin) {
            var tmp = latMin;
            latMin = latMax;
            latMax = tmp
        }
        var tl = this.projectLatLng(latMax, lngMin);
        var br = this.projectLatLng(latMin, lngMax);
        var bb = new BoundingBox;
        bb.setBounds(tl.x, tl.y, br.x, br.y);
        return bb
    };
    ProjectionBase.prototype.transformXY = function(x, y, xy) {
        xy = xy || new Point;
        this.projectLatLng(y, x, xy);
        return xy
    };
    ProjectionBase.prototype.unprojectXY = function(x, y, ll) {
        ll = ll || new GeoPoint;
        ll.lat = y;
        ll.lng = x;
        return ll
    };
    ProjectionBase.prototype.getProjectionTransform = function() {
        var self = this;
        var obj = {
            transformXY: function(x, y, xy) {
                return self.projectLatLng(y, x, xy)
            }
        };
        return obj
    };
    ProjectionBase.prototype.setFalseEastingNorthing = function(x0, y0) {
        this._x0 = x0;
        this._y0 = y0
    };
    ProjectionBase.prototype.setScaleFactor = function(k0) {
        this._k0 = k0
    };
    ProjectionBase.prototype.toString = function() {
        if (this.name) {
            return this.name + (this.useEllipsoid ? "_ell" : "_sph")
        }
        return ""
    };
    ProjectionBase.prototype.isSame = function(p2) {
        return p2 && this.toString() == p2.toString()
    };
    ProjectionBase.prototype.findApproxEllLatLong = function(x, y, ll) {
        ll = ll || new GeoPoint;
        var ell0 = this.useEllipsoid;
        this.useEllipsoid = false;
        this.unprojectXY(x, y, ll);
        this.useEllipsoid = true;
        var xy = new Point;
        this.projectLatLng(ll.lat, ll.lng, xy);
        this.useEllipsoid = false;
        var x3 = 2 * x - xy.x;
        var y3 = 2 * y - xy.y;
        this.unprojectXY(x3, y3, ll);
        this.useEllipsoid = true;
        this.projectLatLng(ll.lat, ll.lng, xy);
        var xd = xy.x - x;
        var yd = xy.y - y;
        this.useEllipsoid = false;
        this.unprojectXY(x3 - xd, y3 - yd, ll);
        this.useEllipsoid = ell0
    };

    function Mercator(latD, lngD) {
        this.__super__();
        this.name = "Mercator";
        this._lat0 = (latD || 0) * this._DEG2RAD;
        this._lng0 = (lngD || 0) * this._DEG2RAD
    }
    Opts.inherit(Mercator, ProjectionBase);

    function SphericalMercator() {
        var merc = new Mercator;
        merc.useEllipsoid = false;
        merc.name = "SphericalMercator";
        return merc
    }
    Mercator.prototype.projectLatLng = function(lat, lng, xy) {
        lat *= this._DEG2RAD;
        lng *= this._DEG2RAD;
        xy = xy || new Point;
        if (this.useEllipsoid) {
            var E = this._E;
            xy.x = this._A * (lng - this._lng0);
            xy.y = this._A * Math.log(Math.tan(Math.PI * .25 + lat * .5) * Math.pow((1 - E * Math.sin(lat)) / (1 + E * Math.sin(lat)), E * .5))
        } else {
            xy.x = this._R * (lng - this._lng0);
            xy.y = this._R * Math.log(Math.tan(Math.PI * .25 + lat * .5))
        }
        return xy
    };
    Mercator.prototype.unprojectXY = function(x, y, ll) {
        x -= this._x0;
        y -= this._y0;
        ll = ll || new GeoPoint;
        if (this.useEllipsoid) {
            var E = this._E;
            var lng = x / this._A + this._lng0;
            var HALF_PI = 1.5707963267948966;
            var TOL = 1e-8;
            var MAX_ITER = 10;
            var eccnth = .5 * E;
            var ts = Math.exp(-(y / this._A) / this._k0);
            var lat = HALF_PI - 2 * Math.atan(ts);
            var i = MAX_ITER;
            var dLat, con;
            do {
                con = E * Math.sin(lat);
                dLat = HALF_PI - 2 * Math.atan(ts * Math.pow((1 - con) / (1 + con), eccnth)) - lat;
                lat += dLat
            } while (Math.abs(dLat) > TOL && --i > 0);
            ll.lng = lng;
            ll.lat = lat
        } else {
            ll.lng = x / this._R + this._lng0;
            ll.lat = Math.PI * .5 - 2 * Math.atan(Math.exp(-y / this._R))
        }
        ll.lat *= this._RAD2DEG;
        ll.lng *= this._RAD2DEG;
        return ll
    };

    function GoogleCRS() {
        var proj = new SphericalMercator;
        return new MapCRS(proj)
    }

    function MapCRS(proj) {
        var R_MINOR = 6356752.3142;
        var R_MAJOR = 6378137;
        this.projection = proj;
        this.tileHeightInPixels = 256;
        this.tileWidthInPixels = 256;
        this.levelOneScale = R_MAJOR / this.tileWidthPixels;
        this.baseZoom = 4;
        this.baseScale = 0
    }
    MapCRS.prototype.setBaseZoom = function(z) {
        this.baseZoom = z
    };
    MapCRS.prototype.setBaseScale = function(mpp) {
        this.baseScale = mpp
    };
    MapCRS.prototype.getTileBounds = function(x, y, z) {
        var mpp = this.convZoomToScale(z);
        var tileHeightInMeters = this.tileHeightInPixels * mpp;
        var tileWidthInMeters = this.tileWidthInPixels * mpp;
        var x0 = x * tileWidthInMeters;
        var y0 = y * tileHeightInMeters;
        var tilesPerLevel = 1 << z;
        x0 = x0 - tilesPerLevel * .5 * tileWidthInMeters;
        y0 = tilesPerLevel * .5 * tileHeightInMeters - y0;
        var bb = (new BoundingBox).setBounds(x0, y0, x0 + tileWidthInMeters, y0 - tileHeightInMeters);
        return bb
    };
    MapCRS.prototype.getLevelOneScale = function() {
        var mpp = 40075017 / 256;
        if (this.baseScale) {
            mpp = this.baseScale * (1 << this.baseZoom)
        }
        return mpp
    };
    MapCRS.prototype.getCustomScaleRatio = function() {
        return this.baseScale ? this.getLevelOneScale() * 256 / 40075017 : 1
    };
    MapCRS.prototype.convScaleToZoom = function(mpp, snap) {
        var level = Math.log(this.getLevelOneScale() / mpp) / Math.log(2);
        var roundedLevel = Math.round(level);
        var diff = Math.abs(level - roundedLevel);
        if (snap || snap === undefined || diff < 1e-6) {
            level = roundedLevel
        }
        return level
    };
    MapCRS.prototype.convZoomToScale = function(zoom) {
        var mpp = this.getLevelOneScale() / Math.pow(2, zoom);
        return mpp
    };

    function FilteredShapeStyle(func, data) {
        ShapeStyle.call(this);
        var _data = data;
        var _func = func;
        var _rec = _data.getRecordById(0).clone();
        this.setId = function(id) {
            _rec.id = id;
            _func(this, _rec)
        }
    }
    var hexColorRxp = /#?([0-9a-f]{1,2})([0-9a-f]{1,2})([0-9a-f]{1,2})$/i;

    function getCSSColor(rgb, a) {
        var numeric = !isNaN(rgb);
        var css, r, b, g;
        if (a && a < 1) {
            if (numeric) {
                r = rgb >> 16 & 255;
                g = rgb >> 8 & 255;
                b = rgb & 255
            } else if (Utils.isString(rgb) && (matches = hexColorRxp.exec(rgb))) {
                var r = matches[1];
                var g = matches[2];
                var b = matches[3];
                if (matches[0].length < 5) {
                    r = r + r;
                    g = g + g;
                    b = b + b
                }
                r = parseInt(r, 16);
                g = parseInt(g, 16);
                b = parseInt(b, 16)
            } else {
                r = 0;
                g = 0;
                b = 0
            }
            css = "rgba(" + r + "," + g + "," + b + "," + a + ")"
        } else {
            if (numeric) {
                var hex = rgb.toString(16);
                while (hex.length < 6) {
                    hex = "0" + hex
                }
                css = "#" + hex
            } else {
                css = rgb
            }
        }
        return css
    }

    function ShapeStyle() {
        this.fillColor = null;
        this.fillAlpha = 1;
        this.strokeColor = null;
        this.strokeAlpha = 1;
        this.strokeWeight = 1;
        this.styler = undefined
    }
    ShapeStyle.prototype = {
        hasStroke: function() {
            return this.strokeWeight > 0 && this.strokeColor !== null && this.strokeAlpha != 0
        },
        hasFill: function() {
            var ok = !!this.fillAlpha && this.fillColor != null && this.fillColor !== false;
            return ok
        },
        setFill: function(fc, fa) {
            this.fillColor = fc;
            this.fillAlpha = fa
        },
        setStroke: function(sw, sc, sa) {
            this.strokeWeight = sw;
            this.strokeColor = sc;
            this.strokeAlpha = sa
        },
        setId: function(id) {},
        beginDrawing: function(ctx) {
            if (this.strokeColor !== null) {
                if (this.strokeAlpha < 1) {
                    ctx.strokeStyle = getCSSColor(this.strokeColor, this.strokeAlpha)
                } else {
                    ctx.strokeStyle = getCSSColor(this.strokeColor)
                }
                ctx.lineWidth = this.strokeWeight
            }
            if (this.specialFill) {
                ctx.fillStyle = this.specialFill
            } else if (!this.fillAlpha) {} else if (this.fillAlpha < 1) {
                ctx.fillStyle = getCSSColor(this.fillColor, this.fillAlpha)
            } else if (this.fillColor != null) {
                ctx.fillStyle = getCSSColor(this.fillColor)
            }
        }
    };

    function HybridShapeStyle() {
        this.__super__()
    }
    Opts.inherit(HybridShapeStyle, ShapeStyle);
    HybridShapeStyle.prototype.hasFill = function() {
        var yes = (this.fillAlpha || this.fillAlphas) && (this.fillColor != null || this.fillColors);
        return !!yes
    };
    HybridShapeStyle.prototype.hasStroke = function() {
        var yes = (this.strokeWeight || this.strokeWeights) && (this.strokeAlpha || this.strokeAlphas) && (this.strokeColor != null || this.strokeColors);
        return !!yes
    };
    HybridShapeStyle.prototype.setId = function setId(id) {
        var fills = this.fillColors;
        var alphas = this.fillAlphas;
        if (alphas) {
            this.fillAlpha = alphas[id];
            key += String.fromCharCode(this.fillAlpha * 255 | 0)
        }
        if (this.strokeAlphas) {
            this.strokeAlpha = this.strokeAlphas[id]
        }
        if (this.strokeWeights) {
            this.strokeWeight = this.strokeWeights[id]
        }
        if (this.strokeColors) {
            this.strokeColor = this.strokeColors[id]
        }
        var key = "";
        if (fills) {
            var rgb = fills[id];
            key += String.fromCharCode(rgb & 255) + String.fromCharCode(rgb >> 16 & 15);
            this.fillColor = rgb
        }
        if (this.fillStyler) {
            key += this.fillStyler.getSortCode(id);
            this.fillStyler.updateStyle(id, this)
        }
        var haveStroke = !!(this.strokeWeight || this.strokeWeights);
        if (haveStroke) {
            key = ""
        }
        this.sortKey = key
    };
    HybridShapeStyle.prototype.updateStyle = function(obj) {
        var style = this;
        this.sortKey = "";
        if (obj.strokeWeight) {
            style.strokeAlphas = Utils.isArray(obj.strokeAlpha) ? obj.strokeAlpha : null;
            style.strokeWeights = Utils.isArray(obj.strokeWeight) ? obj.strokeWeight : null;
            style.strokeColors = Utils.isArray(obj.strokeColor) ? obj.strokeColor : null;
            style.setStroke(obj.strokeWeight, obj.strokeColor, obj.strokeAlpha)
        } else {
            style.strokeWeight = 0
        }
        if (obj.fillAlpha) {
            var fa = obj.fillAlpha;
            if (Utils.isArray(fa)) {
                style.fillAlphas = fa
            } else {
                style.fillAlpha = fa;
                style.fillAlphas = null
            }
            var fc = obj["fillColor"];
            if (Utils.isArray(fc)) {
                style.fillColors = fc
            } else {
                style.fillColor = fc;
                style.fillColors = null
            }
        } else {
            style.fillAlphas = null;
            style.fillAlpha = null;
            style.fillColor = null;
            style.fillColors = null
        }
        if (obj.hatchColor) {
            if (!style.fillStyler) {
                style.fillStyler = new HatchedFill(obj)
            }
            style.fillStyler.update(obj)
        } else {
            style.specialFill = null;
            style.fillStyler = null
        }
        style.compositing = obj["compositing"] || ""
    };

    function HatchedFill() {
        this._fills = {}
    }
    HatchedFill.prototype.update = function(obj) {
        var hc = obj.hatchColor;
        if (Utils.isArray(hc)) {
            this.hatchColors = hc
        } else {
            this.hatchColor = hc || undefined
        }
    };
    HatchedFill.prototype.getSortCode = function(id) {
        var arr = this.hatchColors;
        if (arr) {
            return String(arr[id] || "")
        }
        return "xx"
    };
    HatchedFill.prototype.updateStyle = function(id, style) {
        var hc = this.hatchColor || this.hatchColors[id] || null;
        if (hc && style.fillAlpha) {
            var c1 = getCSSColor(style.fillColor, style.fillAlpha);
            var c2 = getCSSColor(hc, style.fillAlpha);
            style.specialFill = this.getDiagonalFill(c1, c2)
        } else {
            style.specialFill = null
        }
    };
    HatchedFill.prototype.getEmptyCanvas = function(w, h) {
        var canvas = document.createElement("canvas");
        canvas.setAttribute("width", w);
        canvas.setAttribute("height", h);
        return canvas
    };
    HatchedFill.prototype.getDiagonalFill = function(c1, c2, reverse) {
        var key = c1 + c2;
        var index = this._fills;
        if (!index[key]) {
            var tileSize = HatchedFill.tileSize || 4;
            var lineWidth = tileSize * .34;
            var canvas = this.getEmptyCanvas(tileSize, tileSize);
            var ctx = canvas.getContext("2d");
            ctx.lineWidth = lineWidth;
            ctx.fillStyle = c1;
            ctx.fillRect(0, 0, tileSize, tileSize);
            ctx.strokeStyle = c2;
            var x0 = 0;
            var x1 = tileSize * 1.25;
            var x2 = -tileSize * .25;
            var x3 = tileSize * .5;
            ctx.moveTo(x0, tileSize * 1.25);
            ctx.lineTo(x1, 0);
            ctx.moveTo(x2, tileSize * .5);
            ctx.lineTo(x3, -tileSize * .25);
            ctx.stroke();
            index[key] = ctx.createPattern(canvas, "repeat")
        }
        return index[key]
    };

    function SymbolStyler(opts) {
        this._stylers = {};
        this.setDefaultStyle(Opts.copyAllParams({
            fillAlpha: 1,
            strokeAlpha: 1
        }, opts));
        if (this.constructor == SymbolStyler) {
            this.startWaiting()
        }
    }
    Opts.inherit(SymbolStyler, Waiter);
    SymbolStyler.prototype.setPreFunction = function(func, ctx) {
        if (ctx) {
            var callback = func;
            func = function(obj) {
                callback.call(ctx, obj)
            }
        }
        this._pre = func
    };
    SymbolStyler.prototype.getAttributeStyler = function(name) {
        return this._stylers[name] || null
    };
    SymbolStyler.prototype.styleAttributeByZoom = function(attr, breaks, values) {
        this._stylers[attr] = new ScaledStyler(breaks, values)
    };
    SymbolStyler.prototype.getStyle = function() {
        return this._defaultStyle || {}
    };
    SymbolStyler.prototype.invalidate = function() {
        for (var key in this._stylers) {
            this._stylers[key].invalidate()
        }
    };
    SymbolStyler.prototype.setDefaultStyle = function(obj) {
        this._defaultStyle = Opts.copyAllParams(this._defaultStyle || {}, obj);
        return this
    };
    SymbolStyler.prototype.clearAttributeStyle = function(attr) {
        delete this._stylers[attr]
    };
    SymbolStyler.prototype.setAttributeStyle = function(attr, val) {
        this._stylers[attr] = new ConstantStyler(val)
    };
    SymbolStyler.prototype.getAttributeDataAtZoom = function(attr, z) {
        var styler = this._stylers[attr];
        if (styler) {
            styler.setZoom(z);
            return styler.getValue()
        }
        return null
    };
    SymbolStyler.getClassId = Utils.getClassId;

    function DataStyler(data) {
        this.__super__();
        data.addEventListener("change", this.handleDataChange, this);
        this._data = data;
        this.waitFor(data).startWaiting()
    }
    Opts.inherit(DataStyler, SymbolStyler);
    DataStyler.prototype.handleDataChange = function(evt) {
        trace("[DataStyler.handleDataChange()] invalidating style");
        this.invalidate()
    };
    DataStyler.prototype.getDataTable = function() {
        return this._data
    };
    DataStyler.prototype.attr = DataStyler.prototype.setAttributeStyler = function(attr, filter, caching) {
        var styler;
        var filterType = typeof filter;
        if (filterType == "string") {
            styler = new DataFieldStyler(this._data, filter)
        } else if (filterType == "function") {
            styler = new DataRecordStyler(this._data, filter, caching)
        } else {
            trace("[DataStyler.setAttributeStyler()] invalid filter:", filter);
            return
        }
        this._stylers[attr] = styler;
        return styler
    };
    DataStyler.prototype.calcCircleSizes = function(fname, k) {
        var func = function(rec) {
            var val = rec.getNumber(fname);
            var size = Math.sqrt(val * k);
            return size
        };
        this.setAttributeStyler("bubbleSizes", func)
    };
    DataStyler.prototype.calcFillsByRange = function(field, breaks, colors) {
        this.setAttributeStyler("fillColor", DataStyler.getChoroplethStyler(field, breaks, colors))
    };
    DataStyler.prototype.calcIndexedFills = function(field, index) {
        this.setAttributeStyler("fillColor", function(rec) {
            return index[rec.get(field)]
        })
    };
    DataStyler.prototype.setLinkedAttributeStyler = function(attr, filter, src, caching) {
        this.waitFor(src);
        this._stylers[attr] = new DataRecordStyler(src, filter, caching)
    };
    DataStyler.getRandomStyler = function(colors) {
        return function(rec) {
            var id = Math.floor(Math.random() * colors.length);
            return colors[id]
        }
    };
    DataStyler.getChoroplethStyler = function(fname, breaks, colors) {
        var lookup = SymbolStyler.getClassId;
        var func = function(rec) {
            var val = rec.getNumber(fname);
            var id = lookup(val, breaks);
            var col = colors[id];
            return col
        };
        return func
    };
    SymbolStyler.prototype.getStyleAtZoom = function(z) {
        var style = {};
        Opts.copyAllParams(style, this._defaultStyle);
        this._pre && this._pre(style);
        var evt = {
            style: style,
            zoom: z
        };
        this.dispatchEvent("pre", evt);
        var stylers = this._stylers;
        for (var key in stylers) {
            var styler = stylers[key];
            styler.setZoom(z);
            style[key] = styler.getValue()
        }
        this.dispatchEvent("post", evt);
        return style
    };

    function AttributeStyler() {}
    AttributeStyler.prototype.setZoom = function(z) {
        this._zoom = z
    };
    AttributeStyler.prototype.invalidate = function() {
        this._needsUpdate = true
    };

    function ConstantStyler(val) {
        this.getValue = function() {
            return val
        }
    }
    Opts.extendPrototype(ConstantStyler, AttributeStyler);

    function DataFieldStyler(data, fname) {
        this._data = data;
        this._field = fname
    }
    Opts.extendPrototype(DataFieldStyler, AttributeStyler);
    DataFieldStyler.prototype.getValue = function() {
        return this._data.getFieldData(this._field)
    };

    function DataRecordStyler(data, func, useCaching) {
        this._data = data;
        this._func = func;
        this._useCaching = useCaching !== false
    }
    Opts.extendPrototype(DataRecordStyler, AttributeStyler);
    DataRecordStyler.prototype.invalidate = function() {
        this._cached = null;
        this._needsUpdate = true
    };
    DataRecordStyler.prototype.getValue = function() {
        if (this._needsUpdate === false && this._useCaching) {
            return this._cached
        }
        var styler = this._func;
        var data = this._data;
        var arr = [];
        for (var i = 0, len = data.size(); i < len; i++) {
            var rec = data.getRecordById(i);
            var val = styler(rec, this._zoom);
            arr.push(val)
        }
        this._cached = arr;
        this._needsUpdate = false;
        return arr
    };

    function ScaledStyler(breaks, values) {
        this._breaks = breaks;
        this._values = values
    }
    Opts.extendPrototype(ScaledStyler, AttributeStyler);
    ScaledStyler.prototype.getValue = function() {
        var z = this._zoom;
        var idx = SymbolStyler.getClassId(z, this._breaks);
        var val = this._values[idx];
        return val
    };

    function View(name, map) {
        this.name = name;
        this._map = map;
        this._ops = []
    }
    Opts.inherit(View, EventDispatcher);
    View.prototype.setLayerStyler = function(lyr, styler) {
        this.getLayerObject(lyr).styler = styler;
        return this
    };
    View.prototype.setFallbackImage = function(url) {
        this._imageUrl = url;
        return this
    };
    View.prototype.setLayerStyle = function(lyr, style) {
        var styler = new SymbolStyler;
        styler.setDefaultStyle(style);
        this.setLayerStyler(lyr, styler);
        return this
    };
    View.prototype.getLayerObject = function(lyr) {
        var arr = this._ops;
        for (var i = 0; i < arr.length; i++) {
            if (arr[i].layer === lyr) {
                return arr[i]
            }
        }
        var obj = {
            layer: lyr
        };
        arr.push(obj);
        return obj
    };
    View.prototype.hideLayer = function(lyr) {
        this.getLayerObject(lyr).hidden = true;
        return this
    };
    View.prototype.showLayer = function(lyr) {
        this.getLayerObject(lyr).hidden = false;
        return this
    };
    View.prototype.setLayerInteraction = function(lyr, bool) {
        this.getLayerObject(lyr).interactive = bool;
        return this
    };
    View.prototype.apply = function() {
        var map = this._map;
        var mapReady = map.isReady();
        var refreshAllLayers = true;
        if (this._imageUrl) {
            map.setFallbackImage(this._imageUrl)
        }
        var arr = this._ops;
        for (var i = 0; i < arr.length; i++) {
            var obj = arr[i];
            var lyr = obj.layer;
            if (obj.hidden) {
                if (!lyr.isHidden()) {
                    lyr.hide()
                }
            } else {
                if (lyr.isHidden()) {
                    lyr.show()
                }
                if (obj.styler) {
                    lyr.setStyler(obj.styler);
                    refreshAllLayers || mapReady && lyr.refresh()
                }
            }
            lyr.setInteraction(!!obj.interactive)
        }
        mapReady && refreshAllLayers && this._map.refreshLayers()
    };

    function ViewSwitcher(map) {
        this._map = map;
        this._currName = "";
        this.views = {}
    }
    Opts.inherit(ViewSwitcher, EventDispatcher);
    ViewSwitcher.prototype.getCurrentView = function() {
        return this.getView(this._currName)
    };
    ViewSwitcher.prototype.getView = function(vname) {
        if (!vname) {
            trace("[ViewSwitcher.getView()] Called without view name.");
            return
        }
        return this.views[vname] || (this.views[vname] = new View(vname, this._map))
    };
    ViewSwitcher.prototype.setView = function(name, force) {
        if (!this.views[name]) {
            trace("[ViewSwitcher.setView()] Missing view name:", name);
            return
        }
        var currName = this._currName;
        if (name == currName && !force) {
            trace("[ViewSwitcher.setView()] Trying to set view to the current view:", name);
            return
        }
        currName && this.getView(currName).dispatchEvent("leave", {
            next_view: name
        });
        this._currName = name;
        this.dispatchEvent("change", {
            prev_view: currName,
            next_view: name
        });
        var newView = this.getView(name);
        newView.dispatchEvent("enter", {
            prev_view: currName
        });
        newView.apply()
    };

    function Matrix2D() {
        this.identity();
        this._p = new Point(0, 0)
    }
    Matrix2D.prototype.identity = function() {
        this.a = 1;
        this.c = 0;
        this.tx = 0;
        this.b = 0;
        this.d = 1;
        this.ty = 0
    };
    Matrix2D.prototype.transformXY = function(x, y, p) {
        var p = p || new Point;
        p.x = x * this.a + y * this.c + this.tx;
        p.y = x * this.b + y * this.d + this.ty;
        return p
    };
    Matrix2D.prototype.clone = function() {
        var m = new Matrix2D;
        Opts.copyAllParams(m, this)
    };
    Matrix2D.prototype.translate = function(dx, dy) {
        this.tx += dx;
        this.ty += dy
    };
    Matrix2D.prototype.rotate = function(q, x, y) {
        x = x || 0;
        y = y || 0;
        var cos = Math.cos(q);
        var sin = Math.sin(q);
        this.a = cos;
        this.c = -sin;
        this.b = sin;
        this.d = cos;
        this.tx += x - x * cos + y * sin;
        this.ty += y - x * sin - y * cos
    };
    Matrix2D.prototype.scale = function(sx, sy) {
        this.a *= sx;
        this.c *= sx;
        this.b *= sy;
        this.d *= sy
    };
    Matrix2D.prototype.getDeterminant = function() {
        return this.a * this.d - this.c * this.b
    };
    Matrix2D.prototype.invert = function() {
        var det = this.getDeterminant();
        if (det == 0 || isNaN(det)) {
            trace("[Matrix2D.invert()] matrix is not invertible.");
            return
        }
        var m = this.clone();
        this.a = m.d / det;
        this.b = -m.b / det;
        this.c = -m.c / det;
        this.d = m.a / det;
        this.tx = (m.c * m.ty - m.d * m.tx) / det;
        this.ty = (m.b * m.tx - m.a * m.ty) / det
    };

    function Map(divRef, opts) {
        if (!Map._extensions) {
            Browser.log("[Map] Need to call Map.init() first.");
            return
        }
        var defaults = {
            dragging: false,
            limitPanning: false,
            pinchZoom: false,
            doubleClickZoom: false,
            scrollZoom: false,
            smoothZoom: true,
            combineLayers: false
        };
        opts = Opts.copyAllParams(defaults, opts);
        var div = Browser.getElement(divRef);
        if (!div) {
            Browser.log("[Map] Container div not found -- can't continue.");
            return
        }
        var divId = div.id;
        if (!divId) {
            div.id = divId = Utils.getUniqueName("nytg-map-")
        }
        var idIndex = Opts.getNamespace("nytg.map.containerIds");
        if (idIndex[divId]) {
            var newId = Utils.getUniqueName(divId);
            Browser.log("[Map] id collision; Renaming map container from " + divId + " to " + newId);
            div.id = divId = newId
        }
        div.style.overflow = "visible";
        Browser.makeUnselectable(div);
        this._opts = opts;
        this.divId = divId;
        this.div = div;
        this.init()
    }
    Opts.inherit(Map, Waiter);
    Map.prototype.setOptions = function(opts) {
        Opts.copyAllParams(this._opts, opts);
        this.dispatchEvent("options", {
            options: opts
        })
    };
    Map.init = function(obj) {
        if (Map._extensions) {
            return
        }
        var usingFlash = (obj.preferFlash || !Browser.canvas) && !obj.noFlash;
        if (usingFlash) {
            if (!obj.flashUrl) {
                Browser.log("[Map.init(params)] Missing flashUrl parameter. You need to give the url of a Flash component.");
                return
            }
            Map.swfUrl = obj.flashUrl;
            if (!Map.useFlashExtensions) {
                Browser.log("[Map.init] Missing Flash extensions.");
                return
            }
            Map.useFlashExtensions();
            Map._extensions = "flash"
        } else {
            if (!Map.useHTML5Extensions) {
                trace("[Map.init] Missing HTML5 extensions.");
                return
            }
            Map.useHTML5Extensions();
            Map._extensions = "html5"
        }
    };
    Map.prototype.init = function() {
        this.initMap()
    };
    Map.prototype.addOverlay = function(el, zIndex) {
        if (!this.overlayContainer) {
            this.overlayContainer = El("div").css("z-index", 1e3).css("position:absolute; top:0; left:0; width:100%;").appendTo(this.div)
        }
        this.overlayContainer.appendChild(el)
    };
    Map.prototype.initMap = function() {
        var opts = this._opts;
        var div = this.div;
        var cw = div.clientWidth;
        var ch = div.clientHeight;
        if (!opts.width) {
            opts.width = cw
        } else if (opts.width != cw) {
            div.style.width = opts.width + "px"
        }
        if (!opts.height) {
            opts.height = ch
        } else if (opts.height != ch) {
            div.style.height = opts.height + "px"
        }
        if (!opts.crs) {
            if (opts.bounds && !opts.center && opts.height && opts.width) {
                var cx = opts.bounds.centerX();
                var cy = opts.bounds.centerY();
                var crs = new MapCRS(new ProjectionBase);
                var ll = crs.projection.unprojectXY(cx, cy);
                opts.center = ll;
                opts.widthKm = opts.bounds.width() / 1e3;
                opts.crs = crs
            } else if (opts.projection) {
                opts.crs = new MapCRS(opts.projection)
            }
        }
        var req = "center, crs, width, height, widthKm|zoom";
        if (!(opts.center && opts.crs && opts.width && opts.height && (opts.widthKm || opts.zoom))) {
            error("[Map] Missing one or more required parameters; need:", req, "found:", Utils.getKeys(opts).join(", "))
        }
        if (!opts.zoom) {
            opts.zoom = 1
        }
        this.views = new ViewSwitcher(this);
        var crs = opts.crs;
        this.mouse = new HybridMouse;
        crs.setBaseZoom(opts.zoom);
        this._crs = crs;
        this.projection = crs.projection;
        this.updateContainerBounds();
        if (this.handleWindowResize) {
            if (window.onorientationchange) {
                Browser.addEventListener(window, "orientationchange", this.handleWindowResize, this)
            }
            Browser.addEventListener(window, "resize", this.handleWindowResize, this)
        }
        this.mouse.addEventListener("mouseover", this.updateContainerBounds, this);
        Browser.addEventListener(window, "scroll", this.handleWindowScroll, this);
        this._layers = []
    };
    Map.prototype.handleWindowResize = function(evt) {
        this.updateContainerBounds()
    };
    Map.prototype.handleWindowScroll = function(evt) {
        var prevX = this._leftPix;
        var prevY = this._topPix;
        var prevViewY = this._viewportTop;
        var prevViewX = this._viewportLeft;
        if (prevY === undefined) {
            return
        }
        this.updatePagePosition();
        var currViewX = this._viewportLeft;
        var currViewY = this._viewportTop;
        var currX = this._leftPix;
        var currY = this._topPix;
        var obj = {
            pageX: currX,
            pageY: currY,
            viewX: currViewX,
            viewY: currViewY,
            deltaPageX: currX - prevX,
            deltaPageY: currY - prevY,
            deltaViewX: currViewX - prevViewX,
            deltaViewY: currViewY - prevViewY
        };
        this.dispatchEvent("scroll", obj)
    };
    Map.prototype.updatePagePosition = function() {
        var xy = Browser.getPageXY(this.div);
        var newX = xy.x;
        var newY = xy.y;
        this._leftPix = newX;
        this._topPix = newY;
        this._viewportTop = Browser.pageYToViewportY(newY);
        this._viewportLeft = Browser.pageXToViewportX(newX);
        this.mouse.updateContainerBounds(newX, newY + this._heightPix, newX + this._widthPix, newY)
    };
    Map.prototype.updateContainerBounds = function() {
        var opts = this._opts;
        var fixedWidth = opts.width || 0;
        var fixedHeight = opts.height || 0;
        var spacing = opts.spacing || 0;
        var div = this.div;
        if (false && fixedWidth && fixedHeight) {
            var w = fixedWidth;
            var h = fixedHeight
        } else {
            w = div.clientWidth;
            h = div.clientHeight;
            opts.width = w;
            opts.height = h
        }
        var needResize = w != this._widthPix || h != this._heightPix;
        this._widthPix = w;
        this._heightPix = h;
        this.updatePagePosition();
        var widthKm = opts.widthKm;
        var spacing = this.getSpacing();
        if (widthKm) {
            var widthPix = this.getWidthInPixels();
            widthKm = widthKm * widthPix / (widthPix - (spacing.left + spacing.right));
            var baseScale = widthKm * 1e3 / widthPix;
            var heightKm = opts.heightKm;
            if (heightKm) {
                var heightPix = this.getHeightInPixels();
                heightKm = heightKm * heightPix / (heightPix - (spacing.top + spacing.bottom));
                var whMap = widthPix / heightPix;
                var whContent = widthKm / heightKm;
                if (whMap > whContent) {
                    baseScale = heightKm * 1e3 / heightPix
                }
            }
            this.getCRS().setBaseScale(baseScale)
        }
        if (needResize) {
            this.dispatchEvent("resize");
            return true
        }
    };
    Map.prototype.getContainer = function() {
        return this.div
    };
    Map.prototype.getLayers = function() {
        return this._layers
    };
    Map.prototype.convViewPixelsToLatLng = function(x, y) {
        var xy = this.convViewPixelsToMeters(x, y);
        var ll = this.projection.unprojectXY(xy.x, xy.y);
        return ll
    };
    Map.prototype.convViewPixelsToMeters = function(x, y) {
        var ll = this.getCenterAsLatLng();
        var xy = this.projection.projectLatLng(ll.lat, ll.lng);
        var mpp = this.getScale();
        var wp = this.getWidthInPixels();
        var hp = this.getHeightInPixels();
        var xm = xy.x - -(x - wp * .5) * mpp;
        var ym = xy.y - (y - hp * .5) * mpp;
        return new Point(xm, ym)
    };
    Map.prototype.convMetersToViewPixels = function(x, y) {
        var ext = this.getVisibleExtent();
        var p = ext.transformXY(x, y);
        return p
    };
    Map.prototype.convMetersToPagePixels = function(x, y) {
        var p = this.convMetersToViewPixels(x, y);
        var offs = Browser.getPageXY(this.div);
        return {
            x: p.x + offs.x,
            y: p.y + offs.y
        }
    };
    Map.prototype.setFallbackImage = function(url) {};
    Map.prototype.getSpacing = function() {
        if (!this._spacing) {
            var opts = this._opts;
            var spacing = opts.spacing || 0;
            this._spacing = {
                left: isNaN(opts.spacingLeft) ? spacing : opts.spacingLeft + 0,
                top: isNaN(opts.spacingTop) ? spacing : opts.spacingTop + 0,
                right: isNaN(opts.spacingRight) ? spacing : opts.spacingRight + 0,
                bottom: isNaN(opts.spacingBottom) ? spacing : opts.spacingBottom + 0
            }
        }
        return this._spacing
    };
    Map.prototype.getCenterAsLatLng = function() {
        trace("[Map.getCenterAsLatLng()] stub")
    };
    Map.prototype.getInitialCenterAsLatLng = function() {
        var ctr = this._opts.center;
        if (!ctr) {
            trace("!!! [Map.getInitialCenterAsLatLng()] missing center; this:", this, "opts:", this._opts);
            throw "Missing center opt"
        }
        var spacing = this.getSpacing();
        if (spacing.left == spacing.right && spacing.top == spacing.bottom) {
            return ctr
        }
        var mpp = this.getInitialScale();
        var xd = (spacing.right - spacing.left) * .5 * mpp;
        var yd = (spacing.top - spacing.bottom) * .5 * mpp;
        var xy = this.projection.projectLatLng(ctr.lat, ctr.lng);
        var ll = this.projection.unprojectXY(xy.x + xd, xy.y + yd);
        return ll.clone()
    };
    Map.prototype.getZoom = function() {};
    Map.prototype.addLayer = function(lyr) {
        var layers = this._layers;
        if (lyr.type == "shape" || lyr.type == "bubble") {
            lyr._opts.hitPriority = Opts.readParam(lyr._opts.hitPriority, layers.length * .01)
        }
        for (var i = 0, len = layers.length; i < len; i++) {
            lyr.waitFor(layers[i])
        }
        var z = lyr._zIndex = lyr._opts && lyr._opts.zIndex || 0;
        var idx = 0;
        for (; idx < layers.length; idx++) {
            if (z < layers[idx]._zIndex) {
                break
            }
        }
        layers.splice(idx, 0, lyr);
        lyr.setMap(this);
        if (this.isReady()) {} else {
            this.waitFor(lyr)
        }
    };
    Map.prototype.refreshLayers = function() {
        var layers = this.getLayers();
        for (var i = 0; i < layers.length; i++) {
            var lyr = layers[i];
            !lyr.isHidden() && lyr.refresh()
        }
    };
    Map.prototype.handleMouseMove = function(evt) {
        trace("[Map.handleMouseMove()] stub")
    };
    Map.prototype.getCRS = function() {
        return this._crs
    };
    Map.prototype.getTransform = function() {
        var trans = (new Transform).useTileBounds(this.getWidthInPixels(), this.getHeightInPixels(), this.getVisibleBounds());
        return trans
    };
    Map.prototype.getProjection = function() {
        return this.projection
    };
    Map.prototype.getScale = function() {
        var zoom = this.getZoom();
        var scale = this._crs.convZoomToScale(zoom);
        return scale
    };
    Map.prototype.getTopInPixels = function() {
        return this._topPix
    };
    Map.prototype.getLeftInPixels = function() {
        return this._leftPix
    };
    Map.prototype.getWidthInPixels = function() {
        return this._widthPix
    };
    Map.prototype.getHeightInPixels = function() {
        return this._heightPix
    };
    Map.prototype.__getBounds = function(ll, mpp) {
        var xy = this.projection.projectLatLng(ll.lat, ll.lng);
        var halfWidth = this.getWidthInPixels() * .5;
        var halfHeight = this.getHeightInPixels() * .5;
        var bb = (new BoundingBox).setBounds(xy.x - halfWidth * mpp, xy.y + halfHeight * mpp, xy.x + halfWidth * mpp, xy.y - halfHeight * mpp);
        return bb
    };
    Map.prototype.getVisibleBounds = function() {
        var bb = this.__getBounds(this.getCenterAsLatLng(), this.getScale());
        return bb
    };
    Map.prototype.getInitialBounds = function() {
        return this.__getBounds(this.getInitialCenterAsLatLng(), this.getInitialScale())
    };
    Map.prototype.getVisibleExtent = function() {
        var ext = new TileExtent(this.getWidthInPixels(), this.getHeightInPixels());
        var bb = this.getVisibleBounds();
        ext.updateBounds(bb);
        return ext
    };
    Map.prototype.getInitialScale = function() {
        return this._crs.convZoomToScale(this._opts.zoom)
    };
    Map.prototype.display = function() {
        this.startWaiting()
    };
    Map.prototype.handleReadyState = function() {
        this.refreshLayers()
    };
    Map.prototype.resize = function(w, h) {
        if (!w || !h) {
            trace("[Map.resize()] requires a width and a height.");
            return
        }
        var opts = this._opts;
        opts.width = w;
        opts.height = h;
        this.updateContainerBounds()
    };
    Map.prototype.showHover = function() {};
    Map.prototype.hideHover = function() {};
    Map.prototype.zoomIn = function() {
        var bb = this.getVisibleBounds();
        bb.scale(.5);
        this.zoom({
            bounds: bb
        })
    };
    Map.prototype.setZoom = function(z) {
        var currScale = this.getScale();
        var targScale = this.getCRS().convZoomToScale(z);
        var bb = this.getVisibleBounds();
        bb.scale(targScale / currScale);
        this.zoom({
            bounds: bb
        })
    };
    Map.prototype.zoomOut = function() {
        trace("Map.zoomOut(); center:", this.getCenterAsLatLng(), "scale:", this.getScale());
        trace("  ... visible:", this.getVisibleBounds());
        var bb = this.getVisibleBounds();
        bb.scale(2);
        this.zoom({
            bounds: bb
        })
    };
    Map.prototype.zoomToInitialExtent = function() {
        this.zoom({
            bounds: this.getInitialBounds()
        })
    };
    Map.prototype.zoom = function(obj) {
        trace("[Map.zoom()] stub; need to override.")
    };

    function MapLayer() {}
    MapLayer.prototype = new Waiter;
    MapLayer.prototype.setMap = function(map) {
        this._map = map;
        this.init();
        this.startWaiting()
    };
    MapLayer.prototype.getElement = function() {
        error("Need to override MapLayer.getElement() stub.")
    };
    MapLayer.prototype.hide = function() {};
    MapLayer.prototype.show = function() {};
    MapLayer.prototype.isHidden = function() {
        return !!this._hidden
    };
    MapLayer.prototype.getLayerBounds = function(bb) {
        var bbGlobal = bb || this._map.getVisibleBounds();
        var bbLocal = new BoundingBox;
        var m = this._matrix;
        if (m) {
            var tl = m.transformXY(bbGlobal.left, bbGlobal.top);
            var br = m.transformXY(bbGlobal.right, bbGlobal.bottom);
            bbLocal.setBounds(tl.x, tl.y, br.x, br.y)
        } else {
            bbLocal.mergeBounds(bbGlobal)
        }
        return bbLocal
    };
    MapLayer.getMatrix = function() {
        if (!this._matrix) {
            this._matrix = new Matrix2D
        }
        return this._matrix
    };
    MapLayer.prototype.setShift = function(dx, dy) {
        var m = this.getMatrix();
        dx = dx || 0;
        dy = dy || 0;
        m.tx = dx;
        m.ty = dy
    };

    function HoverLayer() {
        this._symbolId = -1;
        this._baseLyr = null;
        this.type = "hover"
    }
    Opts.inherit(HoverLayer, MapLayer);

    function SymbolLayer(opts) {
        this._opts = opts || {}
    }
    Opts.inherit(SymbolLayer, MapLayer);
    SymbolLayer.prototype.setStyle = function(obj) {
        var styler = new SymbolStyler;
        styler.setDefaultStyle(obj);
        this.setStyler(styler);
        return this
    };
    SymbolLayer.prototype.setStyler = function(obj) {
        this.styler = obj;
        this.waitFor(obj)
    };
    SymbolLayer.prototype.getStyle = function() {
        var style = this.style;
        if (this.styler) {
            style = this.styler.getStyleAtZoom(this._map.getZoom())
        }
        if (!style) {
            trace("[SymbolLayer.getStyle()] Missing style/styler; layer:", this);
            style = {}
        }
        return style
    };
    SymbolLayer.prototype.getHitId = function() {
        return this._hitId === undefined ? -1 : this._hitId
    };
    SymbolLayer.prototype.showHoverSymbolById = function(id) {
        trace("[SymbolLayer.showHoverSymbolById()] stub")
    };
    SymbolLayer.prototype.getRecordById = function(id) {
        var rec = null;
        if (this.styler && this.styler.getDataTable) {
            rec = this.styler.getDataTable().getRecordById(id)
        }
        return rec
    };
    SymbolLayer.prototype.setHoverById = function(id) {};
    SymbolLayer.prototype.clearHover = function() {};
    MapLayer.prototype.init = function() {
        trace("[MapLayer.init()] stub; this:", this)
    };
    MapLayer.prototype.clear = function() {
        trace("[MapLayer.clear()] stub")
    };
    MapLayer.prototype.refresh = function() {
        trace("[MapLayer.refresh()] stub")
    };
    SymbolLayer.prototype.getHiddenSymbolList = function() {
        return this.styler && this.styler.getAttributeDataAtZoom("hidden", this._map.getZoom())
    };
    SymbolLayer.prototype.refreshStyleProperty = function(property) {
        if (property && this.styler) {
            this.styler.updateStyleProperty(property)
        }
        this.refresh()
    };
    SymbolLayer.prototype.isInteractive = function() {
        return this.isHidden() == false && !!this._interactive
    };
    SymbolLayer.prototype.setInteraction = function(val) {
        this._interactive = !!val
    };

    function CircleData() {}
    Opts.inherit(CircleData, Waiter);

    function CircleLayer(pointData, opts) {
        this._symbols = pointData;
        this.__super__(opts);
        this.type = "bubble"
    }
    Opts.inherit(CircleLayer, SymbolLayer);

    function ShapeData(arg1) {
        if (arg1) {
            var types = Utils.isArray(arg1) ? arg1 : Array.prototype.slice.call(arguments)
        } else {
            trace("[ShapeData(...string)] Constructor requires one or more of these types:", C.POLYGONS, C.POLYLINES, C.INNERLINES, C.OUTERLINES);
            trace("  -- using polygons as a default.");
            types = [C.POLYGONS]
        }
        this._types = types
    }
    Opts.inherit(ShapeData, Waiter);
    ShapeData.prototype.importData = function(loader, opts) {
        loader.addEventListener("ready", function() {
            this.importFromString(loader.data, opts)
        }, this);
        return this
    };
    ShapeData.prototype.initData = function(obj) {
        assert(obj.shapes && obj.bounds, "Missing shapes or bounds");
        this._shapes = obj;
        this.startWaiting()
    };
    ShapeData.prototype.getShapeTypes = function() {
        return this._types
    };
    ShapeData.prototype.importFromString = function(str, opts) {
        this._utf16Str = str;
        this._transform = opts ? opts.transform : null;
        this.startWaiting();
        return this
    };

    function ShapeLayer(shapeData, opts) {
        this._symbols = shapeData;
        var availableTypes = shapeData.getShapeTypes();
        var shapeType = opts && opts.shapeType || null;
        if (!shapeType && availableTypes.length == 1) {
            shapeType = availableTypes[0]
        }
        if (!shapeType || !Utils.contains(availableTypes, shapeType)) {
            trace("[ShapeLayer()] Requested type --", shapeType, "-- missing from ShapeData types --", availableTypes, "-- using first available type.");
            shapeType = availableTypes[0]
        }
        this._shapeType = shapeType;
        this.__super__(opts);
        this.type = "shape";
        this.style = {}
    }
    Opts.inherit(ShapeLayer, SymbolLayer);
    ShapeLayer.prototype.selectShapesById = function(ids) {
        trace("[ShapeLayer.selectShapesById()] This feature is not implemented in map-core.js")
    };

    function BasemapLayer(opts) {
        this._opts = opts || {}
    }
    Opts.inherit(BasemapLayer, MapLayer);

    function LabelData() {}
    Opts.inherit(LabelData, Waiter);

    function LabelLayer(opts) {
        this.__super__(opts);
        this.type = "label"
    }
    Opts.inherit(LabelLayer, SymbolLayer);

    function IconLayer(icons, opts) {
        this.__super__(opts);
        this.type = "icon";
        this._icons = icons
    }
    Opts.inherit(IconLayer, MapLayer);
    IconLayer.prototype.init = function() {};
    IconLayer.prototype.refresh = function() {};

    function TileLayer(opts) {
        this._opts = opts
    }
    Opts.inherit(TileLayer, MapLayer);
    TileLayer.prototype.__validateLayerOptions = function(opts) {
        var valid = true;
        var type = opts.type;
        if (type == TileLayer.STYLED_TYPE) {
            if ("style" in opts == false) {
                trace("[TileLayer.__validateLayerOptions()] styled map type missing 'style' property");
                valid = false
            }
        } else if (type == TileLayer.IMAGE_TYPE) {
            if (!opts.xyz) {
                opts.xyz = "osgeo"
            }
            if ("template" in opts == false) {
                trace("[TileLayer.__validateLayerOptions()] imapge map type missing 'template' property");
                valid = false
            }
        } else {
            trace("[TileLayer.__validateLayerOptions()] Missing a valid type property. found:", type);
            valid = false
        }
        return valid
    };

    function BaseLayer(opts) {
        this.__super__(opts);
        this._viewIndex = {}
    }
    Opts.inherit(BaseLayer, TileLayer);
    BaseLayer.STYLED_TYPE = TileLayer.STYLED_TYPE = "styledMapType";
    BaseLayer.IMAGE_TYPE = TileLayer.IMAGE_TYPE = "imageMapType";
    BaseLayer.prototype.addView = function(name, opts) {
        var type = opts.type;
        var valid = this.__validateLayerOptions(opts);
        if (valid) {
            this._viewIndex[name] = opts;
            this.isReady() && this.__addView(name, opts)
        }
    };
    BaseLayer.prototype.setView = function(name) {
        if (name in this._viewIndex == false) {
            trace("[BaseLayer.setView()] missing view:", name);
            return
        }
        this._currView = name;
        this.isReady() && this.__setView(name)
    };
    BaseLayer.prototype.handleReadyState = function() {
        Utils.forEach(this._viewIndex, function(opts, name) {
            this.__addView(name, opts)
        }, this);
        if (this._currView) {
            this.__setView(this._currView)
        }
    };

    function HTMLPopup(callback, opts) {
        this.REMOVE = true;
        this._opts = {
            peg: .45,
            offset: 18,
            fixed: false
        };
        Opts.copyAllParams(this._opts, opts);
        this._callback = callback;
        var css = "padding:6px 8px 5px 6px; z-index:50; background-color:white; font-family:Arial, Helvetica;";
        this._fixedPosition = this._opts.fixed && !Browser.ie;
        css += this._fixedPosition ? " position:fixed;" : " position:absolute;";
        var div = Browser.createElement("div", css);
        div.className = "nytg-popup";
        this.container = div;
        this._fitsAbove = true;
        this._fitsBelow = true;
        this._opts.map && this.__initMap(this._opts.map)
    }
    HTMLPopup.prototype.__initMap = function(map) {
        if (!this._map) {
            if (!map || !map.mouse) {
                return
            }
            map.mouse.ignoreElement(this.container);
            map.mouse.addEventListener("mousemove", this.moveHandler, this);
            map.addEventListener("scroll", this.handleScroll, this);
            this._map = map
        }
    };
    HTMLPopup.prototype.setLayer = function(lyr) {
        lyr.addEventListener("rollover", this.displayHandler, this);
        lyr.addEventListener("rollout", this.hideHandler, this)
    };
    HTMLPopup.getDivHTML = function(txt, cssClass) {
        var str = '<div class="' + cssClass + '">' + txt + "</div>\n";
        return str
    };
    HTMLPopup.getTitle = function(txt) {
        return this.getDivHTML(txt, "nytg-popup-title")
    };
    HTMLPopup.getSubtitle = function(txt) {
        return this.getDivHTML(txt, "nytg-popup-subtitle")
    };
    HTMLPopup.getText = function(txt) {
        return this.getDivHTML(txt, "nytg-popup-text")
    };
    HTMLPopup.getTail = function(txt) {
        return this.getDivHTML(txt, "nytg-popup-tail")
    };
    HTMLPopup.prototype.getElement = function() {
        return this.container
    };
    HTMLPopup.prototype.displayRecord = function(rec, track) {
        var html = this._callback(rec);
        if (html !== void 0) {
            if (!html) {
                this.hide();
                return
            }
            this.showHTML(html, track)
        } else {
            this.show(track)
        }
    };
    HTMLPopup.prototype.trackMouse = function(track) {
        this._tracking = track
    };
    HTMLPopup.prototype.showHTML = function(html, track) {
        this.container.innerHTML = html;
        this.show(track)
    };
    HTMLPopup.prototype.showAtPageXY = function(x, y, forceAbove) {
        this.container.style.visibility = "hidden";
        this.show(false);
        this.movePopupToXY({
            pageX: x,
            pageY: y
        }, true, forceAbove);
        this.container.style.visibility = "visible"
    };
    HTMLPopup.prototype.show = function(track) {
        this.trackMouse(track !== false);
        var parent = this._attachToMap ? this._map.div : document.body;
        var div = this.container;
        if (div.parentNode != parent) {
            parent.appendChild(div)
        }
        if (!this.REMOVE) {
            div.style.visibility = "visible"
        }
        this.containerWidth = div.offsetWidth;
        this.containerHeight = div.offsetHeight;
        this.pageWidth = Browser.getViewportWidth();
        this.viewportX = Browser.pageXToViewportX(0);
        this.updatePopupLocation();
        this._visible = true
    };
    HTMLPopup.prototype.hide = function() {
        this._visible = false;
        if (!this.container.parentNode) {
            trace("[HTMLPopup.hide()] Not attached to DOM.");
            return
        }
        if (this.REMOVE) {
            this.container.parentNode.removeChild(this.container)
        } else {
            this.container.style.visibility = "hidden"
        }
        this.trackMouse(false)
    };
    HTMLPopup.prototype.moveHandler = function(evt) {
        this.mouseX = evt.pageX;
        this.mouseY = evt.pageY;
        if (!this._visible) {
            return
        }
        if (!this._tracking) {
            return
        }
        this.updatePopupLocation()
    };
    HTMLPopup.prototype.movePopupToXY = function(obj, updatePlacement, forceAbove) {
        this.mouseX = obj.pageX || 0;
        this.mouseY = obj.pageY || -200;
        this.updatePopupLocation(updatePlacement, forceAbove)
    };
    HTMLPopup.prototype.updatePopupLocation = function(updatePlacement, forceAbove) {
        var pageX = this.mouseX;
        var pageY = this.mouseY;
        var x = pageX;
        var y = pageY;
        var w = this.containerWidth;
        var h = this.containerHeight;
        var yAbove = y - h - this._opts.offset;
        var yBelow = y + this._opts.offset + 8;
        if (updatePlacement) {
            this._fitsAbove = Browser.pageYToViewportY(yAbove) >= 0;
            this._fitsBelow = Browser.pageYToViewportY(yBelow + h) <= Browser.getViewportHeight()
        }
        var xNew = x - w * this._opts.peg;
        var yNew = this._fitsBelow && !forceAbove ? yBelow : yAbove;
        if (xNew < 0) {
            xNew = 0
        } else if (xNew + w > this.pageWidth) {
            xNew = this.pageWidth - w
        }
        if (this._fixedPosition) {
            xNew = Browser.pageXToViewportX(xNew);
            yNew = Browser.pageYToViewportY(yNew)
        }
        this.setXY(xNew, yNew)
    };
    HTMLPopup.prototype.handleScroll = function(evt) {
        if (!this._visible) {
            return
        }
        if (this._fixedPosition) {
            if (evt.deltaViewY != 0) {
                this.setXY(this._x + evt.deltaViewX, this._y + evt.deltaViewY)
            }
        } else {
            if (evt.deltaPageY != 0) {
                this.setXY(this._x + evt.deltaPageX, this._y + evt.deltaPageY)
            }
        }
    };
    HTMLPopup.prototype.setXY = function(x, y) {
        var x = Math.round(x);
        var y = Math.round(y);
        this._x = x;
        this._y = y;
        var div = this.container;
        div.style.left = x + "px";
        div.style.top = y + "px";
        var offs = div.offsetWidth
    };
    HTMLPopup.prototype.displayHandler = function(evt) {
        this.__initMap(evt.target._map);
        var rec = evt.rec;
        if (!rec) {
            trace("[HTMLPopup.displayHandler()] missing record");
            return
        }
        this.displayRecord(rec);
        this.movePopupToXY(evt, true)
    };
    HTMLPopup.prototype.hideHandler = function(evt) {
        this.hide()
    };
    var Election2012 = {
        jsDataUrl: "https://static01.nyt.com/packages/js/newsgraphics/projects/election_2012/nov6_maps/data/",
        detailedStateShapeUrl: "",
        detailedHouseDistrictShapeUrl: "",
        detailedHouseDistrictMercatorShapeUrl: "",
        detailedCountyShapeUrl: "",
        simpleStateShapeUrl: "",
        NO_DATA_COL: 14935011,
        NO_ELECTION_COL: 16119285,
        NO_VOTES_COL: 14935011,
        TIE_COL: 10066329,
        DEM_WIN_COL: 4480662,
        REP_WIN_COL: 12204595,
        DEM_SWITCH_COL: 533063,
        REP_SWITCH_COL: 6816515,
        IND_SWITCH_COL: 280324,
        IND_WIN_COL: 4294465,
        DEM_LEAD_COL: 10271451,
        REP_LEAD_COL: 15049635,
        IND_LEAD_COL: 10076569,
        DEM_LEAD_HASH_COL: 0,
        REP_LEAD_HASH_COL: 0,
        IND_LEAD_HASH_COL: 0,
        DEM_COLORS: [13230581, 11124958, 8954054, 6717359, 4480662],
        REP_COLORS: [16436942, 15378856, 14320770, 13262427, 12204595],
        IND_COLORS: [13034950, 10407070, 9221516, 6791271, 4294465],
        SenateStates: "AZ,CA,CT,DE,FL,HI,IN,MA,MD,ME,MI,MN,MO,MS,MT,ND,NE,NJ,NM,NV,NY,OH,PA,RI,TN,TX,UT,VA,VT,WA,WI,WV,WY",
        GovernorStates: "WA,UT,MT,ND,MO,IN,WV,NC,DE,VT,NH",
        SingleDistrictStates: "MT,ND,SD,AK,WY,VT",
        NoLabelStates: "DC,HI,VT,NH,MA,RI,CT,DE,MD,PR,NJ",
        STATE_WINNER_VIEW: "state_winner_view",
        STATE_WINNER_BUBBLE_VIEW: "state_winner_bubble_view",
        COUNTY_MARGIN_VIEW: "county_margin_view",
        DISTRICT_WINNER_VIEW: "district_winner_view",
        COUNTY_MARGIN_BUBBLE_VIEW: "county_margin_bubble_view",
        COUNTY_MARGIN_CHANGE_VIEW: "county_margin_change_view",
        COUNTY_COXA_CHANGE_VIEW: "county_margin_change_view",
        COUNTY_VOTES_BUBBLE_VIEW: "county_votes_bubble_view",
        COUNTY_HOLLOW_BUBBLE_VIEW: "county_hollow_bubble_view",
        STATE_FORECAST_VIEW: "state_forecast_view",
        SIDE_BY_SIDE_VIEW: "side_by_side_view",
        PRESIDENT_VIEW: "president_view",
        PRESIDENT_BUBBLE_VIEW: "president_bubble_view",
        SENATE_VIEW: "senate_view",
        SENATE_BUBBLE_VIEW: "senate_bubble_view",
        HOUSE_VIEW: "house_view",
        GOVERNOR_VIEW: "governor_view",
        GOVERNOR_BUBBLE_VIEW: "governor_bubble_view",
        ViewLabels: {
            state_winner_view: "States",
            county_margin_view: "Counties",
            district_winner_view: "House",
            county_margin_change_view: "Change from '08",
            county_margin_bubble_view: "Size of lead",
            county_votes_bubble_view: "Size of lead",
            county_hollow_bubble_view: "Size of lead",
            state_forecast_view: "State forecast",
            county_margin_change_view: "Shift from 2008"
        },
        PartyNames: {
            DEM: "Democrat",
            REP: "Republican",
            IND: "Independent",
            "Ind.": "Independent",
            Ind: "Independent",
            OTH: "Other"
        },
        PartyAbbr: {
            DEM: "Dem.",
            REP: "Rep.",
            IND: "Ind.",
            "Ind.": "Ind.",
            Ind: "Ind.",
            OTH: "Other"
        }
    };
    var E = Election2012;
    E.USE_FLASH = Browser.ie && Browser.ieVersion < 9;
    E.USE_STAGING = Browser.getPageUrl().indexOf("stg") != -1;
    E.ADVANCED_FEATURES = true;
    E.EXPERIMENTAL_FEATURES = Browser.getPageUrl().indexOf("localhost") != -1;
    Election2012.getPartyName = function(code) {
        return this.PartyNames[code] || this.PartyNames.OTH
    };
    Election2012.getPartyAbbr = function(code) {
        return this.PartyAbbr[code] || this.PartyAbbr.OTH
    };
    if (true) {
        Election2012.detailedCountyShapeUrl = "https://static01.nyt.com/packages/js/newsgraphics/projects/election_2012/nov6_maps/data/counties_albers.utf16be.js";
        Election2012.detailedStateShapeUrl = "https://static01.nyt.com/packages/js/newsgraphics/projects/election_2012/nov6_maps/data/states_albers.utf16be.js";
        Election2012.detailedHouseDistrictMercatorShapeUrl = "https://static01.nyt.com/packages/js/newsgraphics/projects/election_2012/house_ratings_map/district-shapes-utf16.js"
    } else {
        Election2012.detailedCountyShapeUrl = "http://localhost.nytimes.com/nytweb/2012_election/counties_albers.utf16be.js";
        Election2012.detailedStateShapeUrl = "http://localhost.nytimes.com/nytweb/2012_election/states_albers.utf16be.js";
        Election2012.detailedHouseDistrictMercatorShapeUrl = "https://static01.nyt.com/packages/js/newsgraphics/projects/election_2012/house_ratings_map/district-shapes-utf16.js"
    }
    var commonSchema = {
        max_votes: "integer",
        pct_reporting: "string",
        pct_reporting_num: "double",
        total_votes: "integer",
        win_lead_color: "double",
        margin_pct_color: "double",
        raw_idx: "integer",
        leading_party: "string",
        vote_margin: "integer",
        switch_party: "string"
    };
    var stateSchema = commonSchema;
    var houseSchema = Opts.copyAllParams({
        district: "integer"
    }, commonSchema);
    var countySchema = Opts.copyAllParams({
        margin2012: "double"
    }, commonSchema);

    function extendTable(table, schema) {
        for (var key in schema) {
            var type = schema[key];
            table.addField(key, type)
        }
    }

    function __getBasicResultsData(results) {
        var maxVotes = 0;
        var nextVotes = 0;
        var voteMargin = 0;
        var maxResult = null;
        var totalVotes = 0;
        var winningParty = "";
        for (var i = 0, len = results.length; i < len; i++) {
            var res = results[i];
            var votes = res.vote_count;
            if (votes > 0) {
                if (votes == maxVotes) {
                    nextVotes = maxVotes;
                    maxResult = null
                } else if (votes > maxVotes) {
                    if (totalVotes == 0) {
                        totalVotes = votes / parseFloat(res.pct) * 100;
                        totalVotes = Math.round(totalVotes)
                    }
                    maxResult = res;
                    nextVotes = maxVotes;
                    maxVotes = votes
                } else if (votes > nextVotes) {
                    nextVotes = votes
                }
            }
            if (res.winner) {
                winningParty = res.party_id
            }
        }
        var obj = {
            max_votes: maxVotes,
            vote_margin: maxVotes - nextVotes,
            total_votes: totalVotes,
            winning_party: winningParty,
            leading_party: maxResult ? maxResult.party_id : ""
        };
        return obj
    }

    function __getDetailedResultsData(results) {}

    function __getWinLeadColor(maxVotes, leadingParty, won) {
        var col = Election2012.NO_DATA_COL;
        if (maxVotes > 0 || won) {
            if (!leadingParty) {
                if (!won) {
                    col = Election2012.TIE_COL
                } else {
                    trace("[__getWinLeadColor()] flagged as 'won', no leading party")
                }
            } else if (leadingParty == "DEM") {
                col = won ? Election2012.DEM_WIN_COL : Election2012.DEM_LEAD_COL
            } else if (leadingParty == "REP") {
                col = won ? Election2012.REP_WIN_COL : Election2012.REP_LEAD_COL
            } else {
                col = won ? Election2012.IND_WIN_COL : Election2012.IND_LEAD_COL
            }
        }
        return col
    }
    var marginBreaks = [5, 10, 15, 20];
    var leadBreaks = [40, 50, 60, 70];
    E.getLeadPctColor = __getLeadPctColor;

    function __getLeadPctColor(maxVotes, totalVotes, party) {
        var col = Election2012.NO_DATA_COL;
        if (totalVotes > 0 && maxVotes > 0) {
            if (!party) {
                col = Election2012.TIE_COL
            } else {
                var cols;
                if (party == "DEM") {
                    cols = Election2012.DEM_COLORS
                } else if (party == "REP") {
                    cols = Election2012.REP_COLORS
                } else {
                    cols = Election2012.IND_COLORS
                }
                var pct = maxVotes / totalVotes * 100;
                var classId = Utils.getClassId(pct, leadBreaks);
                col = cols[classId]
            }
        }
        return col
    }

    function __getMarginPctColor(margin, totalVotes, party) {
        var col = Election2012.NO_DATA_COL;
        if (totalVotes > 0) {
            if (margin == 0) {
                col = Election2012.TIE_COL
            } else {
                var cols;
                if (party == "DEM") {
                    cols = Election2012.DEM_COLORS
                } else if (party == "REP") {
                    cols = Election2012.REP_COLORS
                } else {
                    cols = Election2012.IND_COLORS
                }
                var marginPct = 100 * margin / totalVotes;
                var classId = Utils.getClassId(marginPct, marginBreaks);
                col = cols[classId]
            }
        }
        return col
    }

    function __importCommonData(raw, dest, getId, geoKey) {
        trace("++importCommonData() indexing on field:", geoKey, "got field?", dest.fieldExists(geoKey));
        dest.indexOnField(geoKey);
        for (var i = 0, len = raw.length; i < len; i++) {
            var rawObj = raw[i];
            var called = !!rawObj.called;
            var locationId = getId(rawObj);
            var destRec = dest.getIndexedRecord(locationId);
            if (destRec.isNull()) {
                trace("[__importCommonData()] unmatched data record; id:", locationId);
                continue
            }
            if (rawObj.switched_to_party) {
                destRec.set("switch_party", rawObj.switched_to_party)
            }
            destRec.set("raw_idx", i);
            var res = __getBasicResultsData(rawObj.results);
            destRec.set("max_votes", res.max_votes);
            destRec.set("vote_margin", res.vote_margin);
            destRec.set("total_votes", res.total_votes);
            if (called != !!res.winning_party) {
                trace("[__importCommonData()] called flag and winning_party inconsistency; called:", called, "res:", res, "raw:", rawObj)
            }
            var winLeadCol = __getWinLeadColor(res.max_votes, res.winning_party || res.leading_party, called);
            var marginPctCol = __getLeadPctColor(res.max_votes, res.total_votes, res.leading_party);
            destRec.set("win_lead_color", winLeadCol);
            destRec.set("margin_pct_color", marginPctCol);
            destRec.set("pct_reporting", rawObj.pct_report);
            destRec.set("pct_reporting_num", __getReportingNumber(rawObj.pct_report))
        }
    }

    function __getReportingNumber(pctStr) {
        return parseFloat(pctStr) || 0
    }

    function __importStateData(raw, dest, geoKey) {
        extendTable(dest, stateSchema);
        __importCommonData(raw, dest, getStateLocationId, geoKey)
    }

    function __importHouseData(raw, dest, geoKey) {
        extendTable(dest, houseSchema);
        __importCommonData(raw, dest, getHouseLocationId, geoKey)
    }

    function getHouseLocationId(obj) {
        return obj.state_id.toUpperCase() + Utils.leftPad(obj.seat_number, 2, "0")
    }

    function getStateLocationId(obj) {
        return obj.state_id.toUpperCase()
    }
    Election2012.importHouseData = function(raw, dest, geoKey) {
        __importHouseData(raw, dest, geoKey)
    };
    Election2012.importGovernorData = function(raw, dest, geoKey) {
        __importStateData(raw, dest, geoKey)
    };
    Election2012.importSenateData = function(raw, dest, geoKey) {
        __importStateData(raw, dest, geoKey)
    };
    Election2012.importPresidentData = function(raw, dest, geoKey) {
        __importStateData(raw, dest, geoKey)
    };
    Election2012.getHatchColor = function(rec) {
        return rec.get("hatch_color")
    };
    Election2012.getCandidateShortName = function(full, last) {
        var name = last;
        if (full == "Tom Smith") {
            name = "T. Smith"
        } else if (full == "Rayburn Smith") {
            name = "R. Smith"
        }
        return name
    };
    Election2012.getCandidateData = function(obj, raw) {
        var arr = [];
        var rawObj = raw[obj.raw_idx];
        var tot = obj.total_votes;
        var results = rawObj.results;
        obj.called = rawObj.called;
        var pollStr = rawObj.polls_reporting === false && rawObj.poll_closing_display || "";
        obj.pollClosingStr = pollStr;
        for (var i = 0; i < results.length; i++) {
            var rawCand = results[i];
            var cand = {
                cand_longname: rawCand.name,
                cand_shortname: this.getCandidateShortName(rawCand.name, rawCand.last_name),
                votes: rawCand.vote_count,
                vote_pct: parseFloat(rawCand.pct),
                party: rawCand.party_id,
                winner: rawCand.winner,
                incumbent: rawCand.incumbent
            };
            arr.push(cand)
        }
        return arr
    };
    Election2012.getCountyCandidateData = function(st, obj, raw) {
        var arr = [];
        var rawCands = raw[st].candidates;
        var rawVotes = raw[st].county_votes;
        var idx = obj.raw_idx;
        var tot = rawVotes.total_votes[idx];
        for (var i = 0; i < rawCands.length; i++) {
            var rawCand = rawCands[i];
            var f = rawCand.votes_field;
            var votes = rawVotes[f][idx];
            var pct = tot > 0 ? 100 * votes / tot : 0;
            var cand = Opts.copyAllParams({}, rawCand);
            cand.vote_pct = pct;
            cand.votes = votes;
            arr.push(cand)
        }
        return arr
    };
    Election2012.getCountyDataImporterByType = function(type) {
        if (type == "president") {
            return this.importPresidentCountyData
        } else if (type == "senate") {
            return this.importSenateCountyData
        } else if (type == "governor") {
            return this.importSenateCountyData
        }
        trace("[Election2012.getCountyDataImporterByType()] missing importer for type:", type)
    };
    Election2012.importPresidentCountyData = function(raw, dest, geoKey) {
        extendTable(dest, countySchema);
        return __importCountyData(raw, dest, geoKey)
    };
    Election2012.importSenateCountyData = function(raw, dest, geoKey) {
        extendTable(dest, countySchema);
        return __importCountyData(raw, dest, geoKey)
    };
    Election2012.importGovernorCountyData = function(raw, dest, geoKey) {
        extendTable(dest, countySchema);
        return __importCountyData(raw, dest, geoKey)
    };

    function __importCountyData(raw, dest, geoKey) {
        var unmatchedCount = 0;
        var matchedCount = 0;
        var fCountyFips = geoKey;
        if (dest.fieldExists(fCountyFips) == false) {
            trace("[__importCountyData()] Missing county fips field from geo table:", fCountyFips);
            return null
        }
        dest.indexOnField(fCountyFips);
        var rawArr = raw;
        var maxMargin = 0;
        var maxMarginReporting = 0;
        Utils.forEach(rawArr, function(obj, st) {
            st = st.toUpperCase();
            var candIndex = Utils.arrayToIndex(obj.candidates, "votes_field");
            var votesObj = obj.county_votes;
            var voteFieldKeys = Utils.getKeys(candIndex);
            var voteSectionKeys = Utils.getKeys(votesObj);
            var fipsArr = votesObj.location_fips;
            var totalArr = votesObj.total_votes;
            var reportingArr = votesObj.pct_reporting;
            if (!fipsArr || !totalArr || !reportingArr) {
                trace("[_importCountyData()] missing pct_reporting or total_votes or location_fips from vote keys:", voteSectionKeys);
                return
            }
            var countyCount = fipsArr.length;
            var candCount = voteFieldKeys.length;
            var voteArrays = Utils.map(voteFieldKeys, function(key) {
                return votesObj[key]
            });
            for (var i = 0; i < countyCount; i++) {
                var fips = fipsArr[i];
                var destRec = dest.getIndexedRecord(fips);
                var maxVotes = 0;
                var nextVotes = 0;
                var maxKey = null;
                if (destRec.isNull()) {
                    unmatchedCount++;
                    continue
                }
                matchedCount++;
                var tot = totalArr[i];
                var dem = 0;
                var rep = 0;
                if (tot > 0) {
                    for (var j = 0; j < candCount; j++) {
                        var candField = voteFieldKeys[j];
                        var voteArr = voteArrays[j];
                        var votes = voteArr[i];
                        var candObj = candIndex[candField];
                        var party = candObj.party;
                        if (party == "DEM") {
                            dem = votes
                        } else if (party == "REP") {
                            rep = votes
                        }
                        if (votes == maxVotes) {
                            nextVotes = maxVotes;
                            maxKey = null
                        } else if (votes > maxVotes) {
                            nextVotes = maxVotes;
                            maxVotes = votes;
                            maxKey = candField
                        } else if (votes > nextVotes) {
                            nextVotes = votes
                        }
                    }
                }
                var margPct = tot == 0 ? 0 : (dem / tot - rep / tot) * 100;
                destRec.set("margin2012", margPct);
                var voteMargin = maxVotes - nextVotes;
                var haveTie = voteMargin > 0;
                destRec.set("raw_idx", i);
                destRec.set("total_votes", tot);
                destRec.set("max_votes", maxVotes);
                destRec.set("vote_margin", voteMargin);
                destRec.set("pct_reporting", reportingArr[i]);
                var reporting = __getReportingNumber(reportingArr[i]);
                destRec.set("pct_reporting_num", reporting);
                if (voteMargin > maxMargin) {
                    maxMargin = voteMargin;
                    if (voteMargin > maxMarginReporting) {
                        maxMarginReporting = voteMargin
                    }
                }
                var leadParty = "";
                if (voteMargin > 0) {
                    var candObj = candIndex[maxKey];
                    leadParty = candObj.party
                }
                destRec.set("leading_party", leadParty);
                var partyCol = leadParty ? __getWinLeadColor(maxVotes, leadParty, true) : E.NO_DATA_COL;
                destRec.set("win_lead_color", partyCol);
                var marginCol = __getLeadPctColor(maxVotes, tot, leadParty);
                destRec.set("margin_pct_color", marginCol)
            }
        });
        var obj = {};
        obj.maxMargin = A._maxMargin = maxMargin;
        obj.maxMarginReporting = A._maxMarginReporting = maxMarginReporting;
        var refMargin = 0;
        if (maxMargin > 0) {
            var margins = dest.getFieldData("vote_margin").concat();
            margins = Utils.filter(margins, function(el) {
                return !!el
            });
            Utils.sortNumbers(margins);
            refMargin = margins[Math.round(margins.length * .7)] || 0
        }
        obj.referenceMargin = A._referenceMargin = refMargin;
        if (unmatchedCount > 0) {
            trace("[__importCountyData()] Unmatched counties in results data --", unmatchedCount, "matched counties --", matchedCount)
        }
        return obj
    }
    Utils.leftPad = function(str, size, pad) {
        str = String(str);
        var chars = size - str.length;
        while (chars-- > 0) {
            str = pad + str
        }
        return str
    };
    Utils.trim = function(str) {
        return str.replace(/^\s+|\s+$/g, "")
    };
    Utils.capitalizeWord = function(w) {
        return w ? w.charAt(0).toUpperCase() + w.substr(1) : ""
    };
    Utils.formatNumber = function(n, decimals, nullStr, showPos) {
        decimals = decimals || 0;
        nullStr = nullStr || "";
        showPos = showPos || false;
        if (n == !n || n == Infinity || n == -Infinity) {
            return nullStr
        }
        var iPartStr = "";
        var dPartStr = "";
        var rawDigits = 0;
        if (decimals > 0) {
            var pow10 = Math.pow(10, decimals);
            var sugar = 1e-7;
            rawDigits = Math.round(Math.abs(n) * pow10 + sugar);
            iPartStr = String(Math.floor(rawDigits / pow10));
            dPartStr = String(rawDigits % pow10);
            while (dPartStr.length < decimals) {
                dPartStr = "0" + dPartStr
            }
            dPartStr = "." + dPartStr
        } else {
            rawDigits = Math.round(Math.abs(n));
            iPartStr = String(rawDigits)
        }
        if (iPartStr == "0" && !dPartStr) {
            return "0"
        }
        var posStr = showPos ? "+" : "";
        var negStr = "-";
        var signStr = n < 0 ? negStr : posStr;
        if (iPartStr.length > 3) {
            var count = iPartStr.length;
            var delimitedStr = "";
            while (count > 3) {
                delimitedStr = "," + iPartStr.substr(count - 3, 3) + delimitedStr;
                count -= 3
            }
            iPartStr = iPartStr.substr(0, count) + delimitedStr
        }
        return signStr + iPartStr + dPartStr
    };
    var __formatRxp = /%([\'+0]*)([1-9]?)((?:\.[1-9])?)([sdifxX%])/g;

    function getPadString(len, c) {
        var str = "";
        for (var i = 0; i < len; i++) {
            str += c
        }
        return str
    }

    function __format(matches, val) {
        var flags = matches[1];
        var padding = matches[2];
        var decimals = matches[3];
        var type = matches[4];
        if (type == "%") {
            return "%"
        }
        var isString = type == "s";
        var isHex = type == "x" || type == "X";
        var isInt = type == "d" || type == "i";
        var isFloat = type == "f";
        var isNumber = !isString;
        var sign = "",
            padDigits = 0,
            isZero = false,
            isNeg = false;
        var str;
        if (isString) {
            str = String(val)
        } else if (isHex) {
            str = val.toString(16);
            if (type == "X") {
                str = str.toUpperCase()
            }
        } else if (isInt) {
            var rounded = Math.round(val);
            isZero = rounded == 0;
            isNeg = rounded < 0;
            str = String(Math.abs(rounded))
        } else if (isFloat) {
            if (decimals) {
                var absVal = Math.abs(val) + 1e-10;
                var decimalDigits = parseInt(decimals.substr(1), 10);
                str = absVal.toFixed(decimalDigits);
                isZero = parseFloat(str) === 0;
                isNeg = !isZero && val < 0
            } else {
                str = String(Math.abs(val));
                isZero = val === 0;
                isNeg = val < 0
            }
        }
        if (isNumber && !isHex) {
            if (flags.indexOf("'") != -1) {
                var decimalIdx = str.indexOf(".");
                var intDigits = decimalIdx == -1 ? str.length : decimalIdx;
                var fmt = "",
                    start = 0,
                    end = intDigits % 3 || 3;
                while (end < intDigits) {
                    fmt += str.substring(start, end) + ",";
                    start = end;
                    end += 3
                }
                str = fmt + str.substr(start)
            }
            if (!isZero) {
                if (isNeg) {
                    sign = "âˆ’"
                } else if (flags.indexOf("+") != -1) {
                    sign = "+"
                }
            }
        }
        if (padding) {
            var strLen = str.length + sign.length;
            var minWidth = parseInt(padding, 10);
            if (strLen < minWidth) {
                padDigits = minWidth - strLen;
                var padChar = flags.indexOf("0") == -1 ? " " : "0";
                var padStr = getPadString(padDigits, padChar)
            }
        }
        if (padDigits == 0) {
            str = sign + str
        } else if (padChar == "0") {
            str = sign + padStr + str
        } else {
            str = padStr + sign + str
        }
        return str
    }
    Utils.format = function(s) {
        var arr = Array.prototype.slice.call(arguments, 1);
        var ostr = "";
        for (var startIdx = 0, i = 0, len = arr.length, matches; i < len && (matches = __formatRxp.exec(s)); i++) {
            ostr += s.substring(startIdx, __formatRxp.lastIndex - matches[0].length);
            ostr += __format(matches, arr[i]);
            startIdx = __formatRxp.lastIndex
        }
        __formatRxp.lastIndex = 0;
        if (i != len) {
            trace("[Utils.format()] Number of formatting codes did not match number of value arguments; string:", s)
        }
        ostr += s.substr(startIdx);
        return ostr
    };

    function BigMapButtons(div, voteMap, opts) {
        var el = El(div);
        var _self = this;
        var electionType = opts.election_type || "president";
        var views = opts.tab_views || opts.views || [];
        var initialView = opts.initial_tab_view || opts.initial_view || views[0];
        var selectedId = -1;
        var initialIdx = Utils.indexOf(views, initialView);
        var mapIconViewIndex = {
            state_winner_view: "",
            county_margin_view: "_counties",
            county_margin_bubble_view: "_bubbles",
            county_hollow_bubble_view: "_circles",
            county_margin_change_view: "_shifts",
            district_winner_view: ""
        };

        function getIconUrl(eType, mapView) {
            var server = E.USE_STAGING ? "static.stg.nytimes.com" : "graphics8.nytimes.com";
            var template = "http://%s/packages/images/1min/election_2012/national_maps/nyt_US_80px_%s%s_map.png";
            var url = Utils.format(template, server, eType, mapIconViewIndex[mapView] || "");
            url = Browser.cacheBustUrl(url, 4);
            return url
        }
        var buttons = Utils.map(views, function(view, i) {
            var btn = el.child("div").addClass("nytg-map-view-button");
            if (i == 0) {
                btn.addClass("nytg-first-button")
            }
            if (i == views.length - 1) {
                btn.addClass("nytg-last-button")
            }
            if (i == initialIdx) {
                selectedId = i;
                btn.addClass("nytg-selected-button")
            }
            var label = Election2012.ViewLabels[view] || "Special view";
            var imgUrl = getIconUrl(electionType, view);
            var icon = btn.child("div").addClass("nytg-icon").child("img").attr("src", imgUrl);
            var txt = btn.child("div").addClass("nytg-label").text(label);
            btn.on("click", function() {
                _self.handleButtonClick(i)
            }, this);
            return btn
        }, this);
        this.handleButtonClick = function(i) {
            if (i == selectedId) {
                return
            }
            if (selectedId > -1) {
                var prevBtn = buttons[selectedId];
                prevBtn.removeClass("nytg-selected-button")
            }
            selectedId = i;
            var btn = buttons[i];
            btn.addClass("nytg-selected-button");
            var view = views[i];
            if (voteMap) {
                voteMap.setMapView(view)
            }
            _self.dispatchEvent("change", {
                view: view
            })
        };
        this.currentView = function() {
            return views[selectedId] || ""
        }
    }
    Opts.inherit(BigMapButtons, EventDispatcher);
    Opts.exportObject("nytg.BigMapButtons", BigMapButtons);
    var TRANSITION_TIME = 500;
    var Fader = {};
    Fader.fadeIn = function(el, time) {
        time = time || 300;
        el.style.WebkitTransition = "opacity " + time + "ms linear";
        el.style.opacity = "1"
    };
    Fader.fadeOut = function(el, time) {
        time = time || 300;
        el.style.WebkitTransition = "opacity " + time + "ms linear";
        el.style.opacity = "0"
    };
    Timer.postpone = function(ms, func, ctx) {
        var callback = func;
        if (ctx) {
            callback = function() {
                func.call(ctx)
            }
        }
        setTimeout(callback, ms)
    };

    function Timer() {
        if (!(this instanceof Timer)) {
            return new Timer
        }
        var _startTime;
        var _prevTime;
        var _count = 0;
        var _times = 0;
        var _duration = 0;
        var _interval = 25;
        var MIN_INTERVAL = 8;
        var _callback;
        var _timerId = null;
        var _self = this;
        this.busy = function() {
            return _timerId !== null
        };
        this.start = function() {
            if (_timerId !== null) {
                this.stop()
            }
            _count = 0;
            _prevTime = _startTime = (new Date).getTime();
            _timerId = setInterval(handleTimer, _interval);
            return this
        };
        this.stop = function() {
            if (_timerId !== null) {
                clearInterval(_timerId);
                _timerId = null
            }
        };
        this.duration = function(ms) {
            _duration = ms;
            return this
        };
        this.interval = function(ms) {
            if (ms == null) {
                return _interval
            }
            _interval = ms | 0;
            if (_interval < MIN_INTERVAL) {
                trace("[Timer.interval()] Resetting to minimum interval:", MIN_INTERVAL);
                _interval = MIN_INTERVAL
            }
            return this
        };
        this.callback = function(f) {
            _callback = f;
            return this
        };
        this.times = function(i) {
            _times = i;
            return this
        };

        function handleTimer() {
            var now = (new Date).getTime();
            var interval = now - _prevTime;
            var elapsed = now - _startTime;
            if (interval < MIN_INTERVAL) {
                return
            }
            _count++;
            if (_duration > 0 && elapsed > duration || _times > 0 && _count > _times) {
                this.stop();
                return
            }
            _prevTime = now;
            var obj = {
                elapsed: elapsed,
                count: _count,
                time: now,
                interval: interval
            };
            _callback && _callback(obj);
            _self.dispatchEvent("tick", obj)
        }
    }
    Opts.inherit(Timer, EventDispatcher);
    var FrameCounter = (new Timer).interval(25).start();

    function TweenTimer(obj) {
        if (obj) {
            var tween = new TweenTimer;
            tween.object = obj;
            return tween
        }
        if (!(this instanceof TweenTimer)) {
            return new TweenTimer
        }
        var _self = this;
        var _delay = 0;
        var _start;
        var _busy;
        var _quickStart = true;
        var _snap = 5e-4;
        var _done = false;
        var _duration;
        var _method;
        var _src, _dest;
        this.method = function(f) {
            _method = f;
            return this
        };
        this.snap = function(s) {
            _snap = s;
            return this
        };
        this.duration = function(ms) {
            _duration = ms;
            return this
        };
        this.to = function(obj) {
            _dest = obj;
            return this
        };
        this.from = function(obj) {
            _src = obj;
            return this
        };
        this.startTimer = this.start = function(ms, method) {
            if (_busy) {
                _self.stopTimer()
            }
            _duration = _duration || ms || 300;
            _method = _method || method || Tween.sineInOut;
            _start = (new Date).getTime();
            if (_quickStart) {
                _start -= FrameCounter.interval()
            }
            _busy = true;
            FrameCounter.addEventListener("tick", handleTimer, this);
            return this
        };
        this.setDelay = this.delay = function(ms) {
            ms = ms | 0;
            if (ms > 0 || ms < 1e4) {
                _delay = ms
            }
            return this
        };
        this.__getData = function(pct) {
            var obj = {};
            if (_src && _dest) {
                Opts.copyAllParams(obj, _src);
                for (var key in obj) {
                    obj[key] = (1 - pct) * obj[key] + pct * _dest[key]
                }
            }
            return obj
        };
        this.busyTweening = this.busy = function() {
            return _busy
        };
        this.stopTimer = this.stop = function() {
            _busy = false;
            FrameCounter.removeEventListener("tick", handleTimer, this);
            _done = false
        };

        function handleTimer() {
            if (_busy == false) {
                _self.stopTimer();
                return
            }
            if (_done) {
                return
            }
            var pct = getCurrentPct();
            if (pct <= 0) {
                return
            }
            if (pct + _snap >= 1) {
                pct = 1;
                _done = true
            }
            _self.procTween(pct);
            if (!_busy) {
                _self.stopTimer();
                return
            }
            if (pct == 1 && _done) {
                _self.stopTimer()
            }
        }

        function getCurrentPct() {
            if (_busy == false) {
                return 1
            }
            var now = (new Date).getTime();
            var elapsed = now - _start - _delay;
            if (elapsed < 0) {
                return 0
            }
            var pct = elapsed / _duration;
            if (pct > 1) {
                pct = 1
            }
            if (_method != null) {
                pct = _method(pct)
            }
            return pct
        }
    }
    Opts.inherit(TweenTimer, EventDispatcher);
    TweenTimer.prototype.procTween = function(pct) {
        var isDone = pct >= 1;
        var obj = this.__getData(pct);
        obj.progress = pct;
        obj.done = isDone;
        this.dispatchEvent("tick", obj);
        isDone && this.dispatchEvent("done")
    };
    var Tween = TweenTimer;
    Tween.quadraticOut = function(n) {
        return 1 - Math.pow(1 - n, 2)
    };
    Tween.sineInOut = function(n) {
        n = .5 - Math.cos(n * Math.PI) / 2;
        return n
    };

    function NumberTween(callback) {
        TweenTimer.call(this);
        this.start = function(fromVal, toVal, ms, method) {
            this._from = fromVal;
            this._to = toVal;
            this.startTimer(ms, method)
        };
        this.procTween = function(pct) {
            var val = this._to * pct + this._from * (1 - pct);
            callback(val, pct == 1)
        }
    }

    function BoundingBoxTween(callback) {
        this.__super__();
        this.start = function(a, b, ms, method) {
            method = method || Tween.sineInOut;
            this._bbStart = a;
            this._bbEnd = b;
            var deltaScale = b.width() / a.width();
            var deltaScaleAbs = deltaScale > 1 ? 1 / deltaScale : deltaScale;
            var weight = .6;
            var adjustedTime = ms * weight + ms * (1 - deltaScaleAbs) * (1 - weight);
            this.startTimer(adjustedTime, method)
        };
        this.procTween = function(pct) {
            var a = this._bbStart;
            var b = this._bbEnd;
            var w = a.width() * (1 - pct) + b.width() * pct;
            var h = a.height() * (1 - pct) + b.height() * pct;
            var l = a.left * (1 - pct) + b.left * pct;
            var t = a.top * (1 - pct) + b.top * pct;
            var bb = (new BoundingBox).setBounds(l, t, l + w, t - h);
            callback(bb, pct == 1)
        }
    }
    Opts.inherit(BoundingBoxTween, TweenTimer);

    function ButtonPanel(css) {
        css = css || "";
        if (Browser.touchEnabled) {
            css += "-webkit-tap-highlight-color: rgba(0,0,0,0);"
        }
        this.div = Browser.createElement("div", css);
        this.appendChild = function(div) {
            this.div.appendChild(div)
        }
    }
    Opts.inherit(ButtonPanel, EventDispatcher);
    var ButtonCSS = {
        "default": "font-family:Arial, Helvetica, sans-serif; font-size:12px; padding:2px 7px 3px 7px; -moz-border-radius: 3px; border-radius: 3px; background-color:#00558a; color:white;",
        up: "background-color:#00558a;",
        down: "background-color:#69A9C9;"
    };
    ButtonCSS.updateStyle = function(type, update) {
        var types = this._types;
        var currStyle = types[type] || "";
        types[type] = Browser.mergeCSS(currStyle, update);
        return this
    };
    ButtonCSS.getStyle = function(type) {
        var defStyle = ButtonCSS["default"];
        if (type == "default") {
            return defStyle
        }
        var mergedStyle = Browser.mergeCSS(defStyle, ButtonCSS[type] || "");
        return mergedStyle
    };

    function BasicButton(div, opts) {
        this._opts = {};
        Opts.copyAllParams(this._opts, opts);
        this.div = div;
        var css = "cursor:pointer;";
        if (Browser.touchEnabled) {}
        Browser.addCSS(div, css);
        Browser.addClass(div, "nytg-button");
        this._hidden = false;
        if (Browser.touchEnabled) {
            Browser.addEventListener(div, "touchend", this.handleClick, this)
        } else {
            Browser.addEventListener(div, "click", this.handleClick, this)
        }
    }
    Opts.inherit(BasicButton, EventDispatcher);
    BasicButton.prototype.handleClick = function(evt) {
        this.dispatchEvent("click")
    };
    BasicButton.prototype.isHidden = function() {
        return this._hidden
    };
    BasicButton.prototype.show = function() {
        if (!this._hidden) {
            return
        }
        this.div.style.display = "block";
        this._hidden = false
    };
    BasicButton.prototype.hide = function() {
        if (this._hidden) {
            return
        }
        this.div.style.display = "none";
        this._hidden = true
    };

    function ImageButton(url, opts) {
        var img = Browser.createElement("img");
        img.src = url;
        var div = Browser.createElement("div");
        div.appendChild(img);
        this.__super__(div, opts)
    }
    Opts.inherit(ImageButton, BasicButton);

    function LabelButton(text, css) {
        var style = ButtonCSS.getStyle("default");
        if (css) {
            style = Browser.mergeCSS(style, css)
        }
        var div = LabelButton.create(text, style);
        this.__super__(div)
    }
    Opts.inherit(LabelButton, BasicButton);
    LabelButton.create = function(text, css, opts) {
        var div = Browser.createElement("div", css);
        div.innerHTML = text;
        return div
    };

    function UpDownButton(div, upCss, downCss, overCss) {
        this.__super__(div);
        this._down = false;
        this.isDown = function() {
            return this._down
        };
        this.down = function() {
            downCss && Browser.addCSS(div, downCss);
            Browser.removeClass(div, "hover");
            Browser.addClass(div, "selected");
            this._isTab && Browser.addClass(div, "nytg-selectedTab");
            this._down = true
        };
        this.over = function() {
            if (this._down) {
                return
            }
            overCss && Browser.addCSS(div, overCss);
            Browser.addClass(div, "hover");
            this.dispatchEvent("rollover")
        };
        this.out = function() {
            if (this._down) {
                return
            }
            Browser.removeClass(div, "hover");
            upCss && Browser.addCSS(div, upCss);
            this.dispatchEvent("rollout")
        };
        this.up = function() {
            upCss && Browser.addCSS(div, upCss);
            Browser.removeClass(div, "selected");
            this._isTab && Browser.removeClass(div, "nytg-selectedTab");
            this._down = false
        };
        this.setDownCSS = function(css) {
            downCss = css;
            this.isDown() && this.down()
        };
        this.setUpCSS = function(css) {
            upCss = css;
            this.isDown() || this.up()
        };
        if (!Browser.touchEnabled) {
            Browser.addEventListener(this.div, "mouseover", this.over, this);
            Browser.addEventListener(this.div, "mouseout", this.out, this)
        }
    }
    Opts.inherit(UpDownButton, BasicButton);

    function ToggleButtons(css, opts) {
        this._limit = Opts.readParam(opts && opts.limit, 1);
        this._unselectable = Opts.readParam(opts && opts.unselectable, false);
        this.__super__(css);
        this.div.className = "nytg-toggle-buttons";
        this._buttons = [];
        this._keys = [];
        this._selectedKeys = [];
        this._lastKey = ""
    }
    Opts.inherit(ToggleButtons, ButtonPanel);
    ToggleButtons.prototype.handleDivOut = function(evt) {
        if (this._lastKey == "") {
            this.dispatchEvent("mouseout")
        }
    };
    ToggleButtons.prototype.destroy = function() {
        Utils.forEach(this._buttons, function(btn) {
            Browser.removeEventListeners(btn.div)
        });
        this.removeEventListeners();
        this._buttons = []
    };
    ToggleButtons.prototype.show = function() {
        if (!this._hidden) {
            return
        }
        this.div.style.display = "block";
        this._hidden = false
    };
    ToggleButtons.prototype.hide = function() {
        if (this._hidden) {
            return
        }
        this.div.style.display = "none";
        this._hidden = true
    };
    ToggleButtons.prototype.isHidden = function() {
        return this._hidden
    };
    ToggleButtons.prototype.addButton = function(key, btn, selected) {
        if (Utils.contains(this._keys, key)) {
            trace("[ToggleButtons.addButton()] Duplicate key:", key);
            return this
        }
        this.appendChild(btn.div);
        if (!btn.up) {
            return
        }
        btn.addEventListener("click", this.handleClick, this);
        btn.addEventListener("rollover", this.handleOver, this);
        btn.addEventListener("rollout", this.handleOut, this);
        this._keys.push(key);
        var btns = this._buttons;
        btns.push(btn);
        if (selected) {
            this.selectByKey(key)
        } else {
            btn.up()
        }
        return this
    };
    ToggleButtons.prototype.selectByKey = function(key) {
        var idx = Utils.indexOf(this._keys, key);
        if (idx == -1) {
            trace("[ToggleButtons.selectByKey()] missing key:", key);
            return
        }
        var key = this._keys[idx];
        if (this.testKey(key)) {
            if (this._unselectable) {
                this.deselectByKey(key);
                this.dispatchEvent("change");
                this.dispatchEvent("deselect", {
                    key: key
                })
            }
            return
        }
        this.limitSelectionSize(this._limit - 1);
        this._selectedKeys.push(key);
        this.getButtonByKey(key).down();
        this.dispatchEvent("change");
        this.dispatchEvent("select", {
            key: key
        })
    };
    ToggleButtons.prototype.deselectByKey = function(key) {
        if (this.testKey(key)) {
            var idx = Utils.indexOf(this._selectedKeys, key);
            this.getButtonByKey(key).up();
            this._selectedKeys.splice(idx, 1)
        }
    };
    ToggleButtons.prototype.getButtonByKey = function(key) {
        var idx = Utils.indexOf(this._keys, key);
        return idx != -1 ? this._buttons[idx] : null
    };
    ToggleButtons.prototype.getSelectedKey = function() {
        var len = this._selectedKeys.length;
        return len == 0 ? "" : this._selectedKeys[len - 1]
    };
    ToggleButtons.prototype.getLastSelectedKey = function() {
        return this.getSelectedKey()
    };
    ToggleButtons.prototype.testKey = function(key) {
        return Utils.indexOf(this._selectedKeys, key) != -1
    };
    ToggleButtons.prototype.getSelectedKeys = function() {
        return this._selectedKeys.concat()
    };
    ToggleButtons.prototype.limitSelectionSize = function(size) {
        var selected = this._selectedKeys;
        while (size >= 0 && selected.length > size) {
            this.deselectByKey(selected[0])
        }
    };
    ToggleButtons.prototype.handleClick = function(evt) {
        var btnId = Utils.indexOf(this._buttons, evt.target);
        this.selectByKey(this._keys[btnId])
    };
    ToggleButtons.prototype.handleOver = function(evt) {
        var btnId = Utils.indexOf(this._buttons, evt.target);
        var key = this._keys[btnId];
        this._lastKey = key;
        this.dispatchEvent("rollover", {
            key: key
        })
    };
    ToggleButtons.prototype.handleOut = function(evt) {
        var btnId = Utils.indexOf(this._buttons, evt.target);
        var key = this._keys[btnId];
        this.dispatchEvent("rollout", {
            key: key
        });
        this._lastKey = ""
    };

    function BigMapPanel(div, map, opts) {
        var small = !!opts.small_panel;
        var _isOpen = false;
        var width = opts.panelWidth;
        var height = 500;
        var openTime = 500;
        var closeTime = 500;
        var self = this;
        var leftPadding = 8;
        var panMargins = opts.panMargins;
        this.map = map;
        map._panel = this;
        this.width = width;
        var parent = El(div);
        var slider = parent.addClass("nytg-map-slider");
        if (small) {
            slider.addClass("nytg-small-panel")
        }
        var content = slider.child("div").addClass("nytg-panel-content").css("paddingLeft", leftPadding);
        slider.css("height", opts.height);
        map.selectEvent(select);
        map.deselectEvent(deselect);
        map._opts.panMargins = panMargins;
        this.refresh = function() {};
        this.isOpen = function() {
            return _isOpen
        };

        function select(obj) {
            displayPanelContent(obj);
            open()
        }

        function deselect() {
            close()
        }

        function open() {
            if (_isOpen) {
                return
            }
            _isOpen = true;
            slider.css("width", width);
            slider.css("right", 0)
        }

        function close() {
            if (!_isOpen) {
                return
            }
            _isOpen = false;
            slider.css("width", 0);
            slider.css("right", 0)
        }
        var winnerClasses = {
            DEM: " nytg-panel-dem-winner",
            REP: " nytg-panel-rep-winner"
        };

        function getPanelTable(obj) {
            var partyHead = small ? "" : '<th class="nytg-panel-party">Party</th>';
            var tableHead = Utils.format('<tr><th class="nytg-panel-candidate">Candidate</th>%s<th class="nytg-panel-vote">Votes</th><th class="nytg-panel-votepct">Pct.</th>', partyHead);
            var tableBody = "";
            if (obj.candidates) {
                for (var i = 0; i < obj.candidates.length; i++) {
                    var cand = obj.candidates[i];
                    var tdClass = i > 0 ? " nytg-panel-lower-row" : "";
                    var pctStr = cand.pct_str + "%";
                    var winner = cand.winner;
                    var winnerClass = "";
                    if (winner) {
                        winnerClass = winnerClasses[cand.party] || " nytg-panel-other-winner"
                    }
                    var partyBody = small ? "" : Utils.format('<td class="nytg-panel-party">%s</td>', cand.party_abbr);
                    var row = '<tr><td class="nytg-panel-candidate%s%s">%s%s</td>%s<td class="nytg-panel-vote%s">%s</td><td class="nytg-panel-votepct%s">%s</td></tr>';
                    tableBody += Utils.format(row, winnerClass, tdClass, cand.cand_shortname, cand.incumbent && obj.show_incumbent ? "*" : "", partyBody, tdClass, cand.votes_str, tdClass, pctStr)
                }
            }
            var tableClass = obj.called ? "nytg-panel-winner" : "";
            var table = Utils.format('<table cellpadding="0" cellspacing="0" class="%s">', tableClass) + tableHead + tableBody + "</table>";
            return table
        }

        function displayPanelContent(obj) {
            var subStr = obj.noElection ? "No election" : obj.pollClosingStr || obj.reportingStr;
            if (obj.no_county_data) {
                subStr = "County data not available"
            }
            var html = Utils.format('<div class="nytg-panel-title">%s</div><div class="nytg-panel-note">%s</div>', obj.titleStr, subStr);
            if (!obj.noElection) {
                var mapView = map._map.views.getCurrentView().name;
                var table = mapView == E.COUNTY_MARGIN_CHANGE_VIEW ? map.getChangeTable(obj.candidates, obj, true) : getPanelTable(obj);
                var body = table || "";
                var tail = "";
                if (obj.show_incumbent) {
                    tail = '<div class="nytg-panel-note">* Incumbent</div>'
                }
                html += body + tail;
                if (!opts.no_links) {
                    var stateCode = StateNames.getName(obj.state_id).toLowerCase().replace(" ", "-");
                    var stateName = small ? StateNames.getName(obj.state_id) : StateNames.getAbbrev(obj.state_id);
                    var stateLink = Utils.format("http://%s/2012/results/states/%s", E.USE_STAGING ? "static.elex.east.stg.newsdev.net" : "elections.nytimes.com", stateCode);
                    if ("AZ,CA,CO,CT,FL,IN,IA,MA,MO,NV,NH,NJ,NY,NC,OH,PA,VA,WI".indexOf(obj.state_id) != -1) {
                        var pollLink = "http://elections.nytimes.com/2012/results/president/exit-polls"
                    }
                    var pollHTML = pollLink ? Utils.format('<a href="%s">%s Exit Polls &raquo;</a>', pollLink, stateName) : "";
                    var fullHTML = Utils.format('<a href="%s">Full %s Results &raquo;</a>', stateLink, stateName);
                    var linkClass = "nytg-panel-link";
                    var linkStr = small || !pollHTML ? '<div class="%s"><div>%s</div><div>%s</div></div>' : '<div class="%s">%s<div class="nytg-pipe"> | </div>%s</div>';
                    html += Utils.format(linkStr, linkClass, fullHTML, pollHTML)
                }
            }
            content.html(html);
            trace(">>> panel buttons; enabled?", E.EXPERIMENTAL_FEATURES);
            if (E.EXPERIMENTAL_FEATURES && opts.hp_map) {
                var legend = El(content).child("div");
                var buttons = El("div");
                var downCss = "background-color:#ddd;";
                var upCss = "background-color:#fff;";
                var leadBtn = new UpDownButton(buttons.child("div").addClass("nytg-toggle-button").text("Lead").node(), upCss, downCss);
                var margBtn = new UpDownButton(buttons.child("div").addClass("nytg-toggle-button nytg-middle-button").text("Margin").node(), upCss, downCss);
                var shiftBtn = new UpDownButton(buttons.child("div").addClass("nytg-toggle-button").text("Shifts").node(), upCss, downCss);
                var icon = legend.child("div");
                var toggle = new ToggleButtons(buttons.node());
                legend.node().appendChild(toggle.div);
                toggle.addButton("lead", leadBtn, true);
                toggle.addButton("margin", margBtn);
                toggle.addButton("shift", shiftBtn);
                toggle.on("select", function(evt) {
                    trace("change; evt:", evt.key)
                }, this)
            }
        }
    }

    function AlbersEqualAreaConic(lng0D, lat1D, lat2D, lat0D) {
        this.__super__();
        this.name = "AlbersEqualAreaConic";
        var lat0 = this._lat0 = lat0D === undefined ? 0 : lat0D * this._DEG2RAD;
        var lat1 = this._lat1 = lat1D === undefined ? 0 : lat1D * this._DEG2RAD;
        var lat2 = this._lat2 = lat2D === undefined ? 0 : lat2D * this._DEG2RAD;
        this._lng0 = lng0D === undefined ? 0 : lng0D * this._DEG2RAD;
        var cosLat1 = Math.cos(lat1);
        var sinLat1 = Math.sin(lat1);
        this._sphN = .5 * (sinLat1 + Math.sin(lat2));
        this._sphC = cosLat1 * cosLat1 + 2 * this._sphN * sinLat1;
        this._sphRho0 = Math.sqrt(this._sphC - 2 * this._sphN * Math.sin(lat0)) / this._sphN;
        var E = this._E;
        var m1 = this.calcAlbersMell(E, lat1);
        var m2 = this.calcAlbersMell(E, lat2);
        var q0 = this.calcAlbersQell(E, lat0);
        var q1 = this.calcAlbersQell(E, lat1);
        var q2 = this.calcAlbersQell(E, lat2);
        this._ellN = (m1 * m1 - m2 * m2) / (q2 - q1);
        this._ellC = m1 * m1 + this._ellN * q1;
        this._ellRho0 = this._A * Math.sqrt(this._ellC - this._ellN * q0) / this._ellN;
        this._ellAuthConst = 1 - (1 - E * E) / (2 * E) * Math.log((1 - E) / (1 + E))
    }
    Opts.inherit(AlbersEqualAreaConic, ProjectionBase);
    AlbersEqualAreaConic.prototype.projectLatLng = function(lat, lng, xy) {
        lat *= this._DEG2RAD;
        lng *= this._DEG2RAD;
        var rho, theta;
        xy = xy || new Point;
        if (this.useEllipsoid) {
            var q = this.calcAlbersQell(this._E, lat);
            rho = this._A * Math.sqrt(this._ellC - this._ellN * q) / this._ellN;
            theta = this._ellN * (lng - this._lng0);
            xy.x = rho * Math.sin(theta);
            xy.y = this._ellRho0 - rho * Math.cos(theta)
        } else {
            rho = Math.sqrt(this._sphC - 2 * this._sphN * Math.sin(lat)) / this._sphN;
            theta = this._sphN * (lng - this._lng0);
            var xEarth = rho * Math.sin(theta);
            var yEarth = this._sphRho0 - rho * Math.cos(theta);
            xy.x = xEarth * this._R;
            xy.y = yEarth * this._R
        }
        return xy
    };
    AlbersEqualAreaConic.prototype.unprojectXY = function(x, y, ll) {
        x -= this._x0;
        y -= this._y0;
        var rho, theta, lat, lng;
        if (this.useEllipsoid) {
            theta = Math.atan(x / (this._ellRho0 - y));
            lng = this._lng0 + theta / this._ellN;
            var e2 = this._E * this._E;
            var e4 = e2 * e2;
            var e6 = e4 * e2;
            rho = Math.sqrt(x * x + (this._ellRho0 - y) * (this._ellRho0 - y));
            var q = (this._ellC - rho * rho * this._ellN * this._ellN / (this._A * this._A)) / this._ellN;
            var beta = Math.asin(q / this._ellAuthConst);
            lat = beta + Math.sin(2 * beta) * (e2 / 3 + 31 * e4 / 180 + 517 * e6 / 5040) + Math.sin(4 * beta) * (23 * e4 / 360 + 251 * e6 / 3780) + Math.sin(6 * beta) * 761 * e6 / 45360
        } else {
            x /= this._R;
            y /= this._R;
            rho = Math.sqrt(x * x + (this._sphRho0 - y) * (this._sphRho0 - y));
            theta = Math.atan(x / (this._sphRho0 - y));
            lat = Math.asin((this._sphC - rho * rho * this._sphN * this._sphN) * .5 / this._sphN);
            lng = theta / this._sphN + this._lng0
        }
        ll = ll || new GeoPoint;
        ll.lat = lat * this._RAD2DEG;
        ll.lng = lng * this._RAD2DEG;
        return ll
    };
    AlbersEqualAreaConic.prototype.calcAlbersQell = function(e, lat) {
        var sinLat = Math.sin(lat);
        var q = (1 - e * e) * (sinLat / (1 - e * e * sinLat * sinLat) - .5 / e * Math.log((1 - e * sinLat) / (1 + e * sinLat)));
        return q
    };
    AlbersEqualAreaConic.prototype.calcAlbersMell = function(e, lat) {
        var sinLat = Math.sin(lat);
        var m = Math.cos(lat) / Math.sqrt(1 - e * e * sinLat * sinLat);
        return m
    };

    function AlbersUSA() {
        var proj = new AlbersEqualAreaConic(-96, 29.5, 45.5, 37.5);
        proj.name = "AlbersUSA";
        return proj
    }

    function LambertConformalConic(lng0D, lat1D, lat2D, lat0D) {
        this.__super__();
        this.useEllipsoid = true;
        this.name = "LambertConformalConic";
        var lat0 = this._lat0 = lat0D === undefined ? 0 : lat0D * this._DEG2RAD;
        var lat1 = this._lat1 = lat1D === undefined ? 0 : lat1D * this._DEG2RAD;
        var lat2 = this._lat2 = lat2D === undefined ? 0 : lat2D * this._DEG2RAD;
        this._lng0 = lng0D === undefined ? 0 : lng0D * this._DEG2RAD;
        this._lambertSphN = Math.log(Math.cos(lat1) / Math.cos(lat2)) / Math.log(Math.tan(Math.PI / 4 + lat2 / 2) / Math.tan(Math.PI / 4 + lat1 / 2));
        this._lambertSphF = Math.cos(lat1) * Math.pow(Math.tan(Math.PI / 4 + lat1 / 2), this._lambertSphN) / this._lambertSphN;
        this._lambertSphRho0 = this._R * this._lambertSphF / Math.pow(Math.tan(Math.PI / 4 + lat0 / 2), this._lambertSphN);
        var E = this._E;
        this._lambertEllN = (Math.log(this.calcLambertM(lat1, E)) - Math.log(this.calcLambertM(lat2, E))) / (Math.log(this.calcLambertT(lat1, E)) - Math.log(this.calcLambertT(lat2, E)));
        this._lambertEllF = this.calcLambertM(lat1, E) / (this._lambertEllN * Math.pow(this.calcLambertT(lat1, E), this._lambertEllN));
        this._lambertEllRho0 = this._A * this._lambertEllF * Math.pow(this.calcLambertT(lat0, E), this._lambertEllN)
    }
    Opts.inherit(LambertConformalConic, ProjectionBase);
    LambertConformalConic.prototype.projectLatLng = function(lat, lng, xy) {
        lat *= this._DEG2RAD;
        lng *= this._DEG2RAD;
        var rho, theta;
        xy = xy || new Point;
        if (this.useEllipsoid) {
            var t = this.calcLambertT(lat, this._E);
            rho = this._A * this._lambertEllF * Math.pow(t, this._lambertEllN);
            theta = this._lambertEllN * (lng - this._lng0);
            xy.x = rho * Math.sin(theta);
            xy.y = this._lambertEllRho0 - rho * Math.cos(theta)
        } else {
            rho = this._R * this._lambertSphF / Math.pow(Math.tan(Math.PI / 4 + lat / 2), this._lambertSphN);
            theta = this._lambertSphN * (lng - this._lng0);
            xy.x = rho * Math.sin(theta);
            xy.y = this._lambertSphRho0 - rho * Math.cos(theta)
        }
        xy.x += this._x0;
        xy.y += this._y0;
        return xy
    };
    LambertConformalConic.prototype.unprojectXY = function(x, y, ll) {
        ll = ll || new GeoPoint;
        if (this.useEllipsoid) {
            this.findApproxEllLatLong(x, y, ll);
            return ll
        }
        x -= this._x0;
        y -= this._y0;
        var rho0 = this._lambertSphRho0;
        var rho = Math.sqrt(x * x + (rho0 - y) * (rho0 - y));
        if (this._lambertSphN < 0) {
            rho = -rho
        }
        var theta = Math.atan(x / (rho0 - y));
        var lat = 2 * Math.atan(Math.pow(this._R * this._lambertSphF / rho, 1 / this._lambertSphN)) - .5 * Math.PI;
        var lon = theta / this._lambertSphN + this._lng0;
        ll.lat = lat * this._RAD2DEG;
        ll.lng = lon * this._RAD2DEG;
        return ll
    };
    LambertConformalConic.prototype.calcLambertT = function(lat, e) {
        var sinLat = Math.sin(lat);
        var t = Math.tan(Math.PI / 4 - lat / 2) / Math.pow((1 - e * sinLat) / (1 + e * sinLat), e / 2);
        return t
    };
    LambertConformalConic.prototype.calcLambertM = function(lat, e) {
        var sinLat = Math.sin(lat);
        var m = Math.cos(lat) / Math.sqrt(1 - e * e * sinLat * sinLat);
        return m
    };

    function LambertUSA() {
        var proj = new LambertConformalConic(-96, 33, 45, 39);
        proj.name = "LambertUSA";
        return proj
    }

    function MixedProjection(mainProj) {
        Opts.copyNewParams(this, mainProj);
        this._proj = mainProj;
        this._boxes = [];
        this._transforms = [];
        this._projections = []
    }
    MixedProjection.prototype.addFrame = function(destProj, geoOrigin, geoDest, widthMeters, heightMeters, scalePct, rotationDegrees) {
        var destProj = destProj || null;
        var origProj = this._proj;
        var xyOrigin = origProj.projectLatLng(geoOrigin.lat, geoOrigin.lng).clone();
        var xyDest = origProj.projectLatLng(geoDest.lat, geoDest.lng).clone();
        var bb = new BoundingBox;
        bb.setBounds(xyOrigin.x - widthMeters * .5, xyOrigin.y + heightMeters * .5, xyOrigin.x + widthMeters * .5, xyOrigin.y - heightMeters * .5);
        this._boxes.push(bb);
        var m = new Matrix2D;
        rotationDegrees && m.rotate(Math.PI * rotationDegrees / 180, xyOrigin.x, xyOrigin.y);
        scalePct && m.scale(scalePct, scalePct);
        var ctr = m.transformXY(xyOrigin.x, xyOrigin.y);
        var dx = xyDest.x - ctr.x;
        var dy = xyDest.y - ctr.y;
        m.translate(dx, dy);
        this._transforms.push(m);
        this._projections.push(destProj)
    };
    MixedProjection.prototype.projectLatLng = function(lat, lng, xy) {
        xy = this._proj.projectLatLng(lat, lng, xy);
        return this.transformXY(xy.x, xy.y, xy)
    };
    MixedProjection.prototype.transformXY = function(x, y, xy) {
        xy = xy || new Point;
        var boxes = this._boxes;
        var len = boxes.length;
        for (var i = 0; i < len; i++) {
            var box = boxes[i];
            if (x >= box.left && x <= box.right && y <= box.top && y >= box.bottom) {
                var t = this._transforms[i];
                var proj = this._projections[i];
                if (proj) {
                    var ll = this._proj.unprojectXY(x, y);
                    xy = proj.projectLatLng(ll.lat, ll.lng, xy);
                    x = xy.x;
                    y = xy.y
                }
                xy = t.transformXY(x, y, xy);
                return xy
            }
        }
        xy.x = x;
        xy.y = y;
        return xy
    };

    function AlbersUSASpecial() {
        var mproj = new MixedProjection(new AlbersUSA);
        mproj.addFrame(new LambertUSA, new GeoPoint(63, -152), new GeoPoint(27, -115), 6e6, 3e6, .31, 29.2);
        mproj.addFrame(new LambertUSA, new GeoPoint(20.9, -157), new GeoPoint(28.2, -106.6), 2e6, 4e6, .9, 40);
        mproj.name = "AlbersUSASpecial";
        return mproj
    }

    function ScriptLoader(url, charset, opts) {
        if (opts && !opts.no_bust) {
            var minutes = opts && opts.cache_timeout || 1;
            url = Browser.cacheBustUrl(url, minutes)
        }
        var script = document.createElement("script");
        script.type = "text/javascript";
        charset = charset || "utf-8";
        var supportedCharsets = "utf-8, utf-16be, utf-16le, utf16";
        if (!Utils.contains(supportedCharsets.split(", "), charset)) {
            trace("[ScriptLoader] Warning: unknown charset:", charset, "expecting:", supportedCharsets)
        }
        script.charset = charset;
        var self = this;
        var ieMode = !!script.readyState;
        if (ieMode) {
            var targetReadyState = "loaded|complete";
            script.onreadystatechange = function() {
                if (targetReadyState.indexOf(script.readyState) != -1) {
                    self.startWaiting();
                    script.onreadystatechange = null
                }
            }
        } else {
            script.onload = function() {
                self.startWaiting()
            }
        }
        Browser.appendToHead(script);
        var initialReadyState = script.readyState;
        script.src = url;
        if (ieMode && script.readyState == initialReadyState) {
            targetReadyState = "loaded"
        }
        this.unload = function() {
            Browser.removeElement(script)
        }
    }
    Opts.inherit(ScriptLoader, Waiter);
    var MapOpts = {
        ALBERS_US_WIDTH_KM: 4650,
        ALBERS_US_HEIGHT_KM: 2940,
        ALBERS_US_CENTER: new GeoPoint(38.5, -96.6),
        MERCATOR_US_WIDTH_KM: 6500
    };

    function HitManager(map) {
        this.map = map;
        this.mouse = map.mouse;
        this.mouse.addEventListener("mousemove", this.handleMove, this, -1);
        this.mouse.addEventListener("click", this.handleClick, this, -1);
        this._layers = [];
        this._activeLyr = null
    }
    Opts.inherit(HitManager, EventDispatcher);
    HitManager.prototype.handleClick = function(evt) {
        this.handleMove(evt);
        var hitLyr = this._activeLyr;
        if (hitLyr) {
            hitLyr.handleClick(evt)
        }
    };
    HitManager.prototype.getActiveLayer = function() {
        return this._activeLyr
    };
    HitManager.prototype.handleMove = function(evt) {
        var layers = this._layers;
        var newHitId = -1;
        for (var i = 0, len = layers.length; i < len; i++) {
            var lyr = layers[i];
            if (!lyr.isInteractive()) {
                continue
            }
            var oldHitId = lyr.getHitId();
            this.dispatchEvent("mousemove", evt.data, lyr);
            newHitId = lyr.getHitId();
            if (newHitId != -1) {
                break
            }
        }
        if (newHitId == -1) {
            this._activeLyr = null
        }
    };
    HitManager.prototype.manageLayer = function(lyr, priority) {
        var layers = this._layers;
        if (layers && Utils.contains(layers, lyr)) {
            trace("[HitManager.addLayer()] Layer is already being monitored.", lyr);
            return
        }
        lyr["_hitPriority"] = priority || layers.length;
        layers.push(lyr);
        Utils.sortOn(layers, "_hitPriority", false);
        this.addEventListener("mousemove", lyr.handleMouseMove, lyr);
        this.mouse.addEventListener("mouseout", lyr.handleMouseMove, lyr);
        lyr.addEventListener("rollover", this.handleRollOver, this, 9999)
    };
    HitManager.prototype.handleRollOver = function(evt) {
        var hitLyr = evt.target;
        var activeLyr = this._activeLyr;
        if (activeLyr && activeLyr != hitLyr) {
            var oldHitId = activeLyr.getHitId();
            if (oldHitId != -1) {
                activeLyr.triggerRollOut({
                    id: oldHitId
                })
            }
        }
        this._activeLyr = hitLyr
    };
    var Proximity = new function() {
        this.getPointPolygonDistance = function(x, y, shp) {
            var minDist = this.getPointPolylineDistance(x, y, shp);
            var inside = this.testPointInPolygon(x, y, shp);
            return minDist * (inside ? 0 : 1)
        };
        this.testPointInPolygon = function(x, y, shp) {
            if (isNaN(x) || isNaN(y)) {
                return false
            }
            var parts = shp.parts;
            var intersections = 0;
            while (shp.nextPart()) {
                var haveHit = testPointInRing(x, y, shp);
                if (haveHit) {
                    intersections++
                }
            }
            return intersections % 2 == 1
        };
        this.getPointPolylineDistance = function(x, y, shp) {
            if (isNaN(x) || isNaN(y)) {
                return Infinity
            }
            var minDistSq = Infinity;
            while (shp.nextPart()) {
                var distSq = findPointToVectorDistanceSq(x, y, shp);
                if (distSq < minDistSq) {
                    minDistSq = distSq
                }
            }
            var dist = Math.sqrt(minDistSq);
            return dist
        };

        function getYIntercept(x, x1, y1, x2, y2) {
            var yInt = y1 + (x - x1) * (y2 - y1) / (x2 - x1);
            return yInt
        }

        function testPointInRing(x, y, set) {
            set.nextPoint();
            var xPrev = set.x;
            var yPrev = set.y;
            var intersections = 0;
            while (set.nextPoint()) {
                var xNext = set.x;
                var yNext = set.y;
                if (x < xPrev && x < xNext || x > xPrev && x > xNext || y > yPrev && y > yNext) {} else if (y < yPrev && y < yNext || xPrev == xNext) {
                    intersections++
                } else {
                    var yInt = getYIntercept(x, xPrev, yPrev, xNext, yNext);
                    if (yInt > y) {
                        intersections++
                    }
                }
                xPrev = xNext;
                yPrev = yNext
            }
            return intersections % 2 == 1
        }

        function findPointToVectorDistanceSq(x, y, shp) {
            shp.nextPoint();
            var xPrev = shp.x;
            var yPrev = shp.y;
            var minDist2 = Infinity;
            var dist2;
            var longDist2, shortDist2;
            var dist2Prev = (x - xPrev) * (x - xPrev) + (y - yPrev) * (y - yPrev);
            while (shp.nextPoint()) {
                var xNext = shp.x;
                var yNext = shp.y;
                var dist2Next = (x - xNext) * (x - xNext) + (y - yNext) * (y - yNext);
                var segLen2 = (xPrev - xNext) * (xPrev - xNext) + (yPrev - yNext) * (yPrev - yNext);
                var tmp = (xNext - xPrev) * (yPrev - y) - (xPrev - x) * (yNext - yPrev);
                var lineDist2 = tmp * tmp / segLen2;
                if (dist2Prev > dist2Next) {
                    longDist2 = dist2Prev;
                    shortDist2 = dist2Next
                } else {
                    longDist2 = dist2Next;
                    shortDist2 = dist2Prev
                }
                dist2 = longDist2 - lineDist2 < segLen2 ? lineDist2 : shortDist2;
                if (dist2 < minDist2) {
                    minDist2 = dist2
                }
                xPrev = xNext;
                yPrev = yNext;
                dist2Prev = dist2Next
            }
            return minDist2
        }
    };

    function ShapeRenderer() {
        this._style = new HybridShapeStyle;
        this._ext = new TileExtent
    }
    ShapeRenderer.prototype.queueTile = function(shapes, canvas, bb, styleObj) {
        if (!this._queue) {
            this._queue = []
        }
        var queue = this._queue;
        var self = this;
        var func = function() {
            self.drawTile(shapes, canvas, bb, styleObj)
        };
        queue.push(func);
        queue.length == 1 && setTimeout(function() {
            self.procQueue()
        }, 80)
    };
    ShapeRenderer.prototype.procQueue = function() {
        var queue = this._queue;
        if (queue.length > 0) {
            var func = queue.shift();
            func();
            this.procQueue()
        }
    };
    ShapeRenderer.prototype.drawTile = function(shapes, canvas, bb, styleObj) {
        var len = shapes.length;
        if (len == 0) {
            return
        }
        var style = this._style;
        style.updateStyle(styleObj);
        var useSorting = true;
        for (var i = 0; i < len; i++) {
            var shp = shapes[i];
            style.setId(shp.id);
            if (i == 0 && !style.sortKey) {
                useSorting = false;
                break
            }
            shp.sortKey = style.sortKey
        }
        useSorting && Utils.sortOnKeyFunction(shapes, ShapeVector.prototype.getSortKey);
        var ext = new TileExtent(canvas.width, canvas.height);
        ext.updateBounds(bb);
        var ctx = canvas.getContext("2d");
        if (style.compositing) {
            ctx.globalCompositeOperation = style.compositing
        }
        var hasStroke = style.hasStroke();
        var hasFill = style.hasFill();
        var prevKey = null;
        for (var i = 0; i < len; i++) {
            var shp = shapes[i];
            if (!useSorting || shp.sortKey !== prevKey) {
                if (i > 0) {
                    hasFill && ctx.fill();
                    hasStroke && ctx.stroke()
                }
                prevKey = shp.sortKey;
                style.setId(shp.id);
                ctx.beginPath();
                style.beginDrawing(ctx)
            }
            shp.drawPath(ctx, ext)
        }
        hasFill && ctx.fill();
        hasStroke && ctx.stroke();
        if (style.compositing) {
            ctx.globalCompositeOperation = "source-over"
        }
    };

    function SymbolIndex(cols, rows) {
        this.ROWS = rows || 12;
        this.COLS = cols || 16
    }
    SymbolIndex.prototype.getCellIdFromRowCol = function(r, c) {
        var idx = r * this.COLS + c;
        return idx
    };
    SymbolIndex.prototype.getColFromCellId = function(id) {
        return id % this.COLS
    };
    SymbolIndex.prototype.getRowFromCellId = function(id) {
        return id / this.COLS | 0
    };
    SymbolIndex.prototype.update = function(mpp) {
        this.initCellBounds();
        var bins = this._bins;
        for (var i = 0, len = bins.length; i < len; i++) {
            var maxSize = 0;
            var bin = bins[i];
            for (var j = bin.length - 1; j >= 0; j--) {
                var sym = bin[j];
                if (sym.size > maxSize) {
                    maxSize = sym.size
                }
            }
            var r = (maxSize + 2) * .5 * mpp;
            var bb = this._boxes[i];
            bb.setBounds(bb.left - r, bb.top + r, bb.right + r, bb.bottom - r)
        }
    };
    SymbolIndex.prototype.getSymbolsInBoundingBox = function getSymbolsInBoundingBox(bb, hiddenList) {
        var boxes = this._boxes;
        var bins = this._bins;
        var singles = [];
        var groups = [];
        var haveHidden = !!hiddenList;
        for (var i = 0, len = boxes.length; i < len; i++) {
            var box = boxes[i];
            if (bb.left < box.right && bb.right > box.left && bb.top > box.bottom && bb.bottom < box.top) {
                var bin = bins[i];
                if (!haveHidden && bb.contains(box)) {
                    groups = groups.concat(bin)
                } else {
                    for (var j = 0, syms = bin.length; j < syms; j++) {
                        var sym = bin[j];
                        if ((!haveHidden || hiddenList[sym.id] == false) && sym.right >= bb.left && sym.left <= bb.right && sym.top >= bb.bottom && sym.bottom <= bb.top) {
                            singles.push(sym)
                        }
                    }
                }
            }
        }
        var arr = singles.concat(groups);
        return arr
    };
    SymbolIndex.prototype.initCellBounds = function() {
        var bb = this._bounds;
        var cellWidth = bb.width() / this.COLS;
        var cellHeight = bb.height() / this.ROWS;
        var bx = bb.left;
        var by = bb.bottom;
        var boxes = this._boxes;
        for (var i = 0, len = this.ROWS * this.COLS; i < len; i++) {
            var c = this.getColFromCellId(i);
            var r = this.getRowFromCellId(i);
            var left = bx + cellWidth * c;
            var bottom = by + cellHeight * r;
            boxes[i].setBounds(left, bottom + cellHeight, left + cellWidth, bottom)
        }
    };
    SymbolIndex.prototype.getSymbolCol = function(sym) {
        return (sym.x - this._bx) / this._cellWidth | 0
    };
    SymbolIndex.prototype.getSymbolRow = function(sym) {
        return (sym.y - this._by) / this._cellHeight | 0
    };
    SymbolIndex.prototype.init = function(symbols, bb) {
        bb = bb.cloneBounds();
        bb.scale(1.0001);
        var cellWidth = bb.width() / this.COLS;
        var cellHeight = bb.height() / this.ROWS;
        var bx = bb.left;
        var by = bb.bottom;
        this._bounds = bb;
        this._cellWidth = cellWidth;
        this._cellHeight = cellHeight;
        this._bx = bx;
        this._by = by;
        var boxes = [];
        var bins = [];
        var CELLS = this.ROWS * this.COLS;
        for (var i = 0; i < CELLS; i++) {
            boxes.push(new BoundingBox);
            bins.push([])
        }
        for (var j = 0, len = symbols.length; j < len; j++) {
            var sym = symbols[j];
            if (!sym) {
                trace("[SymbolIndex.init()] Null symbol; id:", j);
                continue
            }
            var c = this.getSymbolCol(sym);
            var r = this.getSymbolRow(sym);
            var idx = this.getCellIdFromRowCol(r, c);
            if (idx < 0 || idx >= CELLS || isNaN(idx)) {
                trace("[SymbolIndex.init()] index id out-of-range; id:", idx, "CELLS:", CELLS, "c:", c, "r:", r, "sym.x:", sym.x, "sym.y:", sym.y, "symid:", sym.id);
                continue
            }
            bins[idx].push(sym)
        }
        this._boxes = boxes;
        this._bins = bins
    };

    function ShapeIndex(r, c) {
        this.__super__(r, c)
    }
    Opts.inherit(ShapeIndex, SymbolIndex);
    ShapeIndex.prototype.getSymbolCol = function(sym) {
        var x = (sym.left + sym.right) * .5;
        return (x - this._bx) / this._cellWidth | 0
    };
    ShapeIndex.prototype.getSymbolRow = function(sym) {
        var y = (sym.top + sym.bottom) * .5;
        return (y - this._by) / this._cellHeight | 0
    };
    ShapeIndex.prototype.init = function(symbols, bb) {
        SymbolIndex.prototype.init.call(this, symbols, bb);
        var bins = this._bins;
        for (var i = 0, len = bins.length; i < len; i++) {
            var cellBounds = new BoundingBox;
            var bin = bins[i];
            for (var j = bin.length - 1; j >= 0; j--) {
                var sym = bin[j];
                cellBounds.mergeBounds(sym)
            }
            this._boxes[i] = cellBounds
        }
    };

    function useHTML5Circles() {
        CircleData.prototype.getBounds = function() {
            return this._bounds || new BoundingBox
        };
        CircleData.prototype.importFromDataTable = function(dt, latField, lonField, proj) {
            var transform = proj.getProjectionTransform();
            return this.importXYFields(dt, lonField, latField, transform)
        };
        CircleData.prototype.importXYFields = function(dt, xf, yf, proj) {
            var f = function(id, x, y) {
                this.id = id;
                this.x = x;
                this.y = y
            };
            f.prototype = {
                size: 0,
                setDefaultSize: function(s) {
                    f.prototype.size = s
                }
            };
            Opts.extendPrototype(f, CircleSymbol);
            this._data = dt;
            var bounds = new BoundingBox;
            var bubbles = [];
            var handler = function(evt) {
                var xx = dt.getFieldData(xf);
                var yy = dt.getFieldData(yf);
                var len = dt.size();
                var minx = Infinity,
                    miny = Infinity,
                    maxx = -Infinity,
                    maxy = -Infinity;
                var p = new Point;
                for (var i = 0; i < len; i++) {
                    x = xx[i];
                    y = yy[i];
                    if (proj) {
                        proj.transformXY(x, y, p);
                        x = p.x;
                        y = p.y
                    }
                    if (x < minx) minx = x;
                    else if (x > maxx) maxx = x;
                    if (y < miny) miny = y;
                    else if (y > maxy) maxy = y;
                    var sym = new f(i, x, y);
                    bubbles.push(sym)
                }
                bounds.setBounds(minx, maxy, maxx, miny);
                this._bounds = bounds;
                this._index = new SymbolIndex;
                this._index.init(bubbles, bounds);
                this.startWaiting()
            };
            this._bubbles = bubbles;
            dt.addEventListener("ready", handler, this);
            return this
        };
        CircleData.prototype.testHitAtXY = function(x, y, mpp, hiddenList) {
            var buf = 15 * mpp;
            var minRadPix = 3;
            var minOuterDist = buf,
                minInnerDist, minSize = Infinity,
                hitId = -1,
                directHit = false;
            var bb = (new BoundingBox).setBounds(x - buf, y + buf, x + buf, y - buf);
            var cands = this.getCirclesInBoundingBox(bb, hiddenList);
            for (var i = cands.length - 1; i >= 0; i--) {
                var sym = cands[i];
                var distSqr = (sym.x - x) * (sym.x - x) + (sym.y - y) * (sym.y - y);
                var rSymPix = sym.size * .5;
                var rHitPix = minRadPix > rSymPix ? minRadPix : rSymPix;
                var rHitMeters = rHitPix * mpp;
                var rSymSqr = rHitMeters * rHitMeters;
                var innerDist = Math.sqrt(distSqr);
                var outerDist = innerDist - rHitMeters;
                if (distSqr <= rSymSqr) {
                    if (!directHit || rSymPix < minSize || rSymPix == minSize && innerDist < minInnerDist) {
                        directHit = true;
                        hitId = sym.id;
                        minSize = rSymPix;
                        minInnerDist = innerDist
                    }
                } else if (!directHit && outerDist < minOuterDist) {
                    minOuterDist = outerDist;
                    hitId = sym.id
                }
            }
            return hitId
        };
        CircleData.prototype.updateCircleSizes = function updateCircleSizes(style, mpp, mpp0) {
            var relScale = mpp0 / mpp;
            var scaling = style["scaling"] || 0;
            var symbolScale = 1 + scaling * (relScale - 1);
            var strokePix = style["strokeWeight"] || 0;
            var defSize = style["bubbleSize"] * symbolScale || 0;
            var sizes = style["bubbleSizes"];
            var haveSizes = !!sizes;
            var bubbles = this._bubbles;
            if (!bubbles || !haveSizes && defSize <= .5) {
                return
            }
            var pixelScale = A.canvasPixelRatio || 1;
            var diamPix = defSize;
            for (var i = 0, len = bubbles.length; i < len; i++) {
                if (haveSizes) {
                    diamPix = sizes[i] * symbolScale
                }
                var diamMeters = (diamPix + strokePix) * mpp;
                var sym = bubbles[i];
                sym.setSize(diamPix * pixelScale, diamMeters)
            }
            this._index.update(mpp)
        };
        CircleData.prototype.handleReadyState = function() {};
        CircleData.prototype.getCirclesInBoundingBox = function getCirclesInBoundingBox(bounds, hiddenList) {
            if (!this.isReady()) {
                return []
            }
            var arr = this._index.getSymbolsInBoundingBox(bounds, hiddenList);
            Utils.sortOnKeyFunction(arr, CircleSymbol.prototype.getSortKey);
            return arr
        };
        CircleData.prototype.getCircleById = function(id) {
            var sym = this._bubbles[id];
            return sym
        };

        function CircleSymbol(id, x, y) {
            this.id = id;
            this.x = x;
            this.y = y;
            this.sortKey = ""
        }
        Opts.extendPrototype(CircleSymbol, BoundingBox);
        CircleSymbol.prototype.setSize = function setSize(pix, meters) {
            var rad = meters * .5;
            var x = this.x;
            var y = this.y;
            this.left = x - rad;
            this.top = y + rad;
            this.right = x + rad;
            this.bottom = y - rad;
            this.size = pix;
            var maxVal = 3328;
            var keyCode = maxVal - pix * 5 | 0;
            if (keyCode < 1) {
                keyCode = 1
            }
            var salt = this.id % maxVal;
            this.sortKey = String.fromCharCode(keyCode) + String.fromCharCode(salt)
        };
        CircleSymbol.prototype.getSortKey = function getSortKey() {
            return this.sortKey
        };
        CircleSymbol.prototype.draw = function(ctx, ext) {
            var x = this.x * ext.mx + ext.bx;
            var y = this.y * ext.my + ext.by;
            var size = this.size || 0;
            if (size > 0) {
                ctx.arc(x, y, size * .5, 0, Math.PI * 2, true)
            }
        }
    }

    function CircleRenderer() {
        this._style = new HybridShapeStyle;
        this._ext = new TileExtent;
        this.init()
    }
    CircleRenderer.prototype.init = function() {};
    CircleRenderer.prototype.drawTile = function drawTile(bubbles, canvas, bb, styleObj) {
        var style = this._style;
        style.updateStyle(styleObj);
        var ext = new TileExtent(canvas.width, canvas.height);
        ext.updateBounds(bb);
        var ctx = canvas.getContext("2d");
        var len = bubbles.length;
        var hasStroke = style.hasStroke();
        var hasFill = style.hasFill();
        for (var i = 0; i < len; i++) {
            var sym = bubbles[i];
            style.setId(sym.id);
            this.drawCircle(ctx, ext, sym, style, hasStroke, hasFill)
        }
    };
    CircleRenderer.prototype.drawVectorCircle = function(ctx, ext, sym, style, hasStroke, hasFill) {
        ctx.beginPath();
        style.beginDrawing(ctx);
        sym.draw(ctx, ext);
        if (hasFill) {
            ctx.fill()
        }
        if (hasStroke) {
            ctx.stroke()
        }
    };
    CircleRenderer.prototype.drawCircle = CircleRenderer.prototype.drawVectorCircle;

    function useHTML5Labels() {
        function HybridLabelStyle() {
            this.placementCSS = {
                e: "margin-left:10px; bottom:0.5em;",
                c: "left:-50%; bottom:0.5em;",
                w: "left:-100%; margin-right:8px;bottom:0.5em;",
                n: "left:-50%; bottom:1.6em;",
                s: "left:-50%; margin-top:0.3em;",
                nw: "bottom:1.5em; left:-100%;",
                sw: "margin-top:0.3em; left:-100%;",
                ne: "bottom:1.5em;",
                se: "margin-top:0.4em;"
            }
        }
        HybridLabelStyle.dotCSS = {};
        HybridLabelStyle.getDotCSS = function(size) {
            var rad = size * .5;
            var offs = -rad;
            var str = this.dotCSS[size] || (this.dotCSS[size] = ["position:absolute; left:", offs, "px; top:", offs, "px; background: #000; width: ", size, "px; height: ", size, "px; -moz-border-radius: ", rad, "px; -webkit-border-radius: ", rad, "px; border-radius: ", rad, "px;"].join(""));
            return str
        };
        HybridLabelStyle.prototype.toString = function() {
            return "[HybridLabelStyle]"
        };
        HybridLabelStyle.prototype.setId = function(id) {
            var s = this._style || {};
            var str = "position:relative; font-family:Arial, Helvetica;";
            if (s.size) {
                var size = String(this.haveSizes && s["size"][id] || s["size"]) + "px";
                str += "font-size:" + size + ";"
            }
            if (s.fillColor !== undefined) {
                var color = 0;
                if (this.haveColors) {
                    color = s.fillColor[id]
                } else {
                    color = s.fillColor | 0
                }
                str += "color:" + getCSSColor(color) + ";"
            }
            if (s.useHalo) {
                str += "text-shadow: 0 0 2px #FFF; "
            }
            if (s.bold) {
                str += "font-weight:bold;"
            }
            var placement = this.havePlacements && s["placement"][id] || s["placement"];
            str += this.placementCSS[placement] || this.placementCSS["n"];
            this.dotSize = placement == "c" ? 0 : this.haveDotSizes && s["dotSize"][id] || s["dotSize"] || 0;
            this.css = str;
            this.text = (this.haveTexts ? s["text"][id] : s["text"]) || ""
        };
        HybridLabelStyle.prototype.updateStyle = function(obj) {
            this.havePlacements = Utils.isArray(obj["placement"]);
            this.haveSizes = Utils.isArray(obj["size"]);
            this.haveDotSizes = Utils.isArray(obj["dotSize"]);
            this.haveTexts = Utils.isArray(obj["text"]);
            this.haveColors = Utils.isArray(obj["fillColor"]);
            this._style = obj
        };
        LabelRenderer = function LabelRenderer(el) {
            this.container = el;
            this._labelIndex = {};
            this._style = new HybridLabelStyle;
            this._count = 0
        };
        LabelRenderer.prototype.updateSymbolStyles = function(labels, styleObj, relZoom) {
            if (relZoom == this._currZoom) {}
            this._currZoom = relZoom;
            var style = this._style;
            style.updateStyle(styleObj);
            for (var i = 0, len = labels.length; i < len; i++) {
                var sym = labels[i];
                style.setId(sym.id);
                var css = style.css;
                if (style.text != sym.text) {
                    sym.setText(style.text)
                }
                sym.textDiv.style.cssText = css;
                sym.setDotSize(style.dotSize)
            }
        };
        LabelRenderer.prototype.showLabels = function(labels, ext, styleObj) {
            var style = this._style;
            style.updateStyle(styleObj);
            var newIds = {};
            var index = this._labelIndex;
            var parent = this.container;
            for (var i = 0, len = labels.length; i < len; i++) {
                var sym = labels[i];
                var symId = sym.id;
                var p = ext.transformXY(sym.x, sym.y);
                if (!index[symId]) {
                    sym.attach(parent);
                    index[symId] = sym
                }
                newIds[symId] = true;
                sym.place(p.x, p.y)
            }
            var val = this._count++ % 2;
            for (var id in index) {
                if (!newIds[id]) {
                    index[id].remove();
                    delete index[id]
                }
            }
            return parent.offsetTop
        };

        function LabelSymbol(id, x, y) {
            this.id = id;
            this.x = x;
            this.y = y;
            this.text = "";
            this.dotSize = 0;
            var div = Browser.createElement("div", "position:absolute");
            var textDiv = Browser.createElement("div", "position:relative;");
            div.appendChild(textDiv);
            this.labelDiv = div;
            this.textDiv = textDiv;
            div.className = "nytg-map-label"
        }
        Opts.inherit(LabelSymbol, BoundingBox);
        LabelSymbol.prototype.checkElement = function() {
            if (!this.el) {}
            return this.el
        };
        LabelSymbol.prototype.place = function(x, y) {
            var el = this.labelDiv;
            var x = (x + 1 | 0) + "px";
            var y = (y | 0) + "px";
            if (true) {
                el.style.left = x;
                el.style.top = y
            } else {
                Browser.addCSS(el, css);
                trace(css)
            }
        };
        LabelSymbol.prototype.isAttached = function() {
            return !!this.parent
        };
        LabelSymbol.prototype.setDotSize = function(size) {
            if (size == this.dotSize) {
                return
            }
            if (size == 0) {
                if (this.dotDiv) {
                    this.labelDiv.removeChild(this.dotDiv);
                    this.dotDiv = null
                }
            } else {
                if (!this.dotDiv) {
                    this.dotDiv = Browser.createElement("div", "position:absolute;");
                    this.labelDiv.appendChild(this.dotDiv)
                }
                var rad = size * .5;
                this.dotDiv.style.cssText = HybridLabelStyle.getDotCSS(size)
            }
            this.dotSize = size
        };
        LabelSymbol.prototype.setText = function(txt) {
            if (txt == this.text) {
                return
            }
            this.text = txt;
            this.textDiv.innerHTML = txt
        };
        LabelSymbol.prototype.attach = function(par) {
            if (this.parent != par) {
                var div = this.labelDiv;
                par.appendChild(div);
                this.parent = par;
                if (true) {}
            }
        };
        LabelSymbol.prototype.remove = function() {
            if (this.parent) {
                this.parent.removeChild(this.labelDiv);
                this.parent = null
            }
        };
        LabelData.prototype.importFromDataTable = function(dt, latField, lonField, proj) {
            this._data = dt;
            var bounds = new BoundingBox;
            var symbols = [];
            var handler = function(evt) {
                var lats = dt.getFieldData(latField);
                var lons = dt.getFieldData(lonField);
                var len = dt.size();
                var p = new Point;
                for (var i = 0; i < len; i++) {
                    proj.projectLatLng(lats[i], lons[i], p);
                    var x = p.x;
                    var y = p.y;
                    var sym = new LabelSymbol(i, x, y);
                    symbols.push(sym)
                }
                this.startWaiting()
            };
            this._symbols = symbols;
            dt.addEventListener("ready", handler, this)
        };
        LabelData.prototype.getSymbols = function() {
            return this._symbols || []
        };
        LabelData.prototype.getSymbolsInBoundingBox = function(bb, hiddenList) {
            if (!this.isReady()) {
                return []
            }
            var haveHidden = !!hiddenList;
            var symbols = this._symbols;
            var arr = [];
            for (var i = 0, len = symbols.length; i < len; i++) {
                var sym = symbols[i];
                if ((!haveHidden || hiddenList[i] == false) && bb.intersects(sym)) {
                    arr.push(sym)
                }
            }
            return arr
        };
        LabelData.prototype.updateSymbolSizes = function updateSymbolSizes(styleObj, mpp, relZoom) {
            if (this._currZoom === relZoom) {
                return
            }
            this._currZoom = relZoom;
            var padY = 10 * mpp;
            var padX = 40 * mpp;
            var symbols = this._symbols;
            for (var i = 0, len = symbols.length; i < len; i++) {
                var sym = symbols[i];
                var x = sym.x;
                var y = sym.y;
                sym.setBounds(x - padX, y + padY, x + padX, y - padY)
            }
        };
        LabelLayer.prototype.init = function() {
            var opts = this._opts;
            if (!opts.symbols) {
                trace("[LabelLayer.init()] Missing 'symbols' property in layer options (expecting a LabelData object):", opts);
                return
            }
            this._symbols = opts.symbols;
            this.waitFor(this._symbols);
            var div = Browser.createElement("div", "position:absolute; overflow:visible; white-space:nowrap; cursor:default");
            this.container = div
        };
        LabelLayer.prototype.getElement = function() {
            return this.container
        }
    }

    function useCanvasMapExtensions() {
        useHTML5Circles();
        useHTML5Shapes();
        useHTML5Labels();
        Map.prototype.initCanvasMap = function() {
            var opts = this._opts;
            if (opts.backgroundColor) {
                this.div.style.backgroundColor = getCSSColor(opts.backgroundColor)
            }
            this._hitManager = new HitManager(this);
            this.mouse.setMapContainer(this.getLayerContainer());
            if (this.mouse.touch) {} else {
                this.mouse.addEventListener("click", this.handleClick, this)
            }
        };
        Map.prototype.handleClick = function(evt) {
            var hitLyr = this._hitManager.getActiveLayer();
            var obj = {};
            Opts.copyAllParams(obj, evt.data);
            obj.hitLayer = hitLyr;
            obj.hitId = hitLyr ? hitLyr.getHitId() : -1;
            this.dispatchEvent("click", obj)
        };
        SymbolLayer.prototype.startInteraction = function() {
            this._hitId = -1;
            var map = this._map;
            var priority = this._opts.hitPriority;
            map._hitManager.manageLayer(this, priority)
        };
        SymbolLayer.prototype.setHoverById = function(id) {
            var map = this._map;
            var sym = this.getSymbolById(id);
            var x = sym.centerX();
            var y = sym.centerY();
            var xyPix = map.convMetersToViewPixels(x, y);
            var mapX = xyPix.x;
            var mapY = xyPix.y;
            var obj = {
                id: id,
                pageX: mapX + map.getLeftInPixels(),
                pageY: mapY + map.getTopInPixels(),
                mapX: mapX,
                mapY: mapY
            };
            trace("[SymbolLayer.setHoverById()] obj:", obj);
            this._hitId = id;
            this.triggerRollOver(obj)
        };
        SymbolLayer.prototype.clearHover = function() {
            this.triggerRollOut()
        };
        SymbolLayer.prototype.showHoverSymbolById = function(id) {
            if (!this.isReady()) {
                trace("[CanvasTileLayer.initHover()] this lyr not READY");
                return
            }
            var map = this._map;
            var hoverLyr = map._hoverLyr;
            if (!hoverLyr) {
                hoverLyr = map._hoverLyr = new HoverLayer;
                map.addLayer(hoverLyr)
            }
            hoverLyr.attachLayer(this);
            hoverLyr.showSymbolById(id)
        };
        SymbolLayer.prototype.handleClick = function(evt) {
            var hitId = this.getHitId();
            var obj = {
                id: hitId,
                rec: this.getRecordById(hitId).clone()
            };
            Opts.copyAllParams(obj, evt.data);
            this.dispatchEvent("click", obj)
        };
        SymbolLayer.prototype.handleMouseMove = function(evt) {
            if (!this.isReady()) {
                return
            }
            var mouse = this._map.mouse;
            var overMap = mouse.overMap();
            var mouseDown = mouse.mouseDown();
            var oldId = this._hitId;
            if (!overMap || mouseDown) {
                if (oldId != -1 && !overMap) {
                    this.triggerRollOut()
                }
                return
            }
            var map = this._map;
            var mapX = evt.mapX;
            var mapY = evt.mapY;
            var xy = map.convViewPixelsToMeters(mapX, mapY);
            var newId = this.testHitAtXY(xy.x, xy.y);
            if (newId == oldId) {
                return
            }
            if (oldId != -1) {
                this.triggerRollOut({
                    id: oldId
                })
            }
            this._hitId = newId;
            if (newId != -1) {
                var obj = {
                    id: newId,
                    pageX: evt.pageX,
                    pageY: evt.pageY,
                    mapX: mapX,
                    mapY: mapY
                };
                this.triggerRollOver(obj)
            }
        };
        SymbolLayer.prototype.triggerRollOut = function(obj) {
            if (this._hitId != -1) {
                this.showHoverSymbolById(-1);
                this.dispatchEvent("rollout", obj);
                this._hitId = -1
            }
        };
        SymbolLayer.prototype.triggerRollOver = function(obj) {
            var newId = obj.id;
            var rec = this.getRecordById(newId);
            obj.rec = rec && rec.clone() || new NullRecord;
            this.dispatchEvent("rollover", obj);
            this.showHoverSymbolById(newId)
        };
        SymbolLayer.prototype.testHitAtXY = function(x, y) {};
        ShapeLayer.prototype.initCanvasShapeLayer = function() {
            var map = this._map;
            this.startInteraction();
            var shapes = new ShapeSource(this._symbols, this._shapeType);
            this.waitFor(shapes);
            this._shapes = shapes;
            this._renderer = new ShapeRenderer
        };
        ShapeLayer.prototype.init = ShapeLayer.prototype.initCanvasShapeLayer;
        ShapeLayer.prototype.selectShapesById = function(ids) {
            if (!this._shapes) {
                trace("[ShapeLayer.selectShapesById()] Call this after ShapeSource has been created.");
                return
            }
            this._shapes.mergeShapesById(ids)
        };
        ShapeLayer.prototype.testHitAtXY = function(x, y, hiRes) {
            var shapes = this._shapes;
            if (!shapes) {
                return
            }
            hiRes && shapes.setFullDetail();
            var mpp = this._map.getScale();
            var hoverId = -1;
            var outsideDistMeters = Infinity;
            var outsideId = -1;
            var smallDistMeters = Infinity;
            var smallId = -1;
            var smallBufPix = 1.4;
            var smallBufMeters = smallBufPix * mpp;
            var outsideBufPix = 5;
            var outsideBufMeters = outsideBufPix * mpp;
            var bb = new BoundingBox;
            var buf = outsideBufMeters;
            bb.setBounds(x - buf, y + buf, x + buf, y - buf);
            var cands = shapes.getShapesInBoundingBox(bb, this.getHiddenSymbolList());
            for (var i = 0; i < cands.length; i++) {
                var shp = cands[i];
                var minPix = Math.min(shp.width(), shp.height()) / mpp;
                var inShape = Proximity.testPointInPolygon(x, y, shp);
                var distMeters = Proximity.getPointPolylineDistance(x, y, shp);
                var distPix = distMeters / mpp;
                var isSmall = minPix < 1.4;
                if (isSmall && (inShape || distMeters < smallBufMeters)) {
                    if (distMeters < smallDistMeters) {
                        smallDistMeters = distMeters;
                        smallId = shp.id
                    }
                } else if (inShape) {
                    hoverId = shp.id
                } else if (distMeters < outsideBufMeters) {
                    if (distMeters < outsideDistMeters) {
                        outsideDistMeters = distMeters;
                        outsideId = shp.id
                    }
                }
            }
            var hitId = -1;
            if (smallId != -1) {
                hitId = smallId
            } else if (hoverId != -1) {
                hitId = hoverId
            } else if (outsideId != -1) {
                hitId = outsideId
            }
            return hitId
        };
        ShapeLayer.prototype.getSymbolById = function(id) {
            return this._shapes.getShapeById(id)
        };
        CircleLayer.prototype.initCanvasCircleLayer = function() {
            this.startInteraction();
            this._hitHelper = this._opts.hitHelper;
            this.waitFor(this._symbols);
            this._renderer = new CircleRenderer
        };
        CircleLayer.prototype.init = CircleLayer.prototype.initCanvasCircleLayer;
        CircleLayer.prototype.updateCircleSizes = function(style) {
            var map = this._map;
            var src = this._symbols;
            var mpp = map.getScale();
            var mpp0 = map._crs.baseScale;
            var sizesUpdated = false;
            var bubbleSizes = style["bubbleSizes"];
            if (bubbleSizes || this._prevCircleSizes) {
                if (bubbleSizes != this._prevCircleSizes) {
                    sizesUpdated = true
                }
            }
            this._prevCircleSizes = bubbleSizes;
            if (!sizesUpdated && mpp === this._lastUpdateScale || !src || !src.isReady()) {
                return
            }
            this._lastUpdateScale = mpp;
            src.updateCircleSizes(style, mpp, mpp0)
        };
        CircleLayer.prototype.getSymbolById = function(id) {
            return this._symbols.getCircleById(id)
        };
        CircleLayer.prototype.testHitAtXY = function(x, y) {
            var symbols = this._symbols;
            if (!symbols) {
                return
            }
            var mpp = this._map.getScale();
            var hiddenSymbols = this.getHiddenSymbolList();
            var hitId = symbols.testHitAtXY(x, y, mpp, hiddenSymbols);
            if (hitId == -1 && this._hitHelper) {
                var helperId = this._hitHelper.testHitAtXY(x, y);
                if (helperId != -1 && (!hiddenSymbols || hiddenSymbols[helperId] != true)) {
                    hitId = helperId
                }
            }
            return hitId
        };
        HoverLayer.prototype.init = function() {
            trace("[HoverLayer.init()] stub")
        };
        HoverLayer.prototype.handleReadyState = function() {};
        HoverLayer.prototype.attachLayer = function(lyr) {
            var prevLyr = this._baseLyr;
            if (prevLyr == lyr) {
                return
            }
            if (this._symbolId != -1) {
                this.clear()
            }
            this._baseLyr = lyr
        };
        HoverLayer.prototype.convertStyle = function(src) {
            var dest = {
                fillColor: src["hoverFillColor"],
                fillAlpha: src["hoverFillAlpha"],
                strokeWeight: src["hoverStrokeWeight"],
                strokeColor: src["hoverStrokeColor"],
                strokeAlpha: src["hoverStrokeAlpha"]
            };
            if (src["matchFillColor"]) {
                trace("[HoverLayer.convertStyle()] matching color");
                dest["fillColor"] = src["fillColor"];
                dest["hatchColor"] = src["hatchColor"]
            }
            return dest
        };
        HoverLayer.prototype.showSymbolById = function(id) {
            this._symbolId = id;
            id == -1 ? this.clear() : this.refresh()
        }
    }

    function MouseWheelHandler(mouse) {
        var self = this;
        var prevWheelTime = 0;
        var currDirection = 0;
        var scrolling = false;
        init();

        function init() {
            if (window.onmousewheel !== undefined) {
                Browser.addEventListener(window, "mousewheel", handlePageScroll, self)
            } else {
                Browser.addEventListener(window, "DOMMouseScroll", handlePageScroll, self)
            }
            FrameCounter.addEventListener("tick", handleTimer, self)
        }

        function handleTimer(evt) {
            var sustainTime = 80;
            var fadeTime = 60;
            var elapsed = evt.time - prevWheelTime;
            if (currDirection == 0 || elapsed > sustainTime + fadeTime || !mouse.overMap()) {
                currDirection = 0;
                scrolling = false;
                return
            }
            var multiplier = 1;
            var fadeElapsed = elapsed - sustainTime;
            if (fadeElapsed > 0) {
                multiplier = Tween.quadraticOut((fadeTime - fadeElapsed) / fadeTime)
            }
            var obj = mouse.getCurrentMouseData();
            obj.direction = currDirection;
            obj.multiplier = multiplier;
            if (!scrolling) {
                self.dispatchEvent("mousewheelstart", obj)
            }
            scrolling = true;
            self.dispatchEvent("mousewheel", obj)
        }

        function handlePageScroll(evt) {
            if (mouse.overMap()) {
                evt.preventDefault();
                var direction = 0;
                if (evt.wheelDelta) {
                    direction = evt.wheelDelta > 0 ? 1 : -1
                }
                if (evt.detail) {
                    direction = evt.detail > 0 ? -1 : 1
                }
                prevWheelTime = (new Date).getTime();
                currDirection = direction
            }
        }
    }
    Opts.inherit(MouseWheelHandler, EventDispatcher);

    function NavigationManager(map) {
        this.ZOOM_IN_FACTOR = 2;
        this.ZOOM_IN_TIME = 400;
        var mouse = map.mouse;
        this._map = map;
        var mapOpts = map._opts;
        var allowTween = this.ALLOW_TWEEN = !Browser.touchEnabled;
        var pinchZoom = mapOpts.pinchZoom || mapOpts.pinchZoom === undefined;
        var doubleClickZoom = mapOpts.doubleClickZoom || mapOpts.doubleClickZoom === undefined;
        var dragging = mapOpts.dragging || mapOpts.dragging === undefined;
        var scrollZoom = mapOpts.scrollZoom || mapOpts.scrollZoom === undefined;
        var smoothZoom = mapOpts.smoothZoom || mapOpts.smoothZoom === undefined;
        this.USE_ZOOM_TWEEN = allowTween && smoothZoom;
        this.LIMIT_PANNING = !!mapOpts.limitPanning;
        map.addEventListener("resize", this.handleMapResize, this, 999);
        this._currBounds = map.getInitialBounds();
        this._currZoom = map.getZoom();
        var self = this;
        this._boxTween = new BoundingBoxTween(function(bounds, done) {
            self.setBounds(bounds)
        });
        mouse.on("ready", function() {
            if (mouse.touch) {
                pinchZoom && mouse.touch.addEventListener("pinchstart", this.handleMoveStart, this);
                pinchZoom && mouse.touch.addEventListener("pinch", this.handleMove, this);
                dragging && mouse.touch.addEventListener("dragstart", this.handleMoveStart, this);
                dragging && mouse.touch.addEventListener("drag", this.handleMove, this);
                doubleClickZoom && mouse.touch.addEventListener("doubletap", this.handleDoubleTap, this)
            } else {
                dragging && mouse.addEventListener("dragstart", this.handleMoveStart, this);
                dragging && mouse.addEventListener("drag", this.handleMove, this);
                doubleClickZoom && mouse.addEventListener("dblclick", this.handleDoubleClick, this)
            }
            if (mapOpts.scrollWheelZoom) {
                var wheel = new MouseWheelHandler(mouse);
                wheel.addEventListener("mousewheel", this.handleMouseWheel, this)
            }
        }, this)
    }
    NavigationManager.prototype = {
        handleMapResize: function(evt) {
            var zoom = this._currZoom;
            var mpp = this._map.getCRS().convZoomToScale(zoom);
            var halfWidth = this._map.getWidthInPixels() * mpp * .5;
            var halfHeight = this._map.getHeightInPixels() * mpp * .5;
            var cx = this._currBounds.centerX();
            var cy = this._currBounds.centerY();
            this._currBounds.setBounds(cx - halfWidth, cy + halfHeight, cx + halfWidth, cy - halfHeight);
            this.dispatchEvent("navigate")
        },
        handleMoveStart: function(evt) {
            this.__startNavigation()
        },
        handleDoubleTap: function(evt) {
            evt.deltaScale = this.ZOOM_IN_FACTOR;
            if (this.USE_ZOOM_TWEEN) {
                var dest = this.getDestinationBounds(evt);
                this._boxTween.start(this._currBounds, dest, this.ZOOM_IN_TIME)
            } else {
                this.handleMove(evt)
            }
        },
        handleDoubleClick: function(evt) {
            evt.deltaScale = this.ZOOM_IN_FACTOR;
            var dest = this.getDestinationBounds(evt);
            this.navigateToBounds(dest, {
                tween: this.USE_ZOOM_TWEEN
            })
        },
        handleMouseWheel: function(evt) {
            var deltaScale = 1 + .055 * evt.multiplier;
            evt.deltaScale = evt.direction > 0 ? deltaScale : 1 / deltaScale;
            var dest = this.getDestinationBounds(evt);
            this.navigateToBounds(dest)
        },
        handleMove: function(evt) {
            if (this._blockedTouchId && this._blockedTouchId === evt.touchId) {
                return
            }
            var bbNew = this.getDestinationBounds(evt);
            var changed = this.navigateToBounds(bbNew);
            if (evt.touchEvent) {
                if (changed) {
                    evt.touchEvent.preventDefault()
                } else if (evt.zoomRatio != 1) {
                    this._blockedTouchId = evt.touchId;
                    trace(">>> blocking touch id:", evt.touchId)
                }
            }
        },
        zoomToFullExtent: function(opts) {
            var bb = this._map.getInitialBounds();
            this.zoomToBounds(bb, opts)
        },
        zoomToBounds: function(bb, opts) {
            opts = opts || {};
            var pixelMargins = null;
            if (opts.spacing) {
                var sp = opts.spacing;
                if (Utils.isArray(sp)) {
                    pixelMargins = new FourSides(sp[0], sp[1], sp[2], sp[3])
                } else {
                    pixelMargins = new FourSides(sp, sp, sp, sp)
                }
            }
            bb = this.getEnclosingBounds(bb, pixelMargins);
            this.navigateToBounds(bb, opts)
        },
        getEnclosingBounds: function(bb, margins) {
            var currBounds = this._map.getVisibleBounds();
            var heightPix = this._map.getHeightInPixels();
            var widthPix = this._map.getWidthInPixels();
            var effectiveHeight = heightPix;
            var effectiveWidth = widthPix;
            var newBounds = bb.cloneBounds();
            if (margins) {
                var marginWidth = margins.left + margins.right;
                var marginHeight = margins.top + margins.bottom;
                var mppNewX = bb.width() / (widthPix - marginWidth);
                var mppNewY = bb.height() / (heightPix - marginHeight);
                var mpp = mppNewY > mppNewX ? mppNewY : mppNewX;
                newBounds.setBounds(bb.left - mpp * margins.left, bb.top + mpp * margins.top, bb.right + mpp * margins.right, bb.bottom - mpp * margins.bottom);
                var whOld = widthPix / heightPix;
                var whNew = newBounds.width() / newBounds.height();
                if (whOld > whNew) {
                    newBounds.scale(whOld / whNew, 1)
                } else {
                    newBounds.scale(1, whNew / whOld)
                }
            }
            return newBounds
        },
        getDestinationBounds: function(evt) {
            var bbOld = this._currBounds;
            var widthPix = this._map.getWidthInPixels();
            var heightPix = this._map.getHeightInPixels();
            var bbNew = bbOld.cloneBounds();
            var mppOld = bbOld.width() / widthPix;
            var deltaScale = evt.deltaScale || 1;
            if (deltaScale != 1) {
                var maxZoom = this._map._opts.maxZoom;
                var minZoom = this._map._opts.minZoom;
                var crs = this._map.getCRS();
                var mppNew = mppOld / deltaScale;
                if (maxZoom) {
                    var mppMaxZoom = crs.convZoomToScale(maxZoom);
                    if (mppMaxZoom > mppNew) {
                        deltaScale *= mppNew / mppMaxZoom
                    }
                }
                if (minZoom) {
                    var mppMinZoom = crs.convZoomToScale(minZoom);
                    if (mppNew > mppMinZoom) {
                        deltaScale *= mppMinZoom / mppNew
                    }
                }
            }
            bbNew.scale(1 / deltaScale);
            var mppNew = bbNew.width() / widthPix;
            var shiftX = 0;
            var shiftY = 0;
            if (deltaScale != 1) {
                var xPix = evt.pageX - evt.centerX;
                var yPix = evt.pageY - evt.centerY;
                shiftX = -xPix * (mppNew - mppOld);
                shiftY = yPix * (mppNew - mppOld)
            }
            bbNew.translate(-mppNew * evt.deltaX + shiftX, mppNew * evt.deltaY + shiftY);
            return bbNew
        },
        navigateToBounds: function(bbDest, opts) {
            opts = opts || {};
            if (this.LIMIT_PANNING) {
                this.__adjustBounds(bbDest, this._map.getInitialBounds())
            }
            if (this._currBounds && bbDest.hasSameBounds(this._currBounds)) {
                return false
            }
            var panning = this._currBounds.width() == bbDest.width();
            var useTween = opts && !panning && typeof opts.tween != "undefined" ? !!opts.tween : this.USE_ZOOM_TWEEN;
            if (useTween) {
                var ms = opts && opts.time || this.ZOOM_IN_TIME;
                this._boxTween.setDelay(opts.delay || 0);
                this._boxTween.start(this._currBounds, bbDest, ms)
            } else {
                this.setBounds(bbDest)
            }
            return true
        },
        setBounds: function(bbNew) {
            var prevZoom = this._map.getZoom();
            var bbOld = this._currBounds;
            if (bbOld && bbNew.hasSameBounds(bbOld)) {
                return
            }
            this._currBounds = bbNew;
            this._currZoom = this._map.getZoom();
            this.dispatchEvent("navigate", {
                prevZoom: Math.round(prevZoom),
                zoom: Math.round(this._currZoom)
            })
        },
        handleMoveEnd: function(evt) {
            trace("[Nav.handleMoveEnd()] data:", evt.data)
        },
        getBounds: function() {
            return this._currBounds.cloneBounds()
        },
        __startNavigation: function() {
            this._startingBounds = this.getBounds()
        },
        __adjustBounds: function(bb, bb0) {
            var marg = this._map._opts.panMargins;
            var bbLim = bb0;
            if (marg && true) {
                if (Utils.isArray(marg)) {
                    var mpp = bb.width() / this._map.getWidthInPixels();
                    bbLim = bbLim.cloneBounds();
                    bbLim.padBounds(marg[0] * mpp, marg[1] * mpp, marg[2] * mpp, marg[3] * mpp)
                }
            }
            if (bb.width() > bb0.width()) {
                bb.setBounds(bb0.left, bb0.top, bb0.right, bb0.bottom);
                return
            }
            var shiftX = 0;
            var shiftY = 0;
            if (bb.left < bbLim.left) {
                shiftX = bbLim.left - bb.left
            } else if (bb.right > bbLim.right) {
                shiftX = bbLim.right - bb.right
            }
            if (bb.top > bbLim.top) {
                shiftY = bbLim.top - bb.top
            } else if (bb.bottom < bbLim.bottom) {
                shiftY = bbLim.bottom - bb.bottom
            }
            var mouse = this._map.mouse;
            if (mouse.touch) {}
            bb.translate(shiftX, shiftY)
        }
    };
    Opts.extendPrototype(NavigationManager, EventDispatcher);

    function SymbolLayerGroup() {
        this._layers = [];
        this.type = "shape"
    }
    Opts.inherit(SymbolLayerGroup, SymbolLayer);
    SymbolLayerGroup.prototype.addLayer = function(lyr) {
        var layers = this._layers;
        layers.push(lyr);
        this.isReady() && this.__initLayer(lyr)
    };
    SymbolLayerGroup.prototype.refresh = function() {
        if (!this.isReady()) {
            trace("[SymbolLayerGroup.refresh()] Called before READY");
            return
        }
        if (this.isHidden()) {
            return
        }
        this.clear();
        var layers = this._layers;
        for (var i = 0, len = layers.length; i < len; i++) {
            var lyr = layers[i];
            lyr.refresh()
        }
    };
    SymbolLayerGroup.prototype.__hide = function() {
        this._hidden = true
    };
    SymbolLayerGroup.prototype.__show = function() {
        this._hidden = false
    };
    SymbolLayerGroup.prototype.__initLayer = function(lyr) {
        lyr.clear = function() {};
        lyr.show = this.__show;
        lyr.hide = this.__hide;
        lyr._canvas = this._canvas
    };
    SymbolLayerGroup.prototype.init = function() {
        this.initNoTilesSymbolLayer()
    };
    SymbolLayerGroup.prototype.handleReadyState = function() {
        this.clear();
        for (var i = 0, len = this._layers.length; i < len; i++) {
            var lyr = this._layers[i];
            this.__initLayer(lyr)
        }
    };
    Map.useHTML5Extensions = function() {
        useCanvasMapExtensions();
        A.devicePixelRatio = window.devicePixelRatio == 2 ? 2 : 1;
        A.canvasPixelRatio = A.devicePixelRatio;
        if (Browser.iPad) {
            A.canvasPixelRatio = 1
        }
        Map.prototype.init = function() {
            this.initMap();
            this.initNoTilesMap();
            this.initCanvasMap()
        };
        Map.prototype.__updateMask = function() {
            var css = "height:" + this.getHeightInPixels() + "px;width:" + this.getWidthInPixels() + "px;";
            Browser.addCSS(this.layerContainer, css)
        };
        Map.prototype.initNoTilesMap = function() {
            this._renderLayers = [];
            var css = "position:relative; overflow:hidden;";
            css += "-webkit-tap-highlight-color: rgba(0,0,0,0)";
            var div = Browser.createElement("div", css);
            var container = this.getContainer();
            container.appendChild(div);
            this.layerContainer = div;
            this.__updateMask();
            var nav = new NavigationManager(this);
            nav.addEventListener("navigate", this.handleNavigation, this);
            this.navigation = nav
        };
        Map.prototype.__resize = Map.prototype.resize;
        Map.prototype.resize = function(w, h) {
            this.__resize(w, h);
            this.__updateMask()
        };
        Map.prototype.zoom = function(obj) {
            var nav = this.navigation;
            if (!nav) {
                return
            }
            if (obj.bounds) {
                nav.zoomToBounds(obj.bounds, obj)
            } else if (obj.zoom) {
                if (obj.zoom <= 1) {
                    nav.zoomToFullExtent(obj)
                }
            }
        };
        Map.prototype.refreshLayers = function() {
            var layers = this._renderLayers;
            for (var i = 0; i < layers.length; i++) {
                var lyr = layers[i];
                !lyr.isHidden() && lyr.refresh()
            }
        };
        Map.prototype.__addLayer = Map.prototype.addLayer;
        Map.prototype.addLayer = function(lyr) {
            this.__addLayer.call(this, lyr);
            if (this._opts.combineLayers !== false) {
                if (lyr.type == "shape" || lyr.type == "bubble") {
                    var group = this._layerGroup;
                    if (!group) {
                        group = this._layerGroup = new SymbolLayerGroup;
                        group.setMap(this);
                        this.__addRenderLayer(group)
                    }
                    group.addLayer(lyr);
                    return
                }
            }
            this.__addRenderLayer(lyr)
        };
        Map.prototype.__addRenderLayer = function(lyr) {
            this._renderLayers.push(lyr);
            var el = lyr.getElement();
            if (lyr._zIndex) {
                el.style.zIndex = lyr._zIndex
            } else if (lyr.type == "hover") {
                el.style.zIndex = 31
            } else if (lyr.type == "label") {
                el.style.zIndex = 32
            }
            this.getLayerContainer().appendChild(el)
        };
        Map.prototype.getLayerContainer = function() {
            return this.layerContainer
        };
        Map.prototype.getCenterAsLatLng = function() {
            if (!this.navigation) {
                return this.getInitialCenterAsLatLng()
            }
            var bb = this.navigation.getBounds();
            var xy = bb.getCenterPoint();
            var ll = this.projection.unprojectXY(xy.x, xy.y);
            return ll
        };
        Map.prototype.handleNavigation = function(evt) {
            this.dispatchEvent("navigate");
            if (evt.prevZoom && evt.prevZoom != evt.zoom) {
                this.dispatchEvent("zoom")
            }
            this.refreshLayers()
        };
        Map.prototype.getZoom = function() {
            var crs = this.getCRS();
            var baseZoom = crs.baseZoom;
            if (!this.navigation) {
                return baseZoom
            }
            var bb = this.navigation.getBounds();
            var mpp = bb.width() / this.getWidthInPixels();
            var z = crs.convScaleToZoom(mpp, false);
            return z
        };
        SymbolLayer.prototype.initNoTilesSymbolLayer = function() {
            var css = "position:absolute;";
            var c = Browser.createElement("canvas", css);
            c.width = c.height = 0;
            if (A.canvasPixelRatio != 1) {
                var invScale = 1 / A.canvasPixelRatio;
                var transPct = "-50%";
                var css3D = "scale3D(" + invScale + ", " + invScale + ", 1) translate3D(" + transPct + ", " + transPct + ", 0px)";
                c.style.webkitTransform = css3D
            }
            this._canvas = c
        };
        SymbolLayer.prototype.getElement = function() {
            if (!this._canvas) {
                trace("[SymbolLayer notiles].getElement() missing canvas element; this:", this)
            }
            return this._canvas
        };
        SymbolLayer.prototype.hide = function() {
            var el = this.getElement();
            el && (el.style.display = "none");
            this._hidden = true
        };
        SymbolLayer.prototype.show = function() {
            var el = this.getElement();
            el && (el.style.display = "block");
            this._hidden = false
        };
        SymbolLayer.prototype.__updateCanvasSize = function() {
            var w = this._map.getWidthInPixels();
            var h = this._map.getHeightInPixels();
            var c = this._canvas;
            w *= A.canvasPixelRatio;
            h *= A.canvasPixelRatio;
            if (w != this._canvasWidth || h != this._canvasHeight) {
                c.width = this._canvasWidth = w;
                c.height = this._canvasHeight = h;
                return true
            }
            return false
        };
        SymbolLayer.prototype.clear = function() {
            if (!this.__updateCanvasSize()) {
                var c = this._canvas;
                var ctx = c.getContext("2d");
                ctx.clearRect(0, 0, c.width, c.height)
            }
        };
        ShapeLayer.prototype.init = function() {
            this.initNoTilesSymbolLayer();
            this.initCanvasShapeLayer()
        };
        ShapeLayer.prototype.handleReadyState = function() {};
        ShapeLayer.prototype.refresh = function() {
            var src = this._shapes;
            if (!src || !src._ready) {
                trace("[ShapeLayer.refresh()] Missing shapes or shapes not READY");
                return
            }
            if (this.isHidden()) {
                return
            }
            this.clear();
            var map = this._map;
            var bb = this.getLayerBounds();
            var shapes = src.getShapesInBoundingBox(bb, this.getHiddenSymbolList());
            var ext = new TileExtent(map.getWidthInPixels(), map.getHeightInPixels());
            ext.updateBounds(bb);
            var mpp = ext.metersPerPixel;
            src.updateContentSize(src.getBounds().width() / mpp, src.getBounds().height() / mpp);
            var style = this.getStyle();
            this._renderer.drawTile(shapes, this._canvas, bb, style)
        };
        CircleLayer.prototype.init = function() {
            this.initNoTilesSymbolLayer();
            this.initCanvasCircleLayer()
        };
        CircleLayer.prototype.handleReadyState = function() {};
        CircleLayer.prototype.refresh = function() {
            var map = this._map;
            var src = this._symbols;
            if (!src || !src._ready) {
                trace("[CircleLayer.drawTile()] Missing symbol data or data not READY");
                return
            }
            if (this.isHidden()) {
                return
            }
            this.clear();
            var style = this.getStyle();
            this.updateCircleSizes(style);
            var hiddenList = this.getHiddenSymbolList();
            var bb = this.getLayerBounds();
            var bubbles = src.getCirclesInBoundingBox(bb, hiddenList);
            if (false) {
                var ext = new TileExtent(map.getWidthInPixels(), map.getHeightInPixels());
                ext.updateBounds(bb);
                var mpp = ext.metersPerPixel
            }
            this._renderer.drawTile(bubbles, this._canvas, bb, style)
        };
        Opts.extendPrototype(HoverLayer, SymbolLayer);
        HoverLayer.prototype.init = function() {
            this.initNoTilesSymbolLayer()
        };
        HoverLayer.prototype.refresh = function() {
            var symId = this._symbolId;
            var baseLyr = this._baseLyr;
            if (symId == -1 || !baseLyr || !baseLyr.isReady()) {
                A.VERBOSE && trace("[HoverLayer.drawTile()] missing something; symId:", symId, "baseLyr:", baseLyr);
                return
            }
            var sym = baseLyr.getSymbolById(symId);
            var bb = baseLyr.getLayerBounds();
            if (bb.intersects(sym) == false) {
                return
            }
            var renderer = baseLyr._renderer;
            var baseStyle = baseLyr.getStyle();
            var hoverStyle = this.convertStyle(baseStyle);
            this.clear();
            renderer.drawTile([sym], this._canvas, bb, hoverStyle)
        }
    };
    var swfobject = function() {
        var D = "undefined",
            r = "object",
            S = "Shockwave Flash",
            W = "ShockwaveFlash.ShockwaveFlash",
            q = "application/x-shockwave-flash",
            R = "SWFObjectExprInst",
            x = "onreadystatechange",
            O = window,
            j = document,
            t = navigator,
            T = false,
            U = [h],
            o = [],
            N = [],
            I = [],
            l, Q, E, B, J = false,
            a = false,
            n, G, m = true,
            M = function() {
                var aa = typeof j.getElementById != D && typeof j.getElementsByTagName != D && typeof j.createElement != D,
                    ah = t.userAgent.toLowerCase(),
                    Y = t.platform.toLowerCase(),
                    ae = Y ? /win/.test(Y) : /win/.test(ah),
                    ac = Y ? /mac/.test(Y) : /mac/.test(ah),
                    af = /webkit/.test(ah) ? parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false,
                    X = !+"1",
                    ag = [0, 0, 0],
                    ab = null;
                if (typeof t.plugins != D && typeof t.plugins[S] == r) {
                    ab = t.plugins[S].description;
                    if (ab && !(typeof t.mimeTypes != D && t.mimeTypes[q] && !t.mimeTypes[q].enabledPlugin)) {
                        T = true;
                        X = false;
                        ab = ab.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                        ag[0] = parseInt(ab.replace(/^(.*)\..*$/, "$1"), 10);
                        ag[1] = parseInt(ab.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
                        ag[2] = /[a-zA-Z]/.test(ab) ? parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0
                    }
                } else {
                    if (typeof O.ActiveXObject != D) {
                        try {
                            var ad = new ActiveXObject(W);
                            if (ad) {
                                ab = ad.GetVariable("$version");
                                if (ab) {
                                    X = true;
                                    ab = ab.split(" ")[1].split(",");
                                    ag = [parseInt(ab[0], 10), parseInt(ab[1], 10), parseInt(ab[2], 10)]
                                }
                            }
                        } catch (Z) {}
                    }
                }
                return {
                    w3: aa,
                    pv: ag,
                    wk: af,
                    ie: X,
                    win: ae,
                    mac: ac
                }
            }(),
            k = function() {
                if (!M.w3) {
                    return
                }
                if (typeof j.readyState != D && j.readyState == "complete" || typeof j.readyState == D && (j.getElementsByTagName("body")[0] || j.body)) {
                    f()
                }
                if (!J) {
                    if (typeof j.addEventListener != D) {
                        j.addEventListener("DOMContentLoaded", f, false)
                    }
                    if (M.ie && M.win) {
                        j.attachEvent(x, function() {
                            if (j.readyState == "complete") {
                                j.detachEvent(x, arguments.callee);
                                f()
                            }
                        });
                        if (O == top) {
                            (function() {
                                if (J) {
                                    return
                                }
                                try {
                                    j.documentElement.doScroll("left")
                                } catch (X) {
                                    setTimeout(arguments.callee, 0);
                                    return
                                }
                                f()
                            })()
                        }
                    }
                    if (M.wk) {
                        (function() {
                            if (J) {
                                return
                            }
                            if (!/loaded|complete/.test(j.readyState)) {
                                setTimeout(arguments.callee, 0);
                                return
                            }
                            f()
                        })()
                    }
                    s(f)
                }
            }();

        function f() {
            if (J) {
                return
            }
            try {
                var Z = j.getElementsByTagName("body")[0].appendChild(C("span"));
                Z.parentNode.removeChild(Z)
            } catch (aa) {
                return
            }
            J = true;
            var X = U.length;
            for (var Y = 0; Y < X; Y++) {
                U[Y]()
            }
        }

        function K(X) {
            if (J) {
                X()
            } else {
                U[U.length] = X
            }
        }

        function s(Y) {
            if (typeof O.addEventListener != D) {
                O.addEventListener("load", Y, false)
            } else {
                if (typeof j.addEventListener != D) {
                    j.addEventListener("load", Y, false)
                } else {
                    if (typeof O.attachEvent != D) {
                        i(O, "onload", Y)
                    } else {
                        if (typeof O.onload == "function") {
                            var X = O.onload;
                            O.onload = function() {
                                X();
                                Y()
                            }
                        } else {
                            O.onload = Y
                        }
                    }
                }
            }
        }

        function h() {
            if (T) {
                V()
            } else {
                H()
            }
        }

        function V() {
            var X = j.getElementsByTagName("body")[0];
            var aa = C(r);
            aa.setAttribute("type", q);
            var Z = X.appendChild(aa);
            if (Z) {
                var Y = 0;
                (function() {
                    if (typeof Z.GetVariable != D) {
                        var ab = Z.GetVariable("$version");
                        if (ab) {
                            ab = ab.split(" ")[1].split(",");
                            M.pv = [parseInt(ab[0], 10), parseInt(ab[1], 10), parseInt(ab[2], 10)]
                        }
                    } else {
                        if (Y < 10) {
                            Y++;
                            setTimeout(arguments.callee, 10);
                            return
                        }
                    }
                    X.removeChild(aa);
                    Z = null;
                    H()
                })()
            } else {
                H()
            }
        }

        function H() {
            var ag = o.length;
            if (ag > 0) {
                for (var af = 0; af < ag; af++) {
                    var Y = o[af].id;
                    var ab = o[af].callbackFn;
                    var aa = {
                        success: false,
                        id: Y
                    };
                    if (M.pv[0] > 0) {
                        var ae = c(Y);
                        if (ae) {
                            if (F(o[af].swfVersion) && !(M.wk && M.wk < 312)) {
                                w(Y, true);
                                if (ab) {
                                    aa.success = true;
                                    aa.ref = z(Y);
                                    ab(aa)
                                }
                            } else {
                                if (o[af].expressInstall && A()) {
                                    var ai = {};
                                    ai.data = o[af].expressInstall;
                                    ai.width = ae.getAttribute("width") || "0";
                                    ai.height = ae.getAttribute("height") || "0";
                                    if (ae.getAttribute("class")) {
                                        ai.styleclass = ae.getAttribute("class")
                                    }
                                    if (ae.getAttribute("align")) {
                                        ai.align = ae.getAttribute("align")
                                    }
                                    var ah = {};
                                    var X = ae.getElementsByTagName("param");
                                    var ac = X.length;
                                    for (var ad = 0; ad < ac; ad++) {
                                        if (X[ad].getAttribute("name").toLowerCase() != "movie") {
                                            ah[X[ad].getAttribute("name")] = X[ad].getAttribute("value")
                                        }
                                    }
                                    P(ai, ah, Y, ab)
                                } else {
                                    p(ae);
                                    if (ab) {
                                        ab(aa)
                                    }
                                }
                            }
                        }
                    } else {
                        w(Y, true);
                        if (ab) {
                            var Z = z(Y);
                            if (Z && typeof Z.SetVariable != D) {
                                aa.success = true;
                                aa.ref = Z
                            }
                            ab(aa)
                        }
                    }
                }
            }
        }

        function z(aa) {
            var X = null;
            var Y = c(aa);
            if (Y && Y.nodeName == "OBJECT") {
                if (typeof Y.SetVariable != D) {
                    X = Y
                } else {
                    var Z = Y.getElementsByTagName(r)[0];
                    if (Z) {
                        X = Z
                    }
                }
            }
            return X
        }

        function A() {
            return !a && F("6.0.65") && (M.win || M.mac) && !(M.wk && M.wk < 312)
        }

        function P(aa, ab, X, Z) {
            a = true;
            E = Z || null;
            B = {
                success: false,
                id: X
            };
            var ae = c(X);
            if (ae) {
                if (ae.nodeName == "OBJECT") {
                    l = g(ae);
                    Q = null
                } else {
                    l = ae;
                    Q = X
                }
                aa.id = R;
                if (typeof aa.width == D || !/%$/.test(aa.width) && parseInt(aa.width, 10) < 310) {
                    aa.width = "310"
                }
                if (typeof aa.height == D || !/%$/.test(aa.height) && parseInt(aa.height, 10) < 137) {
                    aa.height = "137"
                }
                j.title = j.title.slice(0, 47) + " - Flash Player Installation";
                var ad = M.ie && M.win ? "ActiveX" : "PlugIn",
                    ac = "MMredirectURL=" + O.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + ad + "&MMdoctitle=" + j.title;
                if (typeof ab.flashvars != D) {
                    ab.flashvars += "&" + ac
                } else {
                    ab.flashvars = ac
                }
                if (M.ie && M.win && ae.readyState != 4) {
                    var Y = C("div");
                    X += "SWFObjectNew";
                    Y.setAttribute("id", X);
                    ae.parentNode.insertBefore(Y, ae);
                    ae.style.display = "none";
                    (function() {
                        if (ae.readyState == 4) {
                            ae.parentNode.removeChild(ae)
                        } else {
                            setTimeout(arguments.callee, 10)
                        }
                    })()
                }
                u(aa, ab, X)
            }
        }

        function p(Y) {
            if (M.ie && M.win && Y.readyState != 4) {
                var X = C("div");
                Y.parentNode.insertBefore(X, Y);
                X.parentNode.replaceChild(g(Y), X);
                Y.style.display = "none";
                (function() {
                    if (Y.readyState == 4) {
                        Y.parentNode.removeChild(Y)
                    } else {
                        setTimeout(arguments.callee, 10)
                    }
                })()
            } else {
                Y.parentNode.replaceChild(g(Y), Y)
            }
        }

        function g(ab) {
            var aa = C("div");
            if (M.win && M.ie) {
                aa.innerHTML = ab.innerHTML
            } else {
                var Y = ab.getElementsByTagName(r)[0];
                if (Y) {
                    var ad = Y.childNodes;
                    if (ad) {
                        var X = ad.length;
                        for (var Z = 0; Z < X; Z++) {
                            if (!(ad[Z].nodeType == 1 && ad[Z].nodeName == "PARAM") && !(ad[Z].nodeType == 8)) {
                                aa.appendChild(ad[Z].cloneNode(true))
                            }
                        }
                    }
                }
            }
            return aa
        }

        function u(ai, ag, Y) {
            var X, aa = c(Y);
            if (M.wk && M.wk < 312) {
                return X
            }
            if (aa) {
                if (typeof ai.id == D) {
                    ai.id = Y
                }
                if (M.ie && M.win) {
                    var ah = "";
                    for (var ae in ai) {
                        if (ai[ae] != Object.prototype[ae]) {
                            if (ae.toLowerCase() == "data") {
                                ag.movie = ai[ae]
                            } else {
                                if (ae.toLowerCase() == "styleclass") {
                                    ah += ' class="' + ai[ae] + '"'
                                } else {
                                    if (ae.toLowerCase() != "classid") {
                                        ah += " " + ae + '="' + ai[ae] + '"'
                                    }
                                }
                            }
                        }
                    }
                    var af = "";
                    for (var ad in ag) {
                        if (ag[ad] != Object.prototype[ad]) {
                            af += '<param name="' + ad + '" value="' + ag[ad] + '" />'
                        }
                    }
                    aa.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + ah + ">" + af + "</object>";
                    N[N.length] = ai.id;
                    X = c(ai.id)
                } else {
                    var Z = C(r);
                    Z.setAttribute("type", q);
                    for (var ac in ai) {
                        if (ai[ac] != Object.prototype[ac]) {
                            if (ac.toLowerCase() == "styleclass") {
                                Z.setAttribute("class", ai[ac])
                            } else {
                                if (ac.toLowerCase() != "classid") {
                                    Z.setAttribute(ac, ai[ac])
                                }
                            }
                        }
                    }
                    for (var ab in ag) {
                        if (ag[ab] != Object.prototype[ab] && ab.toLowerCase() != "movie") {
                            e(Z, ab, ag[ab])
                        }
                    }
                    aa.parentNode.replaceChild(Z, aa);
                    X = Z
                }
            }
            return X
        }

        function e(Z, X, Y) {
            var aa = C("param");
            aa.setAttribute("name", X);
            aa.setAttribute("value", Y);
            Z.appendChild(aa)
        }

        function y(Y) {
            var X = c(Y);
            if (X && X.nodeName == "OBJECT") {
                if (M.ie && M.win) {
                    X.style.display = "none";
                    (function() {
                        if (X.readyState == 4) {
                            b(Y)
                        } else {
                            setTimeout(arguments.callee, 10)
                        }
                    })()
                } else {
                    X.parentNode.removeChild(X)
                }
            }
        }

        function b(Z) {
            var Y = c(Z);
            if (Y) {
                for (var X in Y) {
                    if (typeof Y[X] == "function") {
                        Y[X] = null
                    }
                }
                Y.parentNode.removeChild(Y)
            }
        }

        function c(Z) {
            var X = null;
            try {
                X = j.getElementById(Z)
            } catch (Y) {}
            return X
        }

        function C(X) {
            return j.createElement(X)
        }

        function i(Z, X, Y) {
            Z.attachEvent(X, Y);
            I[I.length] = [Z, X, Y]
        }

        function F(Z) {
            var Y = M.pv,
                X = Z.split(".");
            X[0] = parseInt(X[0], 10);
            X[1] = parseInt(X[1], 10) || 0;
            X[2] = parseInt(X[2], 10) || 0;
            return Y[0] > X[0] || Y[0] == X[0] && Y[1] > X[1] || Y[0] == X[0] && Y[1] == X[1] && Y[2] >= X[2] ? true : false
        }

        function v(ac, Y, ad, ab) {
            if (M.ie && M.mac) {
                return
            }
            var aa = j.getElementsByTagName("head")[0];
            if (!aa) {
                return
            }
            var X = ad && typeof ad == "string" ? ad : "screen";
            if (ab) {
                n = null;
                G = null
            }
            if (!n || G != X) {
                var Z = C("style");
                Z.setAttribute("type", "text/css");
                Z.setAttribute("media", X);
                n = aa.appendChild(Z);
                if (M.ie && M.win && typeof j.styleSheets != D && j.styleSheets.length > 0) {
                    n = j.styleSheets[j.styleSheets.length - 1]
                }
                G = X
            }
            if (M.ie && M.win) {
                if (n && typeof n.addRule == r) {
                    n.addRule(ac, Y)
                }
            } else {
                if (n && typeof j.createTextNode != D) {
                    n.appendChild(j.createTextNode(ac + " {" + Y + "}"))
                }
            }
        }

        function w(Z, X) {
            if (!m) {
                return
            }
            var Y = X ? "visible" : "hidden";
            if (J && c(Z)) {
                c(Z).style.visibility = Y
            } else {
                v("#" + Z, "visibility:" + Y)
            }
        }

        function L(Y) {
            var Z = /[\\\"<>\.;]/;
            var X = Z.exec(Y) != null;
            return X && typeof encodeURIComponent != D ? encodeURIComponent(Y) : Y
        }
        var d = function() {
            if (M.ie && M.win) {
                window.attachEvent("onunload", function() {
                    var ac = I.length;
                    for (var ab = 0; ab < ac; ab++) {
                        I[ab][0].detachEvent(I[ab][1], I[ab][2])
                    }
                    var Z = N.length;
                    for (var aa = 0; aa < Z; aa++) {
                        y(N[aa])
                    }
                    for (var Y in M) {
                        M[Y] = null
                    }
                    M = null;
                    for (var X in swfobject) {
                        swfobject[X] = null
                    }
                    swfobject = null
                })
            }
        }();
        return {
            registerObject: function(ab, X, aa, Z) {
                if (M.w3 && ab && X) {
                    var Y = {};
                    Y.id = ab;
                    Y.swfVersion = X;
                    Y.expressInstall = aa;
                    Y.callbackFn = Z;
                    o[o.length] = Y;
                    w(ab, false)
                } else {
                    if (Z) {
                        Z({
                            success: false,
                            id: ab
                        })
                    }
                }
            },
            getObjectById: function(X) {
                if (M.w3) {
                    return z(X)
                }
            },
            embedSWF: function(ab, ah, ae, ag, Y, aa, Z, ad, af, ac) {
                var X = {
                    success: false,
                    id: ah
                };
                if (M.w3 && !(M.wk && M.wk < 312) && ab && ah && ae && ag && Y) {
                    w(ah, false);
                    K(function() {
                        ae += "";
                        ag += "";
                        var aj = {};
                        if (af && typeof af === r) {
                            for (var al in af) {
                                aj[al] = af[al]
                            }
                        }
                        aj.data = ab;
                        aj.width = ae;
                        aj.height = ag;
                        var am = {};
                        if (ad && typeof ad === r) {
                            for (var ak in ad) {
                                am[ak] = ad[ak]
                            }
                        }
                        if (Z && typeof Z === r) {
                            for (var ai in Z) {
                                if (typeof am.flashvars != D) {
                                    am.flashvars += "&" + ai + "=" + Z[ai]
                                } else {
                                    am.flashvars = ai + "=" + Z[ai]
                                }
                            }
                        }
                        if (F(Y)) {
                            var an = u(aj, am, ah);
                            if (aj.id == ah) {
                                w(ah, true)
                            }
                            X.success = true;
                            X.ref = an
                        } else {
                            if (aa && A()) {
                                aj.data = aa;
                                P(aj, am, ah, ac);
                                return
                            } else {
                                w(ah, true)
                            }
                        }
                        if (ac) {
                            ac(X)
                        }
                    })
                } else {
                    if (ac) {
                        ac(X)
                    }
                }
            },
            switchOffAutoHideShow: function() {
                m = false
            },
            ua: M,
            getFlashPlayerVersion: function() {
                return {
                    major: M.pv[0],
                    minor: M.pv[1],
                    release: M.pv[2]
                }
            },
            hasFlashPlayerVersion: F,
            createSWF: function(Z, Y, X) {
                if (M.w3) {
                    return u(Z, Y, X)
                } else {
                    return undefined
                }
            },
            showExpressInstall: function(Z, aa, X, Y) {
                if (M.w3 && A()) {
                    P(Z, aa, X, Y)
                }
            },
            removeSWF: function(X) {
                if (M.w3) {
                    y(X)
                }
            },
            createCSS: function(aa, Z, Y, X) {
                if (M.w3) {
                    v(aa, Z, Y, X)
                }
            },
            addDomLoadEvent: K,
            addLoadEvent: s,
            getQueryParamValue: function(aa) {
                var Z = j.location.search || j.location.hash;
                if (Z) {
                    if (/\?/.test(Z)) {
                        Z = Z.split("?")[1]
                    }
                    if (aa == null) {
                        return L(Z)
                    }
                    var Y = Z.split("&");
                    for (var X = 0; X < Y.length; X++) {
                        if (Y[X].substring(0, Y[X].indexOf("=")) == aa) {
                            return L(Y[X].substring(Y[X].indexOf("=") + 1))
                        }
                    }
                }
                return ""
            },
            expressInstallCallback: function() {
                if (a) {
                    var X = c(R);
                    if (X && l) {
                        X.parentNode.replaceChild(l, X);
                        if (Q) {
                            w(Q, true);
                            if (M.ie && M.win) {
                                l.style.display = "block"
                            }
                        }
                        if (E) {
                            E(B)
                        }
                    }
                    a = false
                }
            }
        }
    }();
    var JSON;
    if (!JSON) {
        JSON = {}
    }(function() {
        "use strict";

        function f(n) {
            return n < 10 ? "0" + n : n
        }
        if (typeof Date.prototype.toJSON !== "function") {
            Date.prototype.toJSON = function(key) {
                return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
            };
            String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
                return this.valueOf()
            }
        }
        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            gap, indent, meta = {
                "\b": "\\b",
                "	": "\\t",
                "\n": "\\n",
                "\f": "\\f",
                "\r": "\\r",
                '"': '\\"',
                "\\": "\\\\"
            },
            rep;

        function quote(string) {
            escapable.lastIndex = 0;
            return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
                var c = meta[a];
                return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
            }) + '"' : '"' + string + '"'
        }

        function str(key, holder) {
            var i, k, v, length, mind = gap,
                partial, value = holder[key];
            if (value && typeof value === "object" && typeof value.toJSON === "function") {
                value = value.toJSON(key)
            }
            if (typeof rep === "function") {
                value = rep.call(holder, key, value)
            }
            switch (typeof value) {
                case "string":
                    return quote(value);
                case "number":
                    return isFinite(value) ? String(value) : "null";
                case "boolean":
                case "null":
                    return String(value);
                case "object":
                    if (!value) {
                        return "null"
                    }
                    gap += indent;
                    partial = [];
                    if (Object.prototype.toString.apply(value) === "[object Array]") {
                        length = value.length;
                        for (i = 0; i < length; i += 1) {
                            partial[i] = str(i, value) || "null"
                        }
                        v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                        gap = mind;
                        return v
                    }
                    if (rep && typeof rep === "object") {
                        length = rep.length;
                        for (i = 0; i < length; i += 1) {
                            if (typeof rep[i] === "string") {
                                k = rep[i];
                                v = str(k, value);
                                if (v) {
                                    partial.push(quote(k) + (gap ? ": " : ":") + v)
                                }
                            }
                        }
                    } else {
                        for (k in value) {
                            if (Object.prototype.hasOwnProperty.call(value, k)) {
                                v = str(k, value);
                                if (v) {
                                    partial.push(quote(k) + (gap ? ": " : ":") + v)
                                }
                            }
                        }
                    }
                    v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
                    gap = mind;
                    return v
            }
        }
        if (typeof JSON.stringify !== "function") {
            JSON.stringify = function(value, replacer, space) {
                var i;
                gap = "";
                indent = "";
                if (typeof space === "number") {
                    for (i = 0; i < space; i += 1) {
                        indent += " "
                    }
                } else if (typeof space === "string") {
                    indent = space
                }
                rep = replacer;
                if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                    throw new Error("JSON.stringify")
                }
                return str("", {
                    "": value
                })
            }
        }
        if (typeof JSON.parse !== "function") {
            JSON.parse = function(text, reviver) {
                var j;

                function walk(holder, key) {
                    var k, v, value = holder[key];
                    if (value && typeof value === "object") {
                        for (k in value) {
                            if (Object.prototype.hasOwnProperty.call(value, k)) {
                                v = walk(value, k);
                                if (v !== undefined) {
                                    value[k] = v
                                } else {
                                    delete value[k]
                                }
                            }
                        }
                    }
                    return reviver.call(holder, key, value)
                }
                text = String(text);
                cx.lastIndex = 0;
                if (cx.test(text)) {
                    text = text.replace(cx, function(a) {
                        return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                    })
                }
                if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                    j = eval("(" + text + ")");
                    return typeof reviver === "function" ? walk({
                        "": j
                    }, "") : j
                }
                throw new SyntaxError("JSON.parse")
            }
        }
    })();
    Opts.exportObject("nytg.map.trace", trace);
    var ProxyFlashObject = {
        getFlashChannel: function() {
            return this._flashChannel || null
        },
        flashEnabled: function() {
            return !!this._flashChannel
        },
        createFlashObject: function(type, opts) {
            this._flashChannel.createFlashObject(this._flashName, type, opts)
        },
        addFlashEventListener: function(event, handler) {
            this._flashChannel.addEventListener(event, handler, this)
        },
        callFlashMethod: function(methodName, params) {
            return this._flashChannel.callFlashMethod(this._flashName, methodName, params)
        }
    };

    function FlashChannel(divId, w, h, swfUrl, minVersionStr) {
        this._newProxyIndex = {};
        this.QUEUE_PRIORITY = 999;
        var jsCallbackName = Utils.getUniqueName("nytg.map.__jscallback_");
        var jsonCallbackName = Utils.getUniqueName("nytg.map.__jsoncallback_");
        var _self = this;
        Opts.exportObject(jsCallbackName, function() {
            _self.handleFlashEvent.apply(_self, arguments)
        });
        Opts.exportObject(jsonCallbackName, function() {
            _self.handleFlashEventJson.apply(_self, arguments)
        });
        var flashvars = {
            jsEventHandler: jsCallbackName,
            jsonEventHandler: jsonCallbackName,
            initWidth: w,
            initHeight: h
        };
        var params = {
            allowScriptAccess: "always",
            wmode: "opaque"
        };
        if (true) {
            var div = document.getElementById(divId);
            var swfId = divId + "_swf";
            var container = Browser.createElement("div");
            container.id = swfId;
            div.appendChild(container)
        }
        this.swfId = swfId;
        var wStr = w ? String(w) : "100%";
        var hStr = h ? String(h) : "100%";
        swfobject.embedSWF(swfUrl, swfId, wStr, hStr, minVersionStr, null, flashvars, params)
    }
    Opts.inherit(FlashChannel, Waiter);
    FlashChannel.prototype.enableFlashChannel = function(obj, name) {
        Opts.copyAllParams(obj, ProxyFlashObject);
        obj._flashName = name;
        obj._flashChannel = this;
        this._newProxyIndex[name] = obj;
        if (obj.isReady()) {
            trace("**** [FlashChannel.enableFlashChannel()] object already READY")
        } else {
            obj.waitFor(this)
        }
    };
    FlashChannel.prototype.validateCallArgs = function(opts, depth) {
        depth = depth | 0;
        var type = typeof opts;
        if (type != "object" && type != "function" || Utils.isArray(opts)) {
            return opts
        }
        var o = {};
        for (var key in opts) {
            var arg = opts[key];
            var otype = typeof arg;
            if (otype == "function" || !opts.hasOwnProperty(key)) {
                continue
            }
            if (otype == "object") {
                if (Utils.isArray(arg) && arg.length > 0 && typeof arg[0] == "object") {
                    trace(">>> [validateCallArgs()] Warning: array of objects.")
                }
                if (depth > 1) {
                    trace(">>> [validateCallArgs()] deep recursive call; cancelling; key:", key);
                    continue
                }
                arg = this.validateCallArgs(arg, depth + 1)
            }
            o[key] = arg
        }
        return o
    };
    FlashChannel.prototype.callFlashMethod = function(oname, fname, opts) {
        if (!this.isReady()) {
            trace("[FlashChannel.callFlashMethod()] Called before swf is READY; object:", oname, "fname:", fname);
            this.callWhenReady(this.callFlashMethod, arguments, this, this.QUEUE_PRIORITY)
        } else {
            try {
                opts = this.validateCallArgs(opts);
                var useJson = true;
                if (useJson) {
                    T.start();
                    var jsonArg = opts == null ? void 0 : JSON.stringify(opts);
                    var retn = this.swf.callJsonMethod(oname, fname, jsonArg);
                    return JSON.parse(retn)
                } else {
                    return this.swf.callMethod(oname, fname, opts)
                }
            } catch (err) {
                trace("[FlashChannel.callFlashMethod()] Exception: " + err);
                trace("[] ... oname:", oname, "fname:", fname, "opts:", opts)
            }
        }
    };
    FlashChannel.prototype.createFlashObject = function(oname, type, opts) {
        if (!this.isReady()) {
            trace("[FlashChannel.createFlashObject()] Called before swf is READY; name: " + oname + " type: " + type);
            this.callWhenReady(this.createFlashObject, arguments, this, this.QUEUE_PRIORITY)
        } else {
            try {
                opts = this.validateCallArgs(opts)
            } catch (err) {
                trace("[FlashChannel.createFlashObject()] Error validating arguments:", err);
                return
            }
            try {
                this.swf.createObject(oname, type, opts) || trace("[FlashChannel.createFlashObject()] Failed to create: " + oname)
            } catch (err) {
                trace("[FlashChannel.createFlashObject()] Exception:", String(err), "oname:", oname, "type:", type, "opts:", opts)
            }
        }
    };
    FlashChannel.prototype.handleFlashEventJson = function(oname, ename, json) {
        try {
            var obj;
            if (json != null) {
                obj = JSON.parse(json)
            }
            this.handleFlashEvent(oname, ename, obj)
        } catch (e) {
            trace("[FlashChannel.handleFlashEventJson()] Error parsing json:", json)
        }
    };
    FlashChannel.prototype.handleFlashEvent = function(oname, ename, data) {
        var proxy = this._newProxyIndex[oname];
        if (ename == "ready" && oname == "swf") {
            this.startWaiting()
        } else {
            this.dispatchEvent(ename, data, proxy)
        }
    };
    FlashChannel.prototype.handleReadyState = function() {
        trace("%%%% FlashChannel.handleReadyState()");
        this.swf = document.getElementById(this.swfId);
        if (!this.swf) {
            trace("[FlashChannel.handleReadyState()] Missing swf; swfId:", this.swfId)
        }
    };
    var minFlashVersion = "10.0.0";
    Map.useFlashExtensions = function() {
        if (swfobject.hasFlashPlayerVersion(minFlashVersion)) {
            trace("[map-core-flash.js] useFlashExtensions()");
            useFlashExtensions()
        } else {
            useFlashFallbackExtensions()
        }
        LabelData.prototype.importFromDataTable = function(dt, latField, lngField, proj) {
            this.table = dt;
            this.latField = latField;
            this.lngField = lngField;
            this.waitFor(dt);
            this.startWaiting()
        };
        LabelLayer.prototype.init = function() {
            this.waitFor(this._opts.symbols);
            this.initFlashMapLayer("labelLayer");
            this.initFlashSymbolLayer()
        };
        LabelLayer.prototype.handleReadyState = function() {};
        LabelLayer.prototype.refresh = function() {};
        CircleData.prototype.importXYFields = function(data, xf, yf, proj) {
            this.projection = proj;
            var handler = function() {
                this.xx = data.getFieldData(xf);
                this.yy = data.getFieldData(yf);
                this.startWaiting()
            };
            data.addEventListener("ready", handler, this)
        };
        CircleData.prototype.importFromDataTable = function(data, latField, lngField, proj) {
            this.projection = proj;
            var handler = function() {
                this.latitude = data.getFieldData(latField);
                this.longitude = data.getFieldData(lngField);
                this.startWaiting()
            };
            data.addEventListener("ready", handler, this)
        };
        return this
    };

    function useFlashFallbackExtensions() {
        Map.prototype.setFallbackImage = function(url) {
            if (!this._flashChannel) {}
        };
        Map.prototype.addLayer = function() {}
    }

    function useFlashExtensions() {
        Map.prototype.init = function() {
            this.initMap();
            this.initFlashMap();
            if (this.mouse) {
                this.mouse.addEventListener("mouseover", this.handleMouseOver, this);
                this.mouse.addEventListener("mouseout", this.handleMouseOut, this)
            }
        };
        Map.prototype.handleMouseOver = function(evt) {
            this.callFlashMethod("allowMouseHover", true)
        };
        Map.prototype.handleMouseOut = function(evt) {
            this.callFlashMethod("allowMouseHover", false)
        };
        Map.prototype.initFlashMap = function() {
            trace("%%% Map.initFlashMap()");
            var opts = this._opts;
            opts.combineLayers = false;
            var swfUrl = opts.swfUrl || Map.swfUrl || "";
            if (!swfUrl) {
                trace("[Map for Flash.init()] Missing swf url; opts:", opts);
                return
            }
            var w = isNaN(opts.width) ? 0 : opts.width;
            var h = isNaN(opts.height) ? 0 : opts.height;
            this.div.style.position = "relative";
            var flash = new FlashChannel(this.divId, w, h, swfUrl, minFlashVersion);
            flash.enableFlashChannel(this, "hybrid-map");
            flashOpts = {
                scrollWheelZoom: opts.scrollWheelZoom,
                dragging: opts.dragging,
                doubleClickZoom: opts.doubleClickZoom,
                limitPanning: opts.limitPanning
            };
            flashOpts.width_pixels = this.getWidthInPixels();
            flashOpts.height_pixels = this.getHeightInPixels();
            flashOpts.center = this.getInitialCenterAsLatLng();
            flashOpts.crs = this.getCRS();
            var bb = this.getInitialBounds();
            flashOpts.width_km = bb.width() / 1e3;
            flashOpts.height_km = bb.height() / 1e3;
            flashOpts.backgroundColor = opts.backgroundColor;
            flashOpts.zoom_scales = [1, 2, 4, 8];
            flashOpts.panMargins = opts.panMargins;
            this.createFlashObject("map", flashOpts);
            flash.addEventListener("ready", function() {
                this.mouse.setMapContainer(flash.swf)
            }, this);
            this.addFlashEventListener("navigate", this.handleMapNavigation);
            this.addFlashEventListener("zoom", this.handleMapZoom)
        };
        Map.prototype.handleMapNavigation = function(evt) {
            this.dispatchEvent("navigate")
        };
        Map.prototype.handleMapZoom = function(evt) {
            this.dispatchEvent("zoom")
        };
        Map.prototype.display = function() {
            this.callFlashMethod("display");
            this.startWaiting()
        };
        Map.prototype.zoom = function(obj) {
            this.callFlashMethod("zoom", obj)
        };
        Map.prototype.zoomToLatLng = function(lat, lng, level) {
            var z = this.callFlashMethod("zoom", {
                lat: lat,
                lng: lng,
                zoom: level
            })
        };
        Map.prototype.__procMouseData = function(evt) {
            if (evt.mapWidth && evt.mapHeight) {
                var w = this.getWidthInPixels();
                var h = this.getHeightInPixels();
                evt.mapX = Math.round(evt.mapX * w / evt.mapWidth);
                evt.mapY = Math.round(evt.mapY * h / evt.mapHeight)
            }
            this.updateContainerBounds();
            evt.pageX = evt.mapX + this._leftPix;
            evt.pageY = evt.mapY + this._topPix
        };
        Map.prototype.getZoom = function() {
            var z = this.callFlashMethod("getZoom");
            var base = this.getCRS().baseZoom;
            if (base) {
                z += base - 1
            }
            return z
        };
        Map.prototype.zoomIn = function() {
            this.setZoom(this.getZoom() + 1)
        };
        Map.prototype.zoomOut = function() {
            this.setZoom(this.getZoom() - 1)
        };
        Map.prototype.setZoom = function(z) {
            var base = this.getCRS().baseZoom;
            if (base) {
                z -= base - 1
            }
            this.callFlashMethod("zoom", {
                zoom: z
            })
        };
        Map.prototype.getScale = function() {
            return this.callFlashMethod("getScale")
        };
        Map.prototype.getCenterAsLatLng = function() {
            return this.callFlashMethod("getCenterAsLatLng")
        };
        MapLayer.prototype.hide = function() {
            this._hidden = true;
            this.callFlashMethod && this.callFlashMethod("hide")
        };
        MapLayer.prototype.show = function() {
            this._hidden = false;
            this.callFlashMethod && this.callFlashMethod("show")
        };
        MapLayer.prototype.initFlashMapLayer = function() {
            trace("[MapLayer.initFlashMapLayer()] this:", this);
            var name = "MapLayer_" + Utils.getUniqueName();
            this._map._flashChannel.enableFlashChannel(this, name)
        };
        SymbolLayer.prototype.setHoverById = function(id) {
            this.callFlashMethod("setHoverById", id)
        };
        SymbolLayer.prototype.getSymbolById = function(id) {
            var obj = this.callFlashMethod("getSymbolById", id);
            if (!obj) {
                trace("[SymbolLayer.getSymbolById()] returned invalid object:", obj);
                return {}
            }
            var bb = new BoundingBox;
            bb.setBounds(obj.left, obj.top, obj.right, obj.bottom);
            bb.id = id;
            return bb
        };
        SymbolLayer.prototype.clearHover = function() {
            trace("[SymbolLayer.clearHover()]");
            this.callFlashMethod("clearHover")
        };
        SymbolLayer.prototype.initFlashSymbolLayer = function() {
            this.addFlashEventListener("click", this.handleMouseEvent);
            this.addFlashEventListener("rollover", this.handleMouseEvent);
            this.addFlashEventListener("rollout", this.handleMouseEvent);
            this.addEventListener("click", this.handleClick, this)
        };
        SymbolLayer.prototype.handleClick = function(evt) {
            var obj = {
                hitLayer: this,
                hitId: evt.data.id
            };
            Opts.copyAllParams(obj, evt.data);
            this._map.dispatchEvent("click", obj)
        };
        SymbolLayer.prototype.handleMouseEvent = function(evt) {
            var obj = evt.data;
            var map = this._map;
            map.__procMouseData(obj);
            obj.rec = this.getRecordById(evt.id).clone() || null;
            obj.id = evt.id;
            this.dispatchEvent(evt.type, obj)
        };
        SymbolLayer.prototype.getFlashOptions = function() {
            var opts = this._opts;
            var obj = {};
            obj.interactive = !!this._interactive;
            obj.hidden = !!this._hidden;
            obj.hitHelper = opts.hitHelper && opts.hitHelper._flashName || "";
            obj.hitPriority = opts.hitPriority;
            return obj
        };
        ShapeLayer.prototype.init = function() {
            this.initFlashMapLayer();
            this.initFlashSymbolLayer();
            this.waitFor(this._symbols)
        };
        ShapeLayer.convertShape = function(shp0) {
            var shp1 = {};
            shp1.id = shp0.id;
            shp1.parts = [];
            var vecs = shp0.parts;
            for (var j = 0; j < vecs.length; j++) {
                var vec = vecs[j];
                var obj = {
                    xx: vec.xx,
                    yy: vec.yy
                };
                shp1.parts.push(obj)
            }
            return shp1
        };
        ShapeLayer.prototype.handleReadyState = function() {
            var opts = this.getFlashOptions();
            opts.data = this._symbols._utf16Str;
            var shapes = this._symbols._shapes;
            if (shapes) {
                var obj = {};
                obj.bounds = shapes.bounds;
                obj.polygons = shapes.polygons;
                var src = shapes.shapes;
                var dest = [];
                trace(">> numShapes:", src.length);
                for (var i = 0, len = src.length; i < len; i++) {
                    var shp = ShapeLayer.convertShape(src[i]);
                    dest.push(shp)
                }
                opts.shapes = dest
            }
            var str = opts.data;
            var src = this._symbols;
            opts.projection = src._transform && src._transform.name || "";
            opts.shapeType = this._shapeType;
            this.createFlashObject("shapeLayer", opts)
        };
        SymbolLayer.prototype.refresh = function() {
            if (this.isReady()) {
                var style = this.getStyle();
                this.callFlashMethod("setInteraction", !!this._interactive);
                this.callFlashMethod("updateStyle", style)
            }
        };
        BasemapLayer.prototype.init = function() {
            this.initFlashMapLayer()
        };
        BasemapLayer.prototype.handleReadyState = function() {
            var opts = this._opts || {};
            var mapOpts = this._map._opts;
            opts.style = mapOpts.googleMapStyle || opts.style || null;
            this.createFlashObject("baseLayer", opts)
        };
        IconLayer.prototype.init = function() {
            this.initFlashMapLayer()
        };
        IconLayer.prototype.handleReadyState = function() {
            var opts = this._icons;
            opts.projection = this._map.projection.name;
            this.createFlashObject("iconLayer", opts)
        };
        CircleLayer.prototype.init = function() {
            this.waitFor(this._symbols);
            this.initFlashMapLayer();
            this.initFlashSymbolLayer()
        };
        CircleLayer.prototype.handleReadyState = function() {
            var flashOpts = this.getFlashOptions();
            var layerOpts = this._opts;
            flashOpts.projection = layerOpts.transformer && layerOpts.transformer.name || this._map.projection.name;
            flashOpts.bubbles = this._symbols || undefined;
            this.createFlashObject("bubbleLayer", flashOpts)
        };
        BaseLayer.prototype.__addView = function() {};
        BaseLayer.prototype.__setView = function() {}
    }
    var StateNames = {};
    StateNames.index = {
        AL: "Alabama",
        AK: "Alaska",
        AZ: "Arizona",
        AR: "Arkansas",
        CA: "California",
        CO: "Colorado",
        CT: "Connecticut",
        DE: "Delaware",
        DC: "D.C.",
        FL: "Florida",
        GA: "Georgia",
        HI: "Hawaii",
        ID: "Idaho",
        IL: "Illinois",
        IN: "Indiana",
        IA: "Iowa",
        KS: "Kansas",
        KY: "Kentucky",
        LA: "Louisiana",
        ME: "Maine",
        MD: "Maryland",
        MA: "Massachusetts",
        MI: "Michigan",
        MN: "Minnesota",
        MS: "Mississippi",
        MO: "Missouri",
        MT: "Montana",
        NE: "Nebraska",
        NV: "Nevada",
        NH: "New Hampshire",
        NJ: "New Jersey",
        NM: "New Mexico",
        NY: "New York",
        NC: "North Carolina",
        ND: "North Dakota",
        OH: "Ohio",
        OK: "Oklahoma",
        OR: "Oregon",
        PA: "Pennsylvania",
        PR: "Puerto Rico",
        RI: "Rhode Island",
        SC: "South Carolina",
        SD: "South Dakota",
        TN: "Tennessee",
        TX: "Texas",
        UT: "Utah",
        VT: "Vermont",
        VA: "Virginia",
        WA: "Washington",
        WV: "West Virginia",
        WI: "Wisconsin",
        WY: "Wyoming"
    };
    StateNames.abbrev = "AL:Ala.,AK:Alaska,AZ:Ariz.,AR:Ark.,CA:Calif.,CO:Colo.,CT:Conn.,DE:Del.,DC:D.C.,FL:Fla.,GA:Ga.,HI:Hawaii,ID:Idaho,IL:Ill.,IN:Ind.,IA:Iowa,KS:Kan.,KY:Ky.,LA:La.,ME:Me.,MD:Md.,MA:Mass.,MI:Mich.,MN:Minn.,MS:Miss.,MO:Mo.,MT:Mont.,NE:Neb.,NV:Nev.,NH:N.H.,NJ:N.J.,NM:N.M.,NY:N.Y.,NC:N.C.,ND:N.D.,OH:Ohio,OK:Okla.,OR:Ore.,PA:Pa.,PR:P.R.,RI:R.I.,SC:S.C.,SD:S.D.,TN:Tenn.,TX:Tex.,UT:Utah,VT:Vt.,VA:Va.,WA:Wash.,WV:W.Va.,WI:Wis.,WY:Wyo.,";
    StateNames.getName = function(st) {
        var name = StateNames.index[st];
        return name || ""
    };
    StateNames.getAbbrev = function(st) {
        st = st && st.toUpperCase();
        var i = this.abbrev.indexOf(st);
        var str = st && i > -1 ? this.abbrev.substring(i + 3, this.abbrev.indexOf(",", i)) : "";
        return str
    };
    var CountyNames = {};
    CountyNames.skipIndex = {
        MO: "St. Louis County~St. Louis City",
        NV: "Carson City",
        VA: "Alexandria~Bedford City~Bristol~Buena Vista~Charlottesville~Chesapeake~Colonial Heights~Covington~Danville~Emporia~Fairfax City~Falls Church~Franklin~Fredericksburg~Galax~Hampton~Harrisonburg~Hopewell~Lexington~Lynchburg~Manassas~Manassas Park~Martinsville~Newport News~Norfolk~Norton~Petersburg~Poquoson~Portsmouth~Radford~Richmond City~Roanoke City~Salem~Staunton~Suffolk~Virginia Beach~Waynesboro~Williamsburg~Winchester"
    };
    CountyNames.replaceIndex = {
        NY: {
            Richmond: "Staten Island",
            Kings: "Brooklyn",
            Queens: "Queens",
            "New York": "Manhattan",
            Bronx: "Bronx"
        },
        MD: {
            "Baltimore City": "Baltimore"
        },
        DC: {
            "District of Columbia": "Washington"
        }
    };
    CountyNames.adjustName = function(st, county, yr) {
        var name = "";
        st = st.toUpperCase();
        if (yr && yr < 1997 && county == "Miami-Dade") {
            return "Dade County"
        }
        var skipIndex = CountyNames.skipIndex;
        var stObj = this.replaceIndex[st];
        if (stObj && stObj[county]) {
            name = stObj[county]
        } else if (st == "LA") {
            name = county + " Parish"
        } else if (skipIndex[st] && skipIndex[st].indexOf(county) != -1) {
            name = county
        } else if (st == "AK") {
            name = county
        } else {
            name = county + " County"
        }
        return name
    };
    var StateFips = {};
    StateFips.getFips = function(st) {
        st = st.toUpperCase();
        return this.stateToFips[st] || ""
    };
    StateFips.getState = function(fips) {
        if (!this.fipsToState) {
            this.fipsToState = Utils.invertIndex(this.stateToFips)
        }
        return this.fipsToState[fips] || ""
    };
    StateFips.stateToFips = {
        AL: "01",
        AK: "02",
        AZ: "04",
        AR: "05",
        CA: "06",
        CO: "08",
        CT: "09",
        DE: "10",
        DC: "11",
        FL: "12",
        GA: "13",
        HI: "15",
        ID: "16",
        IL: "17",
        IN: "18",
        IA: "19",
        KS: "20",
        KY: "21",
        LA: "22",
        ME: "23",
        MD: "24",
        MA: "25",
        MI: "26",
        MN: "27",
        MS: "28",
        MO: "29",
        MT: "30",
        NE: "31",
        NV: "32",
        NH: "33",
        NJ: "34",
        NM: "35",
        NY: "36",
        NC: "37",
        ND: "38",
        OH: "39",
        OK: "40",
        OR: "41",
        PA: "42",
        RI: "44",
        SC: "45",
        SD: "46",
        TN: "47",
        TX: "48",
        UT: "49",
        VT: "50",
        VA: "51",
        WA: "53",
        WV: "54",
        WI: "55",
        WY: "56",
        AS: "60",
        FM: "64",
        GU: "66",
        MH: "68",
        MP: "69",
        PW: "70",
        PR: "72",
        UM: "74",
        VI: "78"
    };
    Utils.getOrdinalSuffix = getOrdinalSuffix;

    function getOrdinalSuffix(val) {
        val = parseInt(val, 10);
        var oneD = val % 10;
        var twoD = val % 100;
        if (isNaN(val) || val < 0) {
            var suff = ""
        } else if (twoD == 11 || twoD == 12 || twoD == 13) {
            suff = "th"
        } else if (oneD == 1) {
            suff = "st"
        } else if (oneD == 2) {
            suff = "nd"
        } else if (oneD == 3) {
            suff = "rd"
        } else {
            suff = "th"
        }
        return suff
    }
    var Phantom = new Waiter;
    Phantom.__imageIdx = 0;
    Phantom.__optionArray = [];
    Phantom.__map = null;
    Phantom.__callback = null;
    Phantom.__getImageProperties = function() {
        return null
    };
    Opts.exportObject("nytg.Phantom", Phantom);
    Opts.exportObject("nytg.trace", trace);
    Phantom.captureMapViews = function(map, optArr, mapFunc) {
        if (Phantom.isReady()) {
            trace("[Phantom.addMapViews()] Phantom is already READY.");
            return
        }
        if (this.__map) {
            trace("[Phantom.addMapViews()] Map can only be added once; it is already set.");
            return
        }
        if (!Utils.isArray(optArr)) {
            trace("[Phantom.captureMapViews()] Missing array of options.");
            return
        }
        if (mapFunc && !Utils.isFunction(mapFunc)) {
            trace("[Phantom.captureMapViews()] Third argument is not a function; found:", mapFunc);
            return
        }
        this.__map = map;
        this.__optionArray = optArr;
        this.__callback = mapFunc;
        map.on("ready", Phantom.startWaiting, Phantom)
    };
    Phantom.captureMap = function(map, opts) {
        var callback = function() {
            return {
                name: "noname_map"
            }
        };
        this.captureMapViews(map, [opts], callback)
    };
    Phantom.__getMapDimensions = function(map) {
        var w = map.getWidthInPixels();
        var h = map.getHeightInPixels();
        var xy = Browser.getPageXY(map.getContainer());
        return {
            width: w,
            height: h,
            x: xy.x,
            y: xy.y
        }
    };
    Phantom.done = function() {
        this.__hasNext = false
    };
    Phantom.getNextImage = function(phantomOpts) {
        var argArr = this.__optionArray;
        var idx = this.__imageIdx || 0;
        if (!argArr || argArr.length <= idx) {
            return null
        }
        var callbackArgs = argArr[idx];
        var genOpts = this.__callback ? this.__callback(callbackArgs) : {};
        var mapRect = this.__getMapDimensions(this.__map);
        if (!genOpts) {
            trace("[Phantom.getNextImage()] Callback returned no data; stopping.");
            return null
        }
        var opts = {};
        Opts.copyNewParams(opts, callbackArgs);
        Opts.copyNewParams(opts, phantomOpts);
        Opts.copyNewParams(opts, genOpts);
        Opts.copyNewParams(opts, mapRect);
        if (!opts.name) {
            opts.name = Utils.getUniqueName();
            trace("[Phantom.getNextImage()] Callback data is missing a 'name' parameter; using:", opts.name)
        }
        this.__imageIdx += 1;
        return opts
    };
    nytg = window.nytg || {};
    nytg.data = nytg.data || {};
    nytg.data.state_labels = {
        data: {
            LABEL_LAT: [32.792, 27.393, 34.293, 34.9, 37.246, 38.999, 41.622, 39.004, 38.85, 28.3, 32.651, 26.803, 43.7, 40.065, 39.908, 42.075, 38.485, 37.527, 31.073, 45.2, 39.2, 42.257, 43.2, 46.316, 32.752, 38.367, 46.8, 41.527, 39.356, 43.687, 40.201, 34.421, 42.951, 35.544, 47.446, 40.291, 35.583, 43.935, 40.874, 41.676, 33.914, 44.436, 35.843, 31.495, 39.324, 44.075, 37.6, 47.38, 38.64, 44.636, 43],
            LABEL_SCALE: [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
            LABEL_LNG: [-86.6, -114.6, -111.665, -92.439, -120, -105.548, -72.725, -75.507, -76.6, -81.8, -83.449, -105.512, -114.659, -89.198, -86.276, -93.5, -98.38, -84.5, -92.4, -69.232, -76.797, -71.812, -84.5, -94.309, -89.665, -92.477, -109.3, -99.811, -116.655, -71.579, -74.4, -106.108, -75.2, -79.388, -100.469, -82.79, -97.508, -120.552, -77.799, -71.556, -80.9, -100.23, -86.343, -99.359, -111.678, -72.663, -78, -120, -80.8, -90.011, -107.551],
            STATE: ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"],
            ABBR: ["Ala.", "Alaska", "Ariz.", "Ark.", "Calif.", "Colo.", "Conn.", "Del.", "D.C.", "Fla.", "Ga.", "Hawaii", "Idaho", "Ill.", "Ind.", "Iowa", "Kan.", "Ky.", "La.", "Me.", "Md.", "Mass.", "Mich.", "Minn.", "Miss.", "Mo.", "Mont.", "Neb.", "Nev.", "N.H.", "N.J.", "N.M.", "N.Y.", "N.C.", "N.D.", "Ohio", "Okla.", "Ore.", "Pa.", "R.I.", "S.C.", "S.D.", "Tenn.", "Tex.", "Utah", "Vt.", "Va.", "Wash.", "W.Va.", "Wis.", "Wyo."]
        },
        schema: {
            LABEL_SCALE: "INT",
            LABEL_LAT: "DOUBLE",
            STATE: "STRING",
            ABBR: "STRING",
            LABEL_LNG: "DOUBLE"
        }
    };
    var LabelRenderer;
    LabelLayer.prototype.handleReadyState = function() {
        var map = this._map;
        var div = this.getElement();
        this.renderer = new LabelRenderer(div);
        this.refresh()
    };
    LabelLayer.prototype.refresh = function() {
        var map = this._map;
        var src = this._symbols;
        if (!src || !src._ready || !this._ready) {
            A.VERBOSE && trace("[LabelLayer.refresh()] Missing labels or label data not READY or layer not READY");
            return
        }
        if (this.isHidden()) {
            return
        }
        var bb = map.getVisibleBounds();
        var style = this.getStyle();
        var baseZoom = map._crs.baseZoom;
        var currZoom = map.getZoom();
        var zoomDiff = currZoom - baseZoom;
        var mpp = map.getScale();
        this.renderer.updateSymbolStyles(src.getSymbols(), style, zoomDiff);
        src.updateSymbolSizes(style, mpp, zoomDiff);
        var ext = new TileExtent(map.getWidthInPixels(), map.getHeightInPixels());
        ext.updateBounds(bb);
        var hiddenList = this.getHiddenSymbolList();
        var symbols = this._symbols.getSymbolsInBoundingBox(bb, hiddenList);
        this.renderer.showLabels(symbols, ext, style);
        var offs = this.container.offsetWidth
    };
    var Color = {
        enforceRange: function(val, min, max) {
            if (val < min) {
                val = min
            }
            if (val > max) {
                val = max
            }
            return val
        },
        getRGB: function(r, g, b) {
            return r << 16 | g << 8 | b
        },
        getR: function(rgb) {
            return rgb >> 16 & 255
        },
        getG: function(rgb) {
            return rgb >> 8 & 255
        },
        getB: function(rgb) {
            return rgb & 255
        }
    };
    Color.getMinChannelAlpha = function(target, bg) {
        var testAlpha = .1;
        var modCol = (target - (1 - testAlpha) * bg) / testAlpha;
        var minAlpha = testAlpha;
        if (modCol < 0) {
            minAlpha = 1 - target / bg
        } else if (modCol > 255) {
            minAlpha = (target - bg) / (255 - bg)
        }
        if (bg < target && bg > 102) {
            minAlpha = .35
        }
        return minAlpha
    };
    Color.getMinAlpha = function(rgb, bg) {
        var targetR = this.getR(rgb);
        var targetG = this.getG(rgb);
        var targetB = this.getB(rgb);
        var bgR = this.getR(bg);
        var bgG = this.getG(bg);
        var bgB = this.getB(bg);
        var alphaR = this.getMinChannelAlpha(targetR, bgR);
        var alphaG = this.getMinChannelAlpha(targetG, bgG);
        var alphaB = this.getMinChannelAlpha(targetB, bgB);
        return Math.max(alphaR, alphaB, alphaG)
    };
    Color.adjustColorByAlpha = function(rgb, alpha, bgCol) {
        if (bgCol === undefined) {
            bgCol = 16777215
        }
        var targetR = this.getR(rgb);
        var targetG = this.getG(rgb);
        var targetB = this.getB(rgb);
        var bgR = this.getR(bgCol);
        var bgG = this.getG(bgCol);
        var bgB = this.getB(bgCol);
        var newR = (targetR - (1 - alpha) * bgR) / alpha;
        var newG = (targetG - (1 - alpha) * bgG) / alpha;
        var newB = (targetB - (1 - alpha) * bgB) / alpha;
        newR = Math.round(Utils.clamp(newR, 0, 255));
        newG = Math.round(Utils.clamp(newG, 0, 255));
        newB = Math.round(Utils.clamp(newB, 0, 255));
        return this.getRGB(newR, newG, newB)
    };
    Color.getOverlayColor = function(rgb, bg, minAlpha) {
        bg = bg == null ? 16777215 : bg;
        minAlpha = minAlpha == null ? 0 : minAlpha;
        var newAlpha = this.getMinAlpha(rgb, bg);
        if (minAlpha > newAlpha) {
            newAlpha = minAlpha
        }
        var newRgb = this.adjustColorByAlpha(rgb, newAlpha, bg);
        return {
            alpha: newAlpha,
            rgb: newRgb
        }
    };
    Utils.rgb2hsv = function(rgb) {
        var h, s, v, r = Color.getR(rgb),
            g = Color.getG(rgb),
            b = Color.getB(rgb),
            max = Math.max(r, g, b),
            min = Math.min(r, g, b),
            diff = max - min;
        if (diff == 0) {
            h = 0
        } else if (r == max) {
            h = (g - b) / diff
        } else if (g == max) {
            h = (b - r) / diff + 2
        } else {
            h = (r - g) / diff + 4
        }
        h *= 60;
        if (h < 0) {
            h += 360
        }
        s = max == 0 ? 0 : (max - min) * 255 / max;
        v = max;
        return {
            h: h,
            s: s,
            v: v
        }
    };
    Utils.getLuminance = function(rgb) {
        var lum = (Color.getR(rgb) * .299 + Color.getG(rgb) * .587 + Color.getB(rgb) * .114) / 255;
        return lum
    };
    Utils.hsv2rgb = function(h, s, v) {
        s = Utils.clamp(s, 0, 255);
        v = Utils.clamp(v, 0, 255);
        h = Utils.clamp(h, 0, 360);
        s = s / 255;
        var hi = Math.floor(h / 60) % 6;
        var f = h / 60 - Math.floor(h / 60);
        var p = v * (1 - s);
        var q = v * (1 - f * s);
        var t = v * (1 - (1 - f) * s);
        var r, g, b;
        switch (hi) {
            case 0:
                r = v;
                g = t;
                b = p;
                break;
            case 1:
                r = q;
                g = v;
                b = p;
                break;
            case 2:
                r = p;
                g = v;
                b = t;
                break;
            case 3:
                r = p;
                g = q;
                b = v;
                break;
            case 4:
                r = t;
                g = p;
                b = v;
                break;
            case 5:
                r = v;
                g = p;
                b = q;
                break
        }
        return Color.getRGB(r, g, b)
    };
    if (!A.gotStyle) {
        A.gotStyle = true;
        Browser.loadStylesheet("https://static01.nyt.com/packages/css/newsgraphics/projects/election_2012/nov6_maps/election-map.css")
    }
    var flashHome = "https://static01.nyt.com/packages/flash/newsgraphics/projects/election_2012/primary_maps/";
    Map.init({
        flashUrl: flashHome + "hybrid_map_03.swf",
        preferFlash: false
    });
    Opts.copyAllParams(Election2012, {
        ZOOM_ENABLED: !Browser.touchEnabled,
        BIG_MAP_WIDTH: 840,
        BIG_MAP_HEIGHT: 540,
        BIG_MAP_PROJECTION: new AlbersUSASpecial,
        STATE_MAP_WIDTH: 400,
        STATE_MAP_HEIGHT: 400,
        STATE_MAP_PROJECTION: new Mercator,
        NO_LABEL_STATES: "DC,HI,VT,NH,MA,RI,CT,DE,MD,PR,NJ",
        NATIONAL_MAP_BAKED_WIDTHS: [1004, 940, 780, 620, 580, 460, 300, 220, 156, 108],
        NATIONAL_MAP_BAKED_VIEWS: [Election2012.STATE_WINNER_VIEW],
        NATIONAL_MAP_WH_RATIO: 1.7,
        loadShapeFiles: function(index, callback) {
            var w = new Waiter;
            Utils.forEach(index, function(url, key) {
                var loader = new ScriptLoader(url, "utf-16be");
                w.waitFor(loader)
            });
            w.startWaiting();
            w.on("ready", callback)
        },
        getBigMapOpts: function(electionType) {
            var obj = {
                national_map: true,
                width: this.BIG_MAP_WIDTH,
                height: this.BIG_MAP_HEIGHT,
                crs: new MapCRS(this.BIG_MAP_PROJECTION),
                center: MapOpts.ALBERS_US_CENTER.clone(),
                spacing: 10,
                widthKm: MapOpts.ALBERS_US_WIDTH_KM,
                heightKm: MapOpts.ALBERS_US_HEIGHT_KM,
                limitPanning: true,
                scrollWheelZoom: false,
                doubleClickZoom: false,
                dragging: false,
                zooming: false,
                pinchZoom: false,
                show_gains: true,
                enable_pinch: true
            };
            obj.enable_zooming = true;
            if (electionType == "house") {
                obj.initial_view = Election2012.DISTRICT_WINNER_VIEW;
                obj.views = [obj.initial_view]
            } else {
                obj.views = [Election2012.STATE_WINNER_VIEW, Election2012.COUNTY_MARGIN_VIEW, Election2012.COUNTY_MARGIN_BUBBLE_VIEW];
                obj.initial_view = Election2012.STATE_WINNER_VIEW
            }
            return obj
        },
        getSyndicationMapOpts: function(electionType) {
            var obj = {
                crs: new MapCRS(this.BIG_MAP_PROJECTION),
                center: MapOpts.ALBERS_US_CENTER.clone(),
                widthKm: MapOpts.ALBERS_US_WIDTH_KM
            };
            return obj
        },
        getStateMapOpts: function(electionType) {
            var obj = {
                spacing: 2,
                width: this.STATE_MAP_WIDTH,
                crs: new MapCRS(this.STATE_MAP_PROJECTION),
                height: this.STATE_MAP_HEIGHT,
                dragging: false,
                doubleClickZoom: false,
                scrollWheelZoom: false,
                views: [Election2012.COUNTY_MARGIN_VIEW, Election2012.COUNTY_MARGIN_BUBBLE_VIEW, Election2012.COUNTY_COXA_CHANGE_VIEW, Election2012.DISTRICT_WINNER_VIEW]
            };
            if (electionType == "house") {
                obj.initial_view = Election2012.DISTRICT_WINNER_VIEW
            } else {
                obj.initial_view = Election2012.COUNTY_MARGIN_VIEW
            }
            return obj
        }
    });
    Election2012.BigMapStateStyle = {
        strokeWeight: 1,
        strokeAlpha: 1,
        strokeColor: 0,
        fillColor: 0,
        fillAlpha: 0
    };
    Election2012.BigMapCountyStyle = {};

    function VoteMap(div, opts) {
        if (opts.disable_zooming) {
            opts.doubleClickZoom = false;
            opts.scrollWheelZoom = false;
            opts.pinchZoom = false
        }
        if (opts.enable_pinch && Browser.touchEnabled) {
            opts.pinchZoom = true;
            opts.limitPanning = true;
            opts.dragging = true
        }
        opts.combineLayers = false;
        if (!opts.initial_view || !Utils.contains(opts.views, opts.initial_view)) {
            trace("*** [VoteMap()] Missing initial_view or initial_view not in views; initial_view:", opts.initial_view, "views:", opts.views)
        }
        if (!opts.width) {
            trace("*** [VoteMap()] Missing map width")
        }
        this._selectOnHover = Browser.touchEnabled;
        this._opts = opts;
        this._div = div;
        this.initMap()
    }
    Opts.inherit(VoteMap, Waiter);
    VoteMap.prototype.setMapView = function(view) {
        if (!this._map) {
            opts.initial_view = view
        } else {
            this._map.views.setView(view)
        }
    };
    VoteMap.prototype.updateSpacingByWidth = function(w) {
        var values = [1, 2, 3, 4];
        var breaks = [200, 300, 500];
        var spacing = values[Utils.getClassId(w, breaks)];
        var opts = this._opts;
        if (this._map) {
            this._map._spacing = null;
            opts = this._map._opts
        }
        opts.spacing = spacing
    };
    VoteMap.prototype.initMap = function() {
        var mapOpts = this._opts;
        var map = this._map = new Map(this._div, mapOpts);
        this.waitFor(map);
        this.startWaiting();
        if (!this._opts.disable_popup) {
            this._popup = new HTMLPopup(null, {
                map: this._map,
                offset: E.USE_FLASH ? 24 : 18
            })
        }
        var w = this._loader = new Waiter;
        w.on("ready", function() {
            this.initLayers();
            map.views.setView(mapOpts.initial_view);
            map.display()
        }, this)
    };
    VoteMap.prototype.initView = function(name) {
        var view = this._map.views.getView(name);
        var styler;
        trace("** [VoteMap.initView()]", name);
        if (name == Election2012.STATE_WINNER_VIEW) {
            if (this._opts.enable_zooming && this._countyData && !this._opts.no_counties) {
                var countyLyr = this.getCountyLayer();
                styler = this.getCountyZoomStyler();
                view.setLayerStyler(countyLyr, styler);
                view.setLayerInteraction(countyLyr, true)
            }
            var stateLyr = this.getStateLayer();
            styler = this.getStateWinStyler(this._stateRawData, this._stateData);
            view.setLayerStyler(stateLyr, styler);
            view.setLayerInteraction(stateLyr, true);
            var labelLyr = this.getStateLabelLayer(this._stateData);
            view.showLayer(labelLyr);
            view.on("enter", function(evt) {
                this.updateStateGainStyler(styler)
            }, this);
            view.on("leave", function(evt) {
                stateLyr.hide();
                labelLyr.hide()
            }, this)
        } else if (name == Election2012.COUNTY_MARGIN_VIEW) {
            var countyLyr = this.getCountyLayer();
            styler = this.getWinPctStyler(this._countyRawData, this._countyData);
            this.initStylerStroke(styler);
            view.setLayerStyler(countyLyr, styler);
            view.setLayerInteraction(countyLyr, true);
            view.on("leave", function(evt) {
                countyLyr.hide()
            }, this)
        } else if (name == E.COUNTY_COXA_CHANGE_VIEW) {
            var countyLyr = this.getCountyLayer();
            var styler = new DataStyler(this._countyData);
            styler.setDefaultStyle({
                fillColor: 14869218,
                fillAlpha: 1,
                hoverStrokeWeight: 1,
                hoverStrokeAlpha: 1,
                hoverStrokeColor: 0,
                strokeColor: 16777215,
                strokeAlpha: .3,
                strokeWeight: 1
            });
            view.setLayerStyler(countyLyr, styler);
            view.setLayerInteraction(countyLyr, true);
            var changeLyr = this.getChangeLayer(this._countyRawData, this._countyData);
            view.showLayer(changeLyr);
            view.on("leave", function(evt) {
                countyLyr.hide();
                changeLyr.hide()
            }, this)
        } else if (name == Election2012.COUNTY_MARGIN_BUBBLE_VIEW) {
            var countyLyr = this.getCountyLayer();
            view.setLayerStyle(countyLyr, {
                fillColor: 14869218,
                fillAlpha: 1,
                strokeColor: 16777215,
                strokeAlpha: .2,
                strokeWeight: 1
            });
            var countyCircleLayer = this.getCountyCircleLayer();
            styler = this.getMarginBubbleStyler(this._countyRawData, this._countyData);
            view.setLayerStyler(countyCircleLayer, styler);
            view.setLayerInteraction(countyCircleLayer, true);
            view.on("leave", function(evt) {
                countyCircleLayer.hide();
                countyLyr.hide()
            }, this)
        } else if (name == Election2012.DISTRICT_WINNER_VIEW) {
            if (this._opts.national_map) {
                var stateLayer = this.getStateLayer();
                stateLayer.hide()
            }
            var houseLayer = this.getHouseLayer();
            styler = this.getWinStyler(this._houseRawData, this._houseData);
            view.setLayerStyler(houseLayer, styler);
            view.setLayerInteraction(houseLayer, true);
            view.on("leave", function(evt) {
                houseLayer.hide()
            })
        } else if (name == Election2012.STATE_FORECAST_VIEW) {
            stateLyr = this.getStateLayer();
            styler = this.getForecastStyler(this._stateRawData, this._stateData);
            view.setLayerStyler(stateLyr, styler);
            view.setLayerInteraction(stateLyr, false);
            var labelLyr = this.getStateLabelLayer(this._stateData)
        } else if (name == Election2012.COUNTY_VOTES_BUBBLE_VIEW) {
            var countyLyr = this.getCountyLayer();
            view.setLayerStyle(countyLyr, {
                fillColor: 14869218,
                fillAlpha: 1
            });
            var countyCircleLayer = this.getCountyCircleLayer();
            styler = this.getVotesBubbleStyler(this._countyRawData, this._countyData);
            view.setLayerStyler(countyCircleLayer, styler);
            view.setLayerInteraction(countyCircleLayer, true);
            view.on("leave", function(evt) {
                countyCircleLayer.hide();
                countyLyr.hide()
            }, this)
        } else if (name == Election2012.COUNTY_HOLLOW_BUBBLE_VIEW) {
            var countyLyr = this.getCountyLayer();
            view.setLayerStyle(countyLyr, {
                fillColor: 14869218,
                fillAlpha: 1
            });
            var countyCircleLayer = this.getCountyCircleLayer();
            styler = this.getHollowBubbleStyler(this._countyRawData, this._countyData);
            view.setLayerStyler(countyCircleLayer, styler);
            view.setLayerInteraction(countyCircleLayer, true);
            view.on("leave", function(evt) {
                countyCircleLayer.hide();
                countyLyr.hide()
            }, this)
        } else if (name == E.SIDE_BY_SIDE_VIEW) {
            var sbsPanel = new SideBySidePanel(this);
            view.on("enter", function() {
                sbsPanel.show()
            });
            view.on("leave", function() {
                sbsPanel.hide()
            })
        }
        this._opts.national_map && this.getStateLineLayer();
        if (!this._map._opts.no_counties) {
            var cityLabelLyr = this.getCityLabelLayer()
        }
    };
    VoteMap.prototype.initLayers = function() {
        var views = this._opts.views;
        var index = Utils.arrayToIndex(views);
        for (var i = 0; i < views.length; i++) {
            var viewName = views[i];
            var view = this.initView(viewName)
        }
    };
    VoteMap.prototype.displayMap = function() {
        this._loader.startWaiting()
    };
    VoteMap.prototype.loadShapeFile = function(obj) {
        if (obj.shape_url && obj.shape_name) {
            var types = obj.shape_types || obj.shape_type || C.POLYGONS;
            var data = new ShapeData(types);
            var loader = new ScriptLoader(obj.shape_url, "utf-16be", {
                no_bust: true
            });
            loader.on("ready", function() {
                data.importFromString(nytg.data[obj.shape_name], {
                    transform: obj.shape_transform
                })
            }, this)
        } else {
            trace("[VoteMap.loadShapeFile()] Expecting shape_url and shape_name properties; found:", Utils.getKeys(obj))
        }
        return data
    };
    VoteMap.prototype.update = function(obj) {
        var countyData = obj.county_data;
        var stateData = obj.state_data;
        var houseData = obj.house_data;
        if (!(countyData || stateData || houseData)) {
            trace("[VoteMap.update()] missing one or more expected data properties: county_data, state_data, house_data");
            return
        }
        countyData && this.updateCountyData(countyData);
        stateData && this.updateStateData(stateData);
        houseData && this.updateHouseData(houseData);
        this.refreshAfterUpdate()
    };
    VoteMap.prototype.refreshAfterUpdate = function() {
        var lyr = this._stateLyr;
        lyr && lyr.styler && lyr.styler.invalidate();
        lyr = this._countyLyr;
        lyr && lyr.styler && lyr.styler.invalidate();
        var map = this._map;
        map && map.isReady() && map.refreshLayers();
        if (this._haveSelection) {
            this.triggerSelect(this._selectedRecord, this._selectedGeoType, false)
        }
    };
    VoteMap.prototype.selectEvent = function(callback) {
        this.on("select", function(evt) {
            callback(evt.data)
        })
    };
    VoteMap.prototype.deselectEvent = function(callback) {
        this.on("deselect", function(evt) {
            callback()
        })
    };
    VoteMap.prototype.initHouseData = function(obj) {
        if (obj.geo_data) {
            this._houseShapeData = obj.shape_data || this.loadShapeFile(obj);
            this._houseData = new DataTable(obj.geo_data)
        }
        obj.importer && this.updateHouseData(obj.raw_data, obj.importer)
    };
    VoteMap.prototype.updateHouseData = function(raw, importer) {
        this._houseImporter = importer || this._houseImporter;
        if (!this._houseData) {
            trace("[VoteMap.updateHouseData()] Missing this._houseData");
            return
        }
        raw = raw.races || raw;
        this._houseRawData = raw;
        this._houseImporter(raw, this._houseData, "KEY");
        var styler = this._houseLyr && this._houseLyr.styler;
        styler && styler.invalidate()
    };
    VoteMap.prototype.initStateData = function(obj) {
        if (obj.geo_data) {
            obj.shape_types = [C.POLYGONS, C.INNERLINES];
            this._stateShapeData = this.loadShapeFile(obj);
            this._stateData = new DataTable(obj.geo_data)
        }
        if (obj.importer && obj.raw_data) {
            this.updateStateData(obj.raw_data, obj.importer)
        }
    };
    VoteMap.prototype.updateStateData = function(raw, importer) {
        this._stateImporter = importer || this._stateImporter;
        if (!this._stateData) {
            trace("[VoteMap.updateStateData()] Missing this._stateData()");
            return
        }
        raw = raw.races || raw;
        this._stateRawData = raw;
        this._stateImporter(raw, this._stateData, "STATE");
        var styler = this._stateLyr && this._stateLyr.styler;
        styler && styler.invalidate()
    };
    VoteMap.prototype.initCountyData = function(obj) {
        if (obj.geo_data) {
            this._countyShapeData = obj.shape_data || this.loadShapeFile(obj);
            this._countyData = new DataTable(obj.geo_data)
        }
        obj.importer && this.updateCountyData(obj.raw_data, obj.importer)
    };
    VoteMap.prototype.updateCountyData = function(raw, importer) {
        this._countyImporter = importer || this._countyImporter;
        if (!raw) {} else if (!this._countyData) {
            this._opts.county_data = raw
        } else {
            this._countyRawData = raw;
            var retn = this._countyImporter(raw, this._countyData, "FIPS");
            var styler = this._countyLyr && this._countyLyr.styler;
            styler && styler.invalidate();
            this._countyImportData = retn
        }
    };
    VoteMap.prototype.triggerSelect = function(rec, geoType, zoom, tween) {
        var data = this.getLocationData(rec, geoType);
        this._haveSelection = true;
        this._selectedRecord = rec.clone();
        this._selectedGeoType = geoType;
        this._selectedState = data.state_id;
        if (zoom !== false && this._opts.national_map) {
            this.zoomToState(data.state_id, tween)
        }
        this.dispatchEvent("select", data)
    };
    VoteMap.prototype.handleClick = function(evt) {
        this.triggerSelect(evt.rec, evt.target._opts.geography_type)
    };
    var zoomLocations = {
        nyc: {
            lat: 40.741014,
            lng: -74.042358,
            zoom: 5
        }
    };
    VoteMap.prototype.selectState = function(st, zoom, tween) {
        if (!this._stateData) {
            trace("[VoteMap.selectState()] Missing state data; returning");
            return
        }
        var rec = this._stateData.getMatchingRecord("STATE", st);
        this.triggerSelect(rec, "state", zoom, tween)
    };
    VoteMap.prototype.selectLocation = function(rec, geotype, zoom, tween) {};
    VoteMap.prototype.zoomToState = function(st, allowTween) {
        if (this._opts.enable_zooming === false) {
            return
        }
        var stateRec = this._stateData.getMatchingRecord("STATE", st);
        if (stateRec.isNull()) {
            trace("[VoteMap.handleClick()] State not found:", st);
            return
        }
        trace("[zoomToState()] st:", st);
        if (A.selectedState == st) {}
        A.selectedState = st;
        var evt = {
            rec: stateRec.clone(),
            state: st
        };
        this.dispatchEvent("select_state", evt);
        if (!this._opts.disable_zooming) {
            var sym = this._stateLyr.getSymbolById(stateRec.id);
            var zoomOpts = {
                bounds: sym,
                spacing: 25
            };
            zoomOpts.tween = allowTween !== false && Browser.touchEnabled == false;
            if (this._panel) {
                var spacing = [4, 4, 4 + this._panel.width, 4];
                zoomOpts.spacing = spacing
            }
            this._map.zoom(zoomOpts)
        }
    };
    VoteMap.prototype.zoomOut = function() {
        A.selectedState = null;
        A.selectedFips = null;
        this.dispatchEvent("deselect_state");
        var zoomOpts = {
            bounds: this._map.getInitialBounds()
        };
        this._map.zoom(zoomOpts)
    };
    VoteMap.prototype.formatPct = function(pct, nan) {
        return nan ? "-" : Utils.formatNumber(pct, 1) + "%"
    };
    VoteMap.prototype.formatVotes = function(votes, nan) {
        return nan ? "-" : Utils.formatNumber(votes)
    };
    VoteMap.prototype.formatChange = function(margin, nan) {
        return nan ? "-" : Utils.formatNumber(margin, 1, "-", true) + "%"
    };
    VoteMap.prototype.getChangeObj = function(party, nan, votes2012, pct2012, votesPast, pctPast) {
        var obj = {
            party: party == "DEM" && "Dem." || party == "REP" && "Rep." || "Others",
            pctNow: this.formatPct(pct2012, nan),
            votesNow: this.formatVotes(votes2012, nan),
            change: this.formatChange(pct2012 - pctPast, nan),
            pctPast: this.formatPct(pctPast),
            votesPast: this.formatVotes(votesPast)
        };
        return obj
    };
    VoteMap.prototype.getChangeTable = function(cands, obj, panel) {
        var html = "";
        if (obj.noElection) {
            return html
        }
        var year = this.changeMapYear0;
        var data = [];
        var dem = 0;
        var rep = 0;
        var tot = obj.total_votes;
        for (var i = 0; i < cands.length; i++) {
            var cand = cands[i];
            if (cand.party == "DEM") {
                dem = cand.votes
            } else if (cand.party == "REP") {
                rep = cand.votes
            }
        }
        var demPct = tot > 0 ? dem / tot * 100 : 0;
        var repPct = tot > 0 ? rep / tot * 100 : 0;
        var oth = tot - dem - rep;
        var othPct = tot > 0 ? oth / tot * 100 : 0;
        var dem0 = obj["d" + year];
        var rep0 = obj["r" + year];
        var tot0 = obj["tv" + year];
        var dem0Pct = tot0 > 0 ? dem0 / tot0 * 100 : 0;
        var rep0Pct = tot0 > 0 ? rep0 / tot0 * 100 : 0;
        var oth0 = tot0 - dem0 - rep0;
        var oth0Pct = tot0 > 0 ? oth0 / tot0 * 100 : 0;
        var nan = tot == 0;
        var demObj = this.getChangeObj("DEM", nan, dem, demPct, dem0, dem0Pct);
        var repObj = this.getChangeObj("REP", nan, rep, repPct, rep0, rep0Pct);
        var othObj = this.getChangeObj("OTH", nan, oth, othPct, oth0, oth0Pct);
        var arr = rep > dem ? [repObj, demObj, othObj] : [demObj, repObj, othObj];
        var head = panel ? Utils.format('<tr><th class="nytg-change-party">Party</th><th class="nytg-change-pct">2012</th><th class="nytg-change-pct">%s</th><th class="nytg-change-points">Change</th></tr>', year) : Utils.format('<tr><th class="nytg-change-party"></th><th class="nytg-change-th2" colspan="2">Vote in 2012</th><th class="nytg-change-th2" colspan="2">Vote in %s</th></tr>', year);
        var body = "";
        for (var i = 0; i < arr.length; i++) {
            var obj = arr[i];
            var tdClass = i > 0 ? " nytg-popup-lower-row" : "";
            body += !panel ? Utils.format('<tr><td class="nytg-change-party%s">%s</td><td class="nytg-change-votes%s">%s</td><td class="nytg-change-pct%s">%s</td><td class="nytg-change-votes%s">%s</td><td class="nytg-change-pct%s">%s</td></tr>', tdClass, obj.party, tdClass, obj.votesNow, tdClass, obj.pctNow, tdClass, obj.votesPast, tdClass, obj.pctPast) : Utils.format('<tr><td class="nytg-change-party">%s</td><td class="nytg-change-pct">%s</td><td class="nytg-change-pct">%s</td><td class="nytg-change-points">%s</td></td>', obj.party, obj.pctNow, obj.pctPast, obj.change)
        }
        html = '<table cellpadding="0" cellspacing="0">' + head + body + "</table>";
        return html
    };
    VoteMap.prototype.getPopupTable = function(cands, obj) {
        var html = "";
        if (this._map.views.getCurrentView().name == E.COUNTY_MARGIN_CHANGE_VIEW) {
            html += this.getChangeTable(cands, obj, false)
        } else {
            html += '<table cellpadding="0" cellspacing="0"><tbody>';
            var row = '<tr><td class="nytg-popup-candidate%s">%s%s</td><td class="nytg-panel-party%s">%s</td><td class="nytg-popup-vote%s">%s</td><td class="nytg-popup-votepct%s">%s</td></tr>';
            for (var i = 0; i < cands.length; i++) {
                var cand = cands[i];
                var tdClass = i > 0 ? " nytg-popup-lower-row" : "";
                var pctStr = cand.pct_str + "%";
                html += Utils.format(row, tdClass, cand.cand_shortname, cand.incumbent && obj.show_incumbent ? "*" : "", tdClass, cand.party_abbr, tdClass, cand.votes_str, tdClass, pctStr)
            }
            html += "</tbody></table>"
        }
        return html
    };
    VoteMap.prototype.getPopupHTML = function(obj) {
        var titleStr = Utils.format('<div class="nytg-popup-title">%s</div>', obj.titleStr);
        if (obj.noElection || obj.no_county_data) {
            var html = titleStr + Utils.format('<div class="nytg-popup-note">%s</div>', obj.no_county_data ? "County data not available" : "No election");
            return html
        }
        var tableHTML = obj.candidates ? this.getPopupTable(obj.candidates, obj) : "";
        var template = titleStr + "<div>%s</div>";
        var subStr = obj.pollClosingStr || obj.reportingStr;
        var html = Utils.format(template, subStr);
        html += tableHTML;
        if (obj.show_incumbent) {
            html += '<div class="nytg-popup-note">* Incumbent</div>'
        }
        return html
    };
    VoteMap.prototype.getStateWinnerLongName = function(st) {
        var name = null;
        if (!this._stateData) {
            return null
        }
        var stateRec = this._stateData.getMatchingRecord("STATE", st);
        var rawIdx = stateRec.get("raw_idx");
        var results = this._stateRawData && this._stateRawData[rawIdx] && this._stateRawData[rawIdx].results;
        if (!results) {
            trace("[VoteMap.getStateWinnerLongName()] missing results data for state:", st, "keys:", Utils.getKeys(this._stateRawData));
            return null
        }
        for (var i = 0; i < results.length; i++) {
            var res = results[i];
            if (res.winner) {
                name = res.name;
                break
            }
        }
        return name
    };
    VoteMap.prototype.getLocationData = function(rec, geoType) {
        var electionType = this._opts.election_type;
        var obj = rec.getDataAsObject();
        obj.geography_type = geoType;
        obj.election_type = electionType;
        var title = "";
        var st = obj.STATE || obj.STATE_FIPS && StateFips.getState(obj.STATE_FIPS) || "";
        var stateName = StateNames.getName(st);
        obj.state_id = st;
        var title = "";
        if (geoType == "state") {
            title = stateName
        } else if (geoType == "house_district") {
            if (Election2012.SingleDistrictStates.indexOf(st) != -1) {
                title = stateName
            } else {
                var stateAbbr = StateNames.getAbbrev(st);
                title = stateAbbr + " " + obj.DISTRICT + Utils.getOrdinalSuffix(obj.DISTRICT) + " District"
            }
        } else if (geoType == "county") {
            var countyName = geoType == "county" ? CountyNames.adjustName(st, obj.NAME) : "";
            title = countyName;
            if (st == "AK" && geoType == "county") {
                obj.no_county_data = true
            }
        }
        obj.titleStr = title;
        if (geoType == "county" && this._opts.national_map) {
            obj.titleStr += ", " + StateNames.getAbbrev(st)
        }
        if (obj.total_votes === void 0) {
            obj.noElection = true;
            obj.noElectionNote = "No election";
            return obj
        }
        if (geoType == "county") {
            var rawData = this._countyRawData;
            var rawCands = Election2012.getCountyCandidateData(st, obj, rawData);
            var winnerName = this.getStateWinnerLongName(st);
            obj.called = !!winnerName
        } else if (geoType == "house_district") {
            rawData = this._houseRawData;
            rawCands = Election2012.getCandidateData(obj, rawData)
        } else if (geoType == "state") {
            rawData = this._stateRawData;
            rawCands = Election2012.getCandidateData(obj, rawData)
        }
        var destCands = [];
        var haveIncumbent = false;
        if (rawCands) {
            Utils.sortOn(rawCands, "votes", false, "cand_shortname", true);
            obj.candidates = destCands;
            var otherVotes = 0;
            for (var i = 0; i < rawCands.length; i++) {
                var cand = rawCands[i];
                var votes = cand.votes;
                var pct = cand.vote_pct;
                var partyCode = cand.party;
                haveIncumbent |= cand.incumbent || false;
                if (geoType == "county") {
                    cand.winner = winnerName == cand.cand_longname
                }
                if (partyCode == "REP" || partyCode == "DEM" || votes > 0 && pct > 10 || cand.cand_longname == "Angus King" || cand.cand_longname == "Bernard Sanders") {
                    cand.votes_str = Utils.formatNumber(cand.votes);
                    cand.party_name = Election2012.getPartyName(cand.party);
                    cand.party_abbr = Election2012.getPartyAbbr(cand.party);
                    cand.pct_str = Utils.formatNumber(cand.vote_pct, 1);
                    destCands.push(cand)
                } else {
                    otherVotes += votes
                }
            }
            if (otherVotes > 0) {
                var otherPct = otherVotes / obj.total_votes * 100;
                var other = {
                    cand_shortname: "Others",
                    cand_longname: "Other candidates",
                    votes_str: Utils.formatNumber(otherVotes),
                    votes: otherVotes,
                    party: "",
                    party_name: "",
                    party_abbr: "",
                    pct_str: Utils.formatNumber(otherPct, 1),
                    vote_pct: otherPct
                };
                destCands.push(other)
            }
        } else {}
        obj.show_incumbent = haveIncumbent && electionType != "president" || false;
        var reportingStr = "";
        if (obj.total_votes > 0) {
            reportingStr = obj.pct_reporting ? obj.pct_reporting + "% reporting" : "<1% reporting"
        } else {
            reportingStr = "0% reporting"
        }
        obj.reportingStr = reportingStr;
        return obj
    };
    VoteMap.prototype.handleRollOver = function(evt) {
        var target = evt.target;
        var geoType = target._opts.geography_type;
        if (this._selectOnHover) {
            this.triggerSelect(evt.rec, geoType)
        }
        var data = this.getLocationData(evt.rec, geoType);
        var html = this.getPopupHTML(data);
        var popup = this._popup;
        popup && popup.showHTML(html)
    };
    VoteMap.prototype.triggerDeselect = function() {
        if (this._haveSelection) {
            this._haveSelection = false;
            this.dispatchEvent("deselect")
        }
    };
    VoteMap.prototype.handleRollOut = function(evt) {
        this._popup && this._popup.hide();
        var targ = evt.target;
        var geoType = targ._opts.geography_type;
        if (this._selectOnHover) {
            this.triggerDeselect()
        }
    };

    function BigMap(div, opts) {
        this.__super__(div, opts)
    }
    Opts.inherit(BigMap, VoteMap);
    VoteMap.prototype.initInteractiveLayer = function(lyr) {
        lyr.on("rollover", this.handleRollOver, this);
        lyr.on("rollout", this.handleRollOut, this);
        lyr.on("click", this.handleClick, this)
    };
    VoteMap.prototype.getCityLabelLayer = function() {
        if (!nytg.data.election2012_city_labels) {
            trace("[VoteMap.getCityLabelLayer()] Missing label data (nytg.data.election2012_city_labels)");
            return null
        }
        if (!this._cityLabelLyr) {
            var labelTable = new DataTable(nytg.data.election2012_city_labels);
            var labelData = new LabelData;
            var proj = this._map.getCRS().projection;
            labelData.importFromDataTable(labelTable, "lat", "lng", proj);
            var lyr = this._cityLabelLyr = new LabelLayer({
                symbols: labelData
            });
            lyr.hide();
            this._opts.national_map && lyr.hide();
            var labelStyler = new DataStyler(labelTable);
            labelStyler.setDefaultStyle({
                placement: "e",
                size: 13,
                dotSize: 4,
                useHalo: true
            });
            labelStyler.setAttributeStyler("text", "name");
            labelStyler.setAttributeStyler("placement", "pos3");
            labelStyler.setAttributeStyler("hidden", function(rec) {
                if (!A.selectedState) {
                    return false
                }
                var st = rec.get("st");
                return A.selectedState != st
            }, this);
            lyr.setStyler(labelStyler);
            this._map.addLayer(lyr);
            this.on("select_state", function() {
                labelStyler.getAttributeStyler("hidden").invalidate()
            });
            this.on("zoomed_in", function() {
                labelStyler.getAttributeStyler("hidden").invalidate();
                lyr.show()
            });
            this.on("zoomed_out", function() {
                lyr.hide()
            })
        }
        return this._cityLabelLyr
    };
    VoteMap.prototype.getStateLabelLayer = function(states) {
        var opts = this._opts;
        if (false && opts.width < 350) {
            return null
        }
        if (!nytg.data.state_labels) {
            trace("[VoteMap.getStateLabelLayer()] Missing label data (nytg.data.state_labels)");
            return null
        }
        if (!this._stateLabelLyr) {
            var labelTable = new DataTable(nytg.data.state_labels);
            states.joinTableByKey("STATE", labelTable, "STATE");
            var labelData = new LabelData;
            var proj = this._map.getCRS().projection;
            labelData.importFromDataTable(states, "LABEL_LAT", "LABEL_LNG", proj);
            var lyr = this._stateLabelLyr = new LabelLayer({
                symbols: labelData
            });
            var styler = this.getStateLabelStyler(states);
            lyr.setStyler(styler);
            this._map.addLayer(lyr);
            this.on("zoomed_in", function() {
                lyr.hide()
            });
            this.on("zoomed_out", function() {
                var currView = this._map.views.getCurrentView().name;
                if (currView == "state_winner_view" || currView == "district_winner_view") {
                    lyr.show()
                }
            }, this);
            this._map.views.addEventListener("change", function(evt) {
                mapView = evt.next_view;
                var hidden = mapView == E.COUNTY_COXA_CHANGE_VIEW || mapView == E.COUNTY_MARGIN_BUBBLE_VIEW;
                if (hidden) {
                    lyr.hide()
                } else {
                    lyr.show()
                }
            })
        }
        return this._stateLabelLyr
    };
    VoteMap.prototype.getStateLayer = function(opts) {
        if (!this._stateLyr) {
            var lyr = this._stateLyr = new ShapeLayer(this._stateShapeData, {
                geography_type: "state"
            });
            this._map.addLayer(lyr);
            this.initInteractiveLayer(lyr)
        }
        return this._stateLyr
    };
    VoteMap.prototype.getStateLineLayer = function() {
        if (!this._stateLineLyr) {
            var lyr = this._stateLineLyr = new ShapeLayer(this._stateShapeData, {
                geography_type: "state",
                shapeType: C.INNERLINES,
                zIndex: 8
            });
            var styler = new SymbolStyler({
                strokeWeight: 1,
                strokeColor: 16777215,
                strokeAlpha: 1,
                fillAlpha: 0
            });
            lyr.setStyler(styler);
            var map = this._map;

            function updateStroke() {
                var w = map.getWidthInPixels();
                var stroke = w > 620 ? 2 : 1;
                var alpha = w < 320 ? .5 : 1;
                styler.setAttributeStyle("strokeWeight", stroke);
                styler.setAttributeStyle("strokeAlpha", alpha);
                styler.invalidate()
            }
            updateStroke();
            this._map.on("resize", updateStroke, this, 3e3);
            this._map.addLayer(lyr)
        }
        return this._stateLineLyr
    };
    VoteMap.prototype.getHouseLayer = function(opts) {
        if (!this._houseLyr) {
            var lyr = this._houseLyr = new ShapeLayer(this._houseShapeData, {
                geography_type: "house_district"
            });
            this._map.addLayer(lyr);
            this.initInteractiveLayer(lyr)
        }
        return this._houseLyr
    };
    VoteMap.prototype.getCountyLayer = function(opts) {
        if (!this._countyLyr) {
            var lyr = this._countyLyr = new ShapeLayer(this._countyShapeData, {
                geography_type: "county",
                shapeType: C.POLYGONS
            });
            this._map.addLayer(lyr);
            this.initInteractiveLayer(lyr)
        }
        return this._countyLyr
    };
    VoteMap.prototype.getCountyCircleLayer = function(opts) {
        if (!this._countyCircleLyr) {
            var proj = this._opts.crs.projection;
            var circleData = (new CircleData).importFromDataTable(this._countyData, "LAT", "LNG", proj);
            var lopts = {
                geography_type: "county",
                zIndex: 15
            };
            if (this._countyLyr) {}
            var lyr = this._countyCircleLyr = new CircleLayer(circleData, lopts);
            lyr.hide();
            this.initInteractiveLayer(lyr);
            this._map.addLayer(lyr)
        }
        return this._countyCircleLyr
    };
    VoteMap.prototype.getStateLabelStyler = function(states) {
        var labelStyler = new DataStyler(states);
        var mapView;
        labelStyler.setDefaultStyle({
            text: "label",
            placement: "c",
            fillColor: 0,
            size: 10
        });
        labelStyler.setAttributeStyler("text", function(rec) {
            var st = rec.get("ABBR");
            return st
        });
        var map = this._map;
        var updateSize = function() {
            var w = map.getWidthInPixels();
            var sizes = [9, 10, 11, 12, 13, 15];
            var breaks = [380, 450, 550, 750, 850];
            var idx = Utils.getClassId(w, breaks);
            var textSize = sizes[idx];
            labelStyler.setAttributeStyle("size", textSize)
        };
        updateSize();
        this._map.on("resize", updateSize, this, 200);
        this._map.views.addEventListener("change", function(evt) {
            mapView = evt.next_view;
            if (evt.prev_view) {
                labelStyler.getAttributeStyler("fillColor").invalidate();
                var useHalo = mapView != "state_winner_view";
                labelStyler.setAttributeStyle("useHalo", useHalo)
            }
        }, this);
        labelStyler.on("pre", function(evt) {
            w = this._map.getWidthInPixels()
        }, this);
        labelStyler.setAttributeStyler("hidden", function(rec) {
            var st = rec.get("STATE");
            if (w < 300) {
                return true
            }
            return Election2012.NoLabelStates.indexOf(st) != -1
        });
        var stateStyle;
        labelStyler.setPreFunction(function(style) {
            if (this._stateLyr) {
                stateStyle = this._stateLyr.getStyle()
            }
        }, this);
        labelStyler.setAttributeStyler("fillColor", function(rec) {
            var col = 0;
            if (mapView == "state_winner_view" && stateStyle && stateStyle.fillColor) {
                var fillCol = stateStyle.fillColor[rec.id];
                var lum = Utils.getLuminance(fillCol);
                col = lum > .4 ? 0 : 16777215
            }
            return col
        });
        return labelStyler
    };
    var defaultStyle = {
        hoverStrokeWeight: 2,
        hoverStrokeColor: 0,
        hoverStrokeAlpha: 1,
        fillColor: 15658734,
        fillAlpha: 1,
        strokeWeight: 1,
        strokeAlpha: .4,
        strokeColor: 11184810
    };
    var defaultBubbleScaling = .3;
    VoteMap.prototype.getHollowBubbleStyler = function(rawData, geoTable) {
        var styler = new DataStyler(geoTable);
        var style = {
            scaling: defaultBubbleScaling,
            fillColor: 0,
            strokeColor: 16777215,
            strokeAlpha: 1,
            strokeWeight: 1,
            fillAlpha: 0,
            hoverStrokeWeight: 2,
            hoverStrokeAlpha: 1,
            hoverStrokeColor: 0
        };
        styler.setDefaultStyle(style);
        styler.setAttributeStyler("hidden", function(rec) {
            return !rec.get("vote_margin")
        });
        styler.setAttributeStyler("bubbleSizes", function(rec) {
            var margin = rec.get("total_votes") || 0;
            var k = 1 / 600;
            var size = margin ? Math.sqrt(margin * k) : 0;
            return size
        });
        styler.setAttributeStyler("strokeColor", function(rec) {
            var col = rec.get("win_lead_color");
            return col
        });
        return styler
    };
    VoteMap.prototype.getVotesBubbleStyler = function(rawData, geoTable) {
        var styler = new DataStyler(geoTable);
        var style = {
            scaling: defaultBubbleScaling,
            fillColor: 0,
            bubbleSize: 10,
            strokeColor: 16777215,
            strokeAlpha: .2,
            strokeWeight: 1,
            fillAlpha: 1,
            hoverStrokeWeight: 1,
            hoverStrokeAlpha: 1,
            hoverStrokeColor: 0
        };
        styler.setDefaultStyle(style);
        var breaks = [4, 12, 20];
        var demCols = [14398954, 10993883, 8494022, 4480662];
        var repCols = [14398954, 15378856, 14840948, 12204595];
        var indCols = [15919803, 10473119, 7778934, 4294465];
        styler.setAttributeStyler("fillColor", function(rec) {
            var party = rec.get("leading_party");
            var margin = rec.get("vote_margin");
            var total = rec.get("total_votes");
            var col = 16764108;
            if (margin > 0) {
                var pct = margin / total * 100;
                var idx = Utils.getClassId(pct, breaks);
                if (party == "REP") {
                    col = repCols[idx]
                } else if (party == "DEM") {
                    col = demCols[idx]
                } else {
                    col = indCols[idx]
                }
            }
            return col
        });
        styler.setAttributeStyler("hidden", function(rec) {
            return !rec.get("vote_margin")
        });
        styler.setAttributeStyler("bubbleSizes", function(rec) {
            var margin = rec.get("total_votes") || 0;
            var k = 1 / 600;
            var size = margin ? Math.sqrt(margin * k) : 0;
            return size
        });
        return styler
    };
    VoteMap.prototype.getMarginBubbleStyler = function(rawData, geoTable, opts) {
        var style = {
            scaling: defaultBubbleScaling,
            fillColor: 0,
            bubbleSize: 10,
            strokeColor: 16777215,
            strokeAlpha: .2,
            strokeWeight: 1,
            fillAlpha: 1,
            hoverStrokeWeight: 1,
            hoverStrokeAlpha: 1,
            hoverStrokeColor: 0
        };
        opts = opts || {};
        var _self = this;
        var styler = new DataStyler(geoTable);
        if (opts.hollow) {
            var colorAttr = "strokeColor";
            style.fillAlpha = 0;
            style.strokeAlpha = 1
        } else {
            colorAttr = "fillColor"
        }
        styler.setDefaultStyle(style);
        styler.setAttributeStyler(colorAttr, function(rec) {
            return rec.get("win_lead_color") || 16764108
        });
        styler.setAttributeStyler("hidden", function(rec) {
            return !rec.get("vote_margin")
        });
        var k = 0;
        styler.on("pre", function() {
            updateBubbleSizes()
        }, this);
        this._map.on("resize", updateBubbleSizes, this, 3e3);

        function updateBubbleSizes() {
            styler.getAttributeStyler("bubbleSizes").invalidate();
            var importData = _self._countyImportData;
            if (!importData) {
                trace("[updateBubbleSizes()] Missing import data for counties.");
                return
            }
            var len = geoTable.size();
            var w = _self._map.getWidthInPixels();
            var h = _self._map.getHeightInPixels();
            var avgShapeArea = w * h / len;
            var avgShapeRadius = Math.sqrt(avgShapeArea) / 1.7;
            var refBubbleRadius = avgShapeRadius * 1;
            var maxMargin = importData.maxMargin;
            var midMargin = importData.referenceMargin;
            var reporting = importData.maxMarginReporting;
            var refMargin = true || midMargin > 0 ? (maxMargin + midMargin) * .5 : maxMargin;
            k = refBubbleRadius * refBubbleRadius / refMargin / 1.2;
            if (_self._opts.national_map) {
                k *= 20
            }
        }
        styler.setAttributeStyler("bubbleSizes", function(rec) {
            var margin = rec.get("vote_margin") || 0;
            var size = margin ? Math.sqrt(margin * k) : 0;
            return size
        });
        updateBubbleSizes();
        return styler
    };
    VoteMap.prototype.getMarginChangeStyler = function(geoTable) {
        var demCols = Election2012.DEM_COLORS;
        var repCols = Election2012.REP_COLORS;
        var breaks = [5, 10, 15, 20];
        var styler = new DataStyler(geoTable);
        styler.setDefaultStyle(defaultStyle);
        styler.setAttributeStyler("fillColor", function(rec) {
            var marg08 = rec.get("MARGIN_08");
            var marg12 = 0;
            var tot12 = rec.get("total_votes");
            if (tot12 > 0) {
                var leadingParty = rec.get("leading_party");
                var mul = leadingParty == "DEM" && 100 || leadingParty == "REP" && -100 || 0;
                marg12 = rec.get("vote_margin") / tot12 * mul
            }
            var shift = 0;
            if (marg12 && marg08) {
                shift = marg12 - marg08
            }
            var col = Election2012.NO_ELECTION_COL;
            var idx = -1;
            var cols;
            if (shift == 0) {} else if (shift > 0) {
                idx = Utils.getClassId(shift, breaks);
                cols = demCols
            } else {
                cols = repCols;
                idx = Utils.getClassId(-shift, breaks)
            }
            if (idx > -1) {
                col = cols[idx]
            }
            return col
        });
        return styler
    };
    VoteMap.prototype.initStylerStroke = function(styler) {
        var map = this;

        function updateStroke() {
            var w = map._map.getWidthInPixels();
            trace(">>> initStylerStroke(); w:", w);
            var s = w < 330 ? 0 : 1;
            var a = w < 600 ? .2 : .3;
            styler.setAttributeStyle("strokeWeight", s);
            styler.setAttributeStyle("strokeAlpha", a);
            styler.invalidate()
        }
        updateStroke();
        map._map.on("resize", updateStroke, this, 3e3)
    };
    VoteMap.prototype.getWinPctStyler = function(rawData, geoTable) {
        var styler = new DataStyler(geoTable);
        styler.setDefaultStyle(defaultStyle);
        styler.setAttributeStyler("fillColor", function(rec) {
            return rec.get("margin_pct_color") || Election2012.NO_ELECTION_COL
        });
        return styler
    };
    VoteMap.prototype.getCountyZoomStyler = function() {
        var geoTable = this._countyData;
        var styler = this.getWinPctStyler(this._countyRawData, this._countyData);
        var hiddenStyler = styler.setAttributeStyler("hidden", function(rec) {
            var st = StateFips.getState(rec.get("STATE_FIPS"));
            return A.selectedState != st
        });
        this.on("select_state", function() {
            hiddenStyler.invalidate()
        }, this);
        this.on("zoomed_out", function() {
            hiddenStyler.invalidate()
        }, this);
        return styler
    };
    VoteMap.prototype.updateStateGainStyler = function(styler) {
        var opts = this._opts;
        var etype = opts.election_type;
        var showGains = opts.show_gains && (etype == "senate" || etype == "president");
        trace(">>>> [VoteMap.updateStateGainStyler()]; show?", showGains);
        if (showGains) {
            styler.setAttributeStyler("hatchColor", function(rec) {
                var party = rec.get("switch_party");
                if (!party) {
                    return 0
                } else if (party == "DEM") {
                    return E.DEM_SWITCH_COL
                } else if (party == "REP") {
                    return E.REP_SWITCH_COL
                }
                return E.IND_SWITCH_COL
            })
        } else {
            styler.setAttributeStyle("hatchColor", 0)
        }
    };
    VoteMap.prototype.getStateWinStyler = function(rawData, geoTable) {
        var styler = this.getWinStyler(rawData, geoTable);
        var opts = this._opts;
        if (!opts.syndication_map) {
            styler.setAttributeStyle("strokeWeight", 0)
        }
        if (!this._opts.no_counties) {
            var hiddenStyler = styler.setAttributeStyler("hidden", function(rec) {
                var st = rec.get("STATE");
                return A.selectedState == st
            });
            this.on("select_state", function() {
                hiddenStyler.invalidate()
            }, this);
            this.on("zoomed_out", function() {
                hiddenStyler.invalidate()
            }, this)
        }
        return styler
    };
    VoteMap.prototype.getWinStyler = function(rawData, geoTable) {
        var styler = new DataStyler(geoTable);
        styler.setDefaultStyle(defaultStyle);
        styler.setAttributeStyler("fillColor", function(rec) {
            return rec.get("win_lead_color") || Election2012.NO_ELECTION_COL
        });
        return styler
    };
    nytg = window.nytg || {};
    nytg.data = nytg.data || {};
    nytg.data.election2012_city_labels = {
        data: {
            name: ["Anchorage", "Fairbanks", "Juneau", "Mobile", "Huntsville", "Montgomery", "Birmingham", "Little Rock", "Fayetteville", "Jonesboro", "Tucson", "Phoenix", "Yuma", "Flagstaff", "San Francisco", "San Jose", "Sacramento", "Fresno", "San Diego", "Los Angeles", "Denver", "Colorado Springs", "Pueblo", "Boulder", "Bridgeport", "New Haven", "Hartford", "Wilmington", "Tallahassee", "Orlando", "Jacksonville", "Tampa", "Miami", "Macon", "Columbus", "Athens", "Atlanta", "Augusta", "Savannah", "Honolulu", "Hilo", "Cedar Rapids", "Des Moines", "Sioux City", "Davenport", "Council Bluffs", "Waterloo", "Dubuque", "Ames", "Iowa City", "Boise", "Idaho Falls", "Pocatello", "Rockford", "Peoria", "Springfield", "Chicago", "Gary", "Indianapolis", "Evansville", "Fort Wayne", "Wichita", "Topeka", "Louisville", "Lexington", "Shreveport", "Lafayette", "Baton Rouge", "New Orleans", "Worcester", "Boston", "Portland", "Bangor", "Baltimore", "Grand Rapids", "Ann Arbor", "Flint", "Detroit", "Marquette", "Traverse City", "Rochester", "Duluth", "Minneapolis", "Kansas City", "Springfield", "St. Louis", "Columbia", "Jackson", "Hattiesburg", "Tupelo", "Biloxi", "Missoula", "Great Falls", "Billings", "Helena", "Charlotte", "Raleigh", "Fayetteville", "Greensboro", "Fargo", "Bismarck", "Grand Forks", "Lincoln", "Omaha", "Manchester", "Rochester", "Trenton", "Newark", "Atlantic City", "Camden", "Albuquerque", "Santa Fe", "Las Cruces", "Reno", "Las Vegas", "Buffalo", "Rochester", "Syracuse", "Albany", "New York City", "Cincinnati", "Dayton", "Toledo", "Columbus", "Cleveland", "Akron", "Lawton", "Oklahoma City", "Tulsa", "Medford", "Eugene", "Bend", "Salem", "Portland", "Erie", "Pittsburgh", "Allentown", "Philadelphia", "Providence", "Columbia", "Charleston", "Greenville", "Sioux Falls", "Rapid City", "Aberdeen", "Watertown", "Memphis", "Nashville", "Chattanooga", "Knoxville", "El Paso", "Fort Worth", "Dallas", "San Antonio", "Austin", "Corpus Christi", "Houston", "Salt Lake City", "Provo", "Roanoke", "Richmond", "Virginia Beach", "Norfolk", "Spokane", "Burlington", "Rutland", "Seattle", "Vancouver", "Yakima", "Bellingham", "Olympia", "Madison", "Milwaukee", "Green Bay", "Charleston", "Huntington", "Wheeling", "Cheyenne", "Casper"],
            "class": [2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 3, 1, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 2, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 2, 2, 3, 3, 1, 2, 3, 2, 1, 2, 2, 3, 1, 2, 3, 3, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 2, 1, 3, 3, 3, 3, 2, 2, 3, 3, 3, 1, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 3, 3],
            st: ["AK", "AK", "AK", "AL", "AL", "AL", "AL", "AR", "AR", "AR", "AZ", "AZ", "AZ", "AZ", "CA", "CA", "CA", "CA", "CA", "CA", "CO", "CO", "CO", "CO", "CT", "CT", "CT", "DE", "FL", "FL", "FL", "FL", "FL", "GA", "GA", "GA", "GA", "GA", "GA", "HI", "HI", "IA", "IA", "IA", "IA", "IA", "IA", "IA", "IA", "IA", "ID", "ID", "ID", "IL", "IL", "IL", "IL", "IN", "IN", "IN", "IN", "KS", "KS", "KY", "KY", "LA", "LA", "LA", "LA", "MA", "MA", "ME", "ME", "MD", "MI", "MI", "MI", "MI", "MI", "MI", "MN", "MN", "MN", "MO", "MO", "MO", "MO", "MS", "MS", "MS", "MS", "MT", "MT", "MT", "MT", "NC", "NC", "NC", "NC", "ND", "ND", "ND", "NE", "NE", "NH", "NH", "NJ", "NJ", "NJ", "NJ", "NM", "NM", "NM", "NV", "NV", "NY", "NY", "NY", "NY", "NY", "OH", "OH", "OH", "OH", "OH", "OH", "OK", "OK", "OK", "OR", "OR", "OR", "OR", "OR", "PA", "PA", "PA", "PA", "RI", "SC", "SC", "SC", "SD", "SD", "SD", "SD", "TN", "TN", "TN", "TN", "TX", "TX", "TX", "TX", "TX", "TX", "TX", "UT", "UT", "VA", "VA", "VA", "VA", "WA", "VT", "VT", "WA", "WA", "WA", "WA", "WA", "WI", "WI", "WI", "WV", "WV", "WV", "WY", "WY"],
            lat: [61.1919, 64.8381, 58.3514, 30.6795, 34.7123, 32.3615, 33.5248, 34.736, 36.0764, 35.8281, 32.2145, 33.5284, 32.6922, 35.1992, 37.7599, 37.3041, 38.5556, 36.7815, 32.7795, 34.0862, 39.7263, 38.8634, 38.2669, 40.0194, 41.1886, 41.3111, 41.7626, 39.7486, 30.4518, 28.5335, 30.3194, 27.9709, 25.7877, 32.8348, 32.4896, 33.9555, 33.7595, 33.4333, 32.0507, 21.3058, 19.7025, 41.9831, 41.5909, 42.498, 41.543, 41.2658, 42.4925, 42.5075, 42.0266, 41.6613, 43.6137, 43.4918, 42.8752, 42.2698, 40.7207, 39.7833, 41.8407, 41.5808, 39.7909, 37.9772, 41.0783, 37.6888, 39.0392, 38.2289, 38.0296, 32.468, 30.2139, 30.4581, 29.9728, 42.2688, 42.3216, 43.6651, 44.8109, 39.308, 42.9605, 42.2745, 43.0276, 42.3871, 46.5486, 44.7601, 44.0258, 46.7804, 44.9645, 39.0763, 37.1951, 38.6277, 38.9484, 32.3204, 31.316, 34.2596, 30.412, 46.8626, 47.5037, 45.7866, 46.5958, 35.2072, 35.8188, 35.0667, 36.0799, 46.8714, 46.8133, 47.9123, 40.8099, 41.2605, 42.9863, 43.302, 40.2217, 40.7352, 39.365, 39.9372, 35.1107, 35.6672, 32.3197, 39.5271, 36.1942, 42.9047, 43.1655, 43.0469, 42.6598, 40.7042, 39.1362, 39.7627, 41.6657, 39.9898, 41.4823, 41.0732, 34.6094, 35.4823, 36.1313, 42.332, 44.0577, 44.0564, 44.9311, 45.523, 42.1145, 40.4414, 40.6017, 39.998, 41.8236, 34.0171, 32.7893, 34.8443, 43.5363, 44.0762, 45.4637, 44.9034, 35.1174, 36.1548, 35.0455, 35.9729, 31.7902, 32.7389, 32.7995, 29.4515, 30.3005, 27.7429, 29.7629, 40.7547, 40.2444, 37.2769, 37.5383, 36.8345, 36.8857, 47.6733, 44.4847, 43.6077, 47.6264, 45.6337, 46.5967, 48.7502, 47.0424, 43.0746, 43.0522, 44.5134, 38.3495, 38.413, 40.0703, 41.1455, 42.8347],
            lng: [-149.7621, -147.7263, -134.5115, -88.1033, -86.5963, -86.2791, -86.8127, -92.3311, -94.1609, -90.694, -110.9182, -112.0763, -114.6153, -111.6311, -122.4374, -121.8727, -121.4689, -119.7921, -117.1463, -118.376, -104.9655, -104.7919, -104.6204, -105.2595, -73.1959, -72.9231, -72.6886, -75.5516, -84.2728, -81.3758, -81.66, -82.4646, -80.2241, -83.6517, -84.9404, -83.3832, -84.4032, -82.022, -81.1038, -157.8234, -155.0831, -91.6638, -93.6209, -96.3957, -90.5907, -95.8573, -92.3296, -90.6777, -93.6283, -91.5242, -116.2377, -112.0325, -112.4473, -89.0698, -89.6094, -89.6504, -87.6794, -87.3454, -86.1477, -87.5506, -85.1265, -97.3362, -95.6895, -85.7495, -84.4946, -93.7711, -92.0294, -91.1402, -90.059, -71.8038, -71.0891, -70.2691, -68.783, -76.617, -85.6583, -83.7393, -83.694, -83.1026, -87.4024, -85.6123, -92.4732, -92.1171, -93.2682, -94.5554, -93.2862, -90.2428, -92.3338, -90.2044, -89.3087, -88.7259, -88.9278, -114.0116, -111.2863, -108.5371, -112.027, -80.8292, -78.6446, -78.9176, -79.8194, -96.8087, -100.779, -97.0549, -96.6753, -96.013, -71.4516, -70.9731, -74.7561, -74.1849, -74.439, -75.1062, -106.61, -105.9646, -106.7652, -119.8218, -115.2221, -78.8494, -77.6115, -76.1444, -73.7813, -73.9179, -84.5031, -84.1967, -83.5753, -82.9915, -81.6697, -81.5179, -98.4178, -97.535, -95.9373, -122.8619, -123.1103, -121.3081, -123.0292, -122.6402, -80.0762, -79.9773, -75.4773, -75.1448, -71.4221, -81.0108, -79.9863, -82.3854, -96.7318, -103.2283, -98.4813, -97.1204, -89.9711, -86.7621, -85.2673, -83.9422, -106.4232, -97.3338, -96.7872, -98.5127, -97.7472, -97.4019, -95.3832, -111.8926, -111.6608, -79.9557, -77.4615, -76.0872, -76.2599, -117.4103, -73.2232, -72.9741, -122.3331, -122.603, -120.5297, -122.475, -122.8931, -89.3948, -87.9559, -88.0158, -81.6333, -82.4336, -80.6986, -104.802, -106.3251],
            pos3: ["", "", "", "", "s", "s", "s", "s", "se", "s", "e", "n", "e", "n", "e", "s", "ne", "e", "w", "n", "ne", "", "", "n", "nw", "", "n", "", "n", "n", "n", "w", "sw", "n", "se", "", "", "ne", "w", "", "nw", "n", "n", "ne", "w", "e", "n", "w", "n", "n", "n", "n", "w", "w", "", "", "w", "w", "s", "ne", "nw", "", "s", "", "", "ne", "w", "", "w", "nw", "n", "ne", "sw", "nw", "w", "w", "", "n", "", "w", "e", "n", "e", "ne", "", "e", "", "", "", "", "", "n", "ne", "ne", "ne", "", "e", "", "n", "w", "", "w", "", "nw", "s", "nw", "w", "w", "se", "e", "w", "n", "", "e", "n", "s", "n", "ne", "e", "e", "e", "", "", "", "n", "w", "w", "", "", "", "", "ne", "e", "w", "s", "n", "n", "w", "", "n", "se", "", "w", "", "", "", "ne", "ne", "n", "n", "s", "w", "n", "s", "w", "s", "", "", "", "", "n", "sw", "nw", "nw", "ne", "n", "e", "ne", "", "se", "s", "nw", "", "w", "ne", "se", "", "n", "ne"],
            statelevel: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        },
        schema: {
            name: "STRING",
            "class": "INT",
            lat: "DOUBLE",
            lng: "DOUBLE",
            st: "STRING",
            pos3: "STRING",
            statelevel: "INT"
        }
    };

    function FullZoomButton(btn, map, opts) {
        this.__super__(btn.div || btn.el || btn, opts);
        this.map = map;
        var opts = this._opts;
        var left = opts.left || 5;
        var top = opts.top || 5;
        var css = opts.css || "";
        Browser.addCSS(this.div, css);
        this.hide();
        map.addEventListener("navigate", this.handleMapNav, this);
        map.addEventListener("ready", this.updateVisibility, this);
        this.addEventListener("click", this.handleButtonClick, this, 1)
    }
    Opts.inherit(FullZoomButton, BasicButton);
    FullZoomButton.prototype.handleMapNav = function(evt) {
        this.updateVisibility()
    };
    FullZoomButton.prototype.updateVisibility = function() {
        var scale = this.map.getScale();
        var initScale = this.map.getInitialScale();
        if (scale > initScale * .95 || isNaN(scale)) {
            this.isHidden() || this.hide()
        } else {
            this.isHidden() && this.show()
        }
    };
    FullZoomButton.prototype.handleButtonClick = function(evt) {
        var map = this.map;
        var currZoom = map.getZoom();
        if (!map.isReady() || currZoom == 1) {
            return
        }
        var opts = {
            zoom: 1,
            tween: !!this._opts.tween
        };
        map.zoom(opts)
    };
    BigMap.prototype.initBigMap = function(div, opts) {
        var views = opts.views;
        var queryView = Browser.getQueryVar("view");
        if (queryView && Utils.contains(views, queryView)) {
            opts.initial_view = queryView
        } else if (!opts.initial_view) {
            opts.initial_view = views[0]
        } else if (Utils.contains(views, opts.initial_view)) {
            trace("[BigMap.initBigMap()] opts.initial_view not found in views:", opts.initial_view, views);
            views.unshift(opts.initial_view)
        }
        var useButtons = E.ADVANCED_FEATURES && !!opts.enable_buttons;
        var usePanel = opts.enable_buttons || opts.show_panel;
        if (opts.width > 700 && opts.show_legend === undefined && !Browser.inPhantom) {
            if (Browser.getPageUrl().indexOf("nytimes") != -1) {
                opts.show_legend = true
            }
        }
        var showLegend = this._showLegend = opts.show_legend;
        if (showLegend) {
            opts.spacingBottom = 20
        }
        if (usePanel) {
            var panelWidth = opts.small_panel ? 170 : 230;
            opts.panelWidth = panelWidth;
            opts.panMargins = [0, 50, panelWidth, 0]
        }
        var el = El(div);
        if (useButtons) {
            var buttonDiv = el.child("div").addClass("nytg-map-view-buttons").node()
        }
        var mapDiv = el.child("div").addClass("nytg-map-container").node();
        if (usePanel) {
            var panelDiv = El(mapDiv).child("div").addClass("nytg-map-panel").node()
        }
        this.__super__(mapDiv, opts);
        if (showLegend) {
            var legendHeight = 30;
            var lm = 0;
            var bottom = this._map.getWidthInPixels() > 800 ? -30 : -10;
            var legendImg = El(mapDiv).child("div").css("bottom", bottom).addClass("nytg-big-map-legend").css("margin-left", lm).css("z-index: 45; padding: 1px 5px 1px 1px; background-color:white; position:absolute").child("img");
            this._legendImg = legendImg
        }
        initBigMap(this);
        if (useButtons) {
            initBigMapButtons(buttonDiv, this)
        }
        if (usePanel) {
            initBigMapPanel(panelDiv, this)
        }
        if (opts.election_type && showLegend) {
            this.showLegend(opts.election_type, opts.initial_view)
        }

        function initBigMapButtons(div, map) {
            var opts = map._opts;
            var buttons = new BigMapButtons(div, map, opts);
            buttons.on("change", function(evt) {
                var view = map._map.views.getCurrentView().name;
                trace(">>> change; mapView:", view);
                if (opts.show_legend) {
                    map.showLegend(opts.election_type, view)
                }
            }, this, -1)
        }
    };
    BigMap.prototype.showLegend = function(etype, view) {
        var mapSize = this._opts.width;
        trace("[showLegend] etype:", etype, "view:", view, "size:", mapSize);
        if (!view) {
            view = "state_winner_view"
        }
        var key = etype;
        if (key == "governor") {
            key = "house"
        }
        if (this._showLegend) {
            var legendSize = 0;
            if (mapSize < 511) {
                if (etype == "president" && mapSize >= 500) {
                    legendSize = 484;
                    key = "president"
                } else if (etype == "president" && mapSize >= 337) {
                    key = "president";
                    legendSize = 337
                }
            } else {
                legendSize = 511;
                if (view == "county_margin_view") {
                    key = "counties"
                } else if (view == "county_margin_change_view") {
                    key = "change"
                } else if (view == "county_margin_bubble_view") {
                    key = "margin-of-victory"
                }
            }
            var el = this._legendImg;
            if (key && legendSize) {
                var url = Utils.format("https://static01.nyt.com/newsgraphics/2012/elections/map-keys/%s-%s-key.png", key, legendSize);
                el.attr("src", url).show()
            } else {
                el.hide()
            }
        }
    };

    function initBigMap(voteMap) {
        var map = voteMap._map;
        map.div.style.position = "relative";
        A.zoomedOut = true;
        map.on("navigate", function(evt) {
            var scale = map.getScale();
            var initScale = map.getInitialScale();
            var wasZoomedOut = !!A.zoomedOut;
            var isZoomedOut = A.zoomedOut = scale > initScale * .5;
            if (wasZoomedOut && !isZoomedOut) {
                voteMap.dispatchEvent("zoomed_in")
            } else if (isZoomedOut && !wasZoomedOut) {
                A.selectedState = null;
                trace(" >>> selectedState = null (initBigMap())");
                voteMap.dispatchEvent("zoomed_out");
                voteMap.triggerDeselect()
            }
        }, this, 20);
        var fullEl = El("div").addClass("nytg-map-button").css("position:absolute; top:4px; left:4px; ").text("Zoom to U.S.");
        var fullBtn = new FullZoomButton(fullEl, map, {
            tween: Election2012.ZOOM_ENABLED
        });
        map.addOverlay(fullEl.node())
    }

    function initBigMapPanel(div, map) {
        var panel = new BigMapPanel(div, map, map._opts)
    }
    nytg = window.nytg || {};
    nytg.data = nytg.data || {};
    nytg.data.states_wgs84 = {
        data: {
            STATE_NAME: ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "District of Columbia", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Puerto Rico", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"],
            LONG: [-86.6, -114.93, -111.67, -92.44, -120, -105.55, -72.73, -75.51, -76.6, -81.8, -83.45, -83.45, -114.66, -89.2, -86.28, -93.5, -98.38, -84.5, -92.4, -69.23, -76.8, -71.81, -84.5, -94.31, -89.67, -92.48, -109.3, -99.81, -116.66, -71.58, -74.4, -106.11, -75.2, -79.39, -100.47, -82.79, -97.51, -120.55, -77.8, -77.8, -71.56, -80.9, -100.23, -86.34, -99.36, -111.68, -72.66, -78.5, -120, -80.61, -90.01, -107.55],
            LAT: [32.79, 27.39, 34.29, 34.9, 37.25, 39, 41.62, 39, 38.85, 28.3, 32.65, 32.65, 43.7, 40.07, 39.91, 42.08, 38.49, 37.53, 31.07, 45.2, 39.2, 42.26, 43.2, 46.32, 32.75, 38.37, 46.8, 41.53, 39.36, 43.69, 40.2, 34.42, 42.95, 35.54, 47.45, 40.29, 35.58, 43.94, 40.87, 40.87, 41.68, 33.91, 44.44, 35.84, 31.5, 39.32, 44.08, 37.6, 47.38, 38.64, 44.64, 43],
            STATE: ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"],
            FIPS: ["01", "02", "04", "05", "06", "08", "09", "10", "11", "12", "13", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "72", "44", "45", "46", "47", "48", "49", "50", "51", "53", "54", "55", "56"],
            XMAX: [-84.901, -130.008, -109.045, -89.645, -114.136, -102.041, -71.788, -75.049, -76.91, -80.032, -80.842, -154.806, -111.044, -87.496, -84.784, -90.141, -94.588, -81.968, -88.817, -66.983, -75.049, -69.93, -82.419, -89.566, -88.097, -89.1, -104.039, -95.308, -114.039, -70.714, -73.902, -103.003, -71.857, -75.461, -96.557, -80.518, -94.431, -116.463, -74.692, -65.245, -71.12, -78.571, -96.437, -81.648, -93.508, -109.042, -71.496, -75.241, -116.917, -77.72, -86.804, -104.052],
            XMIN: [-88.473, -178.215, -114.814, -94.618, -124.41, -109.06, -73.727, -75.789, -77.121, -87.635, -85.604, -160.247, -117.242, -91.514, -88.097, -96.636, -102.051, -89.571, -94.043, -71.085, -79.487, -73.508, -90.419, -97.24, -91.655, -95.774, -116.05, -104.054, -120.005, -72.557, -75.56, -109.051, -79.762, -84.322, -104.049, -84.82, -103.003, -124.563, -80.52, -67.946, -71.895, -83.353, -104.057, -90.31, -106.646, -114.053, -73.437, -83.675, -124.732, -82.645, -92.888, -111.056],
            YMIN: [30.225, 51.593, 31.332, 33.004, 32.535, 36.992, 40.987, 38.45, 38.809, 24.546, 30.358, 18.91, 41.988, 36.97, 37.773, 40.375, 36.993, 36.496, 28.963, 43.066, 37.917, 41.239, 41.697, 43.499, 30.181, 35.996, 44.358, 40, 35.002, 42.697, 38.929, 31.332, 40.496, 33.839, 45.935, 38.404, 33.616, 41.992, 39.72, 17.927, 41.148, 32.047, 42.48, 34.983, 25.841, 36.997, 42.727, 36.541, 45.543, 37.202, 42.492, 40.995],
            YMAX: [35.008, 71.34, 37.004, 36.5, 42.01, 41.003, 42.051, 39.839, 38.995, 31.001, 35.001, 22.233, 49.001, 42.508, 41.76, 43.501, 40.003, 39.146, 33.02, 47.46, 39.724, 42.886, 48.189, 49.384, 34.996, 40.614, 49.001, 43.001, 42.002, 45.305, 41.358, 37.001, 45.015, 36.588, 49.001, 41.978, 37.002, 46.296, 42.27, 18.515, 42.019, 35.216, 45.945, 36.679, 36.5, 42.002, 45.017, 39.466, 49.003, 40.638, 47.076, 45.006]
        },
        schema: {
            STATE_NAME: "STRING",
            LONG: "DOUBLE",
            XMIN: "DOUBLE",
            STATE: "STRING",
            FIPS: "STRING",
            XMAX: "DOUBLE",
            LAT: "DOUBLE",
            YMIN: "DOUBLE",
            YMAX: "DOUBLE"
        }
    };
    nytg = window.nytg || {};
    nytg.data = nytg.data || {};
    nytg.data.counties_albers = {
        data: {
            STATE_FIPS: ["02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "02", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "15", "15", "15", "15", "15", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "22", "22", "22", "12", "12", "12", "12", "22", "12", "22", "72", "72", "72", "12", "12", "12", "12", "12", "12", "12", "72", "72", "72", "72", "72", "72", "72", "72", "72", "72", "72", "22", "12", "12", "12", "12", "12", "72", "72", "72", "72", "72", "72", "72", "72", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "72", "72", "72", "72", "72", "72", "72", "72", "72", "72", "22", "22", "12", "12", "12", "22", "12", "72", "72", "72", "72", "72", "72", "72", "12", "72", "72", "72", "72", "72", "22", "12", "12", "72", "72", "72", "72", "72", "72", "12", "12", "12", "72", "72", "72", "72", "72", "72", "72", "72", "72", "72", "12", "12", "12", "12", "72", "72", "72", "22", "22", "72", "72", "22", "22", "72", "72", "72", "72", "72", "22", "22", "72", "72", "72", "72", "12", "12", "12", "12", "12", "72", "72", "72", "72", "20", "06", "35", "35", "35", "35", "20", "35", "40", "06", "20", "40", "48", "40", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "41", "48", "41", "48", "48", "48", "48", "06", "31", "49", "49", "49", "31", "31", "31", "31", "32", "19", "48", "20", "16", "32", "20", "19", "20", "31", "31", "31", "31", "20", "20", "31", "46", "08", "08", "08", "20", "08", "08", "08", "08", "08", "08", "32", "32", "35", "35", "35", "35", "35", "49", "27", "48", "48", "48", "06", "06", "06", "29", "29", "56", "48", "56", "56", "48", "48", "48", "48", "20", "48", "49", "48", "41", "41", "41", "41", "31", "31", "31", "19", "19", "19", "31", "31", "31", "31", "20", "31", "20", "20", "19", "46", "46", "06", "20", "20", "19", "19", "19", "20", "20", "20", "20", "31", "31", "31", "31", "31", "46", "46", "31", "31", "31", "31", "31", "20", "06", "40", "40", "40", "40", "40", "27", "27", "35", "35", "35", "35", "35", "35", "19", "16", "16", "40", "40", "40", "40", "40", "29", "16", "29", "29", "49", "48", "48", "48", "48", "48", "48", "48", "48", "16", "20", "16", "20", "48", "48", "48", "40", "40", "19", "20", "20", "20", "31", "31", "31", "31", "31", "46", "46", "19", "19", "19", "19", "31", "16", "31", "46", "46", "46", "20", "19", "48", "06", "20", "16", "46", "27", "35", "35", "35", "35", "35", "20", "56", "40", "40", "40", "40", "20", "40", "27", "48", "48", "48", "48", "48", "48", "49", "49", "49", "49", "48", "48", "20", "48", "16", "16", "48", "20", "48", "20", "20", "20", "20", "20", "06", "06", "48", "48", "48", "48", "49", "49", "49", "48", "20", "56", "56", "56", "56", "48", "41", "49", "19", "19", "20", "31", "31", "31", "31", "31", "19", "46", "48", "46", "46", "46", "48", "20", "06", "48", "06", "48", "20", "06", "20", "20", "20", "40", "40", "40", "40", "40", "27", "35", "35", "35", "35", "35", "06", "48", "48", "48", "40", "40", "40", "40", "40", "29", "29", "20", "20", "20", "20", "06", "48", "48", "48", "48", "48", "16", "16", "16", "16", "56", "56", "48", "48", "48", "48", "06", "31", "31", "31", "31", "31", "46", "46", "46", "31", "31", "31", "31", "31", "46", "35", "35", "35", "35", "35", "35", "20", "40", "40", "40", "40", "48", "27", "48", "48", "48", "48", "48", "48", "48", "04", "48", "04", "04", "04", "48", "04", "49", "48", "48", "48", "48", "48", "40", "16", "16", "16", "46", "46", "20", "31", "20", "20", "20", "31", "31", "31", "31", "20", "46", "46", "16", "08", "08", "08", "08", "08", "08", "40", "08", "06", "08", "08", "08", "40", "40", "40", "40", "48", "40", "40", "40", "40", "40", "48", "48", "48", "48", "48", "04", "16", "16", "48", "48", "48", "48", "49", "48", "48", "48", "48", "49", "48", "20", "06", "48", "19", "19", "31", "31", "31", "31", "31", "46", "46", "19", "19", "19", "31", "31", "31", "31", "31", "46", "05", "05", "46", "40", "40", "40", "40", "40", "49", "49", "20", "49", "40", "40", "40", "40", "40", "29", "48", "32", "56", "48", "48", "48", "56", "48", "56", "04", "04", "04", "04", "48", "48", "48", "04", "48", "48", "48", "48", "48", "48", "48", "48", "48", "40", "20", "06", "20", "20", "06", "20", "31", "31", "31", "31", "31", "20", "20", "20", "20", "20", "20", "49", "08", "08", "08", "08", "08", "40", "06", "40", "40", "40", "40", "40", "29", "48", "48", "48", "48", "48", "48", "48", "40", "48", "48", "06", "06", "06", "06", "48", "48", "48", "56", "56", "56", "06", "19", "48", "19", "31", "31", "31", "31", "20", "20", "20", "20", "20", "19", "06", "20", "48", "06", "48", "06", "48", "06", "48", "08", "08", "08", "08", "08", "16", "06", "06", "20", "29", "29", "48", "46", "48", "48", "48", "48", "48", "48", "06", "06", "06", "06", "06", "06", "16", "19", "20", "20", "20", "20", "20", "20", "08", "40", "40", "49", "49", "20", "41", "20", "06", "06", "06", "06", "19", "19", "20", "48", "20", "31", "20", "20", "31", "31", "31", "31", "20", "20", "06", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "40", "40", "40", "40", "29", "40", "40", "40", "40", "40", "16", "06", "06", "04", "04", "04", "49", "48", "48", "06", "16", "16", "16", "16", "49", "48", "48", "48", "48", "48", "48", "48", "31", "48", "48", "48", "06", "06", "06", "19", "19", "19", "40", "08", "08", "08", "08", "08", "08", "08", "08", "08", "06", "20", "04", "32", "32", "32", "32", "29", "19", "29", "20", "48", "29", "48", "48", "20", "48", "48", "48", "48", "48", "06", "06", "06", "06", "20", "20", "06", "20", "19", "20", "46", "20", "20", "20", "46", "20", "20", "06", "29", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "31", "31", "49", "32", "32", "32", "32", "29", "31", "20", "41", "41", "41", "48", "48", "49", "49", "49", "31", "31", "31", "31", "31", "20", "20", "20", "20", "20", "48", "31", "46", "31", "31", "46", "31", "20", "31", "46", "19", "19", "40", "27", "40", "08", "08", "08", "08", "08", "27", "32", "32", "32", "32", "35", "06", "29", "29", "21", "21", "21", "21", "37", "37", "37", "37", "37", "28", "28", "27", "28", "36", "26", "26", "26", "26", "17", "17", "17", "17", "17", "29", "29", "29", "29", "29", "47", "29", "29", "29", "29", "01", "01", "39", "01", "39", "39", "39", "39", "28", "28", "28", "28", "51", "28", "24", "50", "47", "47", "47", "01", "51", "01", "01", "01", "01", "28", "28", "28", "28", "28", "47", "47", "47", "45", "45", "45", "45", "45", "45", "23", "13", "51", "13", "13", "33", "13", "13", "33", "33", "33", "51", "33", "22", "19", "13", "13", "13", "13", "13", "54", "54", "54", "54", "54", "51", "51", "51", "51", "51", "13", "13", "13", "13", "13", "13", "13", "13", "28", "28", "23", "19", "19", "51", "28", "21", "21", "21", "21", "21", "18", "18", "18", "18", "18", "21", "47", "37", "37", "37", "37", "37", "21", "47", "47", "47", "26", "26", "18", "18", "26", "18", "18", "18", "21", "21", "21", "21", "21", "37", "37", "37", "37", "29", "29", "29", "29", "17", "29", "29", "29", "17", "17", "17", "17", "24", "42", "24", "28", "28", "01", "28", "28", "01", "01", "01", "28", "01", "28", "47", "51", "45", "45", "45", "45", "51", "50", "19", "13", "51", "13", "18", "13", "13", "13", "13", "51", "11", "51", "13", "51", "51", "13", "51", "13", "47", "13", "13", "51", "51", "51", "51", "51", "13", "13", "13", "25", "13", "13", "13", "13", "13", "13", "13", "51", "51", "12", "51", "21", "21", "21", "21", "21", "51", "18", "18", "18", "18", "18", "37", "37", "37", "37", "37", "19", "51", "19", "36", "19", "26", "18", "26", "18", "26", "18", "18", "26", "18", "51", "21", "13", "13", "13", "25", "25", "25", "25", "19", "19", "25", "23", "23", "13", "13", "13", "13", "13", "28", "51", "18", "18", "18", "18", "18", "18", "05", "05", "18", "05", "18", "05", "26", "26", "27", "37", "37", "37", "37", "37", "26", "26", "22", "17", "17", "17", "17", "17", "51", "29", "36", "29", "29", "29", "39", "36", "39", "39", "39", "39", "36", "17", "29", "29", "17", "17", "36", "17", "17", "29", "47", "47", "47", "47", "19", "51", "47", "47", "47", "47", "47", "42", "42", "42", "42", "42", "47", "13", "51", "13", "13", "13", "13", "51", "51", "51", "51", "42", "42", "42", "42", "42", "13", "51", "51", "51", "51", "13", "13", "13", "13", "51", "19", "19", "19", "19", "25", "12", "36", "51", "21", "21", "21", "21", "21", "19", "44", "44", "44", "37", "47", "21", "21", "21", "21", "21", "18", "18", "26", "18", "26", "18", "18", "26", "51", "36", "36", "36", "28", "28", "26", "26", "26", "26", "26", "17", "17", "17", "17", "17", "51", "55", "51", "17", "17", "17", "24", "24", "17", "24", "17", "24", "17", "24", "17", "47", "47", "47", "47", "34", "22", "34", "22", "34", "22", "34", "34", "22", "51", "51", "39", "39", "39", "39", "47", "47", "39", "47", "26", "54", "54", "42", "54", "42", "54", "54", "13", "13", "13", "13", "13", "42", "42", "42", "42", "42", "13", "28", "13", "13", "13", "13", "19", "19", "19", "19", "47", "47", "45", "45", "45", "45", "45", "47", "47", "47", "47", "47", "51", "51", "51", "51", "51", "51", "51", "51", "51", "13", "13", "13", "13", "13", "13", "13", "13", "13", "19", "13", "13", "13", "13", "51", "13", "36", "18", "18", "18", "18", "18", "22", "18", "18", "26", "18", "26", "18", "26", "18", "21", "21", "21", "47", "21", "47", "37", "36", "37", "47", "37", "37", "37", "47", "45", "27", "27", "45", "18", "47", "47", "26", "26", "26", "17", "17", "17", "17", "17", "22", "22", "29", "29", "29", "36", "01", "01", "39", "39", "39", "39", "39", "29", "29", "19", "19", "47", "19", "47", "47", "47", "47", "51", "51", "45", "13", "22", "47", "47", "47", "55", "47", "13", "13", "13", "51", "13", "51", "51", "51", "13", "51", "51", "51", "51", "13", "51", "13", "28", "51", "36", "19", "17", "21", "21", "21", "21", "22", "21", "18", "05", "05", "05", "05", "05", "19", "19", "19", "21", "21", "21", "21", "21", "05", "18", "26", "18", "26", "18", "26", "18", "05", "05", "18", "05", "05", "18", "26", "26", "26", "26", "17", "22", "17", "17", "17", "17", "22", "34", "34", "27", "22", "22", "22", "24", "24", "24", "24", "34", "34", "34", "01", "45", "01", "34", "39", "39", "45", "39", "39", "39", "01", "01", "01", "45", "01", "51", "01", "28", "28", "39", "39", "39", "39", "39", "47", "47", "47", "54", "54", "54", "54", "51", "51", "21", "21", "21", "21", "21", "05", "18", "19", "19", "05", "05", "19", "05", "13", "13", "13", "13", "13", "37", "37", "37", "37", "37", "18", "21", "18", "05", "05", "51", "05", "05", "05", "18", "18", "26", "18", "18", "18", "28", "47", "47", "24", "29", "29", "29", "29", "29", "23", "24", "28", "17", "24", "24", "17", "17", "28", "17", "24", "17", "55", "55", "34", "22", "17", "17", "17", "34", "17", "17", "22", "34", "34", "39", "45", "39", "39", "39", "39", "01", "01", "01", "01", "01", "47", "47", "47", "28", "47", "55", "01", "55", "47", "39", "39", "39", "39", "39", "42", "54", "13", "13", "13", "13", "13", "42", "42", "51", "42", "51", "42", "42", "51", "19", "19", "51", "36", "36", "36", "36", "42", "42", "42", "42", "55", "42", "47", "21", "21", "21", "21", "21", "28", "51", "05", "05", "05", "05", "45", "19", "19", "19", "13", "21", "13", "13", "13", "13", "37", "37", "37", "37", "18", "21", "18", "18", "37", "21", "21", "47", "21", "21", "21", "21", "05", "26", "18", "26", "18", "18", "18", "05", "18", "05", "47", "22", "10", "10", "10", "26", "26", "26", "26", "29", "29", "29", "29", "29", "29", "29", "29", "28", "28", "18", "55", "55", "55", "55", "24", "24", "24", "34", "34", "34", "34", "01", "34", "01", "17", "39", "39", "47", "39", "39", "39", "01", "01", "01", "01", "01", "28", "36", "28", "55", "28", "55", "55", "55", "39", "39", "39", "39", "47", "39", "47", "47", "54", "54", "54", "54", "54", "13", "42", "42", "42", "13", "13", "42", "13", "36", "36", "36", "36", "18", "36", "19", "42", "42", "42", "42", "51", "42", "51", "51", "19", "51", "36", "36", "36", "36", "36", "21", "21", "21", "37", "37", "37", "37", "37", "28", "36", "21", "21", "21", "21", "21", "37", "37", "37", "37", "37", "28", "55", "28", "29", "29", "29", "29", "17", "28", "17", "17", "17", "17", "55", "55", "55", "50", "29", "17", "29", "17", "17", "17", "17", "45", "45", "45", "45", "45", "01", "55", "55", "01", "01", "01", "55", "01", "28", "28", "28", "28", "28", "28", "28", "42", "28", "42", "42", "42", "42", "39", "39", "39", "39", "39", "42", "42", "42", "42", "42", "28", "36", "36", "36", "36", "36", "13", "13", "13", "13", "51", "13", "54", "54", "54", "54", "54", "13", "13", "05", "13", "13", "05", "05", "13", "19", "19", "36", "36", "37", "21", "01", "37", "37", "37", "37", "19", "19", "51", "21", "21", "21", "21", "21", "18", "51", "18", "18", "18", "18", "37", "37", "37", "37", "37", "27", "18", "51", "45", "29", "45", "29", "47", "47", "47", "47", "47", "47", "29", "17", "29", "29", "29", "17", "17", "36", "17", "17", "51", "01", "01", "01", "01", "01", "17", "17", "17", "17", "17", "18", "28", "42", "28", "51", "28", "28", "51", "42", "28", "42", "42", "42", "39", "39", "45", "39", "45", "42", "42", "42", "42", "42", "36", "36", "22", "36", "36", "36", "51", "13", "51", "51", "51", "51", "13", "13", "13", "13", "54", "54", "54", "54", "54", "19", "13", "13", "13", "05", "13", "05", "05", "05", "05", "13", "19", "19", "19", "19", "19", "51", "51", "51", "51", "51", "21", "21", "21", "21", "21", "19", "19", "21", "21", "21", "21", "21", "05", "05", "05", "05", "37", "37", "37", "37", "18", "18", "37", "18", "27", "42", "42", "42", "42", "13", "13", "13", "13", "13", "36", "36", "36", "36", "36", "23", "54", "54", "54", "54", "51", "51", "51", "54", "51", "05", "05", "05", "05", "25", "05", "19", "21", "25", "19", "19", "36", "36", "36", "36", "36", "21", "21", "37", "21", "37", "37", "37", "37", "05", "05", "05", "05", "51", "28", "26", "26", "26", "18", "18", "25", "28", "21", "21", "21", "21", "21", "21", "18", "45", "21", "47", "47", "37", "37", "37", "37", "47", "37", "47", "26", "26", "26", "47", "29", "29", "29", "29", "29", "29", "29", "29", "29", "17", "17", "17", "17", "17", "55", "55", "17", "17", "17", "17", "34", "17", "45", "45", "45", "45", "45", "01", "01", "01", "01", "01", "28", "47", "47", "47", "47", "55", "55", "39", "22", "22", "39", "39", "39", "39", "01", "22", "42", "42", "28", "42", "28", "42", "42", "28", "51", "39", "39", "39", "39", "39", "54", "13", "54", "13", "54", "13", "54", "13", "54", "13", "36", "36", "36", "36", "36", "54", "54", "54", "54", "47", "54", "51", "51", "51", "05", "05", "05", "05", "37", "37", "37", "37", "37", "22", "51", "22", "25", "22", "25", "22", "25", "29", "45", "29", "29", "18", "01", "29", "29", "29", "29", "01", "01", "01", "01", "01", "55", "22", "47", "47", "47", "47", "47", "17", "17", "17", "17", "17", "39", "51", "39", "39", "39", "39", "28", "28", "28", "28", "28", "45", "45", "45", "39", "39", "39", "39", "39", "51", "51", "51", "51", "51", "51", "51", "54", "47", "54", "54", "54", "54", "13", "05", "13", "13", "13", "13", "05", "05", "05", "50", "28", "50", "13", "13", "13", "13", "22", "13", "50", "50", "51", "51", "51", "51", "51", "51", "45", "51", "22", "09", "09", "09", "28", "01", "29", "29", "17", "29", "17", "17", "01", "17", "17", "21", "28", "21", "21", "21", "21", "05", "05", "37", "37", "37", "37", "37", "18", "18", "18", "37", "37", "37", "37", "37", "21", "21", "21", "21", "21", "25", "44", "29", "29", "29", "44", "28", "29", "29", "29", "29", "29", "01", "01", "01", "01", "47", "47", "47", "55", "22", "55", "22", "55", "55", "22", "28", "17", "17", "17", "17", "17", "01", "51", "39", "39", "39", "39", "39", "28", "28", "28", "24", "28", "39", "45", "45", "45", "39", "39", "39", "39", "33", "33", "33", "51", "33", "51", "51", "51", "29", "13", "13", "13", "13", "13", "54", "54", "54", "54", "54", "13", "13", "13", "13", "13", "51", "51", "51", "28", "28", "09", "09", "09", "09", "09", "21", "21", "21", "21", "21", "18", "18", "18", "18", "24", "18", "37", "37", "37", "37", "37", "37", "37", "37", "27", "37", "37", "24", "21", "21", "21", "21", "21", "26", "26", "26", "24", "27", "51", "27", "17", "29", "17", "29", "29", "17", "55", "22", "27", "27", "27", "30", "27", "27", "27", "27", "26", "46", "46", "41", "23", "41", "30", "30", "30", "30", "23", "23", "38", "38", "38", "38", "16", "46", "46", "26", "26", "27", "27", "27", "27", "50", "27", "50", "30", "27", "27", "38", "38", "38", "38", "38", "46", "46", "46", "30", "30", "30", "26", "30", "38", "38", "38", "38", "38", "46", "26", "26", "26", "27", "26", "26", "27", "27", "27", "27", "55", "16", "55", "55", "53", "23", "53", "38", "30", "38", "38", "38", "38", "46", "46", "27", "27", "26", "30", "27", "27", "27", "27", "27", "38", "30", "38", "38", "56", "46", "27", "27", "27", "27", "16", "16", "53", "53", "53", "53", "53", "26", "30", "41", "41", "41", "30", "27", "27", "38", "38", "27", "38", "38", "38", "38", "30", "26", "27", "26", "26", "30", "30", "16", "55", "55", "38", "38", "38", "38", "38", "27", "26", "27", "27", "27", "53", "53", "53", "53", "53", "46", "46", "46", "30", "26", "26", "26", "55", "55", "16", "55", "53", "53", "53", "27", "46", "46", "46", "26", "26", "27", "27", "27", "27", "27", "55", "53", "53", "53", "53", "53", "30", "30", "30", "30", "50", "30", "30", "55", "55", "55", "55", "16", "53", "53", "53", "41", "41", "41", "41", "46", "46", "41", "41", "30", "30", "30", "30", "30", "38", "38", "38", "38", "38", "38", "38", "38", "38", "16", "55", "55", "55", "55", "53", "53", "53", "53", "53", "41", "41", "41", "26", "30", "30", "30", "30", "30", "30", "38", "38", "38", "38", "38", "30", "30", "30", "30", "16", "30", "26", "55", "55", "55", "30", "16", "55", "55", "53", "53", "53", "41", "27", "30", "27", "55", "55", "53", "53", "53", "53", "53", "27", "41", "41", "53", "53", "30", "30", "30", "30", "46", "38", "30", "38", "46", "27", "27", "53", "55", "46", "27", "30", "30", "30", "30", "30", "30", "38", "27", "27", "27", "38", "26", "38", "38", "27", "26", "27", "27", "55", "55", "55", "55", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "48", "13", "12", "48", "12", "12", "12", "22", "12", "12", "12", "12", "12", "12", "22", "22", "22", "22", "22", "01", "22", "22", "22", "12", "12", "12", "12", "12", "28", "12", "22", "12", "28", "28", "22", "22", "01", "12", "27", "27", "29", "29", "41", "19", "19", "46", "16", "46", "27", "56", "41", "19", "46", "46", "05", "27", "22", "16", "16", "16", "27", "48", "46", "16", "56", "41", "41", "46", "27", "29", "29", "29", "30", "48", "56", "46", "19", "46", "05", "16", "19", "05", "46", "22", "05", "27", "27", "56", "56", "19", "16", "29", "29", "29", "41", "05", "19", "30", "46", "29", "29", "19", "19", "05", "05", "05", "41", "41", "05", "46", "29", "05", "05", "05", "56", "19", "29", "41", "27", "23", "23", "50", "23", "26", "55", "55", "26", "23", "26", "27", "27", "55", "55", "23", "26", "55", "55", "36", "26", "55", "36", "50", "50", "36", "55", "26", "50", "55", "55", "55", "36", "23", "33", "27"],
            LAT: [59.1302777789, 62.3153496619, 57.6848808788, 61.1464148573, 58.6520482435, 55.3953288612, 59.8915064716, 56.6148345465, 63.6728741927, 58.7423452108, 61.5787662253, 60.9201452179, 65.5089103989, 67.0618843803, 69.3089606695, 64.8998840425, 63.8782713983, 59.8007645086, 62.147955105, 64.8062744622, 57.2237702188, 55.5606100873, 58.267493823, 60.2609892678, 55.5552107456, 58.4519623339, 52.8711877848, 26.9996557283, 28.8661316924, 28.349135791, 28.3513784233, 28.3269131219, 27.723193863, 28.6570642341, 29.4564348778, 29.8763467553, 29.8082743456, 28.009183236, 29.6203672586, 27.6816929092, 26.5618622632, 29.9825316961, 27.0314823693, 29.5832733219, 29.3935988112, 28.8676133639, 29.5273700155, 20.8593745929, 22.0393690998, 21.1705905816, 21.4594748645, 19.5981281874, 28.74252831, 28.955362696, 29.0816399022, 28.4226563192, 28.8665830876, 29.3556167222, 26.3965696382, 29.7391767842, 28.4918520301, 29.837311696, 30.0577101988, 29.8572142467, 26.1263614295, 27.7612322594, 30.0108064727, 30.2146107061, 27.4339682799, 29.3499420252, 29.7473053365, 28.890665546, 29.8868477845, 29.1738626114, 27.730569485, 27.0433726256, 28.4173681468, 29.4487186796, 28.7964185819, 29.8930283738, 29.3569836463, 26.9281954382, 30.0613125238, 28.1361990509, 29.2779881871, 26.4704375773, 29.8315922269, 29.9445355921, 28.9060204492, 29.1909928366, 28.345185243, 29.3843466738, 30.2065394573, 29.5834765792, 29.8363565602, 27.3858129181, 28.5144555502, 28.062357563, 26.6467096805, 30.0690926594, 29.6084375043, 29.8751906554, 18.0807739091, 18.008000439, 18.0415319378, 28.7617794816, 29.9854024858, 27.6923448519, 27.4924714608, 26.9565576989, 29.7257310728, 29.9560739802, 17.9946954068, 18.0327092924, 18.2311011353, 18.3171998474, 18.2153353462, 18.2877157035, 18.2525825793, 18.1030737881, 18.4375237407, 18.3744325972, 18.2881184352, 30.2033820732, 27.936544421, 27.3437029561, 27.9306206436, 26.553671906, 28.5525059825, 18.3608442323, 18.1793522961, 18.2517050558, 18.4597752474, 18.13054168, 18.0826534946, 18.3854562264, 18.1488682008, 30.043932559, 30.0477727799, 26.1199364983, 27.1864024127, 29.6102257119, 27.1790444202, 28.7172282211, 27.3752755657, 28.7044847697, 29.3221701378, 26.5783445376, 18.3474524363, 18.0613072947, 18.0608206302, 18.4394993952, 18.3352390988, 18.2123283687, 18.4187498186, 18.3486559515, 18.0419679553, 18.3280957246, 29.9010046998, 29.8941520435, 30.1702438124, 29.9021568108, 29.0614982003, 29.7224026832, 28.3094431519, 18.1116090992, 18.2013038115, 17.9986203401, 18.4459225789, 18.2886031599, 18.4066610145, 18.070512236, 27.9490460694, 18.012922142, 18.210557106, 18.4495450708, 18.2226354532, 18.0507635187, 29.4204318153, 29.8780788484, 29.4606054043, 18.1449500028, 18.3447642121, 18.2670597796, 18.4102684705, 18.1345805004, 18.0124564437, 28.2641008963, 29.9503149101, 29.6750875076, 18.0972787641, 18.3161696546, 18.4371849462, 18.3167125821, 18.373312862, 17.9828934526, 18.0180464469, 18.1749885134, 18.4204488064, 18.1723179125, 29.9827250826, 26.1516619236, 26.9080354041, 28.8512862554, 18.3037340606, 18.2240945371, 18.1733695632, 29.8457015984, 29.5015085936, 18.4094716594, 18.1274334768, 30.0262555304, 30.1140444115, 18.3417029676, 18.2370479165, 18.269643484, 18.4251971675, 18.1876765828, 29.9134105847, 29.8699952616, 18.4306054441, 18.3620843343, 18.3285578143, 18.3365776342, 25.4565921115, 25.6148391476, 27.0747904899, 29.2103611529, 27.4712718665, 18.3782325605, 18.1231860616, 18.42854506, 18.2709117655, 38.6877158297, 39.6667705759, 36.5084505131, 35.4800967382, 34.0213754056, 35.688686964, 39.2359790387, 35.5068770236, 34.4162141531, 38.5970192824, 38.6964869575, 34.9240725952, 34.9661123094, 34.7277478053, 32.0466663746, 31.6161541817, 34.0738119047, 33.1138972844, 35.8377991285, 33.1732731357, 30.9654534792, 34.0702776399, 33.6270601628, 34.9659672627, 42.4321121387, 32.7427073146, 43.063908027, 30.7058131783, 32.7665897968, 31.5452685, 36.277746249, 40.1257727132, 42.4554799469, 37.2849337762, 39.7025964705, 37.8589033785, 40.8737101148, 40.1764007012, 40.5247483635, 40.1763435811, 39.1504463253, 40.7371032331, 36.2774741949, 37.1914907578, 43.353447222, 37.7846648975, 37.8778992686, 41.3365121097, 37.1916222753, 40.2620906593, 40.1763051225, 40.5300508753, 40.1764349323, 37.7810280692, 37.9990680687, 41.6196145635, 43.1927666563, 40.0028293981, 39.9711443002, 40.5546986561, 38.4804195404, 37.9547275321, 40.0927531737, 39.9543963156, 38.7472473468, 38.8281571361, 39.6890223624, 40.6636540969, 39.4419417692, 36.4814789972, 34.0071891675, 33.1304192253, 34.6404286757, 36.5780032197, 39.0736156065, 44.2419944051, 35.4050806581, 36.2783072908, 32.3035778484, 34.8414897897, 33.035926935, 37.7540653757, 39.3105316723, 39.6020004191, 41.6542278827, 32.7359284467, 41.6945339467, 42.9719758882, 34.2902416724, 36.277600305, 31.7045573028, 34.5306187507, 39.1993914192, 31.8696274773, 38.9817162762, 35.4011450386, 43.9151990964, 42.4576221935, 43.1717794469, 43.2795716352, 40.17655226, 41.9144849461, 40.8729193077, 43.0817232417, 40.7390861783, 43.0836675358, 41.5776538767, 42.4934563108, 40.1762119729, 41.2952979594, 39.0026486539, 40.5246224302, 39.349572509, 37.5623087601, 41.6831373255, 43.2392933339, 43.386944882, 36.0752122345, 38.5637821658, 37.192603163, 41.6851504325, 43.0826104871, 42.386222534, 38.2142560258, 37.8877968376, 39.7884467949, 38.8661560395, 41.9163813273, 42.5448268321, 41.2193325219, 40.5243607314, 41.5729352003, 43.3350264692, 43.6747021633, 40.1758617756, 40.1247843464, 41.5702936506, 41.1871027842, 42.4209840755, 37.2286203884, 38.4459475036, 34.4820859744, 35.373886591, 36.3113410482, 34.0242404458, 36.301549133, 43.6743866509, 44.0224986344, 31.9140205846, 35.8580517455, 33.7453024349, 32.7921811116, 35.8697434501, 32.1819600334, 43.2042029491, 43.7597303944, 42.3560355184, 34.8758837791, 34.9164393994, 35.9454127706, 36.8178420073, 34.8999377028, 40.2123352662, 42.2847448779, 37.203467312, 39.0083857275, 40.8864905384, 32.1624179976, 32.7778407627, 32.7532003623, 34.5300029828, 31.2529688982, 32.7462274693, 31.7684611236, 31.1551050796, 42.8551396802, 38.4814353048, 43.0022309622, 38.2121641983, 31.9478252411, 33.6394859991, 31.3263612901, 35.5514028379, 35.6160400337, 43.3805935086, 38.9147269899, 38.0442642733, 38.5641187239, 40.5237114911, 41.2242167982, 41.8514102311, 42.5993560146, 40.9099415411, 43.7177745158, 44.0760445074, 41.3314524486, 42.3853407046, 42.0361591867, 42.735561572, 41.1133421502, 43.4512364533, 40.8723734456, 43.3105760715, 42.8320360571, 43.345889819, 39.785223506, 42.7356519409, 33.17576787, 35.3870971203, 39.3511440198, 42.6684142267, 43.5809507966, 44.0228584019, 34.8629886476, 32.7390104309, 32.4715535338, 32.3526271863, 34.3422337401, 37.5627693498, 42.1330484166, 35.9874408605, 36.4082208923, 36.3793038383, 36.2184988883, 38.0310482909, 34.7043238713, 43.6739593661, 31.4562811776, 31.3173654214, 32.3060709576, 32.4300259391, 33.1492933564, 30.7176532976, 41.269773842, 38.3243387637, 37.2802751962, 40.3302400555, 32.3484937372, 32.7354481225, 38.1814506407, 32.3267332209, 42.6896835658, 43.8202726275, 34.5303597221, 38.9165045253, 31.7740105593, 39.7842654607, 38.4819653813, 37.5590845127, 37.8864852537, 39.1145084901, 34.456747121, 39.2694674925, 32.4802260873, 32.3058604928, 32.7406130682, 31.7041037686, 41.721779258, 39.6481071119, 38.3573207299, 33.1796973237, 38.4560760332, 43.0566248248, 42.9622246129, 42.262304397, 41.306865906, 31.9002939065, 43.1936773342, 37.8548193353, 40.7349861194, 41.0274249267, 38.0431050812, 41.1116117727, 42.719528988, 40.8702546197, 41.394378325, 42.3908943859, 42.7338822735, 44.066255979, 32.3756602501, 43.694261436, 43.9604773961, 44.0218253136, 36.277767805, 37.952920668, 38.5283153602, 31.8689274756, 38.2703694769, 32.2219633939, 37.1499628938, 39.5803877053, 38.3017675451, 38.3472061602, 37.8553737259, 34.1148155168, 35.0086191854, 33.9501395474, 35.9192295478, 35.7024872108, 43.674661084, 35.580574416, 36.0098538293, 32.6130484676, 35.1042150813, 36.5095288182, 34.6736301308, 32.8697552298, 30.7926541908, 35.4011411417, 34.5877207667, 34.1117821623, 35.2248904453, 35.0478667959, 34.3161571412, 39.8932845963, 40.0944054535, 37.2368038753, 39.3506949351, 39.8267068889, 38.9532501082, 38.5065675983, 34.0722960292, 32.7426733877, 33.9746605755, 31.3942191432, 32.1081956619, 44.0068680749, 42.6935921298, 42.1948938403, 42.5813787847, 42.7669857301, 41.6595853213, 31.8885573137, 31.7729629783, 33.1881780707, 34.9649385403, 38.6869911116, 42.4301256754, 42.8997531686, 42.2197761229, 41.7069762087, 40.8549446732, 42.9886835346, 43.7182576956, 43.1949586538, 41.2200874773, 42.5046007944, 41.9168893192, 42.4870337744, 40.1760411526, 43.0088802436, 34.5739775362, 35.0515673818, 33.9152735834, 33.363180396, 34.9125512654, 36.6060395553, 38.8846099031, 36.7887906437, 34.9357266795, 34.7440409335, 35.0171427589, 30.8899505211, 43.6743239967, 33.2335470263, 31.3037587049, 35.8399334099, 33.1231984854, 31.4043503966, 30.7713919282, 33.6143502598, 35.704320407, 33.6102161775, 35.3993958513, 33.2154083579, 33.3487311443, 31.5524510417, 32.0972361268, 40.8681511825, 31.8279673186, 33.1790364977, 32.7705176202, 34.965264179, 33.6164470909, 35.2061525926, 44.0618428187, 42.9701863564, 42.1806185758, 43.2080237564, 42.9143636228, 37.5584920401, 40.7841291682, 39.8276509216, 37.647578866, 39.7850175826, 41.1987672683, 42.8788391699, 41.1977963095, 42.6368904489, 38.8837438112, 44.0233775198, 43.335797753, 43.4628929094, 37.9024097094, 40.2627756908, 38.4020134771, 37.3382370256, 40.61829459, 39.2020848436, 36.7670616429, 37.2866379701, 41.7430935254, 38.432834765, 39.305432236, 40.6663571619, 36.4228642058, 35.4650740891, 36.7984923426, 36.389008618, 34.0772977532, 35.6388253367, 34.2902354158, 34.662222736, 35.9023886662, 36.761442779, 31.8690478902, 31.8489996661, 31.4283785113, 31.0885446478, 31.4473090782, 33.7292424563, 43.6250439488, 42.7705280983, 31.9907591968, 35.8370932089, 32.2123275798, 33.6075039667, 38.7477068388, 34.5302792973, 33.6043082221, 34.5293199235, 33.7852876471, 40.4485806817, 30.7883219298, 37.1921060875, 38.027067091, 32.29755633, 41.0301296874, 42.0516706872, 40.5239363827, 42.1769898995, 41.5688926396, 41.5460309035, 41.9126596561, 43.6746330079, 43.677454764, 41.6846611966, 41.0286533055, 41.3308113804, 42.2094224323, 41.5669818093, 41.5312506235, 41.9129845425, 42.1581140426, 44.003806616, 33.9968927149, 35.1991907386, 43.1932157878, 36.0773547558, 36.8354051966, 36.3170889403, 35.6469333192, 36.6294827246, 40.2977621709, 40.990578409, 37.1913298536, 38.99660937, 34.588305238, 35.9063883671, 34.0265745913, 36.7479856232, 35.2035235935, 40.4792543071, 31.837066111, 39.0178961328, 43.0406075327, 32.5484782444, 33.178032582, 35.8402345008, 43.7189094111, 32.798235782, 42.0882426885, 33.7999194001, 35.8387898046, 31.8797114419, 35.3956118423, 33.6754907363, 31.4951603722, 30.7862171234, 32.9330031049, 32.3015668071, 33.1737528856, 33.1774340178, 33.2166015031, 33.3862098225, 32.9727840268, 33.0778449841, 35.4036293703, 34.5299635677, 36.7960575525, 39.7847891029, 38.2047394885, 38.0874376218, 37.5621231295, 37.646209138, 39.4165322975, 40.3878008041, 41.3973099507, 41.7158970458, 41.1693503781, 40.1762490156, 37.6845326196, 38.4819865766, 39.0411219129, 37.1934092929, 39.3503698633, 37.8852038828, 41.0892074022, 38.4732690656, 38.8318210555, 39.8575332096, 39.5992046621, 40.1025154892, 35.6881592386, 37.9343381524, 35.8750043184, 33.9627645475, 35.174126637, 35.5425834055, 34.2506107541, 37.8504296098, 31.198803945, 30.7387512545, 31.5092438977, 33.1768072003, 33.6673900223, 33.6062025851, 34.0683670656, 35.1681677223, 34.9650019759, 34.0683789765, 40.6734508992, 34.3231789426, 39.0997173253, 37.2183653274, 33.2159666507, 31.8501938582, 32.7869408008, 43.8403789246, 41.2875074325, 43.9046815802, 36.6054591559, 42.0368921581, 33.6164652958, 43.0819775315, 40.6483380341, 40.1315625606, 40.5109914431, 42.2643312192, 38.7839386096, 38.5232444386, 38.9143869813, 39.2965565451, 39.3500778855, 42.3896479777, 33.7435842889, 39.5318348305, 32.7359628674, 37.2315440716, 33.5938905944, 37.0563344162, 30.8977491018, 37.4218185344, 32.2361894411, 39.5858584818, 37.6849653173, 40.6661853167, 38.666977846, 37.8213990081, 43.7843514948, 40.7635382539, 39.063681252, 39.0452890205, 40.4303885375, 39.9835670284, 31.3905571824, 44.0218324942, 31.8313313683, 35.8383293154, 31.0268798788, 32.8978812299, 30.7154609661, 31.0374526687, 36.5110785975, 38.0721326522, 37.5817826985, 39.4403664598, 37.1922102091, 41.5897052597, 43.7233874141, 43.3774888692, 37.2380991711, 37.2351561791, 39.3497626488, 37.1692771616, 39.7856971032, 39.4801186539, 38.8611376182, 36.1212143686, 34.3730195914, 40.1248222733, 40.1196303944, 37.5584561308, 42.7933972832, 38.0000791343, 36.7584809981, 38.778507013, 37.9193801796, 39.177264931, 43.3785818069, 43.377844407, 37.7382563067, 33.2042034961, 39.784654771, 41.9166452714, 39.1323829777, 39.3501845409, 41.5662196773, 41.0475302756, 41.5676742739, 41.9138207263, 38.9160839396, 39.3788065567, 35.3428199615, 37.9553084653, 38.1554743107, 39.119417635, 40.5938848443, 39.2174346988, 39.0182471883, 40.724489296, 38.9877681941, 37.3155532753, 37.6690076188, 36.7479930981, 36.3716287629, 34.4853007051, 35.4953612671, 36.6287757864, 36.7494585864, 34.3739250106, 36.7309239581, 35.88440682, 35.268506613, 42.2837318231, 40.0041611122, 40.6508443615, 34.5996851954, 32.9044063287, 31.526185036, 41.6323063674, 32.563506843, 31.3685472976, 38.4489306552, 43.9891288395, 43.4126074089, 43.2165192463, 43.3877388686, 39.3735181393, 33.1812040305, 33.6162931093, 33.6154185906, 32.3064237365, 31.8131584683, 32.3050018535, 31.2546586623, 40.8506055039, 33.9881929032, 34.0804411729, 35.4008559302, 40.6987195755, 39.5983946606, 33.0392929611, 42.0359779289, 40.7453896163, 41.683516673, 35.9612556931, 37.2007034828, 37.277734235, 38.3267047684, 38.1088746518, 38.8825686288, 40.8757973208, 39.6341539915, 37.7637958075, 38.0035552492, 41.5926339953, 38.9141411177, 32.7692784345, 39.5807990114, 36.2145412146, 38.9121176333, 41.1456936414, 38.2569863998, 42.7377061757, 37.5024091816, 39.393253627, 33.1766988588, 39.3806126807, 31.3663688758, 33.6204515498, 37.691672249, 32.3789936989, 32.7396763078, 32.5997416805, 32.7434669305, 33.4449489359, 36.2169654849, 37.9391042855, 39.3011546394, 33.7029709255, 38.3917431004, 38.3589157089, 37.558833705, 39.7836396599, 41.0332097538, 38.917253512, 43.8958770862, 37.5076174669, 37.2375668689, 37.1914849858, 44.0218512774, 38.2362531891, 39.7847685979, 39.0343711443, 38.6470272317, 39.2866063221, 37.7515196134, 39.7602876805, 39.6279609439, 39.3298529404, 38.0805983437, 40.4849052723, 37.582304929, 39.9795149774, 38.1733099905, 41.8503210126, 41.2261024597, 41.5207303012, 41.4067742011, 39.9840948215, 37.643305526, 39.9338113683, 39.6601371486, 40.5242999821, 37.4537452102, 43.938655379, 42.3653735597, 42.6864412286, 31.1959738952, 31.2961723866, 40.6675827848, 37.6260744637, 38.3366710862, 40.5069693684, 40.3923488354, 40.1760861306, 41.220077947, 41.9157730513, 39.7842779969, 38.4795996549, 37.5582810585, 39.7834346622, 38.6519518561, 31.3232249895, 41.9148132153, 43.2785463314, 41.5672329827, 41.9139419998, 43.6741560921, 40.5149473069, 38.4788377725, 40.8724853284, 43.673813942, 42.7760146853, 42.3867601755, 36.7151488749, 43.9783554347, 35.2907236568, 37.1934880877, 39.6497630305, 37.5726903353, 39.8737699955, 37.3191057994, 44.0068700069, 39.4464105467, 40.4403057817, 38.046587197, 38.5385798639, 34.7157496755, 36.2201007657, 36.9053306793, 40.3605848186, 36.8569832893, 37.6978096168, 37.8413826387, 37.2997762642, 34.9361820883, 36.0361658231, 35.9128247958, 36.1306220915, 36.0827704694, 33.4251570256, 34.3637063827, 43.6713301257, 30.7687075721, 40.7109153282, 41.9294776559, 43.3111481568, 43.6467927708, 44.3373786113, 42.3239741683, 40.9314805091, 41.5904311321, 41.1378592605, 41.3438555138, 38.6399912148, 37.8936107115, 37.811024185, 36.6530500953, 38.7815365775, 35.2858103889, 38.8439422404, 38.5058276718, 37.9764018586, 37.6806576779, 33.8030547616, 33.2895321266, 40.0520381848, 33.3797835124, 41.4995409732, 39.6911955251, 41.6017754354, 38.8246154115, 31.6333402093, 34.875459164, 31.1890101173, 31.47709387, 36.6830930596, 30.8624114655, 39.3084339106, 43.0354931847, 35.6170553926, 36.5322168441, 35.6080756302, 31.8022422572, 38.8526543557, 32.2203726313, 34.4534411196, 32.6386279827, 33.2803006591, 31.1480474239, 33.9367125195, 33.7955097291, 33.9206775895, 33.44863891, 36.2876017535, 36.1108830527, 35.6786985157, 32.7762803134, 34.1539668052, 34.8949108357, 33.4379242927, 34.0244475356, 33.6748450595, 44.1655104862, 34.6456829382, 37.5120052206, 34.8051938876, 31.9731501279, 43.3613331188, 33.7821305522, 32.8026899019, 42.9860822874, 43.2984254818, 42.9150801008, 37.204539796, 43.2976426502, 32.4781252206, 42.07950003, 34.3165370063, 30.8743664111, 33.578872655, 33.9618698608, 34.6301723355, 37.6559164833, 39.1779748178, 38.7137641114, 37.7709787961, 38.7748619268, 37.1431351548, 38.2466370308, 37.3664687481, 37.889319438, 38.6203163634, 31.3587439, 32.5682553893, 34.4638039214, 33.8804060567, 33.9207832945, 33.5826376033, 34.903734319, 32.4031142934, 33.3478286061, 31.1609387265, 43.973954005, 41.6859690569, 41.6858011145, 36.6782839928, 33.0885243676, 38.3705986296, 38.0429136667, 37.6925810526, 38.1178967625, 37.2088310509, 40.0507057828, 39.1961260765, 40.5828981636, 40.7617257745, 38.477717023, 37.9413346229, 36.3315997044, 35.4858785058, 35.2390561304, 35.4750422085, 35.022229974, 35.51777966, 36.9900993689, 35.6960328174, 36.2932358442, 35.1986398946, 41.8952331927, 42.6028301256, 38.020980584, 38.3982115157, 42.6957135781, 41.4606663024, 39.7732280228, 38.0802820765, 37.4609525753, 37.2639058198, 38.6488827585, 36.7226939338, 38.5455689945, 36.3038369223, 35.3501572126, 35.2945580992, 35.4851257742, 40.4700629428, 39.1362673556, 40.4524854267, 39.5147322032, 39.641517114, 36.9697844473, 40.4104876891, 38.6372330327, 41.2052948823, 38.2786002725, 39.2307202557, 39.7155174503, 39.603465951, 40.9187172776, 38.3732658397, 34.2292854782, 33.656121857, 32.5905227744, 32.0414516903, 31.9736382136, 32.2882667096, 33.2936560592, 33.2642380667, 31.869178788, 33.715815017, 33.8921043757, 36.3914997319, 37.3787222848, 33.9212806272, 32.4380169493, 34.3388875974, 34.6877640727, 39.1122531696, 44.0057925989, 42.3836968659, 33.260878746, 38.4863731114, 32.9694690362, 41.6427631148, 33.4095209805, 32.0468772151, 31.5511003454, 32.1164649463, 36.8913398701, 38.9094133176, 38.3624679672, 34.5035985149, 37.7227665135, 37.3246369526, 34.691334312, 38.2737329561, 33.7902193598, 35.7610661862, 31.235122324, 33.2295555639, 36.6784401226, 36.8212865961, 37.5506412001, 37.223749227, 37.1808358168, 31.8670109641, 33.3217550287, 32.2324942293, 42.1592166679, 34.001896481, 33.0923135821, 34.2439563579, 34.4752494832, 32.3467906005, 32.009191284, 33.9507126355, 37.3150190024, 37.7874496466, 30.7952378066, 38.0378975342, 37.6393750166, 37.5575049081, 38.2389159236, 36.5539360964, 38.7568986357, 37.3362533154, 41.0908694456, 40.7454963801, 40.6061947445, 39.2058647309, 40.4737386218, 35.2473867411, 35.6809465834, 35.1503639104, 35.8582463804, 35.8414345606, 41.4841569382, 37.7641086943, 41.3351599979, 40.5805529055, 41.33417324, 44.3559027168, 39.6197410444, 42.5971697187, 39.1034253433, 42.9452697794, 40.1573246439, 39.6667962295, 43.8332697799, 41.0421537666, 38.0227924411, 38.4420938314, 33.3532620975, 31.1884060774, 33.5443249068, 41.3955188499, 41.8006184541, 42.3707830695, 41.7255608079, 41.6373198349, 42.0361520313, 42.6728690982, 44.0785436887, 44.1574546078, 30.7101800924, 32.3671287035, 34.1171333716, 32.5896930263, 32.1569130618, 34.6519976431, 36.6820926319, 39.1451012398, 39.3927140397, 40.3015815858, 38.292180655, 38.7025212953, 38.9499007067, 35.5804492096, 35.1860932908, 40.9558525675, 35.2560513694, 41.3987042868, 35.0030679417, 43.0213832639, 42.5964375417, 44.0036218152, 35.3371189691, 35.5557964992, 35.3688059814, 36.2570942119, 36.0795859935, 43.9897077827, 42.9598949433, 31.1981729652, 39.0100459298, 40.747505226, 37.7851023287, 40.8180144113, 41.3533386016, 36.6132000224, 40.114182968, 41.7650175291, 38.4113086655, 38.4403536603, 37.2583046082, 39.0197543751, 42.1977762312, 39.4970140606, 39.1849543836, 41.1461687459, 40.561580693, 42.5949981118, 38.3523133784, 37.5550073087, 36.7736620029, 37.471125781, 40.184017451, 42.2501238724, 38.4466838713, 40.8488874035, 38.2609221742, 36.5582295582, 36.3446021084, 36.3584463249, 35.1197246033, 42.7743321285, 37.2780797196, 35.5139065447, 36.1191467651, 35.5967987352, 36.0693571314, 35.6871249796, 40.3104121182, 41.4009382159, 41.814919281, 40.1893524572, 41.6489375279, 35.2065932757, 32.0399886752, 38.4215779353, 32.6990101313, 33.5664446707, 32.0459934965, 32.5559423343, 38.8585713947, 36.8438371654, 36.7202876048, 38.1854430461, 40.9117596671, 41.788230214, 40.336864026, 40.4165355748, 40.4809053723, 33.0688274716, 36.9171456983, 36.975524568, 38.1107188933, 36.7244869239, 31.7494114521, 31.2970352785, 31.5535440205, 31.3266074956, 37.2355285705, 40.6417400812, 42.0787571138, 41.2187114842, 41.0294389332, 41.2752596605, 30.8679799527, 42.2765985834, 38.8194065971, 36.8064088637, 38.6127476322, 37.6586191683, 36.9931415947, 37.7535799808, 42.7314532437, 41.7176493782, 41.6718384724, 41.8721600786, 36.445287769, 36.5257271845, 37.2093387958, 38.5315832581, 37.4550330052, 37.0942464043, 37.1213431169, 39.625456374, 38.025642341, 43.2928668692, 39.8533540685, 43.9906460994, 39.4307116186, 40.8457973017, 41.8878618796, 37.5719755528, 42.8180361749, 43.1075435738, 42.5881875627, 32.6348715881, 33.1285896448, 44.334684598, 42.6603802084, 43.6408265901, 43.2912027983, 43.5542281969, 37.5180460587, 40.4035804672, 38.0815214687, 41.2848234288, 39.3562227082, 36.6669540743, 43.3840745184, 37.557169763, 40.7882870383, 42.3363583043, 37.7304295655, 38.1199750589, 39.0727403364, 38.0880637078, 38.3010746727, 38.4296883035, 39.1363767752, 41.4450183215, 38.8318226834, 41.7564866256, 35.5120690362, 35.4420799813, 36.4970676263, 36.1348869429, 39.8774160218, 32.3639697323, 39.8032844398, 32.8206802286, 39.4843413169, 32.6016704766, 40.9612264336, 39.1535547719, 31.7233400819, 37.2692938562, 36.8452261939, 40.6615346453, 40.2939297829, 39.1953189019, 41.0016350533, 35.8085656203, 35.9728673319, 41.3338531786, 36.4035907002, 41.9542155736, 38.3365926679, 38.8349017488, 39.9195033492, 39.3068931591, 41.5178458064, 39.0072770573, 39.2838840509, 31.7768679461, 31.9301110326, 31.4577468593, 30.8636763069, 32.120700515, 40.0065319745, 40.6819624368, 40.8122823772, 40.4689078873, 39.8713330769, 31.2763427726, 34.7619349506, 33.9929103215, 34.3538886428, 31.7596803408, 34.2382568573, 41.6716080242, 41.0318804519, 41.3362115094, 42.1209275884, 35.1294036531, 35.4692981083, 34.9314439022, 34.0063425727, 34.6894335249, 33.9164576409, 33.6202875837, 36.4856297452, 36.551155302, 36.2614958378, 35.4216405233, 35.9256870323, 36.6825293219, 37.7599986545, 37.5386011266, 36.6758707315, 36.7676103687, 38.7040072377, 38.6844629045, 37.0636196585, 37.9419476765, 32.174428567, 31.1637100397, 33.0139769349, 31.2250570959, 33.541890221, 31.6271879137, 33.9410632311, 30.9147319692, 31.5493126623, 40.753354975, 34.2252888988, 34.2630476436, 33.4141318529, 34.8640541495, 37.2638064748, 34.3751757184, 42.3940043397, 41.5970568925, 38.3645535085, 40.2278665258, 41.3976949918, 39.306887988, 30.6527878644, 39.4816938934, 40.7697992726, 42.2456787423, 38.7086042897, 42.2483215691, 40.0403247097, 43.6407114485, 39.1610966878, 36.6781465827, 37.3082223538, 37.7955752761, 35.78523446, 38.4485318702, 35.183675459, 35.2872276962, 42.7810297274, 35.5311227836, 36.4287832307, 35.8070290194, 36.359183427, 35.0171309358, 36.2922824277, 34.0802693479, 43.6739630017, 43.6738364152, 34.6015107643, 41.2438649832, 36.251161192, 35.153627968, 43.6406889699, 43.995270261, 44.3332437371, 38.3005705626, 39.0857537978, 42.3655572355, 37.4595429742, 41.9389620146, 31.5989301602, 32.133119377, 36.2722872727, 36.9324791926, 37.6066980276, 41.1535482917, 31.9890600578, 34.1491454755, 39.9696076958, 39.5598651728, 39.7516096683, 41.3629874458, 40.2783416501, 37.9408612071, 39.1432538255, 41.335770442, 43.3566975732, 35.1748378291, 42.8626748214, 35.1404290944, 35.5272251824, 35.4247804576, 35.7348730109, 36.893816675, 37.5283272769, 34.9745328326, 31.5514163229, 32.3025879896, 36.1691711347, 35.9506453951, 35.8133877031, 43.9457854098, 35.6033903315, 32.5095687969, 33.5548960846, 33.5908932644, 36.7143398457, 34.7886752094, 36.9336230157, 38.5122590394, 37.8149137182, 33.8351124991, 37.2695946573, 37.1250718999, 38.9080472056, 37.1091588113, 32.7141203861, 36.9219371065, 31.1539962459, 33.4943352782, 37.1048305555, 42.7619469441, 40.9878177938, 39.7694961508, 37.5181872789, 36.8008945477, 37.7390455688, 36.75779113, 32.0018156684, 38.0433099842, 41.02268449, 34.0510512735, 36.3409009217, 33.2679770826, 33.4648704166, 33.55815653, 43.0599206808, 43.0812658092, 41.7721959948, 37.5945931635, 38.0679316208, 37.1104650617, 37.5453504286, 36.8905354381, 35.9110305113, 38.0920987547, 41.9162670685, 40.3469788541, 42.2467450633, 39.8640267905, 41.9152322478, 38.5996261104, 36.3411511127, 35.0219813055, 40.7291693284, 34.6469922188, 33.589616794, 41.4161634762, 42.2509651191, 43.4232483548, 42.9536262637, 43.4640025961, 37.7625392709, 30.72901391, 40.596900546, 39.0000299838, 40.4727307046, 37.9924276655, 30.8449731906, 40.5634803777, 41.0334184022, 43.6712010881, 30.8803741115, 31.9444677235, 32.7891847571, 39.2582115052, 39.2508014611, 39.5615461943, 39.5286511861, 39.7135239573, 40.7882450511, 39.3736819766, 34.366726922, 33.6657934514, 32.2475452858, 40.5669934865, 39.6419965938, 41.116341238, 35.0479652109, 39.7369710185, 39.7658656992, 41.5361731613, 33.7791647715, 34.9015266983, 34.7794154445, 34.6917522282, 33.5542297991, 37.1234323513, 34.5219480137, 32.7804108813, 34.0280895136, 40.5609496936, 40.0158711012, 38.9345249053, 39.4387607931, 40.579655848, 36.216967157, 35.1810810588, 36.5241527417, 40.5216077194, 39.3170099772, 37.9466026739, 39.104843765, 37.2053909077, 38.0268606917, 36.8356131563, 38.2153009165, 36.7417112692, 38.0323399145, 37.3662419324, 33.9694222268, 38.5417132567, 42.0800770894, 42.4699534857, 35.830657766, 35.2957949786, 42.4707748509, 35.2086611119, 32.3968087863, 33.0611344032, 33.2896963246, 31.529327079, 30.9329654439, 35.363797187, 36.2063362558, 35.7046491598, 36.1600604781, 35.8988429378, 39.489766972, 37.4195039724, 39.3132480198, 34.4281448733, 34.9472630751, 36.7543651586, 33.593158862, 35.9200606644, 34.1634811509, 40.3111918114, 41.6437892235, 42.5912300788, 39.0892505861, 38.8264629103, 40.3884510303, 33.1100517696, 35.2173552419, 35.4905952201, 39.4724074572, 40.4225281074, 39.8055977675, 38.1615518013, 37.4783164513, 39.8307282757, 43.8499837304, 39.4655593554, 31.2308359436, 39.6225493568, 39.6215154337, 39.005466954, 38.0835871309, 40.0105055655, 32.7532106319, 42.0423975286, 38.5513546873, 40.7881894967, 43.5939053376, 42.6687442125, 40.7396012268, 32.3470749151, 41.8403361253, 39.0026871427, 39.2732526692, 40.6599754809, 41.8936460439, 40.1746988994, 32.7320016318, 41.1393024685, 39.587208441, 40.0532351204, 32.864857861, 41.1174400564, 40.587443633, 40.5399924585, 39.082616998, 31.1259824839, 32.5966679903, 33.7212152519, 34.0452246308, 34.4415848246, 35.197083614, 36.0591528976, 36.1493510936, 32.3575716007, 35.9799595353, 42.5773159377, 34.1365223257, 43.0210240243, 36.3801626439, 41.3237147547, 40.1334176095, 41.4244193088, 40.8509803815, 40.3018006489, 39.9199628745, 38.9238179251, 32.2625449377, 33.654819179, 33.3598894603, 31.7622668528, 34.8813778962, 41.6846873149, 40.9998736311, 38.7506527357, 41.1928418237, 38.2986076934, 41.048728589, 41.2341386272, 38.7682051229, 41.0299579614, 43.3562554136, 37.7303475218, 42.2284064973, 42.9174396199, 42.4936019865, 42.1411656119, 40.7057991585, 41.744785304, 41.331865756, 40.0090390603, 43.9243891686, 40.7701047683, 35.4967819354, 38.2912811124, 36.9910832435, 38.1972202688, 37.3655110346, 38.5182375206, 34.740611283, 37.1313134355, 36.3087277394, 36.2869153954, 33.191128885, 34.2910722239, 34.4836555293, 40.7434251699, 41.0304788245, 43.2840136887, 30.8418447999, 36.8834788096, 31.1965954987, 32.4343678036, 32.8066820314, 32.0176170211, 35.8219893755, 36.3962850875, 35.7897228882, 36.364709673, 41.5459508207, 37.705714472, 38.8409973718, 40.1611954736, 36.231668433, 37.3538479255, 37.7205437382, 36.4696369646, 37.8723115996, 38.1869939319, 38.9335714821, 37.846582275, 33.1712252513, 42.9440490977, 41.2810041521, 43.9880729723, 38.0142514663, 39.5236121413, 38.6851380014, 35.8598016351, 41.6164060568, 36.1611339408, 36.5129185878, 32.6796385782, 38.6619761997, 39.5761590803, 39.0860159532, 41.9143424531, 44.3356184098, 42.944152441, 43.3348587739, 38.9416945268, 38.6327587496, 39.4956454125, 38.2146888454, 36.8279513752, 37.9618426235, 37.1125528413, 37.2702269786, 34.2902359624, 31.5324098742, 41.0474746478, 43.368480112, 43.018379981, 44.1129012561, 44.0688593968, 38.8734018925, 38.5065757954, 39.5749720141, 40.438890407, 40.283387895, 40.8620867758, 40.2579952629, 32.6010053157, 39.9124535297, 34.8101411894, 39.0597628903, 40.7745919583, 41.0223192874, 35.6426163957, 39.7414538713, 41.1676067071, 39.0775037076, 31.5145021182, 32.761999267, 32.8528559231, 31.095212055, 31.1530891305, 31.6404361583, 42.7109965556, 33.2835969191, 43.0005261501, 33.6132465063, 42.6798715593, 43.7999346341, 42.8673544835, 40.7714213694, 38.8458517868, 41.7074374395, 40.8462742919, 36.4414346628, 39.3338011687, 35.6544604584, 35.5830550866, 38.0291006002, 38.8447407824, 38.4200827957, 39.2689073955, 38.4626503798, 32.0782730181, 40.919183935, 40.4956111573, 41.4368562942, 32.7512909739, 30.9385289549, 39.9730620334, 34.5539406173, 40.8542719715, 42.1602168735, 42.6003049992, 42.2576238152, 38.6882719556, 42.2485916204, 42.0358684952, 39.9726101063, 41.4456567857, 41.8211686118, 41.7718149166, 36.7314188799, 40.9630231097, 37.0114080854, 37.3604287865, 42.4018679676, 37.4004250474, 41.1652272455, 43.1556949343, 43.3136165223, 43.560854296, 41.8879754636, 37.9690982538, 38.5947864303, 37.8115197395, 34.9885936302, 35.8171165699, 35.2020185886, 35.4868231634, 36.414481576, 34.6181068554, 43.0010094645, 38.3598447648, 38.2067091044, 38.9695935455, 36.7311668731, 38.1445113179, 34.973831384, 36.4912943281, 35.9209036816, 36.0439446949, 36.4345500368, 31.1751388309, 43.9695934679, 34.2254205843, 38.7644793725, 40.2106686078, 36.654827339, 37.3172970972, 40.1580407528, 31.1719029633, 38.4704253617, 41.46755035, 39.7581653266, 37.7532338775, 42.7476136623, 43.3753313686, 42.6712218863, 44.0305637023, 37.6583215818, 40.1401417958, 40.1282064722, 39.9735854511, 42.068497584, 39.1691210861, 41.4041567194, 33.2144198436, 33.5444136582, 34.2227380965, 34.519384465, 32.9884620638, 31.248349144, 43.8196612649, 44.1195892565, 31.4028749232, 34.7003327889, 31.4291540244, 43.0067435675, 32.9360918272, 32.0177686952, 32.4061710338, 32.2644384317, 31.9133549344, 32.8798751655, 34.2794764064, 32.7432908434, 41.1771001246, 33.1240184092, 40.6130208132, 40.3670703371, 40.9913791239, 40.0419318708, 40.8550149601, 39.2508606289, 39.4278514521, 39.4554900171, 40.8289969489, 40.7542455129, 40.8520515159, 40.2107454113, 41.0275787102, 40.3984428038, 34.2515182722, 40.7457658585, 42.9022074071, 43.1467299722, 42.9123493026, 42.7288893103, 33.0408524582, 32.3531047593, 34.1274177549, 32.3587638637, 37.6045635628, 31.5020876177, 37.5601498072, 39.6301394454, 38.2915151726, 39.5604275458, 40.0966777395, 32.4635984427, 31.7794943014, 33.8337033702, 33.0767997775, 31.0378330334, 35.1471921316, 36.3817037145, 31.8289286056, 41.8979506735, 42.8446269166, 42.633435837, 42.7022038062, 35.2793496454, 37.8017750089, 31.5707114205, 36.2061063096, 34.5263653338, 35.5936563633, 36.3902748779, 43.2906568167, 43.3771839082, 37.285997033, 37.9697549009, 38.6890339816, 37.6243749692, 37.7732101749, 37.521533307, 39.8233496763, 37.3371445538, 39.0366623113, 40.0723041224, 38.3114950605, 40.5157840019, 36.3935037427, 34.8322040241, 35.7024949908, 35.6623214269, 35.1336935994, 44.2843328431, 41.3248856181, 37.2924265503, 33.1996383965, 39.2156420114, 32.3868076695, 40.1905826788, 36.2979418701, 35.2400032268, 35.8939975888, 35.9265153163, 36.1547244608, 36.501182347, 40.4793093007, 39.9615618071, 39.5275391978, 39.4401096913, 37.3624756836, 39.9879426198, 37.1916129039, 43.1137541038, 38.886760434, 42.323535709, 38.0681186398, 33.6751305699, 32.0191566009, 32.8476660886, 33.2695067869, 31.6768635819, 41.0933881364, 42.3514913888, 39.6436313883, 39.3913271009, 40.5073551821, 40.8293102218, 31.7343498436, 41.4369690465, 32.0194541502, 37.7832306298, 31.6226239168, 31.5696766549, 37.773999797, 40.4167472535, 32.754494496, 40.6516685439, 41.1285094058, 40.5311376231, 41.3615538236, 41.5604283625, 33.2662440046, 40.8422536313, 32.8282060027, 40.6106897783, 41.3021557821, 41.807629157, 41.3430271217, 41.0584795219, 43.7843911789, 43.6612156864, 31.6769905624, 43.4196392047, 44.0408001161, 40.6442194508, 37.3142403802, 33.4826322542, 37.4239512721, 37.7220267621, 36.6564481445, 38.2971965899, 33.7936636957, 31.7530387545, 30.8338945064, 34.5723892641, 37.7270147012, 39.4143113308, 37.4054972691, 38.7695532018, 39.8600305202, 41.6858359181, 32.701752448, 32.7921669443, 33.0550269315, 33.9576482068, 31.8054778911, 34.7806777937, 36.0414238895, 33.2404562858, 35.570220145, 33.0253265517, 41.6862239106, 40.7474109087, 42.4711861324, 40.9232932176, 42.1717192329, 37.9784292501, 36.7055442791, 39.0906728463, 37.7065594999, 37.7348315752, 37.5288116578, 36.8600520471, 37.0188160584, 37.0537061732, 36.7371364917, 41.334769887, 40.7397040706, 36.6207108103, 38.945928811, 37.2071312191, 37.1458127052, 36.8530267414, 34.678070126, 34.5387044037, 35.7639239698, 33.6637189, 34.639959485, 36.3958714801, 35.710202614, 35.0060745475, 39.4149117562, 40.1207854178, 35.6399037633, 39.6399463583, 43.9867816136, 41.5135347968, 39.9273885582, 39.9254546346, 39.8536214879, 32.4037257579, 34.9165293896, 31.7168849844, 33.0336428362, 32.6670796349, 41.4019957145, 43.2521033391, 43.4258914896, 42.633611907, 41.4264130409, 43.4800771953, 38.0229267909, 38.6999336835, 39.132517718, 39.4634318995, 37.2666373732, 36.7648541455, 38.1583824153, 40.2735927219, 37.134092433, 33.898338054, 33.214448203, 36.368677507, 35.5381020452, 42.3318288573, 35.2621676744, 42.4686090835, 37.552281517, 42.3514141644, 43.0597873504, 42.7324428461, 42.4519276955, 41.716417273, 42.1706008213, 42.2676626858, 40.8799896846, 36.7121851307, 38.033775905, 36.4017785472, 37.2160130227, 34.8408896205, 35.3114089564, 35.4021052404, 34.991657558, 35.5738870053, 35.4480113112, 34.8292418318, 34.7699218374, 36.6933311021, 32.4001886565, 44.0655034675, 42.5950322132, 43.7073213732, 41.139654579, 40.7498739491, 42.4849610932, 31.1743705468, 36.9656490802, 38.0039554708, 37.9220833417, 37.0585806101, 37.1037473165, 36.750902058, 39.7815343103, 34.7535846813, 37.8047492067, 35.8474984959, 35.6091449624, 36.0658238775, 34.6141888186, 36.0766899252, 35.4938877117, 36.1407451277, 34.0763457438, 35.388458129, 42.2533681236, 42.2848120449, 44.3383698447, 35.8426544749, 39.0576493631, 40.0967340284, 39.7821383621, 39.87023679, 36.7470885304, 36.8554459292, 39.797856256, 37.1568827967, 37.052569612, 38.7123864166, 38.0525698343, 41.2041304897, 37.2232306956, 37.4130592862, 43.7211060516, 43.4268922395, 39.3338129782, 39.545640785, 38.6066043893, 38.7543029162, 40.8569258472, 39.5204161034, 34.3950764741, 33.7724009416, 33.0794842046, 34.3917067515, 34.3319221615, 34.4601551258, 31.4316376497, 32.3260369929, 31.7311581064, 34.1320516883, 34.7683423053, 35.1548640584, 35.9966904197, 35.2017397124, 36.2765722269, 43.9065978713, 42.6604444195, 40.7685430538, 30.8531022001, 32.8317317939, 40.1376201319, 39.9167188416, 39.0484141986, 39.4150111958, 34.7629031004, 30.7095338455, 40.4150323306, 40.1636731114, 31.213446843, 41.4249821043, 33.7699671989, 39.9188588515, 41.9916799945, 32.2669254934, 37.053794721, 39.6204798626, 40.5241292185, 39.7273274706, 39.7547351658, 39.965197305, 37.6098775063, 31.0539154194, 39.0224249067, 34.7357124013, 39.211470286, 33.7812194698, 38.4944320583, 34.8338493549, 39.6048532577, 32.8812583165, 43.2008186512, 40.7776913466, 43.005905536, 43.2417946858, 42.8530178346, 38.6805426752, 39.3709129226, 38.3318243208, 39.4690473076, 35.371784452, 38.508609799, 37.3721812467, 38.0583873244, 38.1649797107, 34.5763887269, 34.2900655672, 36.1177409133, 34.3175250401, 36.3907965443, 35.3868473026, 35.9525519426, 35.6118153327, 35.7494195056, 31.4465362395, 37.4812349949, 32.0922366129, 42.5830408431, 31.6659134441, 42.1350411835, 32.8227282414, 42.3399620689, 38.9903055462, 34.639892337, 37.3221157756, 38.2949201036, 38.9967787854, 32.8624476722, 39.343873311, 37.8769458961, 37.6163201146, 37.8246899511, 32.9142128973, 33.7712666722, 31.7521260975, 32.1004507679, 34.1758072592, 44.0818018943, 30.8218793009, 36.0514137822, 36.286134, 35.8032761706, 36.3593571648, 36.0409825968, 38.7204832766, 41.746224533, 40.8914321217, 40.1244765125, 40.4562186426, 41.0145699993, 38.4361366526, 40.3884717026, 41.2951820121, 41.6197894584, 39.8939866709, 32.7536118258, 32.4045904874, 31.5505705534, 34.3568711, 31.2057651998, 34.1635224394, 33.9022852737, 33.8998889051, 40.3317240063, 41.123607515, 38.8041778921, 41.3560811747, 39.337778412, 36.5823166044, 36.695312048, 36.9315699899, 38.7387985562, 36.9917233755, 37.8418725763, 39.2045436035, 39.5101641808, 36.1754869423, 38.9961170661, 38.1756024624, 37.8319264769, 37.3786116222, 32.4594390951, 34.2687943974, 33.4531716908, 34.1334015503, 31.6024070387, 33.3162447606, 35.7415206763, 36.0948246186, 35.5994632994, 43.5797443265, 34.6501617359, 44.2734033294, 31.9229461414, 34.8543711013, 34.4439272734, 30.8781322594, 31.1082439171, 33.771432922, 42.9904201255, 43.5794118821, 37.6333571833, 36.6802903163, 37.4358405938, 38.4137715768, 36.9462325202, 39.1734801956, 34.0214298029, 38.8375351238, 32.7134889115, 41.4889212408, 41.8551804677, 41.829772924, 34.4904157108, 32.1546127317, 36.9413765419, 37.3841149984, 40.0274332827, 39.4271775558, 37.2189758797, 40.2397848616, 32.3858033595, 41.0331656451, 38.6496819066, 38.6678167261, 33.6026588606, 38.3180127593, 37.3223040156, 36.8940229618, 37.9706695159, 34.7542414488, 36.2687067134, 36.0129250455, 35.3324818136, 35.3106245954, 35.9672211242, 34.2451669026, 38.9059391538, 38.785149315, 40.4376468162, 35.9293829048, 35.0486209547, 36.4005494398, 35.7717682171, 35.7933347874, 37.2442350612, 38.6959538903, 37.8308361523, 37.4693524219, 37.1038194031, 41.950941371, 41.5564779067, 38.0269659428, 36.7167989134, 38.8352534166, 41.4692410346, 30.7901512405, 38.7279208391, 37.7074004854, 36.21083981, 36.649109321, 38.460162095, 32.5350124639, 31.8696592605, 32.9985655588, 33.9806247369, 36.3358739601, 36.45573969, 35.9934862022, 43.4163298185, 32.4181575903, 43.0672058394, 32.0931747753, 43.2398026279, 43.466640239, 31.5639103866, 33.9504497436, 40.490693558, 42.3243310558, 39.2613876477, 39.8601388346, 38.83018208, 31.4075465888, 38.8844442963, 40.091690301, 40.398752307, 40.3852802231, 38.5987305097, 41.6962209965, 34.8171799676, 31.4828058989, 34.8805469834, 38.7741677095, 33.086421394, 40.2999563786, 34.2898601011, 34.8872425386, 33.4389960984, 40.8138552525, 41.1263015615, 41.3172112062, 40.4407697915, 43.8734883811, 43.518445186, 42.9197178905, 37.9418632516, 43.9406387982, 37.07586225, 36.9333817806, 37.1258986896, 37.2807720735, 33.2972893694, 32.7362372825, 34.3512130208, 33.2700973966, 33.7942663281, 39.1137358836, 39.335640561, 38.8978944326, 39.465475977, 38.1469296189, 32.1576967811, 32.1715952047, 33.70169719, 31.5335772497, 31.3228601993, 37.1737258665, 37.5057750544, 37.7875674802, 33.5510526617, 33.4731420782, 41.4109368131, 41.8066232377, 41.2735301459, 41.464708875, 41.7925037721, 36.7277283547, 37.1597480886, 36.7866843537, 37.3528005668, 37.7318483388, 39.9307091048, 40.4835637558, 38.195449508, 39.7693470199, 38.4843735335, 38.318916433, 34.7382955657, 36.4183405976, 35.1407047969, 36.0610613909, 36.2959570262, 35.1248176135, 35.0574291241, 36.1512269283, 44.0222461866, 34.2653676249, 35.3334907458, 39.5630637394, 37.4200920793, 38.3998560495, 38.5196699622, 38.335552332, 37.4783722278, 43.0901632062, 43.9901144074, 43.0319648159, 38.2203408082, 44.0223984686, 38.8798368873, 44.0223655205, 39.678796246, 36.6865207718, 38.4162880922, 38.4238611518, 36.5942224403, 41.8519435835, 43.7536258683, 31.0763079726, 45.5855779985, 45.017338194, 47.8721108853, 47.7883710654, 45.5614263888, 45.933779038, 45.0048068026, 47.1088305018, 45.0277728154, 45.7709734284, 44.9780432591, 45.3782719843, 46.6589065658, 45.519528631, 47.1224853014, 46.1488155336, 47.0454946602, 47.6457918771, 45.5139001567, 45.8373901671, 48.2345485016, 46.4325824126, 46.4572358314, 46.4566048175, 46.6735582142, 44.6739445056, 45.172137887, 46.4704665049, 46.0825070618, 46.5859773253, 47.5779406049, 46.9496738545, 45.0225266107, 44.8573961673, 46.5921948364, 44.7964472692, 47.8804640304, 45.4260489849, 46.4089387486, 47.6070919005, 47.3090887918, 46.1116876057, 47.7400404931, 46.7158618463, 45.4187034644, 45.1567259417, 45.0708442053, 45.9024334289, 48.7210960898, 45.6690273137, 46.897653485, 48.2945498951, 46.9404281266, 47.4569852289, 46.3581113431, 47.9216385605, 47.4571519757, 45.5803199382, 46.0090534686, 45.9201588109, 45.5196592495, 47.3266247128, 46.6647140772, 45.0211700983, 48.7703788571, 47.6408329465, 44.9951146388, 48.2454138724, 45.0041551306, 46.236935097, 44.7196057548, 45.46130006, 48.4705835481, 45.4008067545, 45.7797619627, 48.7920561953, 47.0364515701, 47.0233841786, 48.0694317415, 46.9357300344, 46.0968930226, 44.9058951829, 45.5894788064, 45.7724402578, 46.070995885, 46.4088293564, 46.2296639285, 47.7738206763, 45.5021535778, 48.0664478196, 46.120815963, 46.8924434431, 47.1152893195, 46.0820013699, 48.76738884, 48.201523634, 44.7899415356, 45.6289003689, 47.5095358742, 45.9451191691, 45.1523531851, 48.7764368906, 46.8163118503, 47.6746407337, 47.3510617527, 48.5487940294, 46.5774330539, 47.5762522369, 46.5497179614, 45.2962419259, 45.9371590627, 45.1884071132, 46.0153048639, 45.9439368461, 48.6280135352, 47.6042889297, 48.7750018633, 46.1099451734, 48.8150027441, 44.6488334815, 47.3567842836, 47.7175479749, 46.2851612181, 46.9802402981, 47.6749609726, 46.2086653306, 45.933516987, 46.4309275334, 45.5801540775, 48.7050420267, 47.2777632484, 47.3511516351, 45.0255875442, 45.7055406501, 48.7723191575, 46.1125971048, 48.790861537, 46.9772288889, 46.9329375995, 44.7160531154, 46.1963730346, 45.9378595761, 46.0128711252, 45.1228114222, 48.4791572422, 48.5765489027, 47.0233160413, 48.5320027574, 46.0222665564, 44.8583362726, 44.7156207069, 44.9382523964, 46.4042011407, 44.9988562523, 45.0345932972, 46.4084102034, 46.0523449713, 45.8989347101, 48.7670195621, 46.262065737, 46.9015084322, 46.4568264576, 48.8255185236, 45.1739652272, 45.3673834111, 45.0646438725, 45.4906400801, 46.3044047864, 45.3404445775, 47.9737369509, 46.9345160381, 45.2733987474, 46.6085682051, 48.3579342766, 45.6670514758, 47.6207085312, 48.0470851615, 46.9195359935, 48.3989092074, 46.2914456633, 48.7836520511, 47.308145485, 45.51685643, 46.252633271, 44.8288979061, 45.8134099342, 47.8371490984, 45.033943575, 45.4753321485, 45.3827620121, 44.8982659628, 47.2177093274, 46.2978367201, 47.7360756141, 46.1935925846, 45.5602272665, 45.1602126505, 45.5797879465, 45.3101183991, 45.708566502, 44.7600986136, 44.9033599332, 45.546794295, 47.6447937992, 48.4322199172, 46.3322538134, 45.4233664996, 45.227493037, 46.4473661106, 46.1122371029, 47.5755355543, 46.1075581805, 46.8107277439, 46.2640414115, 48.7188890855, 46.4558010172, 48.2691301476, 46.3271490652, 45.6801167591, 46.3092750398, 45.423356303, 46.52312303, 47.1507353322, 47.2058596198, 46.4318712852, 46.534529054, 48.1615308772, 45.4625553959, 45.4049346751, 45.5916250953, 45.4466748428, 47.2631705063, 48.25928377, 48.2280292644, 45.3950957814, 46.8565156853, 46.8602899784, 47.4562487664, 46.9792175146, 48.6851959447, 47.4535423317, 48.3693043509, 46.0607132772, 48.3651535942, 46.4661178199, 46.2114109001, 45.8441266651, 48.2948801253, 46.663188787, 45.2115941859, 44.7891725002, 45.8798816249, 46.3339763473, 48.299952784, 45.3376606463, 45.2624129477, 46.1916034121, 46.23966564, 47.8691450841, 45.2325461339, 45.282777755, 47.2665138604, 44.8206895513, 45.8625530216, 45.0692952516, 47.7482237399, 47.4900878897, 47.6130002531, 47.1240762196, 45.8737475166, 44.8233972802, 45.4187286051, 44.90321092, 48.0489763044, 46.9832952287, 47.1478873639, 45.4884048354, 46.4964636832, 47.1171494436, 45.7586289883, 48.2501255077, 46.380711079, 47.9214354958, 45.7665024565, 46.4821779893, 45.6993481154, 46.2294777214, 44.9409772144, 45.4298934382, 47.3249444213, 46.964921019, 48.6552775318, 46.5981563467, 45.3004942516, 48.542434061, 48.5616286331, 48.7726843432, 45.5862043262, 45.4443683013, 45.5522722012, 48.3437110975, 47.6102434373, 47.5876563059, 48.2217856391, 46.3570964655, 44.9341069071, 45.0387307871, 47.9023764167, 46.4309346033, 44.9462639986, 44.7264311928, 45.8483627628, 30.1511674882, 30.3322370206, 30.3179246361, 30.1212619925, 30.6609435419, 29.8120835167, 30.5435166389, 30.7808634644, 29.9995539003, 30.5791376075, 30.4986249019, 30.3346452867, 30.722484992, 30.4924631443, 30.2248225273, 30.647851827, 30.1037291096, 29.8833454052, 30.7436321703, 30.4869254957, 30.2665886983, 30.3103036729, 30.3001204903, 30.7823967857, 30.7063054899, 30.7857282573, 30.4375487615, 30.4964619761, 30.6109878503, 30.4373175554, 30.1957950387, 30.2244167873, 30.7306081833, 30.4438794536, 30.2414074894, 30.4579902172, 30.2908853314, 30.2581818785, 30.4070994377, 30.6353892758, 30.4637385994, 30.7923108256, 30.6483723076, 30.537684812, 30.2292467407, 30.7018641966, 30.3316177332, 30.5793215744, 30.2792060591, 30.3309467461, 30.5441696199, 30.6589874862, 30.2677611367, 30.4058947728, 30.4164906168, 30.5136371015, 30.1293688818, 30.599010399, 30.7348686031, 30.6098775586, 44.4035096734, 44.7267353947, 38.0371405279, 37.4324227433, 44.4911873292, 42.7330280327, 41.3306026699, 44.2944219452, 44.2413789631, 44.5476273358, 44.0345012464, 44.5265502783, 44.1421995876, 43.0815019165, 44.5475607554, 44.3892524006, 35.9801846058, 44.3499293284, 32.5792754328, 44.7664988262, 44.4526674016, 44.8894912264, 44.3714667601, 31.7920854879, 44.3695858304, 44.9433455702, 44.5206877113, 44.7089466743, 44.4923318857, 44.3698909847, 43.6738892308, 39.9609833812, 40.3547213702, 38.384686497, 45.5411482878, 31.3426882908, 43.9340175036, 44.4144663285, 41.0291002094, 44.9806359058, 34.8606962657, 44.2287608951, 42.0370300479, 35.5889370924, 44.4121401795, 32.0552202372, 36.3393979617, 44.4138906881, 44.4125846428, 44.5889972715, 44.0386163676, 42.3839530474, 44.2842287953, 39.0658602426, 38.7440094894, 37.1064532602, 44.7258126448, 35.5122357366, 41.6849105948, 45.1329715896, 44.3585650493, 36.7102633423, 39.3523789827, 40.7374833935, 42.4275238307, 33.3126529639, 34.4857804165, 33.7354876987, 44.641909562, 44.488355134, 34.0889758375, 44.5668576088, 37.724033682, 36.0110418951, 35.2152066978, 33.7007591351, 44.2475027527, 43.3771858226, 39.6555628213, 44.62946164, 44.5794859694, 44.5043257617, 45.0404606961, 44.605489384, 44.4087915503, 44.6814708674, 44.5833200242, 44.4757702714, 44.6682322397, 44.6783679162, 44.6845781731, 44.354281459, 44.409844734, 44.4160393116, 44.4555661773, 44.5000598543, 44.6852551826, 44.303745326, 44.3191047312, 44.746082903, 44.683570944, 44.470246319, 44.1171728144, 44.4608892717, 44.4650228328, 44.4966064145, 44.4528500238, 44.638892594, 44.7273979978, 44.5155178123, 44.380173858, 44.7348889517, 44.5925243909, 44.9743314694, 44.6891368686, 44.6724385322],
            LNG: [-135.498613769, -149.569659366, -153.800576013, -149.106464807, -156.177322385, -161.984544876, -140.366603768, -132.74327124, -150.01346559, -156.699375477, -144.43988455, -159.751967616, -151.39369922, -159.715281876, -153.44189887, -163.96605378, -143.208023007, -158.211624491, -163.368355593, -146.564481375, -135.286202271, -131.380744202, -135.310746942, -151.586069136, -131.71774844, -134.159403906, -119.194025914, -99.1693354447, -99.760743364, -98.567442975, -98.1249036473, -97.1656189877, -97.6330956631, -97.4267128197, -97.4926139237, -96.920047348, -98.2783681746, -97.5187891722, -96.5261612262, -98.5087807148, -98.7386302929, -100.304282591, -98.2186358842, -97.9483053668, -94.965939426, -99.1080590979, -95.7709744271, -156.564226766, -159.596498638, -156.946483037, -157.973387341, -155.518017447, -100.3146188, -96.5787043846, -97.3569763729, -99.7567989959, -95.9881727112, -99.1104287073, -98.1809487057, -94.6067656164, -96.6512185964, -97.6195538471, -98.0312510429, -95.3924095071, -97.5349639644, -99.3312140803, -95.9876169794, -96.404358361, -97.7338823612, -100.418026392, -99.2461019913, -98.5275681199, -96.2777284268, -98.0863730747, -98.0900830196, -98.6974763555, -97.7414365429, -98.5199828366, -96.9720483465, -101.151715532, -99.7621229333, -97.7207052543, -99.3499782805, -96.99970941, -96.2225823006, -97.6752729813, -99.8219330257, -98.7114470821, -97.8592663749, -95.4561058853, -99.0997263196, -96.9304244079, -92.0636563978, -90.4476885074, -90.1379421622, -80.8881895615, -81.3230268843, -81.1489088696, -80.4681176008, -89.9305389346, -81.7437962652, -93.1931105627, -66.8587241881, -66.1325214209, -66.792094816, -81.7110751443, -83.1805438302, -80.6163944238, -81.8096363578, -81.1889041817, -82.8006893021, -85.2270545557, -66.3892994156, -66.013507165, -65.7560432228, -66.4199054244, -66.4334453347, -66.2523993807, -65.6703625448, -66.150100704, -66.1439848198, -65.9552216745, -66.5166082555, -90.9119021403, -82.7210031929, -81.3407468131, -82.3073444778, -81.1656040348, -82.4187167919, -67.1750198697, -66.7533699867, -66.1272797359, -67.1204595588, -66.2649712354, -66.9440360396, -66.0608847719, -65.9763402377, -82.3718995551, -83.6025193473, -81.3382143358, -81.8091504429, -83.1582110871, -82.3213715334, -81.236566272, -80.4830606249, -82.0806001907, -82.7383101018, -81.8141404528, -65.8145624523, -66.7209374064, -66.6141459211, -66.9257784595, -67.2302585166, -66.0509261323, -66.8607258146, -66.1691395413, -67.1542332715, -65.887388026, -91.0626098612, -91.731762605, -84.402959761, -81.4434450982, -81.1958704961, -91.4514869629, -82.3914040506, -67.0379539679, -66.3093647054, -66.0558591099, -66.5602935073, -67.121930414, -66.6745083818, -65.8970197219, -81.6978067926, -67.040198427, -66.5884578794, -67.0049421672, -65.909480768, -66.4958675049, -90.8663119441, -84.8183239067, -81.3138014358, -65.8104381215, -66.1146135752, -65.9778473708, -66.7966279331, -67.1128519225, -66.256224048, -80.7428389927, -82.1691654239, -82.3577492328, -66.3607910054, -65.2894457842, -66.277456535, -65.669674327, -66.5601764236, -66.9202132016, -65.923059847, -67.3283377326, -66.4901839758, -66.9410333495, -81.8580534465, -80.487357213, -81.8948632085, -82.4664692156, -66.3277609696, -66.2220296503, -66.1615163577, -92.3241378855, -89.7035215562, -66.3374500192, -66.4723784958, -90.795736683, -90.5070206369, -65.7261663655, -66.9830906464, -66.8672017935, -65.8937063035, -65.8697337683, -90.3581659448, -89.6008701002, -66.2139196668, -66.2458033899, -66.9721371579, -65.9994348885, -81.0423544133, -80.5700417678, -80.4361707345, -82.0569355742, -82.2958985383, -67.0808313282, -65.442029677, -66.3985610654, -66.7026283392, -96.6501788938, -121.600491309, -108.320361668, -104.815995603, -103.479918502, -106.865973665, -95.3832769751, -105.976147595, -95.3761468321, -119.820440729, -98.2043813742, -95.7481456697, -101.896913799, -96.6845784267, -96.4725793996, -94.6164043464, -100.779726645, -94.7331208372, -101.892926349, -102.828040429, -95.9283130141, -101.826846449, -96.677749299, -102.605366816, -122.728646986, -101.947673057, -118.967757669, -98.6838450589, -96.7774306722, -96.5810224045, -102.60240259, -122.233471682, -98.7839759296, -111.887834215, -112.784754578, -113.289235531, -98.0231468135, -99.4049397663, -101.061956735, -101.042170198, -119.745560812, -94.6966928303, -100.273374144, -101.799645652, -115.469590453, -117.632314052, -96.2326919205, -95.542834925, -98.0758539397, -96.6889350109, -99.912442615, -100.393867291, -98.9530586602, -96.8387876195, -101.791204094, -102.335538776, -99.1859445601, -102.424114462, -103.201237464, -104.392491316, -101.80610256, -103.071575466, -105.358198561, -105.053684645, -106.194386908, -102.602816832, -105.644451131, -119.663733625, -114.901546138, -103.471279957, -106.930274944, -107.192378655, -105.851062033, -105.630889149, -113.100646504, -94.7275991197, -102.603153969, -100.815046562, -100.406508434, -116.178564728, -116.733034066, -122.4430068, -94.4209261617, -94.4045920489, -105.724088909, -94.9416035898, -106.930497976, -105.507018199, -99.7457001718, -101.353952666, -98.1107552084, -100.680692794, -95.0381005489, -101.520787123, -109.571039338, -100.813079861, -121.228277191, -124.156772429, -124.057744818, -123.165970304, -98.5000914953, -98.5276141104, -97.5971911651, -94.6777630305, -95.1500982854, -95.6250643608, -96.6544993534, -96.8679337496, -101.687871291, -96.154658997, -96.7528047329, -97.596491949, -99.8829826486, -101.308052615, -95.816507799, -103.527636352, -98.3659391642, -119.815424086, -94.8380522156, -95.742639801, -95.3100594713, -96.1782203995, -95.1049803859, -95.2933880458, -99.3118334739, -95.1472765576, -97.1523530175, -96.7875167655, -101.118753846, -102.994717886, -98.0510990444, -97.0868785726, -97.754278751, -97.7874404997, -100.476914657, -95.7167902102, -97.519931044, -97.5682920837, -99.4497861017, -98.6849484048, -120.652153855, -97.0683036242, -95.6668609694, -98.5357218988, -96.7696242767, -95.2306911023, -95.7536133896, -95.7633789958, -108.715020556, -103.820042477, -105.459058451, -103.41252329, -106.306871904, -107.749726146, -94.2066269212, -111.207940177, -114.66689028, -95.2499762822, -98.9804263857, -97.9417550002, -97.1441756438, -94.7032265214, -94.4098033417, -111.329465473, -94.3401058898, -94.3463179145, -109.506004721, -94.3055280095, -97.8051313657, -98.3134341062, -102.784096932, -96.935722139, -100.916354111, -106.235159258, -98.8181539452, -113.637407275, -100.466318033, -114.138740671, -94.8429020151, -98.5581090352, -97.2119589915, -99.8641069355, -97.4072567629, -95.3796246885, -96.2103168576, -99.3166520446, -100.737466312, -95.2860764948, -101.698259856, -97.1307501062, -96.3287986523, -97.2522060158, -96.1411347793, -99.0809151156, -99.2053287287, -94.9277928531, -94.6404743212, -94.8603030538, -95.1510421357, -96.1123572642, -116.241296472, -97.1395822726, -97.1485636239, -96.6559754532, -99.8837705951, -98.7853385276, -95.6239956623, -95.218455435, -120.403792706, -101.72018634, -112.224632595, -100.760034908, -96.2584455287, -104.790929834, -108.38233226, -104.304541689, -106.832826936, -104.411914109, -101.784124822, -104.96598123, -99.0084723577, -94.8028540771, -97.7823152576, -99.7549070402, -98.7173284311, -97.3091519845, -95.1545329859, -105.386318283, -95.4224132699, -101.435177828, -97.8326279879, -95.5643292232, -99.2262631794, -111.912746268, -110.90411619, -113.505234448, -111.169522236, -96.7947159152, -98.8364119727, -99.2371605158, -98.832569725, -114.263869713, -112.311695118, -101.208690618, -101.763449157, -98.9996018799, -97.0875217266, -101.347467154, -95.7437608176, -95.7402110682, -94.7649334583, -119.083396946, -121.350290837, -94.8171659876, -101.950798534, -102.635560892, -96.1493494318, -111.743648481, -110.58873208, -113.235150481, -101.298113807, -96.1530920174, -104.474922616, -106.798576204, -110.655649993, -104.690007336, -97.6348059366, -117.623111732, -111.443401725, -94.2438002022, -94.2423095418, -97.4270940986, -102.333683614, -103.135618981, -99.8193468148, -99.7258411991, -96.5647577721, -94.6787419753, -98.6301050811, -95.2694315047, -101.628615811, -100.689658518, -97.1297895117, -101.89325725, -98.0860279802, -122.88727584, -102.543014055, -121.932502792, -97.7742548951, -96.2449169467, -120.515843436, -96.5944792238, -98.2007551088, -94.8498582646, -94.7711196826, -97.4438568596, -97.2456854598, -97.443153894, -96.8810731782, -96.2530556173, -108.262030932, -104.944385506, -105.741842929, -103.550118883, -106.693041901, -120.017184976, -95.7934597409, -94.8299635316, -101.894005289, -99.4145079979, -97.8361097738, -95.116144584, -96.2502709299, -96.6607532909, -94.4047335651, -95.2145577899, -97.4768978949, -101.055428362, -95.5636254538, -96.2049405826, -122.330153622, -101.303183305, -100.402095668, -99.7774806663, -94.1683152882, -94.7616911465, -116.760734148, -112.840785588, -112.539353989, -116.169857265, -109.914850201, -108.879386323, -100.52972042, -99.4536658278, -96.5724989918, -100.270011538, -121.90231194, -99.9296049933, -98.7673355962, -103.086183016, -98.0670916499, -99.075358497, -97.8851762656, -98.5616996881, -101.664361447, -98.9762696661, -102.40923305, -97.1941621583, -103.758693216, -97.5953374252, -97.3946275718, -103.346573229, -106.670499375, -108.404768935, -104.466644196, -107.999963848, -104.647072643, -95.2925180278, -99.6671550185, -99.5605116714, -99.8460801167, -97.8838748183, -99.8207206335, -94.5509816024, -98.1724850078, -100.982467188, -101.354403422, -96.0854209628, -100.462103614, -94.3766046217, -101.299398641, -113.758187058, -101.819907586, -110.321264274, -109.240172121, -112.49149188, -97.2020943238, -111.789962616, -110.956009273, -101.050236657, -100.253162381, -97.2915428461, -100.814181768, -100.77871431, -96.9488286819, -116.397187053, -114.81136399, -111.813394722, -98.5882600656, -96.9750123893, -98.1364558192, -96.6877788113, -97.6508777708, -98.7397758688, -101.075224707, -101.661256843, -99.7122976717, -103.71479087, -97.8915843392, -94.8221978679, -98.091483247, -102.551524868, -114.805593444, -103.716612071, -103.809646839, -108.26957946, -108.597042823, -108.207355703, -106.345396158, -98.865247862, -107.843236575, -123.896760968, -102.740436568, -102.603309471, -105.461256116, -99.2646149667, -96.3219757077, -95.6177102463, -97.2303230257, -100.278651985, -99.0013919545, -98.3721472964, -98.4712066732, -96.3711948682, -95.2089042648, -102.031896836, -103.579508929, -102.51565209, -95.1353571161, -104.517331189, -113.9815449, -116.709023067, -111.56241003, -97.1327585886, -100.270743279, -95.8541747478, -102.342903783, -111.804807665, -101.734955109, -102.828386944, -100.207151064, -98.207918406, -113.130835528, -98.1820998968, -101.312093676, -119.95577233, -99.3738344232, -95.1563957289, -95.9601433943, -98.5009290945, -98.0670266504, -101.695840977, -103.710790709, -99.9770515557, -98.1462176544, -103.450897781, -94.9058788846, -94.6991453523, -94.4712608443, -97.119666019, -98.9815775899, -96.2220935138, -100.556227654, -96.5437861446, -102.824940255, -94.240789595, -94.2739187712, -100.719057267, -96.9758070673, -94.8111596007, -96.6996543152, -95.9639865244, -96.398127734, -110.424827556, -112.111223563, -95.2974713001, -110.702128904, -96.2978598771, -94.9994292979, -95.5521097235, -102.518043927, -97.3270072852, -94.4222072146, -95.1652885191, -119.18894362, -108.630535291, -94.3711483415, -99.7300149502, -102.603041951, -108.441980465, -94.3570226951, -104.353639047, -110.811789059, -111.770038118, -109.751251528, -109.488875505, -97.7243187993, -98.5954102217, -96.9771772907, -109.887490945, -99.8905160393, -102.335248476, -99.2123658798, -94.9659006904, -95.6718966964, -94.9779468766, -94.343520414, -101.354173611, -102.261364011, -97.7861563257, -98.2184522792, -120.553962069, -99.8982401469, -100.871261959, -121.885395751, -95.7937550459, -95.8483595792, -97.992828029, -103.010457984, -98.0374641256, -98.0475607465, -97.4610237961, -100.907019805, -95.756054238, -100.851510405, -100.441534075, -95.301609901, -111.572818309, -105.43957609, -104.52574103, -105.521931746, -107.903813187, -106.118132448, -99.6956034207, -121.271483295, -98.4333258049, -96.2603686995, -98.375190321, -97.9826451519, -97.2857910974, -94.3426856241, -99.3473762634, -95.5719896961, -103.102575543, -101.815473889, -95.5712569123, -99.7414041715, -102.351207866, -96.6151966229, -101.357291339, -102.829465409, -120.594767828, -118.224948427, -122.753276991, -119.762788774, -97.6543951336, -103.048070846, -95.3825817656, -104.568200932, -110.547532406, -107.682627289, -121.074807267, -95.381941052, -99.2139425345, -95.1512269968, -96.1345435873, -96.2366089225, -99.414782189, -97.6015440413, -97.6494573035, -99.3096267069, -98.762315805, -96.7353485298, -99.3249330412, -96.0448077953, -115.99410201, -95.3128071569, -99.3542728095, -121.695031109, -96.1066074525, -122.002640816, -100.538558234, -122.329332944, -98.217865744, -105.250739026, -104.960791402, -106.342955677, -107.031857543, -107.300396306, -111.659894037, -122.040628947, -120.716828449, -98.2078202895, -95.4262953295, -94.8012573351, -97.7996924052, -96.6707738665, -99.9762901407, -100.81336852, -96.5129079696, -96.4076565688, -104.139943624, -97.4780211013, -117.410661843, -122.718840631, -119.904710082, -123.391462959, -120.717909696, -120.724842551, -113.170948208, -95.1507431809, -100.366055366, -99.8199883965, -97.1649175588, -94.8457044313, -101.730616924, -97.649222516, -107.863296422, -95.9419315136, -98.9241472226, -109.518527492, -111.670427271, -99.2864033607, -120.38755916, -101.320115777, -119.650431579, -120.524962111, -121.927889946, -122.23678478, -95.6237684172, -94.678645891, -100.438028571, -97.1171916092, -99.3469695547, -97.6007282195, -97.649692229, -98.7679140427, -100.482923378, -100.744533706, -101.060502692, -99.4542606969, -100.482729722, -96.3429629618, -118.729702768, -102.393322975, -107.769723201, -105.717629238, -102.358061975, -106.916225032, -108.466671973, -103.110256947, -103.514011178, -104.038995895, -106.923887958, -101.490494466, -95.6043862183, -97.8514538879, -94.7544469397, -94.3490036915, -100.47676938, -96.037987278, -98.3238852304, -94.6588683059, -99.6818792419, -113.600500426, -120.837939199, -123.112484591, -112.553595182, -111.344911573, -110.84658878, -111.244380871, -95.8369504082, -102.042930618, -121.344283399, -115.729542993, -113.980200572, -112.398279861, -111.614224773, -111.576495928, -100.777554207, -100.255750225, -98.6881728986, -100.921253269, -95.6526619697, -102.637809595, -94.6117614357, -101.649627207, -98.7030778243, -99.2407909642, -100.269882222, -123.87275286, -122.392081589, -115.365366707, -94.3972499455, -95.6049318073, -94.5010020969, -95.5209379903, -106.191608784, -105.428128496, -103.784525351, -105.367815862, -105.161651716, -102.352085459, -106.116314266, -107.67593662, -108.406201168, -122.540262884, -99.8726027631, -113.905650196, -118.335344281, -115.018753947, -119.616644949, -115.357445012, -94.3397478145, -96.2139076315, -94.3471521993, -98.209168868, -98.6878283905, -94.7736669447, -101.523073241, -95.0507311643, -99.8884674183, -97.3663846859, -99.8790188934, -96.2877441966, -101.431399026, -94.4233221445, -121.239115849, -118.887035182, -120.76789763, -117.76098237, -97.6476433172, -97.0966686007, -120.997530813, -96.5228064463, -95.6209816443, -101.148112183, -99.8477277657, -94.851718741, -96.8377190006, -99.2719947413, -97.6103094214, -95.7342063241, -100.459470296, -121.694485901, -94.3545922761, -104.135876123, -108.516818067, -104.878365666, -106.695129484, -104.929121163, -106.281500698, -106.991109304, -106.383034989, -108.217330449, -104.512875899, -103.708098681, -96.6375801994, -113.082114946, -118.112025623, -116.26866282, -114.877474862, -117.037701865, -94.8062187614, -97.1409730046, -96.2438362529, -122.847939768, -123.55560448, -121.650267265, -98.2419898594, -95.99561041, -111.923949768, -109.804372753, -112.126449039, -98.9478320584, -96.264776067, -97.1424998268, -98.5169777536, -101.135718538, -99.9031776045, -99.91634861, -95.3072756839, -96.0138065137, -95.7269836003, -103.693512467, -101.740715145, -96.7216951225, -98.5214754484, -98.9908629828, -97.3685639448, -99.8306263846, -98.7564293502, -98.5023556403, -96.7917271, -94.207180598, -95.513415532, -95.9043851351, -94.6146640566, -98.9923791207, -107.048427163, -104.337910758, -105.787845227, -104.338475638, -102.560472355, -95.181406605, -119.529193146, -118.404107566, -116.473393209, -118.435612944, -106.809407045, -118.80044157, -94.339306462, -94.8836844172, -83.2177402083, -85.9636302802, -86.777524001, -85.8860931565, -77.9332442269, -78.8761034033, -77.5969317702, -80.2566712266, -78.2859828839, -88.8794390592, -89.9506387931, -91.4921898663, -89.5900763459, -73.8204954068, -83.5410975541, -85.1528153378, -84.3878713302, -85.0943447305, -88.0038858013, -90.2134334865, -88.4285093404, -87.8625506225, -88.8859291822, -90.4431448041, -90.1955009338, -90.4736581537, -90.8642679626, -90.6746375391, -86.35790778, -92.8107394204, -92.2812192521, -91.3041806038, -93.023327339, -87.2970303559, -87.5249212365, -81.4946071979, -86.1657346034, -81.1785731524, -83.8898740276, -84.1300004952, -82.3169329795, -89.5528996339, -89.991864075, -89.2578012998, -90.8978677888, -76.939088332, -88.6436558809, -76.6158274619, -73.0928096944, -87.0771922997, -86.0072778199, -88.8387179215, -85.9407321603, -77.300364454, -86.2081747521, -86.853037259, -87.2942243953, -88.0890132867, -90.1059219223, -89.3361435753, -90.8801475389, -88.9476967449, -89.9199210251, -83.8373084151, -82.4317869767, -85.7786153179, -81.1406609038, -82.1264807035, -82.3707575574, -79.3363170336, -79.7027613095, -80.7800181881, -70.206305546, -83.7470545366, -78.2456820191, -84.9667741038, -83.4319568619, -72.2223309305, -82.7433557251, -83.1712606927, -71.1299819788, -71.030842083, -71.7157594694, -77.3918597077, -71.6801432274, -92.1546296775, -92.5323374549, -83.8193921818, -84.2342929461, -83.167046593, -84.0238192598, -83.5309340871, -80.8584673, -81.0630916057, -81.3482286353, -81.2483734275, -79.8756584199, -78.0511674603, -78.0122066835, -75.9127800021, -76.4228217977, -78.4838996388, -82.2125254502, -83.8282013761, -84.465486718, -83.0804016487, -84.8669655305, -85.0796704357, -85.1380182708, -82.0734820531, -89.2485068793, -91.3113750272, -69.8612856299, -92.5310410939, -93.5737242745, -76.3025604403, -89.0347625217, -83.69654307, -84.458697734, -83.9643010135, -83.0973608023, -86.2382394115, -86.4684419627, -86.2276124068, -86.5630303925, -86.345747222, -85.7077653517, -83.5983605967, -88.3013987078, -81.223980973, -77.6411545629, -79.1717691812, -77.3558896021, -78.3657328855, -85.6293371113, -85.4530619316, -82.4971682575, -88.1846052855, -84.0661966869, -83.9114122325, -87.8682069409, -87.2322806377, -82.9328923077, -87.0676582298, -87.2064195868, -86.6377649941, -86.3451711162, -85.553184684, -84.6242630028, -88.6514772661, -82.9223081147, -78.6531014364, -83.8330542307, -81.1807659316, -77.6757846048, -92.5211153578, -93.2021137385, -92.1467392787, -92.962289158, -88.6193703293, -93.1885010605, -91.738574045, -90.2450729173, -90.7419930249, -90.1779460672, -89.4784684979, -90.201444285, -77.8130279032, -75.7087856905, -75.6190758393, -90.6023728086, -88.78196522, -88.1995104816, -88.6892824728, -90.9118621047, -85.1847650012, -85.4593934974, -86.6606796891, -90.4496236139, -86.3148106249, -88.4806070988, -86.1565829057, -77.5879269189, -78.9975172832, -81.0324528788, -80.5903183401, -80.7056168904, -77.9965753481, -72.377525613, -93.2405643464, -84.284727099, -77.9560299347, -82.7958756733, -85.4264147647, -82.6774535649, -84.5509097403, -81.9165237299, -82.7241185774, -76.7266935455, -77.0142616958, -79.56886999, -84.8753390867, -76.8978372302, -76.7787042365, -84.4555470729, -77.1565658939, -84.4674199773, -89.6313610455, -81.5464230214, -82.6109560465, -80.2847471719, -79.3972540465, -77.9154428092, -78.4416111228, -77.229212647, -85.0186532008, -83.3733581341, -83.4759680481, -71.2140896665, -85.1878433296, -84.3887661327, -84.4768938084, -85.3453004749, -84.7868028415, -81.1339137602, -83.3666035558, -79.524395015, -80.0075328916, -85.2156174787, -78.4875831456, -84.5387300025, -82.7451957259, -84.8769904891, -89.185974158, -84.8587427095, -77.9762238811, -85.0665247665, -84.936461448, -87.3105045571, -85.897228091, -85.3243206437, -80.8330480357, -82.048658395, -83.4224637406, -82.7060435943, -77.107814649, -91.1128477762, -75.6522506275, -92.6410224055, -74.1536632276, -93.0993574056, -83.6358580154, -85.4653983308, -84.3736946092, -85.2624126387, -85.0743211273, -85.0112496085, -86.8450531516, -83.0165231564, -86.6992464215, -78.5566678581, -84.3315599893, -84.7633221374, -83.7690015027, -82.2640481075, -70.6544618307, -71.1151334567, -73.2063935491, -70.3018689443, -90.622770039, -93.4648968757, -70.9577001424, -69.5423914907, -69.1829350886, -82.8937968398, -81.34145073, -82.8406549817, -82.3019540769, -81.8869279704, -90.3754845056, -79.8633003655, -84.9731093738, -87.1157842011, -86.4756364412, -86.4513364581, -87.0725888608, -84.9651148046, -92.5157057212, -91.2439181956, -87.397818155, -91.746285735, -85.4169512111, -93.4105311926, -83.7066073613, -84.837908978, -92.4018051633, -82.4800760051, -82.982163442, -78.869541752, -77.6508922496, -79.7890108843, -85.3256108669, -85.9962788741, -92.5333949052, -88.1537414895, -87.8243038842, -89.3821500264, -90.9250826028, -90.1313715403, -82.1659549336, -93.5649915266, -73.7429460346, -91.0749447944, -91.5077775189, -93.3419295641, -82.6181513709, -74.9662657637, -82.4790805445, -83.60085785, -82.5989480732, -81.929185213, -76.0700479167, -89.4102855276, -90.7730151307, -91.8865613849, -89.2555993956, -87.7326752084, -73.6320337653, -87.8442094241, -90.6151125305, -90.5373496149, -85.075211887, -85.2880241133, -89.1488067841, -84.523035763, -92.3182209119, -79.9584525335, -86.458888309, -84.1984172092, -85.2049608288, -88.0685732439, -83.9253317832, -79.4667850172, -79.7581481848, -79.274042276, -80.2479782475, -75.3030526612, -88.9932165407, -84.1965941779, -77.4590745494, -84.5330816292, -82.879753869, -82.0580419639, -84.25039315, -78.5700228797, -81.5370072495, -77.1065157818, -77.6564762674, -79.9131232148, -76.5151744419, -75.1070315661, -75.926413116, -78.3488270801, -83.2497572947, -81.0787362469, -82.6211602659, -76.8032414359, -81.9601597003, -82.2889102765, -82.8807265567, -82.4528716215, -84.4452993841, -76.5620348491, -91.4795081488, -91.5984873754, -91.260193818, -93.3276728812, -70.0687066501, -85.8145985544, -74.1227617073, -77.0860531532, -87.8737485661, -85.3371543894, -87.9456815269, -86.4232909401, -85.1748778442, -92.7901617235, -71.2848694214, -71.5960699069, -71.5801915275, -76.6999191425, -86.870763513, -88.3535683168, -83.3780253892, -84.6610869521, -83.3804672567, -82.8552343575, -84.9249797436, -87.5853535204, -84.6049405794, -87.4641113024, -84.3883633203, -87.3894376888, -85.7939396015, -84.5928078159, -78.5291197663, -74.059037383, -73.8637131679, -74.4420291605, -90.033633733, -90.5253406291, -84.1267130145, -83.3857664241, -86.2674995009, -86.1518623558, -85.8010774769, -88.2676523146, -91.1647308003, -88.5391764553, -88.4181667379, -90.3903057896, -80.9171059543, -87.9505658994, -79.8124275535, -89.2113164928, -89.160513863, -88.9301742963, -75.7370120906, -76.0125760988, -88.1794780332, -76.6067871384, -88.425393857, -77.2039649758, -87.978149957, -76.8447479663, -89.913948344, -84.8140159652, -84.2525414997, -87.3829655318, -84.648673845, -74.6679573307, -91.2437460634, -74.9592424206, -91.8022048926, -74.6856473088, -92.6649055474, -74.0779360084, -74.8102202079, -93.0962487349, -76.7064055319, -76.3555142533, -83.6594940085, -81.0910439605, -84.5429947543, -83.6666451551, -86.0617659191, -88.4501413227, -84.0683474685, -84.1501344717, -86.4121838757, -81.528211178, -81.6749295707, -76.7266012755, -77.8623862475, -76.016722908, -78.8576459501, -80.3800185179, -84.4367861503, -82.9390711886, -83.5262422657, -83.9196049354, -82.3303669043, -78.4901459718, -80.3492704105, -79.4647118831, -79.9811614352, -77.2178233126, -83.2297216083, -89.5029882177, -83.712640485, -83.4973325005, -83.2209186293, -84.8406551546, -91.5883208817, -91.9493323295, -92.1786678935, -91.1313257235, -85.6218485894, -86.7656084856, -81.9901844208, -81.7270527938, -81.6194212788, -80.3818533729, -79.72783984, -83.6610551537, -85.5434943499, -87.0860431862, -88.6133404311, -83.1214306461, -79.8739931991, -77.4905090814, -77.4060969508, -77.5595427759, -78.9374055392, -77.4807867615, -78.1592771338, -80.7144760792, -76.7246761079, -82.5344200445, -84.7307322564, -83.9184827373, -84.1947711898, -84.3579096015, -84.9809785233, -84.5762096921, -82.7062176751, -82.8494251551, -91.9502984396, -84.1249906852, -85.2141514206, -84.494789272, -84.3195624711, -77.3979694622, -83.2291811641, -76.8751033883, -85.8586514976, -86.8800797965, -85.3968157943, -84.9981829287, -85.5007418615, -92.8279940632, -86.4465556031, -86.0450039095, -85.5319253981, -86.8031014634, -84.4229649683, -86.8933471511, -84.8468152962, -86.523585015, -88.9760396022, -87.5412801455, -87.5735800877, -83.5240657048, -85.119320745, -89.8947744093, -83.1410938788, -76.8232738973, -76.2511184972, -84.5038571564, -80.8738007263, -76.9830963097, -79.2371676597, -82.1273799032, -79.3624605632, -93.3487843354, -92.0895822849, -79.6786010797, -85.860748698, -85.9563524549, -84.8595515282, -85.3246814479, -86.2499864311, -86.0569632376, -88.9235464077, -90.3565621392, -90.2120539145, -88.8814229496, -88.4284886342, -92.5596705681, -91.673737064, -90.0907540304, -92.4988882027, -91.5077032725, -74.0362600099, -87.3077911936, -87.3737170342, -83.0092762383, -83.4560072499, -82.6306638317, -82.619056045, -83.0047937664, -93.320948786, -92.6953722195, -91.718036174, -92.3171294449, -88.5638988974, -91.8446741477, -86.58878808, -87.4930630822, -84.6175189564, -84.3113962717, -76.2562947123, -77.4743616047, -81.1844643155, -83.8504921809, -92.5574934559, -86.7851024457, -84.9986148144, -89.1395932437, -90.6178793422, -88.1087474244, -84.8766182834, -83.8493789732, -83.4923782272, -82.6032186222, -84.7477266594, -82.0956267843, -78.8757423528, -79.4480405344, -83.4373746624, -80.0676243024, -81.560778643, -78.2066698572, -76.8992334339, -83.9857370605, -77.262106899, -83.4301753387, -89.6164961967, -76.5188291746, -78.7309175937, -91.5447478087, -88.2172300362, -87.6832800567, -84.8285643963, -83.4936446355, -84.1448098444, -91.3400654494, -84.7437018594, -87.1161314715, -93.1770528732, -93.5379188084, -91.2945712473, -92.1623682372, -92.5031360095, -92.3175031822, -93.2608053568, -91.1323164524, -83.7159923358, -82.7348939598, -84.1180679719, -85.6983202708, -83.8540814456, -92.6994350101, -87.2719750314, -85.0586914256, -87.3531426023, -85.0058148918, -85.0097786234, -85.9936823018, -86.1055179064, -91.0273639542, -90.747474991, -85.220923811, -92.6770991045, -91.7197884278, -87.382186688, -86.0193024759, -82.8203605303, -84.1470149995, -83.4168320203, -88.2303247678, -92.4061125792, -88.2235655322, -89.0240890106, -90.2073958849, -88.9239974948, -91.0453598046, -74.6163919908, -74.2995633734, -92.7525776699, -91.4204432652, -92.6367738732, -91.4564127752, -76.0373345639, -76.9311029793, -76.3174235855, -79.2737325235, -75.1370865972, -74.2486385415, -75.1107633037, -86.3059169289, -80.2165626107, -87.7896797555, -74.9120944808, -83.0243470697, -84.580179813, -81.6200615796, -82.2359508289, -81.4552417348, -83.1495616427, -88.0969467588, -87.6537088755, -85.9986991249, -81.159566348, -86.8964057808, -80.556687879, -87.3113516039, -90.3965486835, -89.7074568318, -84.220854896, -80.9882736836, -83.8680664693, -84.5751578311, -81.0895463493, -83.2659778162, -85.1645222081, -83.2214561921, -80.5737722649, -78.6141770149, -80.4528845386, -79.1956819251, -79.0967113387, -77.3471317354, -87.1789695605, -85.1948004067, -86.5821506006, -85.3281590668, -85.3271183007, -92.6544511795, -86.4948714723, -92.0654977304, -92.3085703985, -90.6327263256, -90.7714791749, -91.837611979, -90.3085467581, -81.7432447859, -82.0008149511, -83.9564852554, -84.6250565462, -81.6785518611, -78.0039818584, -81.1637128831, -77.9183405999, -80.6653832232, -82.3077653551, -86.1016293708, -84.0062208523, -86.8379074836, -90.848276351, -92.9321844801, -76.0603731699, -92.8818815661, -93.2180804416, -93.6566808104, -86.0524627904, -85.000545341, -85.8886060126, -87.4146608113, -85.0374282035, -86.8941910952, -88.5701581113, -87.3960050966, -86.0746375167, -77.397635783, -93.5680123539, -91.6218073198, -91.9247346355, -90.3449296392, -92.5646927812, -70.4153049174, -76.6436462719, -89.8223137646, -90.8860269115, -78.6979649499, -76.6093840018, -89.3670565042, -88.5910671009, -89.1179987437, -89.3202868775, -76.5673141625, -89.7598386393, -90.8343030826, -88.5417527204, -74.0779456755, -93.055841679, -87.8167932114, -87.7591433439, -88.240284197, -74.3102581525, -88.7699578027, -88.9040739011, -91.2353279005, -74.6898554237, -75.3497625629, -84.2286436527, -80.6677737458, -81.8993363623, -83.160712822, -84.6288687197, -82.0230932417, -87.1613100806, -86.1488500661, -87.7388312952, -86.0345680884, -87.8439720366, -89.4141189822, -89.4131934952, -87.3562453555, -90.8519449709, -85.8332025402, -88.0425565533, -87.8870821261, -88.7761113117, -84.9323180985, -84.4898807127, -84.6192156198, -81.6588882008, -82.9197100331, -81.9198527269, -79.6473456651, -80.8568459591, -84.3151134582, -84.0265087411, -82.0741686587, -84.7542458534, -83.403042253, -80.1056544203, -78.4737573494, -77.4822919821, -79.4207976238, -77.4869537639, -76.4050806416, -77.6385787554, -77.4388331575, -92.8691608323, -92.7889457811, -79.3562161368, -79.3661552327, -76.5542801472, -75.6110812032, -76.7596926572, -76.2164405311, -77.8959534921, -75.033631984, -75.1327573826, -90.1138312122, -77.0699395453, -89.7595746733, -84.5837297077, -85.0581015825, -83.4206979363, -84.3163134429, -84.0515848261, -88.2388438085, -76.3588829983, -93.0912726861, -92.3365301291, -91.7678210764, -91.375003032, -82.0055211696, -92.8685842854, -92.4099087286, -91.378490757, -83.5805636883, -88.3299569679, -81.9814875419, -83.3276310905, -83.6977398644, -81.4478759266, -76.5770208671, -78.1063117837, -78.6504110604, -78.4084030167, -86.7404980937, -83.0643094989, -86.4834995641, -85.7194122544, -81.6970673374, -82.9535817414, -84.2784757608, -86.4603123641, -84.5813059536, -85.6599738786, -84.5333866646, -82.8312599796, -92.59873692, -84.6015613221, -86.6482121764, -84.8481939683, -87.0072132045, -85.7910688409, -85.7476308639, -92.1572580358, -86.2898152064, -91.4799395269, -82.3037317026, -93.6052356559, -75.3998274212, -75.6529625096, -75.5682155316, -85.5275589087, -84.6114850623, -82.6836494727, -84.052832059, -91.4698133817, -92.5827187736, -92.0004628769, -92.4283325492, -89.2909046391, -90.8773749009, -90.461446886, -92.4687466909, -88.680096914, -90.4536430965, -86.2642541723, -88.2308727798, -88.304415759, -89.2429312028, -88.644485252, -75.830761725, -76.9916084426, -75.9413590309, -74.4117175313, -74.7016945103, -74.544684156, -74.2246480582, -85.3552537967, -74.2988862085, -86.9811489659, -88.5899046873, -82.5364570344, -84.1314599432, -87.8588796431, -84.6478038105, -81.1968568704, -83.0666389635, -85.2415027507, -87.6291851332, -87.9520643804, -85.83932085, -85.3025501633, -88.6958238887, -73.5095436451, -90.9476097861, -90.1354052508, -89.284903822, -89.6017930867, -89.0449527141, -90.7067182105, -84.1060922633, -83.4722796524, -80.747958405, -82.2706741743, -82.9441245122, -82.0451496473, -88.3878502511, -89.2839158299, -81.0819814885, -81.1176946231, -82.2418679922, -80.7079947112, -81.0746467378, -84.834645624, -77.8191509908, -78.7132463466, -78.204453845, -81.6112167423, -84.8689786604, -75.7484405969, -83.2940166472, -73.8677711619, -75.8194041656, -73.9732441592, -78.0277531281, -87.4187683268, -78.6790142362, -92.9983007983, -79.0282568871, -76.5125393265, -75.8003763006, -77.2541271313, -80.7338745242, -77.0630486454, -78.6613410561, -77.0602248477, -92.7912686719, -79.1909355906, -73.7480072498, -77.0299883126, -73.4305689431, -73.8459696058, -74.2580967216, -86.216387608, -83.8234430706, -84.8752635317, -80.5308871025, -76.2108446798, -82.7982276386, -83.4922457693, -80.6882467761, -88.5193836485, -78.1936999803, -82.6880733995, -84.2164356326, -84.7275622851, -83.6734264247, -83.7408109161, -80.10246516, -81.1281229478, -81.1773475978, -79.3991928539, -81.5008606626, -90.4038229627, -89.7706934845, -89.0369804524, -91.1605444842, -93.1110633589, -93.0412996761, -91.9649121588, -90.614875552, -88.9922597697, -89.9284163833, -90.5670063851, -89.6583874598, -88.5406121981, -88.0611959037, -90.4289632149, -89.0717094731, -73.1407804293, -92.5902362089, -88.1993246906, -92.1481485411, -90.2478713885, -89.9342735951, -90.6673640572, -89.528446168, -81.054575756, -81.6350524985, -82.4588997383, -82.6378667521, -81.3570716507, -86.4514445886, -89.3988483924, -87.8098134881, -85.987809599, -87.8045447264, -86.9941151301, -87.9668744899, -86.2475574788, -89.5066884226, -89.5370379809, -89.9456190422, -89.9200015791, -90.8135428359, -88.3610102165, -90.9892328075, -75.9892252637, -90.0911710487, -75.592629986, -76.4575465984, -80.3343159012, -76.2477488708, -84.5859434823, -82.4856657779, -84.1669128298, -81.4955074524, -81.8878211535, -75.3075076692, -76.7094526637, -75.368556063, -76.6586884013, -77.2627259301, -90.2890653707, -73.590359306, -74.4401488016, -77.6959502512, -75.6695818035, -77.7744632306, -84.6882160905, -84.524572425, -83.2085072937, -84.0426352922, -79.1452277059, -81.414883779, -80.5511840212, -80.0459611615, -80.7992953735, -78.2567725217, -80.6188758101, -82.9221555876, -84.1409640632, -91.2536417397, -84.139342726, -83.0630050446, -92.3319386412, -91.8179726039, -81.4976811023, -90.5325352127, -91.3414146848, -77.1053136628, -78.224488789, -82.1702132454, -82.5138478136, -87.3653217856, -76.4412706718, -77.9101330461, -77.3751053069, -78.9718075669, -91.8434464089, -93.2611594104, -80.0562018363, -85.6951575552, -84.0896588277, -84.8662297981, -86.4291037047, -83.3239995867, -85.7734817813, -79.5182854673, -86.9619211473, -86.0518150572, -87.5848486056, -85.6545897255, -79.3338473937, -76.6766814998, -79.2557406705, -81.2148822083, -84.0638282157, -92.2298810381, -86.2624004717, -77.2980989776, -79.950593783, -91.8419531557, -80.7374683892, -92.600733346, -88.7180244953, -87.7882563191, -86.8989898993, -85.4550693629, -86.2978777657, -87.8378040822, -93.0162108815, -90.7499444481, -91.5214273256, -92.4966750732, -90.9691838648, -91.1883450076, -89.3370744858, -74.4217065627, -89.4354161333, -88.8231522978, -78.9013275979, -85.5176126997, -88.2637007291, -86.7187934891, -85.8606637734, -87.8302990525, -89.7976641052, -89.6622336339, -90.4745288326, -88.8060303094, -89.5130185783, -85.4882412145, -91.0370377877, -75.6088701206, -89.1185414906, -79.4433063677, -89.1692222888, -89.8231373398, -79.9862128121, -77.9818423354, -88.6413898169, -79.0876334106, -78.9992887858, -77.402224857, -83.6228400573, -84.5877564947, -81.4350751799, -83.3046269085, -79.974606617, -77.6175251944, -80.2577477927, -78.569573837, -77.0642298516, -75.3395346173, -75.4493639061, -74.4970796191, -92.1609280107, -74.9627026841, -75.9107891588, -73.949355286, -80.7039819604, -82.4816448259, -76.5428987769, -77.9164704043, -81.2239582431, -78.4670606006, -82.4516467633, -81.7461415349, -83.2679132712, -84.0030817048, -82.134803419, -78.9439805355, -81.1110992977, -82.0263398968, -80.6632507646, -93.053388374, -82.6604700919, -81.9634584477, -82.4181766092, -91.7332846904, -82.6368951893, -90.7822793674, -91.1071075257, -93.6070618602, -93.4599889289, -83.5605514707, -92.0653932055, -92.4102851827, -91.3669584617, -91.1816340811, -90.5738649556, -77.9626017116, -83.1284217318, -77.6353254414, -77.087307666, -76.4640165067, -87.2633488599, -86.8786555829, -88.082805923, -88.7119195077, -84.4838563665, -93.5612492025, -93.3265904506, -88.272055662, -84.3793045697, -86.6814795023, -87.8682083798, -88.9701680646, -91.2041840661, -93.6597662394, -90.0541301488, -93.3071179949, -79.1030916114, -79.7749075, -79.8061517707, -79.7476514802, -85.0599230932, -87.2421400689, -80.5246227228, -85.1785617408, -91.7791308913, -79.236453618, -77.7208407213, -78.1122687742, -80.2232818869, -82.5668654518, -83.7377447952, -83.6238928622, -85.0282850567, -83.4269742336, -74.3057227839, -78.2313067957, -76.1412887651, -75.0322334203, -73.7499537846, -70.7153826128, -81.7118097161, -80.7187292776, -80.0034892287, -78.0276279829, -82.0360640774, -77.859096174, -79.0622281627, -80.5768421431, -81.1304562182, -92.1850266177, -93.227653093, -90.4172161602, -92.0267536565, -71.0782907169, -92.7005682199, -90.8822643743, -85.2694184536, -71.9079591724, -92.7885577458, -93.2627485182, -76.4733429042, -74.7677747865, -76.3059733846, -77.3835355381, -72.8585410205, -85.7161865308, -83.9132364801, -80.2396277113, -87.1419894939, -79.4805871722, -80.2507677266, -81.9203179226, -78.3711900769, -90.6627604791, -93.0340561582, -91.5532414057, -92.3121232943, -76.6415079625, -89.1187542659, -83.8949082821, -85.3085971931, -83.9921475211, -85.5049509617, -86.8649250526, -71.3917757694, -90.8044747707, -85.9332634699, -84.9911859247, -83.2578807254, -88.9990748861, -85.2806215058, -86.1900800923, -86.1387656656, -83.0661672501, -85.4663586182, -84.5235891199, -84.9245442354, -76.9789521423, -78.5631125462, -81.9222733933, -76.861682172, -85.4953041452, -78.2449412981, -85.722384662, -83.838403015, -83.2886207144, -85.5784008295, -86.4174329083, -90.9593107879, -91.7219671356, -93.5485102786, -93.1075240433, -93.4557073543, -89.9438908823, -92.0764540764, -91.4002914906, -89.5688209149, -88.0854012987, -89.825608089, -89.2857608574, -89.1263824498, -88.5619007465, -87.9451520095, -89.9483245596, -87.7873845726, -89.2775381067, -89.4225229427, -88.4906114591, -74.9969822839, -88.2215453233, -81.121432717, -81.9666401966, -80.4049471655, -79.3790848775, -79.9577579345, -85.8034277598, -85.6112077736, -87.1063668778, -86.3134295061, -86.8673622277, -88.908427624, -86.0920853871, -88.9323252059, -87.0349714605, -83.5083153665, -91.1154492045, -90.1319929952, -80.7767842306, -90.0409140336, -92.374497261, -83.7693823449, -83.7832085377, -84.1523044884, -83.8081658374, -86.5497494103, -91.6005197386, -76.7794847161, -77.2652535867, -88.6391620269, -78.649167674, -89.8018071593, -75.4022887737, -80.0321062806, -90.4424568014, -76.3676069133, -81.8527964578, -82.7940033104, -81.0827093732, -84.290674719, -81.9443612473, -81.5494155937, -82.4242922003, -81.3788820994, -85.3004537408, -81.5146256201, -83.7333921492, -80.4221594761, -83.9909369224, -80.638524726, -84.2998075748, -78.7428138959, -73.9674480046, -76.1946615604, -75.4360353899, -77.2992312938, -79.3506945059, -81.1597191216, -80.007436696, -79.6680437847, -85.4106302552, -81.9089250417, -78.8120528933, -79.7409613283, -79.134057258, -93.1507073094, -92.4235491591, -90.5585440245, -92.945493002, -76.2114697539, -80.5516904183, -81.5462687116, -82.5303343476, -81.7054323121, -91.6393777462, -80.2128956132, -92.1165116011, -72.5921757747, -91.8474395925, -72.6312529514, -92.9953796214, -72.6645147489, -92.3093997717, -80.1584927328, -90.0260311426, -93.2878964441, -85.6282012582, -85.797422382, -91.171079678, -91.7925144483, -93.4002186632, -92.2072049056, -85.3924901608, -85.8260800421, -86.6802714105, -85.7165247535, -85.6035733655, -88.2178564684, -90.7105264908, -83.4461078547, -87.7179647414, -87.4733444374, -85.673161936, -87.7759004442, -87.726950366, -89.2998566215, -88.5579847586, -89.3676759806, -90.6781414623, -80.7763846404, -78.8730990069, -83.7655259343, -82.1513152149, -83.6594698319, -83.3997666424, -89.5243245574, -88.6627936431, -90.1070041334, -89.4848968426, -89.5083197093, -80.2546939291, -81.272265225, -82.3100453547, -84.2045246722, -83.1280136535, -82.9929490774, -83.1459172378, -83.0573036644, -79.4090007341, -77.5351980939, -80.3628697923, -77.8093918389, -79.8812814355, -78.2772481343, -78.2621602891, -80.2428595305, -82.8456145919, -80.5020464352, -82.0711807564, -81.9352243912, -81.6534457901, -83.6663932957, -91.9323902829, -84.1554128175, -83.5662272478, -83.2765169855, -83.6877979099, -91.5699715917, -91.9133083657, -91.2143436305, -73.0363465609, -89.9449811573, -72.6149449227, -83.7679584249, -85.5040020396, -84.1705595015, -84.5793475427, -93.1840590265, -84.2260997933, -72.7134472903, -72.5853949944, -76.5748909444, -78.3638289152, -76.345520965, -78.2792730162, -78.2405384329, -78.1734764597, -80.9030020956, -77.2774886257, -93.3350790052, -72.1009720641, -72.3363365418, -71.9874598743, -89.003767014, -86.6502343758, -90.962031548, -89.6844073162, -89.8022853147, -93.5045838675, -88.7079442736, -89.9166145176, -85.6924158003, -89.3448815478, -88.9191167901, -85.1230039454, -90.5890505034, -83.0489946426, -84.9285293353, -87.4903783659, -84.1474094706, -91.8891742432, -92.6841367682, -82.163335769, -79.9057972419, -79.481329509, -77.9861726488, -77.8866082694, -86.0379133138, -85.4391977848, -85.0054391187, -80.5441092268, -78.827476179, -76.0171661054, -75.8054487423, -80.2122999971, -83.2217647848, -84.3603111251, -83.8229520589, -82.3957416394, -84.5773711149, -70.8123886441, -71.2321522929, -92.7658934611, -90.4062319835, -91.9254699879, -71.6226479007, -89.117877555, -93.2855969114, -89.8247969631, -89.7861634087, -92.4452111344, -91.8614634441, -86.6423247225, -85.3930760994, -87.1263882612, -86.5679723619, -89.4930444062, -81.8524300732, -83.9371644942, -88.7073664978, -91.7631754902, -89.4185170303, -93.3398248594, -90.9306543188, -89.333510275, -93.554698847, -90.1734930146, -88.8476338458, -88.4526044854, -89.9240161183, -88.9617833985, -89.9051948969, -88.2075454643, -77.1755750354, -82.482946384, -82.4215269307, -80.761058265, -82.5370628981, -81.237917142, -89.1883461403, -91.3528286281, -88.5799414919, -76.0905324018, -89.582152595, -83.3711330365, -81.6000599232, -82.7254929227, -80.8001996612, -81.36531241, -81.5318547608, -80.7609554913, -81.4735561539, -71.2027442451, -71.4230111421, -72.2507040711, -76.9513345128, -71.8210462894, -77.6323626225, -82.6247075998, -82.350299742, -92.8758878778, -85.1287182729, -84.9090292811, -82.9640283851, -83.0016983802, -85.2109378304, -79.5657799605, -80.0456002903, -80.2335862565, -80.8847781419, -82.4270982857, -83.7988117646, -83.1685834142, -84.7681035438, -84.2162024955, -84.9037998967, -80.387227767, -77.0016409131, -78.8870110097, -90.3012001164, -88.4435353301, -72.9318623958, -72.7329328513, -73.3886292118, -72.5366043103, -73.2453520742, -85.1360264641, -83.7138331599, -85.3881399712, -88.0978769766, -87.0874661917, -85.396521389, -86.1163365227, -86.1113565141, -86.510009431, -76.0081471738, -85.9064787263, -77.4358824329, -77.3972878932, -76.7476077648, -79.1204269334, -76.2856143394, -77.0950521679, -83.7499765275, -76.608409204, -93.2258708474, -78.6553197, -81.5551786161, -77.0225896826, -83.6844900153, -85.4485420299, -84.8281066989, -84.0143267417, -86.8483266927, -83.2219162223, -85.8020297093, -85.5496134834, -75.3579909933, -93.5867503019, -77.1017793513, -92.8621743587, -87.745581896, -91.4030944058, -88.0529412872, -92.8860950862, -89.6513966631, -88.085460331, -88.4880548412, -92.0015117555, -95.444115827, -93.0992862566, -96.0956148838, -104.561367827, -93.2949178319, -96.0117984738, -93.4775837452, -94.9167833841, -84.1272130216, -100.05143894, -97.1886240563, -120.211320439, -68.5988731402, -121.65165996, -112.390493042, -112.093700785, -110.266417898, -114.089247597, -69.9586391446, -69.2845840241, -100.636318407, -102.46080484, -99.4772202813, -98.5356481517, -115.6561273, -97.1887214893, -96.7687376323, -85.5442612883, -85.0982006643, -94.9696011602, -95.3788667849, -94.3255969877, -95.5663821911, -72.9122164439, -92.6771382996, -73.294812676, -110.435508058, -96.4106398404, -95.7079642045, -101.321866875, -101.832037685, -99.4417884849, -103.395277804, -101.280479553, -99.2159766904, -100.871823692, -99.1456800663, -112.656125055, -104.504347219, -109.395009532, -88.6872738912, -105.016887934, -103.846479245, -98.8827442519, -101.639766038, -97.4575487015, -98.2370393053, -103.495783919, -87.8702886527, -86.9245210623, -84.8902916791, -96.4545422751, -89.3147911725, -84.5984532766, -94.9048687577, -91.4459167594, -96.1736684684, -93.7834229145, -88.7100471226, -116.426498366, -92.4225528788, -92.4408297803, -118.51636747, -68.6494970556, -122.482639974, -100.833611915, -113.92350509, -103.376176333, -99.3660684833, -98.0716163763, -102.528548801, -103.508158931, -98.351727095, -96.4714521426, -94.8975897102, -89.6946884958, -106.730504755, -96.4016419125, -92.9081777974, -96.0367367755, -92.7413008693, -96.490822603, -101.340909366, -114.120489295, -97.5518867815, -102.35542047, -106.878983495, -96.9460368068, -93.6322284298, -93.2933600988, -95.0048157254, -96.7824684568, -116.71182063, -116.699814562, -123.199969279, -119.740784492, -122.392005246, -118.418892039, -123.707260847, -85.1220438585, -108.274192133, -122.22116488, -123.66911417, -123.08775676, -110.111100985, -92.4713804278, -95.8106407702, -98.5046837474, -103.487411947, -93.5359301988, -102.618058008, -98.9012289574, -100.238904374, -99.7799731668, -115.133971539, -88.5309035564, -95.4533049194, -87.6412764357, -87.5566821084, -112.994947589, -106.992738025, -115.890609115, -88.2688915355, -89.5214072091, -98.4647866644, -103.520837381, -102.518263748, -100.468864644, -97.2483759604, -95.8680058555, -86.199623811, -93.6299186709, -94.2686224965, -94.5271786175, -121.72454804, -122.96298373, -122.102343818, -117.273939631, -121.915020245, -97.729306985, -100.132222692, -98.3461410856, -113.440047441, -85.1401075106, -83.6289422667, -86.6033481045, -89.5149171, -91.7912062722, -116.463033698, -90.2419861793, -117.523264966, -120.738694567, -121.71721514, -93.9631149856, -97.6079465369, -99.9572642504, -102.475901609, -84.5960561851, -83.918457099, -94.9373959931, -95.6740132839, -93.2471093992, -93.4156587413, -96.3687815152, -88.770504387, -117.403753339, -121.696312983, -122.829183311, -117.854872592, -123.43298975, -105.548626441, -111.347354604, -104.536290967, -105.571719318, -72.2438964677, -109.940905278, -112.24058217, -92.4522958138, -91.1333752473, -88.0338359551, -89.759011601, -116.658463163, -117.9076027, -119.691676894, -122.680505789, -123.09843901, -121.168454252, -117.181184782, -118.009094016, -101.196858344, -96.6682091964, -123.413734875, -122.415920085, -105.795312542, -108.958925201, -111.495541856, -107.489724909, -109.028161668, -103.460290631, -101.040477315, -100.345503748, -97.6309458646, -102.654848449, -96.9485643539, -101.658056865, -97.6569931165, -98.7197791947, -116.750133428, -90.3610953937, -90.678127912, -91.8485541403, -91.2008775732, -123.772737879, -119.45164511, -117.545321394, -118.89856174, -122.547977861, -123.708640773, -120.689881259, -118.736938605, -84.5003379415, -109.224385657, -107.913386488, -112.226367454, -105.630162611, -112.936360685, -105.37765083, -97.7247209919, -98.9587582581, -99.2457394673, -97.1609829454, -97.7219408218, -113.06804317, -106.667494735, -109.844362609, -107.271468416, -115.467310022, -114.049686936, -88.3644943116, -90.5010993914, -88.7659304966, -91.1444641599, -104.417455717, -116.601158424, -89.7346459923, -89.0716695289, -117.202987135, -119.511582571, -120.618600516, -123.308626786, -95.6821013887, -104.899517367, -93.8025562541, -92.3678533017, -91.2794945536, -123.598927684, -121.805487999, -122.675479951, -120.68014772, -120.78936935, -94.2721949949, -119.58444852, -122.583226295, -123.932001603, -118.560876547, -114.99848666, -110.526270975, -108.397225929, -108.249985085, -97.5991618131, -99.9717716275, -109.175128391, -98.1923582871, -99.2208353849, -94.0709518968, -93.9990548313, -118.478316917, -87.3189734201, -100.031690772, -95.808855585, -104.249281482, -111.695443023, -110.885639085, -111.919995077, -115.405489626, -111.024725504, -99.8412124785, -95.999900393, -93.7748596988, -94.6130402219, -103.479774849, -88.4302006895, -99.6606719081, -101.541458996, -96.4682503265, -85.8125011322, -92.8835698961, -90.5368777169, -91.9144977421, -91.8961581989, -91.2859232874, -88.3978518594, -94.8120477187, -94.3906468727, -98.9463298086, -93.8934896471, -96.3024942642, -103.251541199, -95.9855884446, -102.723474788, -104.240410444, -95.1668190319, -100.538248405, -97.781829455, -101.411621296, -96.6217213924, -102.076390849, -97.6007522273, -97.312589185, -94.1626731122, -94.0252310238, -99.7488736962, -98.3996043518, -96.9662354757, -95.5027339463, -82.1381927215, -86.5964760324, -93.7450053633, -83.8948827531, -82.947998816, -85.6652207411, -90.7228681386, -82.9912871863, -82.621679813, -87.0166740548, -83.46977112, -84.8831292421, -84.2776931286, -92.412060659, -91.3489041058, -89.9640751059, -90.408267243, -91.3131449654, -88.2062245128, -93.3434233604, -91.0949896883, -93.3573149742, -87.3766586421, -81.6708029283, -84.6131726559, -85.6153084738, -82.2848190982, -88.6361922421, -86.1631148177, -92.8143072297, -85.1975350173, -89.4885061803, -89.1174175783, -91.6075810059, -92.005848039, -87.724803566, -81.8036237892, -95.2534592213, -94.9471733177, -93.775894096, -93.8502087566, -119.007676409, -93.7357051951, -94.0157006278, -101.539890325, -114.28141611, -99.004693477, -94.0667299615, -107.995004117, -120.356621571, -93.734459155, -99.486964517, -99.9960142312, -94.2148396198, -94.2477629411, -93.8816972735, -115.566308768, -116.7845456, -116.453961756, -93.7300051174, -94.1449082571, -96.7905951257, -113.93350612, -109.588500718, -117.675984713, -123.428693372, -97.4913219882, -93.9474893046, -93.985353052, -93.9919900412, -93.792705039, -111.170397165, -93.8515692954, -110.590217249, -98.2777054286, -93.7848396621, -101.666233164, -94.0628907127, -111.481738646, -93.9319848208, -94.2423818007, -100.73598704, -93.7375211046, -94.2570302592, -95.8387747948, -96.2668389913, -104.570646696, -106.584445695, -93.707006701, -112.351545457, -93.7849918967, -93.8063799565, -93.832711929, -120.02734296, -93.890384017, -94.0396922508, -112.899216516, -103.792222038, -93.8289129898, -93.9899006902, -93.7856390273, -94.1820985518, -93.8917137251, -94.2281562078, -93.6684439481, -123.867139792, -122.533455307, -93.9936006971, -102.717036861, -93.8565434295, -93.7248568396, -93.7167275964, -94.2354474266, -105.548912985, -93.7341424828, -93.9823978815, -121.175084248, -94.2319940825, -69.1484330263, -67.6382833522, -72.6411636905, -69.7671773773, -84.129577389, -92.0012162563, -89.5009382061, -85.5608922247, -68.354237184, -85.0903974633, -93.2971998743, -92.7227167656, -88.4644046455, -90.0412091881, -70.7560739793, -83.593749249, -91.3583457349, -90.8052431497, -73.6786220209, -84.6107296615, -88.9645596602, -73.7723808549, -73.0808853146, -72.1022700023, -75.0644348527, -88.0033154777, -86.0160588427, -71.737128509, -87.6154345982, -91.7545537587, -90.6118614449, -74.303816951, -70.4441157361, -71.3055734756, -93.0659967648],
            FIPS: ["02100", "02170", "02150", "02020", "02164", "02013", "02282", "02280", "02068", "02060", "02261", "02050", "02290", "02188", "02185", "02180", "02240", "02070", "02270", "02090", "02220", "02130", "02232", "02122", "02201", "02110", "02016", "48505", "48507", "48311", "48297", "48391", "48355", "48175", "48177", "48149", "48091", "48409", "48089", "48131", "48427", "48137", "48047", "48187", "48167", "48163", "48157", "15009", "15007", "15005", "15003", "15001", "48323", "48239", "48123", "48127", "48321", "48325", "48215", "48071", "48057", "48055", "48209", "48201", "48061", "48479", "48473", "48477", "48273", "48271", "48019", "48013", "48015", "48493", "48249", "48247", "48025", "48029", "48469", "48465", "48463", "48261", "48265", "48007", "48481", "48489", "48385", "48259", "48255", "48039", "48283", "48285", "22055", "22057", "22051", "12093", "12095", "12097", "12099", "22071", "12107", "22023", "72153", "72057", "72059", "12069", "12067", "12061", "12049", "12043", "12041", "12045", "72133", "72109", "72103", "72101", "72107", "72105", "72037", "72035", "72033", "72031", "72039", "22005", "12103", "12055", "12057", "12051", "12053", "72003", "72001", "72007", "72005", "72009", "72121", "72127", "72129", "12125", "12123", "12021", "12027", "12029", "12115", "12117", "12111", "12119", "12075", "12071", "72119", "72111", "72113", "72115", "72117", "72025", "72027", "72021", "72023", "72029", "22007", "22045", "12129", "12109", "12127", "22101", "12101", "72125", "72019", "72015", "72017", "72011", "72013", "72151", "12105", "72079", "72073", "72071", "72077", "72075", "22109", "12037", "12035", "72069", "72061", "72063", "72065", "72067", "72123", "12009", "12007", "12001", "72043", "72049", "72051", "72053", "72054", "72055", "72095", "72097", "72091", "72093", "12019", "12011", "12015", "12017", "72047", "72045", "72041", "22113", "22075", "72143", "72149", "22093", "22095", "72089", "72083", "72081", "72087", "72085", "22089", "22087", "72137", "72135", "72131", "72139", "12087", "12086", "12085", "12083", "12081", "72099", "72147", "72145", "72141", "20127", "06007", "35045", "35047", "35041", "35043", "20087", "35049", "40127", "06003", "20053", "40121", "48381", "40123", "48349", "48347", "48345", "48343", "48341", "48501", "48313", "48189", "48181", "48117", "41029", "48115", "41025", "48299", "48113", "48293", "48111", "06103", "31089", "49025", "49023", "49021", "31081", "31083", "31085", "31087", "32510", "19173", "48295", "20129", "16039", "32009", "20073", "19155", "20077", "31067", "31065", "31063", "31061", "20015", "20075", "31069", "46053", "08125", "08121", "08123", "20071", "08011", "08013", "08014", "08015", "08017", "08019", "32031", "32033", "35059", "35053", "35051", "35057", "35055", "49027", "27015", "48359", "48357", "48353", "06071", "06073", "06075", "29047", "29049", "56001", "48459", "56007", "56009", "48197", "48195", "48193", "48191", "20103", "48173", "49019", "48179", "41017", "41015", "41011", "41019", "31181", "31183", "31185", "19147", "19145", "19141", "31053", "31051", "31057", "31055", "20061", "31059", "20065", "20067", "19085", "46047", "46043", "06031", "20121", "20125", "19165", "19167", "19161", "20003", "20047", "20043", "20041", "31039", "31031", "31033", "31035", "31037", "46067", "46061", "31145", "31147", "31141", "31143", "31149", "20007", "06005", "40099", "40091", "40093", "40095", "40097", "27105", "27101", "35023", "35021", "35027", "35025", "35028", "35029", "19109", "16081", "16083", "40077", "40075", "40073", "40071", "40079", "29075", "16007", "29097", "29095", "49009", "48365", "48367", "48363", "48369", "48145", "48415", "48141", "48411", "16067", "20101", "16063", "20107", "48093", "48097", "48095", "40109", "40101", "19119", "20051", "20055", "20059", "31029", "31023", "31021", "31027", "31025", "46015", "46017", "19029", "19025", "19027", "19021", "31153", "16001", "31159", "46125", "46127", "46123", "20183", "19035", "48159", "06079", "20181", "16005", "46095", "27117", "35019", "35017", "35015", "35013", "35011", "20187", "56031", "40043", "40041", "40047", "40045", "20185", "40049", "27063", "48229", "48225", "48227", "48221", "48223", "48319", "49057", "49055", "49053", "49051", "48139", "48429", "20145", "48133", "16053", "16051", "48045", "20199", "48049", "20201", "20203", "20205", "20207", "20209", "06111", "06115", "48183", "48317", "48165", "48161", "49005", "49007", "49001", "48169", "20111", "56027", "56025", "56023", "56021", "48035", "41045", "49017", "19159", "19175", "20079", "31049", "31045", "31047", "31041", "31043", "19151", "46073", "48423", "46071", "46075", "46079", "48421", "20155", "06097", "48135", "06095", "48425", "20019", "06091", "20017", "20159", "20011", "40089", "40087", "40085", "40083", "40081", "27133", "35031", "35033", "35035", "35037", "35039", "06083", "48379", "48373", "48375", "40065", "40067", "40061", "40063", "40069", "29063", "29087", "20191", "20193", "20013", "20197", "06055", "48153", "48151", "48155", "48405", "48401", "16075", "16077", "16071", "16073", "56035", "56037", "48081", "48083", "48085", "48087", "06113", "31017", "31015", "31013", "31011", "31019", "46009", "46003", "46007", "31163", "31161", "31167", "31165", "31169", "46135", "35009", "35001", "35003", "35005", "35006", "35007", "20045", "40059", "40055", "40057", "40051", "48327", "27091", "48237", "48235", "48233", "48231", "48451", "48457", "48107", "04015", "48303", "04017", "04011", "04013", "48309", "04019", "49043", "48431", "48433", "48439", "48129", "48125", "40125", "16045", "16047", "16041", "46023", "46027", "20095", "31109", "20157", "20151", "20153", "31101", "31103", "31105", "31107", "20091", "46111", "46113", "16025", "08089", "08087", "08085", "08083", "08081", "08065", "40151", "08067", "06015", "08061", "08063", "08069", "40153", "40107", "40105", "40103", "48101", "40039", "40033", "40031", "40037", "40035", "48329", "48301", "48103", "48455", "48109", "04012", "16027", "16029", "48217", "48211", "48213", "48219", "49041", "48437", "48079", "48075", "48077", "49045", "48053", "20189", "06109", "48059", "19137", "19133", "31001", "31003", "31005", "31007", "31009", "46035", "46033", "19009", "19003", "19001", "31179", "31175", "31177", "31171", "31173", "46103", "05133", "05131", "46121", "40119", "40115", "40117", "40111", "40113", "49013", "49011", "20099", "49015", "40029", "40021", "40023", "40025", "40027", "29227", "48073", "32019", "56013", "48203", "48207", "48205", "56017", "48315", "56015", "04007", "04005", "04003", "04001", "48337", "48333", "48331", "04009", "48441", "48445", "48447", "48449", "48119", "48063", "48067", "48065", "48069", "40053", "20089", "06009", "20083", "20081", "06001", "20085", "31127", "31125", "31123", "31121", "31129", "20173", "20171", "20177", "20175", "20179", "20001", "49029", "08043", "08041", "08047", "08045", "08049", "40129", "06077", "40011", "40013", "40015", "40017", "40019", "29217", "48307", "48471", "48475", "48305", "48277", "48275", "48279", "40133", "48011", "48017", "06035", "06037", "06033", "06039", "48497", "48495", "48499", "56045", "56041", "56043", "06069", "19047", "48023", "19041", "31131", "31133", "31137", "31139", "20169", "20165", "20167", "20161", "20163", "19193", "06065", "20005", "48417", "06085", "48147", "06087", "48413", "06081", "48143", "08059", "08055", "08057", "08051", "08053", "16065", "06089", "06061", "20105", "29005", "29003", "48099", "46101", "48399", "48393", "48395", "48397", "48243", "48027", "06027", "06041", "06043", "06045", "06047", "06049", "16023", "19059", "20119", "20025", "20027", "20021", "20023", "20029", "08029", "40143", "40141", "49047", "49049", "20097", "41037", "20093", "06019", "06017", "06013", "06011", "19143", "19063", "20069", "48121", "20147", "31119", "20143", "20141", "31113", "31111", "31117", "31115", "20063", "20149", "06029", "08099", "08091", "08093", "08095", "08097", "08077", "08075", "08073", "08071", "08079", "40139", "40131", "40137", "40135", "29119", "40007", "40005", "40003", "40001", "40009", "16031", "06063", "06105", "04025", "04021", "04023", "49033", "48467", "48461", "06067", "16015", "16013", "16011", "16019", "49039", "48263", "48269", "48009", "48335", "48001", "48003", "48005", "31135", "48485", "48487", "48483", "06023", "06021", "06025", "19073", "19071", "19077", "40145", "08021", "08023", "08025", "08027", "08119", "08115", "08117", "08111", "08113", "06093", "20195", "04027", "32001", "32003", "32005", "32007", "29013", "19149", "29011", "20123", "48503", "29165", "48383", "48387", "20057", "48251", "48253", "48257", "48033", "48037", "06053", "06051", "06057", "06059", "20113", "20115", "06099", "20117", "19129", "20109", "46085", "20037", "20035", "20033", "46097", "20031", "20039", "06101", "29037", "08039", "08033", "08031", "08037", "08035", "08109", "08107", "08105", "08103", "08101", "31157", "31155", "49003", "32013", "32011", "32017", "32015", "29021", "31151", "20049", "41039", "41033", "41035", "48281", "48289", "49035", "49037", "49031", "31099", "31097", "31095", "31093", "31091", "20137", "20135", "20133", "20131", "20139", "48389", "31075", "46083", "31077", "31071", "46087", "31073", "20009", "31079", "46099", "19091", "19093", "40147", "27165", "40149", "08007", "08005", "08003", "08001", "08009", "27033", "32029", "32027", "32023", "32021", "35061", "06107", "29145", "29147", "21095", "21093", "21091", "21099", "37061", "37063", "37065", "37067", "37069", "28105", "28107", "27055", "28109", "36081", "26115", "26117", "26111", "26113", "17097", "17095", "17093", "17091", "17099", "29189", "29186", "29187", "29181", "29183", "47127", "29053", "29051", "29055", "29059", "01127", "01125", "39059", "01121", "39055", "39057", "39051", "39053", "28031", "28033", "28035", "28037", "51620", "28039", "24510", "50003", "47119", "47111", "47113", "01109", "51600", "01101", "01103", "01105", "01107", "28147", "28013", "28011", "28017", "28015", "47173", "47171", "47177", "45049", "45047", "45045", "45043", "45041", "45017", "23001", "13311", "51049", "13313", "13315", "33019", "13317", "13319", "33015", "33017", "33011", "51730", "33013", "22073", "19171", "13139", "13131", "13133", "13135", "13137", "54089", "54085", "54087", "54081", "54083", "51135", "51137", "51131", "51133", "51139", "13229", "13225", "13227", "13221", "13223", "13045", "13047", "13043", "28019", "28157", "23023", "19157", "19153", "51550", "28159", "21069", "21067", "21065", "21063", "21061", "18011", "18013", "18015", "18017", "18019", "21165", "47079", "37109", "37107", "37105", "37103", "37101", "21169", "47175", "47179", "47071", "26091", "26093", "18129", "18125", "26099", "18127", "18121", "18123", "21085", "21087", "21081", "21083", "21089", "37077", "37075", "37071", "37079", "29197", "29195", "29199", "29041", "17139", "29043", "29045", "29510", "17131", "17133", "17135", "17137", "24043", "42025", "24045", "28027", "28025", "01119", "28023", "28021", "01113", "01111", "01117", "28029", "01115", "28095", "47169", "51041", "45051", "45053", "45055", "45057", "51043", "50017", "19083", "13255", "51047", "13303", "18087", "13301", "13307", "13305", "13309", "51093", "11001", "51091", "13129", "51097", "51095", "13123", "51099", "13121", "47097", "13127", "13125", "51141", "51143", "51145", "51147", "51149", "13239", "13237", "13235", "25021", "13233", "13231", "13057", "13055", "13053", "13051", "13059", "51019", "51005", "12063", "51540", "21079", "21071", "21073", "21075", "21077", "51007", "18003", "18001", "18007", "18005", "18009", "37119", "37111", "37113", "37115", "37117", "19139", "51001", "19123", "36085", "19125", "26069", "18139", "26065", "18137", "26067", "18135", "18133", "26063", "18131", "51003", "21097", "13077", "13071", "13073", "25007", "25005", "25003", "25001", "19163", "19169", "25009", "23015", "23013", "13101", "13103", "13105", "13107", "13109", "28143", "51690", "18029", "18021", "18023", "18025", "18027", "18115", "05141", "05147", "18111", "05145", "18113", "05149", "26049", "26045", "27109", "37089", "37087", "37085", "37083", "37081", "26133", "26139", "22079", "17079", "17075", "17077", "17071", "17073", "51520", "29079", "36027", "29071", "29073", "29077", "39079", "36025", "39073", "39071", "39077", "39075", "36023", "17189", "29093", "29091", "17181", "17183", "36021", "17185", "17187", "29099", "47137", "47133", "47131", "47139", "19017", "51770", "47003", "47001", "47007", "47005", "47009", "42129", "42121", "42123", "42125", "42127", "47069", "13261", "51179", "13263", "13265", "13267", "13269", "51171", "51173", "51175", "51177", "42019", "42015", "42017", "42011", "42013", "13009", "51197", "51195", "51193", "51191", "13001", "13003", "13005", "13007", "51199", "19111", "19113", "19115", "19117", "25019", "12059", "36039", "51510", "21221", "21223", "21225", "21227", "21229", "19023", "44001", "44003", "44007", "37073", "47147", "21139", "21135", "21137", "21131", "21133", "18161", "18163", "26057", "18165", "26051", "18167", "18169", "26059", "51029", "36093", "36091", "36095", "28089", "28053", "26129", "26125", "26127", "26121", "26123", "17069", "17067", "17065", "17063", "17061", "51640", "55089", "51023", "17203", "17201", "17199", "24039", "24035", "17193", "24037", "17191", "24031", "17197", "24033", "17195", "47121", "47123", "47125", "47129", "34005", "22065", "34007", "22067", "34001", "22061", "34003", "34009", "22069", "51830", "51740", "39065", "39067", "39061", "39063", "47015", "47017", "39069", "47013", "26021", "54039", "54035", "42133", "54037", "42131", "54031", "54033", "13273", "13271", "13277", "13275", "13279", "42009", "42007", "42005", "42003", "42001", "13019", "28093", "13013", "13011", "13017", "13015", "19103", "19101", "19107", "19105", "47115", "47117", "45083", "45081", "45087", "45085", "45089", "47025", "47027", "47021", "47023", "47029", "51089", "51085", "51087", "51081", "51083", "51153", "51157", "51155", "51159", "13209", "13201", "13207", "13205", "13063", "13061", "13067", "13065", "13069", "19177", "13117", "13115", "13113", "13111", "51570", "13119", "36097", "18039", "18037", "18035", "18033", "18031", "22003", "18109", "18103", "26077", "18101", "26075", "18107", "26073", "18105", "21105", "21107", "21101", "47155", "21103", "47157", "37099", "36099", "37095", "47151", "37097", "37091", "37093", "47019", "45067", "27047", "27045", "45069", "18085", "47159", "47011", "26107", "26105", "26101", "17081", "17083", "17085", "17087", "17089", "22043", "22041", "29069", "29067", "29065", "36087", "01131", "01133", "39049", "39047", "39045", "39043", "39041", "29085", "29089", "19183", "19089", "47109", "19065", "47103", "47101", "47107", "47105", "51710", "51760", "45091", "13321", "22049", "47037", "47035", "47033", "55081", "47039", "13215", "13217", "13211", "51169", "13213", "51167", "51165", "51163", "13219", "51161", "51185", "51187", "51181", "13079", "51183", "13075", "28097", "51700", "36029", "19087", "17041", "21233", "21231", "21237", "21235", "22107", "21239", "18073", "05019", "05015", "05017", "05011", "05013", "19037", "19033", "19031", "21129", "21127", "21125", "21123", "21121", "05129", "18173", "26023", "18171", "26025", "18177", "26027", "18175", "05121", "05123", "18179", "05125", "05043", "18089", "26159", "26151", "26155", "26157", "17059", "22039", "17053", "17051", "17057", "17055", "22037", "34035", "34031", "27099", "22125", "22127", "22123", "24029", "24027", "24025", "24023", "34015", "34013", "34011", "01095", "45027", "01091", "34019", "39129", "39125", "45021", "39127", "39121", "39123", "01075", "01077", "01071", "45023", "01073", "51750", "01079", "28163", "28161", "39011", "39013", "39015", "39017", "39019", "47063", "47065", "47067", "54029", "54027", "54025", "54023", "51031", "51033", "21219", "21211", "21213", "21215", "21217", "05039", "18117", "19011", "19013", "05031", "05037", "19019", "05035", "13031", "13033", "13035", "13037", "13039", "37191", "37193", "37195", "37197", "37199", "18081", "21109", "18119", "05107", "05105", "51810", "05103", "05101", "05109", "18159", "18151", "26005", "18153", "18155", "18157", "28103", "47099", "47031", "24021", "29129", "29127", "29125", "29123", "29121", "23005", "24005", "28091", "17149", "24001", "24003", "17145", "17147", "28099", "17141", "24009", "17143", "55123", "55127", "34017", "22013", "17031", "17033", "17035", "34039", "17037", "17039", "22035", "34037", "34033", "39109", "45029", "39103", "39101", "39107", "39105", "01053", "01051", "01057", "01055", "01059", "47047", "47045", "47043", "28149", "47041", "55059", "01093", "55055", "47049", "39039", "39037", "39035", "39033", "39031", "42051", "54021", "13249", "13247", "13245", "13243", "13241", "42039", "42033", "51683", "42031", "51630", "42037", "42035", "51685", "19135", "19131", "51530", "36013", "36011", "36017", "36015", "42107", "42105", "42103", "42101", "55057", "42109", "47167", "21209", "21207", "21205", "21203", "21201", "28141", "51735", "05009", "05005", "05003", "05001", "45059", "19007", "19179", "19005", "13027", "21157", "13025", "13023", "13021", "13029", "37187", "37185", "37183", "37181", "18091", "21153", "18093", "18095", "37189", "21119", "21151", "47165", "21113", "21111", "21117", "21115", "05139", "26037", "18149", "26035", "18147", "18145", "18143", "05137", "18141", "05135", "47163", "22015", "10005", "10003", "10001", "26149", "26143", "26147", "26145", "29139", "29135", "29137", "29131", "29133", "29221", "29223", "29229", "28081", "28085", "18049", "55131", "55133", "55137", "55139", "24011", "24017", "24015", "34023", "34021", "34027", "34025", "01081", "34029", "01083", "17049", "39139", "39137", "47135", "39135", "39133", "39131", "01067", "01065", "01063", "01061", "01069", "28153", "36083", "28151", "55049", "28155", "55045", "55047", "55043", "39003", "39001", "39007", "39005", "47073", "39009", "47077", "47075", "54019", "54013", "54011", "54017", "54015", "13259", "42027", "42021", "42023", "13251", "13253", "42029", "13257", "36005", "36007", "36001", "36003", "18083", "36009", "19127", "42111", "42113", "42115", "42117", "51035", "42119", "51037", "51036", "19075", "51680", "36119", "36117", "36115", "36113", "36111", "21163", "21161", "21167", "37179", "37177", "37175", "37173", "37171", "28117", "36037", "21019", "21017", "21015", "21013", "21011", "37007", "37005", "37003", "37001", "37009", "28113", "55001", "28115", "29219", "29211", "29213", "29215", "17169", "28111", "17163", "17161", "17167", "17165", "55101", "55103", "55105", "50001", "29105", "17019", "29103", "17017", "17015", "17013", "17011", "45009", "45003", "45001", "45007", "45005", "01039", "55077", "55071", "01031", "01033", "01035", "55079", "01037", "28129", "28123", "28121", "28127", "28125", "28057", "28055", "42079", "28051", "42077", "42075", "42073", "42071", "39161", "39163", "39165", "39167", "39169", "42095", "42097", "42091", "42093", "42099", "28119", "36059", "36057", "36055", "36053", "36051", "13199", "13197", "13195", "13193", "51009", "13191", "54063", "54061", "54067", "54065", "54069", "13175", "13177", "05041", "13171", "13173", "05045", "05049", "13179", "19045", "19043", "36123", "36121", "37149", "21159", "01099", "37143", "37141", "37147", "37145", "19191", "19195", "51775", "21029", "21023", "21021", "21027", "21025", "18059", "51515", "18055", "18057", "18051", "18053", "37033", "37031", "37037", "37035", "37039", "27157", "18099", "51670", "45015", "29007", "45013", "29001", "47183", "47181", "47187", "47185", "47189", "47161", "29171", "17009", "29173", "29175", "29179", "17001", "17003", "36035", "17005", "17007", "51820", "01029", "01023", "01021", "01027", "01025", "17175", "17177", "17171", "17173", "17179", "18069", "28063", "42069", "28061", "51678", "28067", "28065", "51580", "42061", "28069", "42063", "42065", "42067", "39173", "39171", "45011", "39175", "45019", "42087", "42085", "42083", "42081", "42089", "36049", "36041", "22059", "36043", "36045", "36047", "51071", "13189", "51073", "51075", "51077", "51079", "13181", "13183", "13185", "13187", "54059", "54057", "54055", "54053", "54051", "19099", "13167", "13165", "13163", "05079", "13161", "05077", "05075", "05073", "05071", "13169", "19095", "19051", "19055", "19057", "19097", "51109", "51105", "51107", "51101", "51103", "21149", "21141", "21143", "21145", "21147", "19181", "19185", "21035", "21037", "21031", "21033", "21039", "05095", "05097", "05093", "05099", "37155", "37157", "37151", "37153", "18047", "18045", "37159", "18041", "27169", "42053", "42055", "42057", "42059", "13283", "13281", "13287", "13285", "13289", "36071", "36073", "36075", "36077", "36079", "23031", "54005", "54007", "54001", "54003", "51027", "51025", "51790", "54009", "51021", "05025", "05027", "05021", "05023", "25025", "05029", "19061", "21155", "25027", "19067", "19069", "36109", "36105", "36107", "36101", "36103", "21171", "21173", "37169", "21177", "37165", "37167", "37161", "37163", "05111", "05115", "05117", "05119", "51800", "28101", "26011", "26015", "26017", "18183", "18181", "25017", "28005", "21009", "21005", "21175", "21007", "21001", "21003", "18097", "45073", "21179", "47145", "47143", "37015", "37017", "37011", "37013", "47141", "37019", "47061", "26161", "26163", "26165", "47149", "29113", "29111", "29117", "29115", "29209", "29207", "29205", "29203", "29201", "17159", "17157", "17155", "17153", "17151", "55117", "55111", "17023", "17021", "17027", "17025", "34041", "17029", "45039", "45037", "45035", "45033", "45031", "01049", "01045", "01047", "01041", "01043", "28139", "47051", "47053", "47055", "47057", "55063", "55065", "39029", "22117", "22111", "39021", "39023", "39025", "39027", "01089", "22077", "42043", "42041", "28041", "42047", "28043", "42045", "42049", "28049", "51650", "39115", "39117", "39111", "39113", "39119", "54109", "13299", "54105", "13295", "54107", "13297", "54101", "13291", "54103", "13293", "36063", "36061", "36067", "36065", "36069", "54071", "54073", "54075", "54077", "47153", "54079", "51011", "51017", "51015", "05051", "05053", "05055", "05059", "37029", "37025", "37027", "37021", "37023", "22029", "51045", "22021", "25011", "22025", "25013", "22027", "25015", "29019", "45025", "29017", "29015", "18079", "01123", "29163", "29161", "29167", "29169", "01017", "01015", "01013", "01011", "01019", "55015", "22091", "47089", "47083", "47081", "47087", "47085", "17101", "17103", "17105", "17107", "17109", "39099", "51660", "39091", "39093", "39095", "39097", "28079", "28075", "28077", "28071", "28073", "45061", "45063", "45065", "39149", "39147", "39145", "39143", "39141", "51590", "51595", "51063", "51061", "51067", "51065", "51069", "54049", "47059", "54041", "54043", "54045", "54047", "13153", "05069", "13151", "13157", "13155", "13159", "05063", "05065", "05067", "50021", "28137", "50023", "13081", "13083", "13085", "13087", "22115", "13089", "50025", "50027", "51119", "51117", "51115", "51113", "51111", "51840", "45079", "51059", "22119", "09011", "09013", "09015", "28145", "01085", "29035", "29031", "17129", "29033", "17127", "17125", "01087", "17123", "17121", "21041", "28133", "21043", "21045", "21047", "21049", "05085", "05089", "37121", "37123", "37125", "37127", "37129", "18071", "18077", "18075", "37059", "37051", "37053", "37055", "37057", "21193", "21191", "21197", "21195", "21199", "25023", "44005", "29029", "29023", "29027", "44009", "28131", "29159", "29157", "29155", "29153", "29151", "01001", "01005", "01007", "01009", "47095", "47091", "47093", "55027", "22083", "55025", "22081", "55023", "55021", "22085", "28135", "17113", "17111", "17117", "17115", "17119", "01129", "51610", "39089", "39083", "39081", "39087", "39085", "28009", "28001", "28003", "24041", "28007", "39159", "45071", "45077", "45075", "39151", "39153", "39155", "39157", "33003", "33001", "33005", "51057", "33009", "51053", "51720", "51051", "29225", "13149", "13145", "13147", "13141", "13143", "54093", "54091", "54097", "54095", "54099", "13093", "13091", "13097", "13095", "13099", "51121", "51127", "51125", "28083", "28087", "09009", "09003", "09001", "09007", "09005", "21053", "21051", "21057", "21055", "21059", "18065", "18067", "18061", "18063", "24019", "18043", "37133", "37131", "37137", "37135", "37139", "37049", "37043", "37041", "27147", "37047", "37045", "24013", "21189", "21185", "21187", "21181", "21183", "26087", "26085", "26081", "24047", "27161", "51013", "27039", "17045", "29149", "17047", "29141", "29143", "17043", "55039", "22009", "27121", "27123", "27125", "30083", "27059", "27051", "27053", "27057", "26119", "46021", "46029", "41021", "23003", "41027", "30049", "30043", "30045", "30047", "23025", "23021", "38049", "38041", "38047", "38045", "16035", "46057", "46051", "26095", "26097", "27159", "27029", "27021", "27023", "50011", "27017", "50013", "30015", "27011", "27111", "38055", "38057", "38051", "38053", "38059", "46045", "46041", "46049", "30093", "30091", "30095", "26061", "30085", "38033", "38031", "38037", "38035", "38039", "46063", "26043", "26041", "26047", "27107", "26131", "26137", "27077", "27075", "27073", "27071", "55078", "16061", "55093", "55095", "53019", "23019", "53011", "38009", "30063", "38007", "38005", "38003", "38001", "46019", "46013", "27155", "27153", "26053", "30087", "27119", "27025", "27113", "27115", "27027", "38065", "30081", "38067", "38061", "56033", "46109", "27061", "27065", "27067", "27069", "16057", "16055", "53045", "53047", "53041", "53043", "53049", "26029", "30111", "41005", "41007", "41009", "30041", "27137", "27135", "38021", "38023", "27139", "38025", "38027", "38029", "38043", "30089", "26071", "27041", "26103", "26109", "30035", "30033", "16079", "55083", "55085", "38019", "38011", "38013", "38015", "38017", "27173", "26153", "27095", "27097", "27093", "53057", "53055", "53053", "53051", "53059", "46025", "46119", "46115", "30039", "26009", "26007", "26003", "55125", "55129", "16021", "55051", "53075", "53077", "53073", "27171", "46037", "46107", "46105", "26033", "26141", "27007", "27005", "27003", "27001", "27089", "55041", "53063", "53061", "53067", "53065", "53069", "30019", "30013", "30011", "30017", "50019", "30097", "30099", "55109", "55107", "55075", "55073", "16009", "53013", "53017", "53015", "41067", "41065", "41063", "41061", "46031", "46039", "41053", "41051", "30055", "30005", "30007", "30003", "30009", "38087", "38085", "38083", "38081", "38089", "38077", "38075", "38073", "38071", "16069", "55099", "55003", "55005", "55007", "53027", "53025", "53023", "53021", "53029", "41057", "41055", "41059", "26031", "30027", "30071", "30073", "30075", "30077", "30079", "38091", "38093", "38095", "38097", "38099", "30023", "30105", "30107", "30103", "16049", "30029", "26013", "55119", "55115", "55113", "30025", "16017", "55069", "55067", "53003", "53005", "53007", "41071", "27151", "30021", "27019", "55013", "55017", "53031", "53033", "53035", "53037", "53039", "27085", "41049", "41047", "53009", "53001", "30061", "30067", "30065", "30069", "46091", "38069", "30037", "38063", "46089", "27035", "27009", "53071", "55029", "46129", "27087", "30109", "30101", "30059", "30057", "30053", "30051", "38079", "27149", "27141", "27145", "38105", "26083", "38103", "38101", "27167", "26089", "27163", "27031", "55031", "55033", "55035", "55037", "48291", "48199", "48171", "48361", "48041", "48043", "48185", "48371", "48377", "48407", "48435", "48453", "48105", "48051", "48443", "48491", "48021", "48245", "48241", "48267", "48031", "48287", "48339", "13049", "12091", "48351", "12065", "12047", "12133", "22063", "12121", "12023", "12113", "12079", "12077", "12073", "22001", "22047", "22103", "22105", "22121", "01097", "22011", "22033", "22019", "12033", "12031", "12039", "12005", "12003", "28059", "12131", "22053", "12013", "28045", "28047", "22099", "22097", "01003", "12089", "27127", "27129", "29185", "29057", "41023", "19197", "19121", "46055", "16037", "46059", "27013", "56003", "41013", "19081", "46069", "46065", "05143", "27103", "22017", "16085", "16087", "16003", "27079", "48419", "46011", "16059", "56029", "41001", "41003", "46077", "27043", "29061", "29081", "29083", "30031", "48403", "56039", "46005", "19039", "46137", "05127", "16043", "19015", "05033", "46117", "22031", "05007", "27083", "27081", "56011", "56019", "19079", "16033", "29107", "29101", "29109", "41069", "05047", "19049", "30001", "46081", "29009", "29177", "19053", "19187", "05091", "05113", "05057", "41041", "41043", "05061", "46093", "29039", "05087", "05083", "05081", "56005", "19189", "29025", "41031", "27143", "23027", "23029", "50015", "23011", "26135", "55091", "55097", "26055", "23009", "26079", "27131", "27049", "55087", "55141", "23017", "26001", "55121", "55053", "36019", "26039", "55135", "36031", "50007", "50005", "36089", "55009", "26019", "50009", "55061", "55011", "55019", "36033", "23007", "33007", "27037"],
            NAME: ["Haines", "Matanuska-Susitna", "Kodiak Island", "Anchorage", "Lake and Peninsula", "Aleutians East", "Yakutat", "Wrangell-Petersburg", "Denali", "Bristol Bay", "Valdez-Cordova", "Bethel", "Yukon-Koyukuk", "Northwest Arctic", "North Slope", "Nome", "Southeast Fairbanks", "Dillingham", "Wade Hampton", "Fairbanks North Star", "Sitka", "Ketchikan Gateway", "Skagway-Hoonah-Angoon", "Kenai Peninsula", "Prince of Wales-Outer Ketchikan", "Juneau", "Aleutians West", "Zapata", "Zavala", "McMullen", "Live Oak", "Refugio", "Nueces", "Goliad", "Gonzales", "Fayette", "Comal", "San Patricio", "Colorado", "Duval", "Starr", "Edwards", "Brooks", "Guadalupe", "Galveston", "Frio", "Fort Bend", "Maui", "Kauai", "Kalawao", "Honolulu", "Hawaii", "Maverick", "Jackson", "DeWitt", "Dimmit", "Matagorda", "Medina", "Hidalgo", "Chambers", "Calhoun", "Caldwell", "Hays", "Harris", "Cameron", "Webb", "Waller", "Washington", "Kleberg", "Kinney", "Bandera", "Atascosa", "Austin", "Wilson", "Jim Wells", "Jim Hogg", "Bee", "Bexar", "Victoria", "Val Verde", "Uvalde", "Kenedy", "Kerr", "Aransas", "Wharton", "Willacy", "Real", "Kendall", "Karnes", "Brazoria", "La Salle", "Lavaca", "Lafayette", "Lafourche", "Jefferson", "Okeechobee", "Orange", "Osceola", "Palm Beach", "Orleans", "Putnam", "Cameron", "Yauco", "Guayama", "Guayanilla", "Lake", "Lafayette", "Indian River", "Hardee", "Glades", "Gilchrist", "Gulf", "Santa Isabel", "Patillas", "Naguabo", "Morovis", "Orocovis", "Naranjito", "Ceiba", "Cayey", "Catano", "Carolina", "Ciales", "Ascension", "Pinellas", "Highlands", "Hillsborough", "Hendry", "Hernando", "Aguada", "Adjuntas", "Aguas Buenas", "Aguadilla", "Aibonito", "Sabana Grande", "San Juan", "San Lorenzo", "Union", "Taylor", "Collier", "DeSoto", "Dixie", "Sarasota", "Seminole", "St. Lucie", "Sumter", "Levy", "Lee", "Rio Grande", "Penuelas", "Ponce", "Quebradillas", "Rincon", "Caguas", "Camuy", "Bayamon", "Cabo Rojo", "Canovanas", "Assumption", "Iberia", "Wakulla", "St. Johns", "Volusia", "St. Mary", "Pasco", "San German", "Barranquitas", "Arroyo", "Barceloneta", "Anasco", "Arecibo", "Yabucoa", "Polk", "Lajas", "Jayuya", "Isabela", "Juncos", "Juana Diaz", "Terrebonne", "Franklin", "Flagler", "Humacao", "Guaynabo", "Gurabo", "Hatillo", "Hormigueros", "Salinas", "Brevard", "Bradford", "Alachua", "Coamo", "Culebra", "Dorado", "Fajardo", "Florida", "Guanica", "Maunabo", "Mayaguez", "Manati", "Maricao", "Clay", "Broward", "Charlotte", "Citrus", "Corozal", "Comerio", "Cidra", "Vermilion", "Plaquemines", "Vega Alta", "Villalba", "St. James", "St. John the Baptist", "Luquillo", "Las Marias", "Lares", "Loiza", "Las Piedras", "St. Charles", "St. Bernard", "Toa Baja", "Toa Alta", "San Sebastian", "Trujillo Alto", "Monroe", "Miami-Dade", "Martin", "Marion", "Manatee", "Moca", "Vieques", "Vega Baja", "Utuado", "Morris", "Butte", "San Juan", "San Miguel", "Roosevelt", "Sandoval", "Jefferson", "Santa Fe", "Pushmataha", "Alpine", "Ellsworth", "Pittsburg", "Randall", "Pontotoc", "Navarro", "Nacogdoches", "Motley", "Morris", "Moore", "Yoakum", "Madison", "Hale", "Grayson", "Deaf Smith", "Jackson", "Dawson", "Harney", "Llano", "Dallas", "Limestone", "Dallam", "Tehama", "Holt", "Kane", "Juab", "Iron", "Hamilton", "Harlan", "Hayes", "Hitchcock", "Carson City", "Taylor", "Lipscomb", "Morton", "Elmore", "Esmeralda", "Greenwood", "Pottawattamie", "Harper", "Gage", "Furnas", "Frontier", "Franklin", "Butler", "Hamilton", "Garden", "Gregory", "Yuma", "Washington", "Weld", "Greeley", "Bent", "Boulder", "Broomfield", "Chaffee", "Cheyenne", "Clear Creek", "Washoe", "White Pine", "Union", "Socorro", "Sierra", "Torrance", "Taos", "Millard", "Brown", "Oldham", "Ochiltree", "Nolan", "San Bernardino", "San Diego", "San Francisco", "Clay", "Clinton", "Albany", "Upshur", "Carbon", "Converse", "Hardeman", "Hansford", "Hamilton", "Hall", "Leavenworth", "Glasscock", "Grand", "Gray", "Deschutes", "Curry", "Coos", "Douglas", "Webster", "Wheeler", "York", "Palo Alto", "Page", "O'Brien", "Dodge", "Dixon", "Dundy", "Douglas", "Geary", "Fillmore", "Graham", "Grant", "Harrison", "Fall River", "Douglas", "Kings", "Miami", "Montgomery", "Shelby", "Sioux", "Sac", "Anderson", "Edwards", "Doniphan", "Dickinson", "Cuming", "Cherry", "Cheyenne", "Clay", "Colfax", "Hutchinson", "Hanson", "Red Willow", "Richardson", "Platte", "Polk", "Rock", "Barber", "Amador", "Murray", "McIntosh", "Major", "Marshall", "Mayes", "Nobles", "Murray", "Hidalgo", "Harding", "Lincoln", "Lea", "Los Alamos", "Luna", "Kossuth", "Teton", "Twin Falls", "Latimer", "Kiowa", "Kingfisher", "Kay", "Le Flore", "Gentry", "Bear Lake", "Jasper", "Jackson", "Daggett", "Panola", "Parker", "Palo Pinto", "Parmer", "Falls", "Scurry", "El Paso", "San Saba", "Minidoka", "Lane", "Lincoln", "Linn", "Comanche", "Cooke", "Concho", "Oklahoma", "Muskogee", "Lyon", "Ellis", "Finney", "Franklin", "Chase", "Butler", "Burt", "Cedar", "Cass", "Brule", "Buffalo", "Cass", "Calhoun", "Carroll", "Buena Vista", "Sarpy", "Ada", "Seward", "Turner", "Union", "Tripp", "Smith", "Cherokee", "Franklin", "San Luis Obispo", "Sherman", "Bannock", "Mellette", "Pipestone", "Guadalupe", "Grant", "Eddy", "Dona Ana", "De Baca", "Stanton", "Platte", "Dewey", "Delaware", "Garfield", "Ellis", "Stafford", "Garvin", "Jackson", "Hudspeth", "Houston", "Howard", "Hood", "Hopkins", "Mason", "Weber", "Wayne", "Washington", "Wasatch", "Ellis", "Stephens", "Pawnee", "Eastland", "Jerome", "Jefferson", "Briscoe", "Wallace", "Brown", "Washington", "Wichita", "Wilson", "Woodson", "Wyandotte", "Ventura", "Yuba", "Gregg", "Martin", "Gaines", "Freestone", "Cache", "Carbon", "Beaver", "Garza", "Lyon", "Niobrara", "Natrona", "Lincoln", "Laramie", "Bosque", "Malheur", "Garfield", "Ringgold", "Union", "Harvey", "Deuel", "Dawes", "Dawson", "Custer", "Dakota", "Pocahontas", "Jerauld", "Smith", "Jackson", "Jones", "Lake", "Sherman", "Reno", "Sonoma", "Ector", "Solano", "Somervell", "Chautauqua", "Sierra", "Chase", "Rice", "Bourbon", "McCurtain", "McClain", "Love", "Logan", "Lincoln", "Rock", "McKinley", "Mora", "Otero", "Quay", "Rio Arriba", "Santa Barbara", "Rains", "Polk", "Potter", "Jackson", "Jefferson", "Haskell", "Hughes", "Johnston", "DeKalb", "Holt", "Sumner", "Thomas", "Brown", "Wabaunsee", "Napa", "Floyd", "Fisher", "Foard", "San Augustine", "Rusk", "Payette", "Power", "Oneida", "Owyhee", "Sublette", "Sweetwater", "Coke", "Coleman", "Collin", "Collingsworth", "Yolo", "Brown", "Boyd", "Box Butte", "Boone", "Buffalo", "Bon Homme", "Aurora", "Bennett", "Sherman", "Sheridan", "Stanton", "Sioux", "Thayer", "Yankton", "Curry", "Bernalillo", "Catron", "Chaves", "Cibola", "Colfax", "Douglas", "Harper", "Greer", "Harmon", "Grady", "Menard", "Martin", "Jack", "Irion", "Hutchinson", "Hunt", "Tom Green", "Tyler", "Crosby", "Mohave", "Lubbock", "Navajo", "Greenlee", "Maricopa", "McLennan", "Pima", "Summit", "Sterling", "Stonewall", "Tarrant", "Donley", "Dickens", "Pottawatomie", "Gem", "Gooding", "Franklin", "Charles Mix", "Clay", "Kingman", "Lancaster", "Republic", "Pratt", "Rawlins", "Keith", "Keya Paha", "Kimball", "Knox", "Johnson", "Sanborn", "Shannon", "Camas", "Otero", "Morgan", "Montrose", "Montezuma", "Moffat", "Lake", "Woods", "La Plata", "Del Norte", "Kiowa", "Kit Carson", "Larimer", "Woodward", "Okfuskee", "Nowata", "Noble", "Cottle", "Custer", "Cotton", "Comanche", "Creek", "Craig", "Midland", "Loving", "Crane", "Trinity", "Culberson", "La Paz", "Canyon", "Caribou", "Hill", "Hemphill", "Henderson", "Hockley", "Sevier", "Swisher", "Cochran", "Childress", "Clay", "Tooele", "Burnet", "Stevens", "Tuolumne", "Callahan", "Montgomery", "Monona", "Adams", "Antelope", "Arthur", "Banner", "Blaine", "Davison", "Custer", "Audubon", "Adams", "Adair", "Wayne", "Valley", "Washington", "Thomas", "Thurston", "Pennington", "Sevier", "Sebastian", "Todd", "Payne", "Ottawa", "Pawnee", "Okmulgee", "Osage", "Duchesne", "Davis", "Labette", "Emery", "Coal", "Cherokee", "Choctaw", "Cimarron", "Cleveland", "Worth", "Cherokee", "Lyon", "Fremont", "Harrison", "Haskell", "Hartley", "Hot Springs", "Marion", "Goshen", "Gila", "Coconino", "Cochise", "Apache", "Montague", "Mills", "Milam", "Graham", "Taylor", "Terry", "Throckmorton", "Titus", "Delta", "Camp", "Cass", "Carson", "Castro", "Grant", "Jewell", "Calaveras", "Hodgeman", "Haskell", "Alameda", "Jackson", "Nemaha", "Nance", "Morrill", "Merrick", "Nuckolls", "Sedgwick", "Scott", "Shawnee", "Seward", "Sheridan", "Allen", "Morgan", "Fremont", "El Paso", "Gilpin", "Garfield", "Grand", "Roger Mills", "San Joaquin", "Blaine", "Bryan", "Caddo", "Canadian", "Carter", "Vernon", "McCulloch", "Walker", "Ward", "Lynn", "Lamar", "Knox", "Lamb", "Seminole", "Armstrong", "Bailey", "Lassen", "Los Angeles", "Lake", "Madera", "Wise", "Winkler", "Wood", "Weston", "Uinta", "Washakie", "San Benito", "Crawford", "Baylor", "Clay", "Otoe", "Pawnee", "Phelps", "Pierce", "Saline", "Rush", "Russell", "Riley", "Rooks", "Woodbury", "Riverside", "Atchison", "Shackelford", "Santa Clara", "Fannin", "Santa Cruz", "Schleicher", "San Mateo", "Erath", "Jefferson", "Huerfano", "Jackson", "Gunnison", "Hinsdale", "Madison", "Shasta", "Placer", "Lincoln", "Atchison", "Andrew", "Coryell", "Moody", "Runnels", "Roberts", "Robertson", "Rockwall", "Jeff Davis", "Bell", "Inyo", "Marin", "Mariposa", "Mendocino", "Merced", "Modoc", "Butte", "Dickinson", "Meade", "Clark", "Clay", "Cherokee", "Cheyenne", "Cloud", "Delta", "Tulsa", "Tillman", "Uintah", "Utah", "Kiowa", "Lake", "Kearny", "Fresno", "El Dorado", "Contra Costa", "Colusa", "Osceola", "Emmet", "Gray", "Denton", "Phillips", "Madison", "Ottawa", "Osborne", "Logan", "Lincoln", "McPherson", "Loup", "Gove", "Pottawatomie", "Kern", "Prowers", "Ouray", "Park", "Phillips", "Pitkin", "Mesa", "Logan", "Lincoln", "Las Animas", "Mineral", "Texas", "Rogers", "Stephens", "Sequoyah", "McDonald", "Beaver", "Atoka", "Alfalfa", "Adair", "Beckham", "Cassia", "Plumas", "Trinity", "Yavapai", "Pinal", "Santa Cruz", "Rich", "Van Zandt", "Upton", "Sacramento", "Boise", "Blaine", "Bingham", "Bonneville", "Sanpete", "Kent", "King", "Archer", "Mitchell", "Anderson", "Andrews", "Angelina", "Perkins", "Wichita", "Wilbarger", "Wheeler", "Humboldt", "Glenn", "Imperial", "Greene", "Fremont", "Guthrie", "Wagoner", "Conejos", "Costilla", "Crowley", "Custer", "Teller", "Sedgwick", "Summit", "San Juan", "San Miguel", "Siskiyou", "Trego", "Yuma", "Churchill", "Clark", "Douglas", "Elko", "Bates", "Plymouth", "Barton", "Mitchell", "Young", "Platte", "Reagan", "Red River", "Ford", "Johnson", "Jones", "Kaufman", "Borden", "Bowie", "Monterey", "Mono", "Nevada", "Orange", "McPherson", "Marion", "Stanislaus", "Marshall", "Mills", "Logan", "Lyman", "Crawford", "Cowley", "Comanche", "Miner", "Coffey", "Decatur", "Sutter", "Cass", "Elbert", "Dolores", "Denver", "Eagle", "Douglas", "Saguache", "Routt", "Rio Grande", "Rio Blanco", "Pueblo", "Scotts Bluff", "Saunders", "Box Elder", "Humboldt", "Eureka", "Lincoln", "Lander", "Buchanan", "Saline", "Elk", "Lane", "Josephine", "Klamath", "Lampasas", "Leon", "Salt Lake", "San Juan", "Piute", "Kearney", "Johnson", "Jefferson", "Howard", "Hooker", "Norton", "Ness", "Neosho", "Nemaha", "Osage", "Reeves", "Grant", "Lincoln", "Greeley", "Garfield", "McCook", "Gosper", "Barton", "Hall", "Minnehaha", "Humboldt", "Ida", "Washington", "Watonwan", "Washita", "Archuleta", "Arapahoe", "Alamosa", "Adams", "Baca", "Cottonwood", "Storey", "Pershing", "Nye", "Mineral", "Valencia", "Tulare", "Newton", "Nodaway", "Harlan", "Hardin", "Hancock", "Hart", "Duplin", "Durham", "Edgecombe", "Forsyth", "Franklin", "Oktibbeha", "Panola", "Houston", "Pearl River", "Queens", "Monroe", "Montcalm", "Midland", "Missaukee", "Lake", "Knox", "Kendall", "Kankakee", "La Salle", "St. Louis", "Ste. Genevieve", "St. Francois", "Ripley", "St. Charles", "Moore", "Cooper", "Cole", "Crawford", "Dallas", "Walker", "Tuscaloosa", "Guernsey", "Talladega", "Geauga", "Greene", "Fulton", "Gallia", "Covington", "DeSoto", "Forrest", "Franklin", "Franklin City", "George", "Baltimore City", "Bennington", "Maury", "Macon", "Madison", "Pike", "Fairfax City", "Montgomery", "Morgan", "Perry", "Pickens", "Walthall", "Calhoun", "Bolivar", "Chickasaw", "Carroll", "Union", "Unicoi", "Warren", "Hampton", "Greenwood", "Greenville", "Georgetown", "Florence", "Calhoun", "Androscoggin", "White", "Cumberland", "Whitfield", "Wilcox", "Sullivan", "Wilkes", "Wilkinson", "Rockingham", "Strafford", "Hillsborough", "Petersburg", "Merrimack", "Ouachita", "Tama", "Hall", "Grady", "Greene", "Gwinnett", "Habersham", "Summers", "Ritchie", "Roane", "Raleigh", "Randolph", "Nottoway", "Orange", "Northampton", "Northumberland", "Page", "Pierce", "Peach", "Pickens", "Oglethorpe", "Paulding", "Carroll", "Catoosa", "Candler", "Choctaw", "Wilkinson", "Sagadahoc", "Poweshiek", "Polk", "Chesapeake", "Winston", "Fleming", "Fayette", "Estill", "Elliott", "Edmonson", "Boone", "Brown", "Carroll", "Cass", "Clark", "Menifee", "Henry", "Lincoln", "Lenoir", "Lee", "Jones", "Johnston", "Metcalfe", "Van Buren", "Washington", "Hardin", "Lenawee", "Livingston", "Posey", "Pike", "Macomb", "Porter", "Parke", "Perry", "Grayson", "Green", "Grant", "Graves", "Greenup", "Granville", "Graham", "Gaston", "Greene", "Schuyler", "Saline", "Scotland", "Chariton", "Moultrie", "Christian", "Clark", "St. Louis City", "Mercer", "Monroe", "Montgomery", "Morgan", "Washington", "Carbon", "Wicomico", "Coahoma", "Clay", "Sumter", "Clarke", "Claiborne", "Russell", "Randolph", "Shelby", "Copiah", "St. Clair", "Monroe", "Trousdale", "Chesterfield", "Horry", "Jasper", "Kershaw", "Lancaster", "Clarke", "Orange", "Hardin", "Spalding", "Culpeper", "Washington", "LaGrange", "Warren", "Webster", "Wayne", "Wheeler", "Isle of Wight", "District of Columbia", "Highland", "Gordon", "King and Queen", "James City", "Gilmer", "King George", "Fulton", "Lauderdale", "Glynn", "Glascock", "Patrick", "Pittsylvania", "Powhatan", "Prince Edward", "Prince George", "Quitman", "Putnam", "Pulaski", "Norfolk", "Polk", "Pike", "Cherokee", "Chattooga", "Chattahoochee", "Chatham", "Clarke", "Bedford", "Alleghany", "Jackson", "Charlottesville", "Garrard", "Floyd", "Franklin", "Fulton", "Gallatin", "Amelia", "Allen", "Adams", "Benton", "Bartholomew", "Blackford", "Mecklenburg", "McDowell", "Macon", "Madison", "Martin", "Muscatine", "Accomack", "Mahaska", "Richmond", "Marion", "Iosco", "Rush", "Ingham", "Ripley", "Ionia", "Randolph", "Putnam", "Huron", "Pulaski", "Albemarle", "Harrison", "Coweta", "Colquitt", "Columbia", "Dukes", "Bristol", "Berkshire", "Barnstable", "Scott", "Story", "Essex", "Lincoln", "Knox", "Echols", "Effingham", "Elbert", "Emanuel", "Evans", "Tunica", "Martinsville", "Dearborn", "Clay", "Clinton", "Crawford", "Daviess", "Ohio", "Van Buren", "Woodruff", "Newton", "White", "Noble", "Yell", "Genesee", "Eaton", "Olmsted", "Henderson", "Haywood", "Harnett", "Halifax", "Guilford", "Osceola", "Ottawa", "Rapides", "Jasper", "Iroquois", "Jackson", "Henderson", "Henry", "Bristol", "Grundy", "Dutchess", "Franklin", "Gasconade", "Greene", "Jackson", "Delaware", "Hocking", "Highland", "Huron", "Holmes", "Cortland", "Washington", "Iron", "Howell", "Union", "Vermilion", "Columbia", "Wabash", "Warren", "Jefferson", "Pickett", "Overton", "Obion", "Polk", "Bremer", "Roanoke City", "Bedford", "Anderson", "Bledsoe", "Benton", "Blount", "Westmoreland", "Venango", "Warren", "Washington", "Wayne", "Hardeman", "Sumter", "Stafford", "Talbot", "Taliaferro", "Tattnall", "Taylor", "Shenandoah", "Smyth", "Southampton", "Spotsylvania", "Butler", "Bradford", "Bucks", "Berks", "Blair", "Baldwin", "Wythe", "Wise", "Westmoreland", "Washington", "Appling", "Atkinson", "Bacon", "Baker", "York", "Lee", "Linn", "Louisa", "Lucas", "Nantucket", "Holmes", "Greene", "Alexandria", "Trigg", "Trimble", "Union", "Warren", "Washington", "Butler", "Bristol", "Kent", "Providence", "Gates", "Robertson", "Livingston", "Lewis", "Lincoln", "Leslie", "Letcher", "Union", "Vanderburgh", "Gratiot", "Vermillion", "Gladwin", "Vigo", "Wabash", "Hillsdale", "Buckingham", "Schenectady", "Saratoga", "Schoharie", "Madison", "Humphreys", "Ogemaw", "Oakland", "Oceana", "Muskegon", "Newaygo", "Hardin", "Hancock", "Hamilton", "Grundy", "Greene", "Galax", "Ozaukee", "Botetourt", "Woodford", "Winnebago", "Williamson", "Somerset", "Queen Anne's", "White", "St. Mary's", "Wayne", "Montgomery", "Will", "Prince George's", "Whiteside", "Meigs", "Monroe", "Montgomery", "Morgan", "Burlington", "Madison", "Camden", "Morehouse", "Atlantic", "Lincoln", "Bergen", "Cape May", "Natchitoches", "Williamsburg", "Portsmouth", "Hardin", "Harrison", "Hamilton", "Hancock", "Cannon", "Carroll", "Henry", "Campbell", "Berrien", "Kanawha", "Jackson", "York", "Jefferson", "Wyoming", "Hardy", "Harrison", "Terrell", "Telfair", "Tift", "Thomas", "Toombs", "Bedford", "Beaver", "Armstrong", "Allegheny", "Adams", "Berrien", "Marshall", "Barrow", "Banks", "Ben Hill", "Bartow", "Johnson", "Jefferson", "Keokuk", "Jones", "Marion", "Marshall", "Spartanburg", "Saluda", "Union", "Sumter", "Williamsburg", "Claiborne", "Clay", "Cheatham", "Chester", "Cocke", "Henry", "Hanover", "Henrico", "Greensville", "Halifax", "Prince William", "Rappahannock", "Pulaski", "Richmond", "Montgomery", "Miller", "Monroe", "Mitchell", "Clayton", "Clay", "Cobb", "Clinch", "Coffee", "Van Buren", "Forsyth", "Floyd", "Fayette", "Fannin", "Colonial Heights", "Franklin", "Schuyler", "Elkhart", "Dubois", "Delaware", "DeKalb", "Decatur", "Allen", "Morgan", "Miami", "Kalamazoo", "Martin", "Jackson", "Montgomery", "Isabella", "Monroe", "Hickman", "Hopkins", "Henderson", "Sevier", "Henry", "Shelby", "Jackson", "Seneca", "Hyde", "Scott", "Iredell", "Hertford", "Hoke", "Carter", "Marion", "Freeborn", "Fillmore", "Marlboro", "Kosciusko", "Smith", "Bradley", "Mecosta", "Mason", "Manistee", "Jefferson", "Jersey", "Jo Daviess", "Johnson", "Kane", "Grant", "Franklin", "Dunklin", "Douglas", "Dent", "Rockland", "Wilcox", "Winston", "Franklin", "Fayette", "Fairfield", "Erie", "Delaware", "Hickory", "Howard", "Washington", "Howard", "McNairy", "Fayette", "Lincoln", "Lewis", "McMinn", "Loudon", "Norfolk", "Richmond City", "York", "Worth", "Jackson", "Davidson", "Cumberland", "Crockett", "Monroe", "Decatur", "Muscogee", "Newton", "Morgan", "Scott", "Murray", "Russell", "Rockingham", "Rockbridge", "Oconee", "Roanoke", "Tazewell", "Warren", "Surry", "Crawford", "Sussex", "Cook", "Montgomery", "Newport News", "Erie", "Henry", "Douglas", "Webster", "Wayne", "Wolfe", "Whitley", "Tensas", "Woodford", "Jasper", "Clark", "Carroll", "Chicot", "Bradley", "Calhoun", "Chickasaw", "Cerro Gordo", "Cedar", "Lee", "Lawrence", "Laurel", "Larue", "Knox", "Searcy", "Warrick", "Branch", "Warren", "Calhoun", "Wayne", "Cass", "Washington", "Randolph", "St. Francis", "Wells", "Saline", "Drew", "Lake", "Van Buren", "Sanilac", "Shiawassee", "Tuscola", "Gallatin", "Evangeline", "Ford", "Fayette", "Fulton", "Franklin", "East Feliciana", "Somerset", "Passaic", "Mower", "West Feliciana", "Winn", "West Carroll", "Kent", "Howard", "Harford", "Garrett", "Gloucester", "Essex", "Cumberland", "Marshall", "Clarendon", "Marengo", "Hunterdon", "Pickaway", "Paulding", "Cherokee", "Perry", "Noble", "Ottawa", "Lamar", "Lauderdale", "Jackson", "Chester", "Jefferson", "Radford", "Lawrence", "Yazoo", "Yalobusha", "Auglaize", "Belmont", "Brown", "Butler", "Carroll", "Hamblen", "Hamilton", "Hancock", "Hancock", "Hampshire", "Greenbrier", "Grant", "Campbell", "Caroline", "Todd", "Shelby", "Simpson", "Spencer", "Taylor", "Dallas", "Orange", "Benton", "Black Hawk", "Craighead", "Cross", "Buchanan", "Crittenden", "Bulloch", "Burke", "Butts", "Calhoun", "Camden", "Wayne", "Wilkes", "Wilson", "Yadkin", "Yancey", "Johnson", "Jackson", "Owen", "Phillips", "Perry", "Virginia Beach", "Ouachita", "Newton", "Pike", "Tipton", "Steuben", "Allegan", "Sullivan", "Switzerland", "Tippecanoe", "Noxubee", "Lawrence", "Coffee", "Frederick", "Mercer", "Marion", "Maries", "Madison", "Macon", "Cumberland", "Baltimore", "Marion", "Pike", "Allegany", "Anne Arundel", "Perry", "Piatt", "Neshoba", "Ogle", "Calvert", "Peoria", "Vernon", "Walworth", "Hudson", "Bienville", "Cook", "Crawford", "Cumberland", "Union", "DeKalb", "De Witt", "East Carroll", "Sussex", "Salem", "Miami", "Colleton", "Medina", "Marion", "Mercer", "Meigs", "Escambia", "Elmore", "Fayette", "Etowah", "Franklin", "Fayette", "Dyer", "Dickson", "Warren", "DeKalb", "Kenosha", "Marion", "Jefferson", "Fentress", "Defiance", "Darke", "Cuyahoga", "Crawford", "Coshocton", "Fayette", "Gilmer", "Schley", "Rockdale", "Richmond", "Randolph", "Rabun", "Crawford", "Clearfield", "Manassas", "Clarion", "Fredericksburg", "Columbia", "Clinton", "Manassas Park", "Monroe", "Mitchell", "Buena Vista", "Chautauqua", "Cayuga", "Chenango", "Chemung", "Schuylkill", "Potter", "Pike", "Philadelphia", "Juneau", "Snyder", "Tipton", "Scott", "Russell", "Rowan", "Rockcastle", "Robertson", "Tishomingo", "Poquoson", "Boone", "Baxter", "Ashley", "Arkansas", "Laurens", "Appanoose", "Wapello", "Allamakee", "Brooks", "Marshall", "Brantley", "Bleckley", "Bibb", "Bryan", "Washington", "Warren", "Wake", "Vance", "LaPorte", "Magoffin", "Lawrence", "Madison", "Watauga", "Knott", "Madison", "Sumner", "Jessamine", "Jefferson", "Kenton", "Johnson", "Union", "Clinton", "Starke", "Clare", "Spencer", "Shelby", "Scott", "Stone", "St. Joseph", "Sharp", "Sullivan", "Bossier", "Sussex", "New Castle", "Kent", "St. Joseph", "Roscommon", "St. Clair", "Saginaw", "Montgomery", "Moniteau", "Monroe", "Miller", "Mississippi", "Washington", "Wayne", "Wright", "Lee", "Lincoln", "Fulton", "Washington", "Waukesha", "Waushara", "Winnebago", "Caroline", "Charles", "Cecil", "Middlesex", "Mercer", "Morris", "Monmouth", "Lee", "Ocean", "Limestone", "Effingham", "Richland", "Putnam", "Perry", "Preble", "Portage", "Pike", "Henry", "Hale", "Greene", "Geneva", "Houston", "Wayne", "Rensselaer", "Washington", "Iowa", "Webster", "Green", "Green Lake", "Grant", "Allen", "Adams", "Ashtabula", "Ashland", "Hawkins", "Athens", "Henderson", "Haywood", "Fayette", "Calhoun", "Cabell", "Doddridge", "Clay", "Stewart", "Centre", "Cambria", "Cameron", "Screven", "Seminole", "Chester", "Stephens", "Bronx", "Broome", "Albany", "Allegany", "Knox", "Cattaraugus", "Marshall", "Somerset", "Sullivan", "Susquehanna", "Tioga", "Carroll", "Union", "Charlotte", "Charles City", "Grundy", "Lynchburg", "Westchester", "Wayne", "Washington", "Warren", "Ulster", "Meade", "Mason", "Mercer", "Union", "Tyrrell", "Transylvania", "Swain", "Surry", "Prentiss", "Genesee", "Boyd", "Bourbon", "Boone", "Bell", "Bath", "Anson", "Alleghany", "Alexander", "Alamance", "Ashe", "Pike", "Adams", "Pontotoc", "Warren", "Sullivan", "Taney", "Texas", "Schuyler", "Perry", "St. Clair", "Rock Island", "Sangamon", "Saline", "Racine", "Richland", "Rock", "Addison", "Laclede", "Champaign", "Knox", "Cass", "Carroll", "Calhoun", "Bureau", "Bamberg", "Aiken", "Abbeville", "Anderson", "Allendale", "Covington", "Marquette", "Manitowoc", "Coffee", "Colbert", "Conecuh", "Milwaukee", "Coosa", "Smith", "Scott", "Rankin", "Simpson", "Sharkey", "Itawamba", "Issaquena", "Luzerne", "Holmes", "Lehigh", "Lebanon", "Lawrence", "Lancaster", "Van Wert", "Vinton", "Warren", "Washington", "Wayne", "Northampton", "Northumberland", "Montgomery", "Montour", "Perry", "Quitman", "Nassau", "Montgomery", "Monroe", "Madison", "Livingston", "Meriwether", "Marion", "Madison", "Macon", "Amherst", "McIntosh", "Monroe", "Monongalia", "Nicholas", "Morgan", "Ohio", "Laurens", "Lee", "Desha", "Lamar", "Lanier", "Faulkner", "Fulton", "Liberty", "Clinton", "Clayton", "Yates", "Wyoming", "Polk", "Martin", "Monroe", "Perquimans", "Pender", "Pitt", "Person", "Winneshiek", "Worth", "Salem", "Bullitt", "Bracken", "Boyle", "Breckinridge", "Breathitt", "Hancock", "Bedford City", "Greene", "Hamilton", "Gibson", "Grant", "Caswell", "Carteret", "Chatham", "Catawba", "Cherokee", "Wabasha", "Marshall", "Hopewell", "Berkeley", "Audrain", "Beaufort", "Adair", "Weakley", "Wayne", "Williamson", "White", "Wilson", "Stewart", "Putnam", "Brown", "Ralls", "Randolph", "Reynolds", "Adams", "Alexander", "Fulton", "Bond", "Boone", "Waynesboro", "Cleburne", "Choctaw", "Chilton", "Clay", "Clarke", "Stark", "Stephenson", "Scott", "Shelby", "Tazewell", "Huntington", "Jefferson", "Lackawanna", "Jasper", "Lexington", "Jones", "Jefferson Davis", "Covington", "Huntingdon", "Kemper", "Indiana", "Jefferson", "Juniata", "Wood", "Williams", "Barnwell", "Wyandot", "Charleston", "Mifflin", "Mercer", "McKean", "Lycoming", "Monroe", "Lewis", "Hamilton", "La Salle", "Herkimer", "Jefferson", "Kings", "Giles", "McDuffie", "Gloucester", "Goochland", "Grayson", "Greene", "Lincoln", "Long", "Lowndes", "Lumpkin", "Mingo", "Mineral", "Mercer", "Mason", "Marshall", "Jasper", "Johnson", "Jenkins", "Jefferson", "Lincoln", "Jeff Davis", "Lee", "Lawrence", "Lafayette", "Johnson", "Jones", "Iowa", "Davis", "Delaware", "Des Moines", "Jackson", "Louisa", "Lee", "Loudoun", "King William", "Lancaster", "McLean", "Logan", "Lyon", "McCracken", "McCreary", "Warren", "Wayne", "Calloway", "Campbell", "Butler", "Caldwell", "Carlisle", "Monroe", "Montgomery", "Mississippi", "Nevada", "Robeson", "Rockingham", "Randolph", "Richmond", "Franklin", "Fountain", "Rowan", "Fayette", "Winona", "Forest", "Franklin", "Fulton", "Greene", "Treutlen", "Towns", "Turner", "Troup", "Twiggs", "Orange", "Orleans", "Oswego", "Otsego", "Putnam", "York", "Boone", "Braxton", "Barbour", "Berkeley", "Buchanan", "Brunswick", "Staunton", "Brooke", "Bland", "Cleveland", "Columbia", "Clay", "Cleburne", "Suffolk", "Conway", "Dubuque", "Marion", "Worcester", "Floyd", "Franklin", "Tompkins", "Sullivan", "Tioga", "Steuben", "Suffolk", "Monroe", "Montgomery", "Stokes", "Muhlenberg", "Scotland", "Stanly", "Rutherford", "Sampson", "Poinsett", "Pope", "Prairie", "Pulaski", "Suffolk", "Newton", "Arenac", "Barry", "Bay", "Whitley", "White", "Middlesex", "Amite", "Barren", "Anderson", "Morgan", "Ballard", "Adair", "Allen", "Marion", "Oconee", "Nelson", "Roane", "Rhea", "Bertie", "Bladen", "Avery", "Beaufort", "Putnam", "Brunswick", "Grundy", "Washtenaw", "Wayne", "Wexford", "Rutherford", "Lincoln", "Lewis", "Livingston", "Linn", "Stone", "Stoddard", "Shelby", "Shannon", "Scott", "Richland", "Randolph", "Putnam", "Pulaski", "Pope", "Sheboygan", "Sauk", "Clark", "Christian", "Clinton", "Clay", "Warren", "Coles", "Fairfield", "Edgefield", "Dorchester", "Dillon", "Darlington", "DeKalb", "Dale", "Dallas", "Crenshaw", "Cullman", "Tippah", "Franklin", "Gibson", "Giles", "Grainger", "La Crosse", "Lafayette", "Columbiana", "Washington", "Union", "Champaign", "Clark", "Clermont", "Clinton", "Madison", "Pointe Coupee", "Dauphin", "Cumberland", "Greene", "Elk", "Grenada", "Delaware", "Erie", "Hinds", "Hampton", "Morgan", "Morrow", "Monroe", "Montgomery", "Muskingum", "Wyoming", "Ware", "Wirt", "Walker", "Wood", "Walton", "Webster", "Union", "Wetzel", "Upson", "Niagara", "New York", "Onondaga", "Oneida", "Ontario", "Pendleton", "Pleasants", "Pocahontas", "Preston", "Sequatchie", "Putnam", "Appomattox", "Bath", "Augusta", "Garland", "Grant", "Greene", "Hot Spring", "Camden", "Cabarrus", "Caldwell", "Buncombe", "Burke", "Concordia", "Craig", "Caldwell", "Franklin", "Catahoula", "Hampden", "Claiborne", "Hampshire", "Boone", "Chesterfield", "Bollinger", "Benton", "Jennings", "Tallapoosa", "Pike", "Phelps", "Polk", "Pulaski", "Chambers", "Calhoun", "Butler", "Bullock", "Cherokee", "Calumet", "St. Helena", "Jefferson", "Houston", "Hickman", "Jackson", "Humphreys", "Lawrence", "Lee", "Livingston", "Logan", "McDonough", "Mahoning", "Harrisonburg", "Logan", "Lorain", "Lucas", "Madison", "Leake", "Lauderdale", "Lawrence", "Lafayette", "Lamar", "Lee", "Lexington", "McCormick", "Shelby", "Seneca", "Scioto", "Sandusky", "Ross", "Danville", "Emporia", "Floyd", "Fauquier", "Franklin", "Fluvanna", "Frederick", "Marion", "Greene", "Lewis", "Lincoln", "Logan", "McDowell", "Houston", "Jefferson", "Henry", "Jackson", "Irwin", "Jasper", "Independence", "Izard", "Jackson", "Rutland", "Tate", "Washington", "Crisp", "Dade", "Dawson", "Decatur", "Vernon", "DeKalb", "Windham", "Windsor", "Middlesex", "Mecklenburg", "Mathews", "Madison", "Lunenburg", "Winchester", "Richland", "Fairfax", "Webster", "New London", "Tolland", "Windham", "Union", "Lowndes", "Carter", "Cape Girardeau", "Menard", "Carroll", "Massac", "Mason", "Macon", "Marshall", "Marion", "Carroll", "Sunflower", "Carter", "Casey", "Christian", "Clark", "Lonoke", "Marion", "Mitchell", "Montgomery", "Moore", "Nash", "New Hanover", "Jackson", "Jefferson", "Jay", "Davie", "Cumberland", "Currituck", "Dare", "Davidson", "Perry", "Pendleton", "Powell", "Pike", "Pulaski", "Plymouth", "Newport", "Camden", "Butler", "Callaway", "Washington", "Stone", "Pettis", "Perry", "Pemiscot", "Ozark", "Osage", "Autauga", "Barbour", "Bibb", "Blount", "Lake", "Johnson", "Knox", "Dodge", "Richland", "Dane", "Red River", "Crawford", "Columbia", "Sabine", "Tallahatchie", "McLean", "McHenry", "Macoupin", "Macon", "Madison", "Washington", "Falls Church", "Licking", "Knox", "Jefferson", "Lawrence", "Lake", "Benton", "Adams", "Alcorn", "Talbot", "Attala", "Union", "Newberry", "Pickens", "Orangeburg", "Stark", "Summit", "Trumbull", "Tuscarawas", "Carroll", "Belknap", "Cheshire", "Essex", "Grafton", "Dinwiddie", "Norton", "Dickenson", "Webster", "Heard", "Harris", "Hart", "Hancock", "Haralson", "Tucker", "Taylor", "Upshur", "Tyler", "Wayne", "Dooly", "Dodge", "Douglas", "Dougherty", "Early", "Montgomery", "New Kent", "Nelson", "Leflore", "Lowndes", "New Haven", "Hartford", "Fairfield", "Middlesex", "Litchfield", "Clinton", "Clay", "Cumberland", "Crittenden", "Daviess", "Henry", "Howard", "Harrison", "Hendricks", "Dorchester", "Floyd", "Onslow", "Northampton", "Pamlico", "Orange", "Pasquotank", "Craven", "Clay", "Chowan", "Steele", "Columbus", "Cleveland", "Carroll", "Owsley", "Oldham", "Owen", "Nicholas", "Ohio", "Lapeer", "Lake", "Kent", "Worcester", "Waseca", "Arlington", "Dodge", "Edgar", "Oregon", "Edwards", "Morgan", "New Madrid", "DuPage", "Fond du Lac", "Avoyelles", "Pope", "Ramsey", "Red Lake", "Richland", "Isanti", "Grant", "Hennepin", "Hubbard", "Montmorency", "Campbell", "Codington", "Gilliam", "Aroostook", "Hood River", "Lewis and Clark", "Jefferson", "Judith Basin", "Lake", "Somerset", "Piscataquis", "McHenry", "Hettinger", "Logan", "LaMoure", "Clearwater", "Hamlin", "Grant", "Luce", "Mackinac", "Wadena", "Clearwater", "Cass", "Chippewa", "Franklin", "Carlton", "Grand Isle", "Chouteau", "Big Stone", "Otter Tail", "McLean", "Mercer", "McIntosh", "McKenzie", "Morton", "Edmunds", "Dewey", "Faulk", "Silver Bow", "Sheridan", "Stillwater", "Houghton", "Roosevelt", "Golden Valley", "Foster", "Grant", "Grand Forks", "Griggs", "Harding", "Dickinson", "Delta", "Emmet", "Norman", "Ontonagon", "Otsego", "Lake of the Woods", "Lake", "Lac qui Parle", "Koochiching", "Menominee", "Lewis", "Pierce", "Polk", "Ferry", "Penobscot", "Clark", "Bottineau", "Missoula", "Billings", "Benson", "Barnes", "Adams", "Butte", "Brown", "Traverse", "Todd", "Gogebic", "Rosebud", "Polk", "Chisago", "Pennington", "Pine", "Clay", "Oliver", "Ravalli", "Pembina", "Mountrail", "Sheridan", "Roberts", "Itasca", "Kanabec", "Kandiyohi", "Kittson", "Latah", "Kootenai", "Mason", "Okanogan", "Lewis", "Lincoln", "Pacific", "Charlevoix", "Yellowstone", "Clackamas", "Clatsop", "Columbia", "Hill", "St. Louis", "Roseau", "Dickey", "Divide", "Scott", "Dunn", "Eddy", "Emmons", "Kidder", "Sanders", "Iron", "Douglas", "Marquette", "Menominee", "Glacier", "Garfield", "Shoshone", "Oconto", "Oneida", "Cavalier", "Bowman", "Burke", "Burleigh", "Cass", "Yellow Medicine", "Schoolcraft", "Mille Lacs", "Morrison", "Meeker", "Skagit", "San Juan", "Pierce", "Pend Oreille", "Skamania", "Clark", "Sully", "Spink", "Granite", "Antrim", "Alpena", "Alger", "Vilas", "Washburn", "Boundary", "Iron", "Whitman", "Yakima", "Whatcom", "Wright", "Day", "Potter", "Perkins", "Chippewa", "Presque Isle", "Beltrami", "Becker", "Anoka", "Aitkin", "Marshall", "Forest", "Spokane", "Snohomish", "Thurston", "Stevens", "Wahkiakum", "Daniels", "Cascade", "Carter", "Custer", "Orleans", "Sweet Grass", "Teton", "St. Croix", "Rusk", "Marinette", "Marathon", "Benewah", "Columbia", "Douglas", "Cowlitz", "Washington", "Wasco", "Wallowa", "Union", "Corson", "Deuel", "Polk", "Multnomah", "McCone", "Blaine", "Broadwater", "Big Horn", "Carbon", "Slope", "Sioux", "Sheridan", "Sargent", "Stark", "Richland", "Renville", "Ransom", "Ramsey", "Nez Perce", "Price", "Ashland", "Barron", "Bayfield", "Grays Harbor", "Grant", "Garfield", "Franklin", "Island", "Tillamook", "Sherman", "Umatilla", "Cheboygan", "Fergus", "Phillips", "Pondera", "Powder River", "Powell", "Prairie", "Steele", "Stutsman", "Towner", "Traill", "Walsh", "Deer Lodge", "Valley", "Wheatland", "Treasure", "Idaho", "Flathead", "Baraga", "Taylor", "Shawano", "Sawyer", "Fallon", "Bonner", "Lincoln", "Langlade", "Asotin", "Benton", "Chelan", "Yamhill", "Swift", "Dawson", "Carver", "Burnett", "Chippewa", "Jefferson", "King", "Kitsap", "Kittitas", "Klickitat", "McLeod", "Morrow", "Marion", "Clallam", "Adams", "Mineral", "Park", "Musselshell", "Petroleum", "Marshall", "Pierce", "Golden Valley", "Nelson", "McPherson", "Crow Wing", "Benton", "Walla Walla", "Door", "Walworth", "Mahnomen", "Wibaux", "Toole", "Meagher", "Madison", "Lincoln", "Liberty", "Rolette", "Stevens", "Sherburne", "Stearns", "Williams", "Keweenaw", "Wells", "Ward", "Wilkin", "Leelanau", "Washington", "Cook", "Douglas", "Dunn", "Eau Claire", "Florence", "Liberty", "Hardin", "Gillespie", "Orange", "Brazos", "Brewster", "Grimes", "Pecos", "Presidio", "San Jacinto", "Sutton", "Travis", "Crockett", "Burleson", "Terrell", "Williamson", "Bastrop", "Jefferson", "Jasper", "Kimble", "Blanco", "Lee", "Montgomery", "Charlton", "Okaloosa", "Newton", "Jefferson", "Hamilton", "Washington", "Livingston", "Suwannee", "Columbia", "Santa Rosa", "Madison", "Liberty", "Leon", "Acadia", "Iberville", "St. Tammany", "Tangipahoa", "West Baton Rouge", "Mobile", "Beauregard", "East Baton Rouge", "Calcasieu", "Escambia", "Duval", "Gadsden", "Bay", "Baker", "Jackson", "Walton", "Jefferson Davis", "Calhoun", "Hancock", "Harrison", "St. Martin", "St. Landry", "Baldwin", "Nassau", "Redwood", "Renville", "St. Clair", "Dade", "Grant", "Wright", "Madison", "Haakon", "Custer", "Hand", "Blue Earth", "Big Horn", "Crook", "Hancock", "Hyde", "Hughes", "Washington", "Nicollet", "Caddo", "Valley", "Washington", "Adams", "Le Sueur", "Shelby", "Brookings", "Lemhi", "Park", "Baker", "Benton", "Kingsbury", "Faribault", "Daviess", "Harrison", "Henry", "Gallatin", "Sabine", "Teton", "Beadle", "Clarke", "Ziebach", "Scott", "Fremont", "Boone", "Crawford", "Stanley", "De Soto", "Benton", "Lyon", "Lincoln", "Crook", "Johnson", "Hamilton", "Clark", "Lafayette", "Johnson", "Lawrence", "Wheeler", "Franklin", "Dallas", "Beaverhead", "Lawrence", "Barry", "Ray", "Decatur", "Webster", "Miller", "Polk", "Hempstead", "Lincoln", "Linn", "Howard", "Meade", "Cedar", "Madison", "Logan", "Little River", "Campbell", "Winnebago", "Caldwell", "Jefferson", "Sibley", "Waldo", "Washington", "Lamoille", "Kennebec", "Oscoda", "Pepin", "Portage", "Grand Traverse", "Hancock", "Kalkaska", "Rice", "Goodhue", "Outagamie", "Wood", "Oxford", "Alcona", "Trempealeau", "Jackson", "Clinton", "Crawford", "Waupaca", "Essex", "Chittenden", "Caledonia", "St. Lawrence", "Brown", "Benzie", "Essex", "Kewaunee", "Buffalo", "Clark", "Franklin", "Franklin", "Coos", "Dakota"]
        },
        schema: {
            STATE_FIPS: "STRING",
            LAT: "DOUBLE",
            LNG: "DOUBLE",
            FIPS: "STRING",
            NAME: "STRING"
        }
    };

    function BigPresidentMap(div, opts) {
        opts = Opts.copyNewParams(opts, Election2012.getBigMapOpts());
        if (E.ADVANCED_FEATURES && this.initAdvancedFeatures) {
            this.initAdvancedFeatures(opts)
        }
        opts.election_type = "president";
        this.initBigMap(div, opts);
        var proj = new AlbersUSASpecial;
        this.initStateData({
            shape_name: "states_albers_utf16be",
            shape_url: Election2012.detailedStateShapeUrl,
            shape_transform: proj,
            importer: Election2012.importPresidentData,
            raw_data: opts.state_data.races,
            geo_data: nytg.data.states_wgs84
        });
        this.initCountyData({
            shape_name: "counties_albers_utf16be",
            shape_url: Election2012.detailedCountyShapeUrl,
            shape_transform: proj,
            importer: Election2012.importPresidentCountyData,
            raw_data: opts.county_data,
            geo_data: nytg.data.counties_albers
        });
        this.displayMap()
    }
    Opts.inherit(BigPresidentMap, BigMap);
    Opts.extendNamespace("nytg", {
        big_president_map: BigPresidentMap,
        national_map: BigPresidentMap,
        trace: trace,
        Phantom: Phantom,
        El: El
    });
    VoteMap.prototype.initChangeDataByYear = function(geo, src, years) {
        var changeTable = src;
        for (var i = 0; i < years.length; i++) {
            var yr = years[i];
            var dems = changeTable.getFieldData("d" + yr);
            var reps = changeTable.getFieldData("r" + yr);
            var tots = changeTable.getFieldData("tv" + yr);
            var diffs = [];
            for (var y = 0, len = dems.length; y < len; y++) {
                var tot = tots[y];
                if (tot == 0) {
                    var diff = 0
                } else {
                    diff = (dems[y] / tot - reps[y] / tot) * 100
                }
                diffs.push(diff)
            }
            var fname = "margin" + yr;
            geo.insertFieldData(fname, "double", diffs)
        }
        var schema = changeTable.schema;
        Utils.forEach(schema, function(v, k) {
            var arr = changeTable.getFieldData(k);
            var type = changeTable.getFieldType(k);
            geo.insertFieldData(k, type, arr)
        })
    };
    var arrowheadScale = 1;
    var stemScale = 1;
    VoteMap.prototype.getChangeStyler = function(rawData, geoTable, opts) {
        var style = {
            scaling: .5,
            bubbleSize: 10,
            strokeAlpha: 1,
            strokeWeight: A.canvasPixelRatio == 2 ? 2 : 1,
            fillAlpha: 0,
            hoverStrokeWeight: 1,
            hoverStrokeAlpha: 1,
            hoverStrokeColor: 0
        };
        opts = opts || {};
        var _self = this;
        var styler = new DataStyler(geoTable);
        styler.setDefaultStyle(style);
        var toDem = 0;
        var toRep = 0;
        styler.setAttributeStyler("strokeColor", function(rec) {
            var marg = getMarginDiff(rec, _self.changeMapYear1, _self.changeMapYear0);
            if (marg > 0) {
                toDem++
            } else if (marg < 0) {
                toRep++
            }
            return marg > 0 ? E.DEM_WIN_COL : E.REP_WIN_COL
        });
        styler.on("post", function() {
            trace("$$$$ dem:", toDem, "rep:", toRep)
        });
        var k = 0;
        styler.on("pre", function() {
            toDem = 0;
            toRep = 0;
            var map = this._map;
            if (!map._opts.national_map) {
                var numShapes = geoTable.length;
                var w = map.getWidthInPixels();
                var h = map.getHeightInPixels();
                var avgShapeWidth = h * w / numShapes / w;
                stemScale = .4 * avgShapeWidth / 2 + 3
            }
            arrowheadScale = 1 + _self._map.getZoom() * .2;
            if (w < 200) {
                arrowheadScale = .1
            }
        }, this);
        this._map.on("resize", updateBubbleSizes, this, 3e3);

        function updateBubbleSizes() {
            styler.getAttributeStyler("bubbleSizes").invalidate();
            var w = _self._map.getWidthInPixels();
            k = w / 250
        }

        function getMarginDiff(rec, ynow, ypast) {
            var t1 = ynow == 2012 ? rec.get("total_votes") : rec.get("tv" + ynow);
            var t0 = rec.get("tv" + ypast);
            if (t1 == 0 || t0 == 0) {
                return 0
            }
            var m0 = rec.get("margin" + ypast);
            var mnow = rec.get("margin" + ynow);
            return mnow - m0
        }
        styler.setAttributeStyler("bubbleSizes", function(rec) {
            var marg = getMarginDiff(rec, _self.changeMapYear1, _self.changeMapYear0);
            var size = marg * k;
            if (size < 0) {
                size = -size
            }
            return size
        });
        updateBubbleSizes();
        return styler
    };
    VoteMap.prototype.getCanvasChangeLayer = function(raw, geo) {
        this.initChangeData(geo);
        if (!this._countyChangeLyr) {
            var proj = this._opts.crs.projection;
            var circleData = (new CircleData).importFromDataTable(this._countyData, "LAT", "LNG", proj);
            var lyr = this._countyChangeLyr = new ChangeLayer(circleData, {
                geography_type: "county",
                zIndex: 15
            });
            var styler = this.getChangeStyler(raw, geo);
            lyr.setStyler(styler);
            lyr.hide();
            this._map.addLayer(lyr)
        }
        return this._countyChangeLyr
    };
    VoteMap.prototype.getChangeLayer = function(raw, geo) {
        this.changeMapYear0 = 2008;
        this.changeMapYear1 = 2012;
        var lyr = this.getCanvasChangeLayer(raw, geo);
        return lyr
    };

    function ChangeLayer(pointData, opts) {
        this.__super__(pointData, opts)
    }
    Opts.inherit(ChangeLayer, CircleLayer);
    ChangeLayer.prototype.initCanvasCircleLayer = function() {
        this.startInteraction();
        this._hitHelper = this._opts.hitHelper;
        this.waitFor(this._symbols);
        this._renderer = new ChangeSymbolRenderer
    };

    function ChangeSymbolRenderer() {
        this._style = new HybridShapeStyle;
        this._ext = new TileExtent;
        var theta1 = Math.PI * .75;
        var theta2 = Math.PI * -.75;
        this.sin1 = Math.sin(theta1);
        this.sin2 = Math.sin(theta2);
        this.cos1 = Math.cos(theta1);
        this.cos2 = Math.cos(theta2)
    }
    ChangeSymbolRenderer.prototype.drawArrowhead = function(ctx, x0, y0, x1, y1, size) {
        var xd = x1 - x0;
        var yd = y1 - y0;
        var len = Math.sqrt(xd * xd + yd * yd);
        var maxLen = len * .8;
        if (maxLen < size) {
            size = maxLen
        }
        var xn = xd / len * size;
        var yn = yd / len * size;
        var ax1 = xn * this.cos1 - yn * this.sin1;
        var ay1 = xn * this.sin1 + yn * this.cos1;
        var ax2 = xn * this.cos2 - yn * this.sin2;
        var ay2 = xn * this.sin2 + yn * this.cos2;
        ax1 += x1;
        ay1 += y1;
        ax2 += x1;
        ay2 += y1;
        ctx.moveTo(ax1, ay1);
        ctx.lineTo(x1, y1);
        ctx.lineTo(ax2, ay2)
    };
    ChangeSymbolRenderer.prototype.drawTile = function drawTile(bubbles, canvas, bb, styleObj) {
        var style = this._style;
        style.updateStyle(styleObj);
        var ext = new TileExtent(canvas.width, canvas.height);
        ext.updateBounds(bb);
        var ctx = canvas.getContext("2d");
        var len = bubbles.length;
        var hasStroke = style.hasStroke();
        var hasFill = style.hasFill();
        for (var i = 0; i < len; i++) {
            var sym = bubbles[i];
            style.setId(sym.id);
            this.drawSymbol(ctx, ext, sym, style, hasStroke, hasFill)
        }
    };
    ChangeSymbolRenderer.prototype.drawSymbol = function(ctx, ext, sym, style, hasStroke, hasFill) {
        var size = sym.size * 2 * stemScale || 0;
        if (size > 0) {
            ctx.beginPath();
            style.beginDrawing(ctx);
            var x = sym.x * ext.mx + ext.bx;
            var y = sym.y * ext.my + ext.by;
            var r = size * .1;
            ctx.moveTo(x, y);
            var col = style.strokeColor;
            var stroke = style.strokeWeight;
            var isLeft = col == E.DEM_WIN_COL;
            var xShift = isLeft ? -r : r;
            var yShift = -4;
            var x1 = x + xShift;
            var y1 = y + yShift;
            var alen = 4 * arrowheadScale * (A.canvasPixelRatio == 2 ? 2 : 1);
            ctx.lineTo(x1, y1);
            this.drawArrowhead(ctx, x, y, x1, y1, alen);
            if (hasFill) {
                ctx.fill()
            }
            if (hasStroke) {
                ctx.stroke()
            }
        }
    };
    nytg = window.nytg || {};
    nytg.data = nytg.data || {};
    nytg.data.counties_supplement = {
        data: {
            seniors: [21, 7, 7, 7, 7, 3, 10, 0, 5, 11, 7, 5, 9, 6, 6, 6, 9, 7, 5, 6, 9, 9, 0, 10, 0, 8, 4, 10, 12, 18, 18, 18, 12, 19, 16, 22, 15, 12, 19, 15, 10, 20, 17, 11, 11, 11, 7, 12, 14, 39, 14, 14, 11, 16, 18, 13, 14, 13, 9, 9, 14, 12, 8, 8, 11, 8, 10, 18, 11, 24, 19, 12, 16, 12, 13, 16, 10, 10, 13, 12, 14, 21, 25, 23, 14, 12, 27, 15, 13, 9, 12, 21, 10, 12, 13, 17, 9, 11, 21, 11, 18, 13, 0, 0, 0, 24, 14, 27, 13, 21, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 21, 32, 12, 11, 25, 0, 0, 0, 0, 0, 0, 0, 0, 9, 15, 25, 18, 18, 30, 11, 20, 41, 18, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 12, 11, 15, 21, 13, 21, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 11, 16, 24, 0, 0, 0, 0, 0, 0, 20, 14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 14, 33, 31, 0, 0, 0, 13, 11, 0, 0, 13, 10, 0, 0, 0, 0, 0, 10, 10, 0, 0, 0, 0, 16, 14, 27, 25, 23, 0, 0, 0, 0, 22, 15, 11, 14, 12, 12, 15, 14, 20, 10, 19, 17, 12, 15, 14, 12, 23, 19, 10, 11, 14, 12, 15, 11, 17, 14, 18, 30, 9, 16, 9, 16, 21, 18, 10, 9, 17, 23, 19, 23, 16, 21, 16, 17, 9, 32, 22, 14, 22, 19, 23, 19, 24, 13, 14, 29, 24, 16, 18, 9, 19, 14, 9, 9, 19, 20, 11, 11, 16, 18, 13, 29, 13, 16, 14, 19, 13, 11, 17, 9, 11, 14, 11, 15, 9, 15, 12, 13, 22, 14, 24, 22, 11, 14, 13, 16, 14, 27, 21, 20, 24, 16, 18, 21, 20, 21, 18, 17, 23, 11, 9, 22, 23, 12, 18, 22, 24, 8, 13, 17, 21, 14, 22, 20, 18, 16, 18, 21, 21, 16, 18, 15, 26, 15, 19, 22, 14, 20, 19, 21, 19, 18, 22, 19, 19, 15, 16, 23, 14, 15, 21, 11, 14, 19, 22, 6, 14, 17, 18, 15, 17, 15, 21, 18, 13, 12, 23, 16, 12, 16, 12, 17, 14, 10, 20, 14, 24, 11, 19, 20, 16, 14, 12, 15, 17, 13, 8, 14, 21, 19, 23, 20, 13, 17, 5, 21, 23, 19, 16, 8, 10, 15, 19, 14, 21, 28, 22, 18, 15, 20, 11, 14, 21, 14, 21, 14, 12, 21, 16, 19, 20, 19, 16, 20, 22, 17, 20, 16, 19, 14, 20, 15, 25, 10, 14, 17, 8, 10, 18, 18, 19, 11, 10, 22, 20, 17, 23, 18, 19, 23, 11, 11, 10, 13, 15, 9, 17, 8, 14, 13, 12, 12, 14, 12, 12, 12, 20, 15, 14, 24, 18, 17, 25, 16, 14, 21, 12, 22, 29, 14, 10, 18, 17, 13, 17, 13, 10, 11, 15, 24, 20, 20, 18, 18, 15, 13, 17, 13, 15, 19, 9, 19, 15, 21, 13, 13, 19, 19, 11, 13, 19, 18, 18, 16, 13, 21, 15, 15, 18, 15, 15, 17, 22, 23, 23, 14, 15, 12, 17, 13, 12, 8, 24, 21, 7, 20, 10, 26, 23, 15, 21, 12, 20, 18, 15, 21, 22, 14, 21, 26, 16, 12, 12, 32, 14, 13, 19, 9, 20, 18, 17, 13, 20, 21, 15, 15, 15, 13, 14, 18, 16, 22, 11, 12, 11, 12, 12, 15, 7, 15, 23, 9, 20, 18, 14, 18, 16, 13, 18, 10, 21, 11, 27, 19, 27, 21, 32, 22, 23, 11, 19, 5, 10, 18, 14, 17, 16, 10, 8, 18, 11, 14, 22, 16, 11, 14, 17, 17, 17, 26, 14, 17, 10, 15, 17, 11, 0, 14, 22, 11, 32, 10, 16, 18, 15, 19, 13, 14, 18, 14, 14, 17, 7, 18, 13, 19, 18, 20, 24, 15, 20, 18, 17, 23, 17, 20, 23, 21, 22, 14, 25, 14, 18, 12, 13, 13, 13, 5, 10, 17, 16, 15, 15, 10, 8, 17, 13, 18, 13, 18, 22, 10, 22, 14, 14, 14, 13, 22, 12, 26, 21, 19, 22, 9, 17, 11, 20, 23, 18, 12, 13, 14, 24, 12, 18, 17, 19, 18, 13, 21, 27, 20, 20, 11, 11, 15, 18, 19, 19, 18, 26, 11, 17, 14, 8, 22, 18, 10, 17, 10, 8, 8, 10, 19, 10, 16, 15, 15, 11, 15, 16, 19, 10, 15, 16, 16, 22, 16, 16, 20, 12, 9, 11, 17, 11, 12, 13, 23, 16, 8, 17, 9, 17, 23, 19, 19, 26, 19, 17, 15, 24, 23, 7, 21, 13, 12, 15, 17, 11, 17, 11, 12, 13, 13, 12, 23, 21, 8, 25, 6, 16, 15, 20, 21, 15, 7, 15, 19, 17, 17, 9, 23, 9, 19, 16, 20, 15, 9, 19, 21, 22, 18, 23, 21, 16, 26, 21, 20, 12, 19, 9, 6, 20, 19, 12, 10, 14, 12, 12, 20, 19, 12, 6, 21, 14, 17, 25, 16, 15, 16, 20, 24, 13, 9, 14, 13, 10, 18, 10, 15, 14, 16, 17, 32, 10, 13, 17, 15, 12, 16, 16, 20, 13, 13, 13, 19, 18, 23, 14, 14, 15, 18, 13, 11, 13, 10, 11, 11, 11, 25, 11, 16, 14, 13, 12, 13, 20, 13, 15, 18, 13, 13, 10, 21, 19, 20, 12, 16, 21, 10, 22, 12, 28, 7, 9, 5, 19, 25, 16, 15, 11, 19, 8, 17, 16, 17, 22, 19, 11, 8, 20, 10, 11, 13, 10, 22, 14, 10, 8, 19, 11, 18, 21, 10, 21, 13, 21, 14, 14, 15, 25, 24, 17, 28, 12, 13, 9, 18, 11, 5, 6, 13, 7, 17, 12, 15, 17, 15, 11, 10, 14, 14, 12, 14, 15, 24, 14, 21, 16, 15, 21, 8, 11, 20, 18, 18, 22, 18, 28, 18, 26, 17, 21, 16, 12, 16, 9, 25, 23, 19, 22, 17, 13, 11, 21, 21, 18, 19, 18, 15, 10, 11, 8, 25, 22, 17, 12, 22, 21, 12, 9, 15, 13, 14, 11, 13, 15, 14, 10, 14, 13, 12, 9, 13, 17, 14, 13, 13, 14, 14, 17, 10, 18, 7, 13, 16, 15, 16, 14, 18, 11, 17, 15, 12, 16, 17, 16, 11, 16, 14, 15, 13, 14, 15, 15, 10, 11, 16, 17, 12, 12, 18, 13, 13, 13, 12, 13, 12, 14, 16, 17, 15, 16, 12, 14, 16, 13, 19, 15, 13, 15, 12, 19, 13, 15, 14, 17, 16, 11, 15, 16, 18, 15, 12, 12, 11, 15, 13, 12, 18, 11, 13, 19, 6, 15, 19, 17, 16, 16, 17, 17, 18, 22, 29, 17, 13, 11, 15, 13, 7, 10, 13, 15, 17, 14, 15, 19, 11, 10, 16, 14, 10, 15, 13, 16, 11, 16, 15, 15, 13, 15, 19, 13, 15, 13, 17, 10, 16, 16, 15, 18, 14, 11, 14, 16, 14, 12, 15, 15, 15, 17, 10, 17, 16, 12, 18, 13, 13, 23, 16, 18, 21, 18, 12, 17, 11, 17, 14, 17, 16, 14, 18, 13, 12, 14, 15, 16, 12, 13, 17, 10, 13, 13, 15, 13, 10, 16, 11, 14, 15, 15, 14, 21, 13, 11, 13, 11, 17, 15, 12, 12, 14, 11, 24, 11, 17, 20, 16, 10, 9, 12, 15, 14, 21, 16, 11, 14, 10, 18, 17, 12, 14, 13, 12, 9, 14, 4, 12, 8, 15, 19, 15, 10, 14, 13, 13, 18, 11, 16, 12, 14, 16, 13, 17, 9, 16, 23, 17, 17, 13, 18, 16, 12, 16, 25, 16, 10, 14, 11, 17, 13, 21, 16, 14, 15, 10, 13, 10, 16, 14, 18, 24, 13, 10, 14, 20, 19, 10, 9, 16, 14, 13, 9, 19, 13, 15, 14, 14, 14, 16, 23, 17, 16, 14, 12, 15, 13, 13, 12, 22, 21, 10, 16, 12, 16, 11, 13, 17, 19, 11, 20, 17, 19, 20, 13, 13, 19, 14, 14, 19, 15, 15, 13, 11, 13, 17, 17, 17, 18, 16, 17, 18, 16, 11, 18, 16, 16, 16, 17, 14, 12, 17, 15, 19, 15, 19, 17, 18, 17, 18, 14, 12, 7, 15, 18, 12, 14, 18, 18, 15, 9, 15, 17, 14, 14, 18, 12, 17, 14, 20, 17, 13, 10, 13, 15, 11, 17, 13, 15, 19, 11, 17, 17, 9, 18, 12, 14, 11, 16, 20, 17, 15, 13, 14, 12, 17, 14, 14, 14, 14, 14, 14, 14, 16, 22, 13, 18, 15, 14, 15, 13, 15, 10, 12, 21, 13, 16, 13, 15, 22, 19, 19, 11, 17, 25, 15, 16, 14, 13, 16, 14, 14, 21, 10, 19, 12, 9, 9, 17, 15, 15, 8, 13, 13, 11, 13, 15, 14, 11, 15, 21, 13, 13, 13, 13, 18, 13, 14, 15, 18, 15, 17, 16, 17, 17, 14, 11, 15, 16, 16, 14, 13, 13, 15, 13, 18, 18, 18, 17, 15, 14, 12, 9, 12, 14, 10, 8, 15, 19, 17, 15, 13, 13, 16, 16, 13, 14, 15, 22, 11, 14, 16, 19, 12, 12, 12, 19, 6, 18, 17, 18, 12, 19, 13, 13, 6, 19, 8, 13, 11, 20, 9, 14, 12, 21, 19, 17, 16, 12, 14, 14, 12, 14, 12, 12, 14, 12, 15, 14, 15, 9, 10, 20, 15, 14, 15, 14, 10, 14, 15, 16, 13, 13, 15, 7, 17, 14, 20, 19, 13, 13, 13, 14, 15, 18, 20, 16, 15, 21, 16, 9, 12, 16, 17, 19, 19, 13, 14, 17, 10, 15, 12, 17, 9, 29, 16, 17, 19, 17, 20, 17, 15, 16, 20, 9, 11, 11, 14, 16, 10, 25, 16, 14, 20, 12, 9, 15, 19, 10, 16, 15, 20, 10, 16, 17, 13, 15, 13, 14, 13, 17, 10, 16, 15, 15, 15, 16, 15, 14, 16, 12, 14, 15, 18, 17, 18, 17, 19, 18, 17, 14, 14, 13, 15, 14, 20, 13, 14, 15, 14, 16, 15, 13, 18, 12, 15, 15, 14, 13, 13, 17, 13, 15, 20, 13, 19, 16, 18, 18, 12, 12, 12, 18, 9, 14, 17, 21, 9, 12, 17, 12, 11, 12, 15, 16, 16, 12, 12, 14, 13, 12, 20, 18, 18, 16, 16, 14, 13, 9, 14, 12, 16, 15, 18, 14, 11, 16, 15, 14, 17, 19, 15, 19, 17, 15, 12, 14, 12, 14, 10, 16, 18, 15, 15, 14, 12, 15, 15, 10, 9, 11, 12, 11, 9, 13, 16, 14, 16, 20, 12, 14, 14, 15, 16, 10, 17, 19, 17, 16, 14, 12, 14, 14, 9, 13, 16, 15, 11, 20, 16, 17, 18, 19, 14, 14, 15, 19, 18, 11, 16, 16, 13, 15, 10, 14, 17, 13, 10, 18, 12, 17, 16, 13, 10, 16, 12, 11, 15, 15, 15, 13, 14, 15, 15, 15, 11, 18, 16, 15, 14, 14, 12, 13, 15, 11, 18, 13, 16, 15, 16, 15, 17, 16, 18, 14, 10, 10, 11, 17, 20, 16, 17, 7, 16, 11, 16, 16, 5, 19, 22, 17, 16, 15, 16, 16, 18, 19, 15, 12, 17, 15, 11, 9, 17, 12, 15, 12, 18, 14, 17, 27, 16, 16, 14, 20, 16, 19, 15, 19, 12, 15, 13, 8, 17, 19, 8, 13, 14, 12, 16, 15, 12, 13, 11, 12, 11, 13, 11, 14, 16, 12, 15, 19, 15, 14, 13, 22, 13, 23, 18, 12, 20, 12, 13, 14, 27, 14, 15, 18, 13, 18, 16, 15, 13, 21, 17, 12, 14, 16, 13, 14, 19, 13, 13, 9, 11, 12, 12, 13, 13, 9, 21, 12, 15, 16, 14, 17, 15, 12, 14, 17, 14, 15, 17, 14, 13, 13, 12, 13, 15, 15, 19, 16, 14, 14, 15, 15, 16, 10, 14, 14, 17, 18, 16, 16, 15, 19, 11, 19, 21, 14, 18, 12, 16, 10, 16, 14, 15, 16, 15, 16, 18, 24, 17, 18, 19, 15, 18, 16, 19, 14, 14, 14, 15, 16, 14, 10, 15, 16, 9, 15, 25, 17, 16, 15, 15, 17, 15, 9, 15, 14, 14, 21, 14, 14, 20, 14, 22, 12, 14, 17, 17, 18, 18, 14, 12, 16, 14, 18, 13, 18, 13, 13, 15, 10, 20, 15, 21, 20, 18, 16, 15, 16, 15, 13, 18, 20, 17, 15, 17, 17, 12, 17, 15, 12, 11, 14, 14, 15, 12, 18, 12, 15, 17, 19, 15, 16, 14, 10, 17, 14, 15, 18, 15, 18, 13, 14, 15, 17, 14, 14, 13, 15, 13, 13, 12, 16, 16, 19, 10, 17, 18, 18, 14, 8, 15, 13, 11, 10, 22, 6, 17, 19, 16, 13, 24, 11, 15, 21, 15, 10, 14, 16, 18, 17, 10, 13, 16, 15, 13, 12, 18, 16, 8, 15, 16, 15, 18, 17, 14, 22, 17, 14, 14, 10, 16, 19, 12, 15, 15, 9, 17, 12, 16, 18, 12, 16, 14, 19, 17, 18, 16, 15, 11, 17, 16, 17, 13, 18, 15, 19, 18, 18, 19, 15, 14, 13, 18, 15, 15, 14, 16, 19, 16, 15, 15, 18, 17, 12, 15, 14, 16, 12, 18, 18, 17, 16, 12, 15, 22, 14, 17, 11, 12, 17, 13, 14, 14, 20, 12, 17, 7, 10, 12, 13, 17, 18, 17, 17, 16, 14, 15, 14, 12, 12, 15, 18, 19, 14, 12, 17, 17, 17, 17, 18, 14, 16, 6, 11, 30, 16, 15, 20, 16, 12, 13, 23, 15, 13, 15, 18, 19, 18, 22, 12, 17, 11, 16, 13, 14, 14, 17, 14, 16, 13, 18, 16, 16, 15, 13, 28, 14, 12, 15, 11, 14, 12, 16, 11, 15, 14, 17, 16, 11, 16, 16, 19, 19, 18, 16, 16, 20, 23, 10, 17, 15, 12, 13, 20, 20, 10, 14, 15, 15, 13, 17, 13, 15, 16, 13, 15, 17, 14, 15, 13, 19, 12, 11, 15, 20, 14, 16, 14, 17, 13, 17, 15, 12, 13, 17, 15, 14, 11, 18, 11, 18, 15, 17, 15, 17, 17, 14, 20, 17, 10, 12, 15, 8, 10, 16, 18, 19, 23, 18, 19, 16, 15, 19, 16, 17, 17, 18, 14, 15, 18, 17, 15, 18, 13, 14, 14, 13, 10, 13, 14, 14, 13, 14, 16, 16, 14, 17, 17, 16, 15, 13, 16, 16, 14, 16, 14, 16, 11, 13, 12, 15, 14, 15, 11, 19, 14, 14, 14, 11, 12, 17, 13, 19, 15, 15, 15, 15, 15, 15, 17, 11, 17, 25, 19, 15, 16, 13, 14, 16, 15, 21, 16, 19, 15, 15, 14, 17, 21, 15, 21, 14, 14, 15, 13, 11, 15, 16, 16, 15, 13, 14, 15, 14, 14, 16, 12, 9, 13, 16, 25, 12, 17, 15, 14, 16, 8, 16, 14, 16, 12, 18, 11, 15, 15, 17, 13, 17, 17, 16, 15, 15, 15, 14, 18, 8, 14, 14, 13, 12, 13, 14, 15, 10, 11, 13, 12, 22, 12, 14, 15, 15, 13, 19, 16, 17, 12, 17, 15, 12, 17, 17, 18, 15, 15, 16, 10, 13, 8, 11, 15, 12, 15, 23, 16, 16, 12, 14, 14, 14, 13, 14, 9, 9, 15, 17, 24, 20, 24, 16, 17, 14, 10, 9, 17, 14, 12, 12, 14, 14, 16, 14, 15, 19, 18, 18, 14, 19, 17, 13, 10, 15, 16, 10, 14, 11, 23, 20, 15, 22, 13, 13, 14, 14, 15, 16, 9, 12, 14, 14, 13, 12, 13, 14, 16, 13, 16, 20, 17, 12, 14, 12, 15, 16, 14, 23, 15, 11, 14, 12, 14, 13, 17, 13, 14, 14, 10, 15, 18, 14, 17, 12, 10, 10, 17, 16, 14, 14, 11, 13, 14, 18, 15, 16, 17, 16, 16, 23, 17, 9, 15, 13, 14, 16, 14, 17, 16, 20, 16, 14, 17, 15, 13, 16, 16, 13, 12, 13, 17, 14, 13, 20, 16, 16, 18, 16, 13, 13, 8, 12, 16, 9, 11, 19, 12, 12, 14, 14, 13, 15, 15, 16, 12, 19, 18, 14, 16, 16, 13, 10, 17, 12, 7, 19, 21, 9, 13, 15, 23, 19, 14, 15, 15, 12, 20, 9, 14, 15, 15, 12, 22, 11, 23, 15, 9, 12, 18, 19, 18, 21, 16, 11, 15, 14, 21, 12, 17, 15, 12, 22, 11, 20, 26, 25, 15, 23, 18, 12, 13, 13, 27, 16, 16, 19, 21, 23, 31, 25, 21, 18, 19, 17, 21, 21, 18, 20, 19, 12, 15, 13, 17, 25, 20, 22, 16, 34, 14, 14, 25, 10, 21, 16, 25, 16, 15, 11, 21, 25, 26, 10, 26, 17, 19, 19, 16, 22, 26, 16, 20, 22, 24, 20, 11, 22, 10, 16, 18, 14, 11, 21, 11, 17, 13, 20, 29, 16, 17, 27, 17, 22, 11, 17, 11, 16, 16, 12, 18, 18, 20, 14, 15, 17, 18, 16, 16, 23, 10, 14, 18, 16, 17, 21, 24, 18, 14, 13, 16, 13, 13, 16, 14, 22, 26, 7, 18, 23, 27, 22, 21, 26, 19, 14, 19, 10, 21, 19, 16, 21, 24, 23, 25, 13, 10, 20, 21, 16, 16, 16, 16, 21, 11, 18, 13, 22, 17, 20, 22, 21, 19, 20, 25, 21, 16, 24, 9, 11, 13, 9, 23, 27, 22, 14, 25, 13, 17, 9, 26, 19, 20, 13, 10, 13, 16, 25, 22, 15, 25, 18, 17, 17, 21, 10, 20, 19, 14, 17, 20, 13, 15, 10, 17, 22, 16, 11, 20, 15, 10, 21, 13, 17, 10, 18, 17, 7, 28, 18, 16, 15, 20, 20, 18, 18, 20, 16, 18, 20, 16, 12, 25, 7, 17, 20, 19, 13, 20, 22, 21, 18, 20, 16, 29, 22, 17, 26, 19, 20, 19, 20, 26, 19, 20, 14, 16, 16, 18, 20, 18, 16, 18, 20, 19, 11, 15, 13, 20, 18, 8, 23, 14, 24, 11, 13, 12, 17, 15, 12, 13, 23, 10, 20, 16, 19, 20, 19, 24, 21, 27, 28, 18, 11, 15, 21, 24, 16, 21, 14, 17, 20, 20, 19, 10, 17, 8, 12, 16, 26, 30, 13, 17, 22, 10, 19, 14, 12, 12, 19, 11, 13, 26, 14, 7, 16, 13, 12, 17, 17, 11, 7, 14, 17, 24, 9, 11, 13, 16, 21, 17, 15, 10, 12, 13, 16, 17, 12, 15, 10, 18, 15, 12, 15, 9, 9, 13, 12, 12, 11, 11, 13, 13, 11, 12, 14, 11, 13, 14, 10, 12, 16, 14, 16, 14, 12, 11, 14, 16, 15, 20, 19, 23, 20, 22, 21, 15, 25, 16, 25, 11, 18, 18, 19, 25, 14, 9, 12, 13, 15, 19, 18, 14, 16, 10, 21, 17, 21, 12, 22, 22, 17, 21, 19, 9, 26, 9, 18, 17, 8, 18, 13, 16, 13, 14, 14, 12, 14, 25, 16, 18, 18, 18, 16, 10, 16, 30, 17, 10, 16, 16, 17, 14, 18, 16, 13, 19, 15, 21, 15, 15, 12, 22, 14, 17, 16, 6, 19, 17, 14, 16, 15, 19, 12, 15, 23, 17, 12, 14, 17, 16, 12, 16, 12, 17, 16, 30, 16, 16, 13, 20, 17, 18, 11, 15, 13, 11, 20, 18, 16, 18, 16, 13, 16, 19, 9],
            r2008: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 919, 596, 400, 3095, 1855, 52391, 2298, 4076, 7582, 35233, 12404, 5795, 1076, 1492, 673, 556, 30869, 62258, 1644, 103206, 11154, 6245, 0, 88164, 14866, 2316, 3723, 4888, 874, 7835, 10480, 39668, 9988, 4106, 6107, 29638, 571883, 26671, 13119, 8265, 10176, 4540, 907, 6935, 5462, 8786, 10904, 4841, 472, 4471, 246275, 19878, 5752, 4590, 94, 16752, 6693, 9431, 1456, 1238, 12971, 2736, 67515, 714, 6293, 62055, 27089, 113191, 7561, 186832, 40086, 226037, 28130, 19637, 3089, 0, 0, 0, 82802, 2679, 40176, 4763, 2533, 5656, 4980, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31239, 210066, 26221, 236355, 5780, 45021, 0, 0, 0, 0, 0, 0, 0, 0, 3940, 6457, 86379, 5632, 5194, 102897, 105070, 52512, 30866, 11754, 147608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5981, 20127, 8877, 69222, 113938, 13183, 110104, 0, 0, 0, 0, 0, 0, 0, 128878, 0, 0, 0, 0, 0, 28210, 3818, 23951, 0, 0, 0, 0, 0, 0, 157589, 8136, 48513, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67203, 237729, 45205, 43706, 0, 0, 0, 18069, 6894, 0, 0, 5432, 8912, 0, 0, 0, 0, 0, 16457, 9643, 0, 0, 0, 0, 18933, 360551, 44143, 89628, 80721, 0, 0, 0, 0, 1875, 46706, 27869, 2478, 4311, 25193, 5220, 15807, 3208, 252, 2021, 11752, 41948, 9750, 10810, 14828, 522, 3158, 4282, 1989, 2891, 7171, 31136, 3466, 49043, 2906, 2595, 7281, 31e4, 5079, 1269, 14843, 3746, 2212, 2683, 12518, 3389, 1329, 461, 1001, 11419, 1607, 1093, 1153, 5665, 303, 1619, 21237, 1999, 5435, 1725, 1034, 1079, 18155, 844, 844, 1423, 3286, 1949, 56526, 591, 1077, 44904, 12757, 4873, 890, 2300, 76880, 2440, 1227, 3032, 3017, 3735, 2866, 3653, 7456, 813, 2851, 3485, 277408, 541032, 52292, 54516, 5709, 7936, 11222, 4331, 4922, 1199, 1847, 2876, 930, 16791, 502, 1871, 6924, 39064, 6646, 15354, 30919, 1233, 334, 4848, 2294, 4351, 4894, 8557, 1785, 783, 106291, 4492, 1913, 1060, 1995, 3909, 2348, 1293, 19710, 9382, 9309, 3488, 13490, 2705, 2362, 995, 2372, 6081, 2732, 2360, 3572, 2177, 2018, 2285, 1426, 3735, 2342, 9373, 1822, 640, 1833, 10561, 3746, 4903, 2956, 3730, 10234, 4368, 2320, 936, 358, 6001, 13347, 5064, 3870, 4329, 2263, 19032, 2860, 2537, 5372, 13230, 11605, 1964, 2377, 31667, 124687, 297, 7582, 36974, 7264, 2969, 3328, 4414, 61783, 1941, 5087, 814, 1232, 3086, 3813, 11871, 807, 163172, 15289, 4471, 8207, 6926, 7079, 1477, 2557, 1907, 2912, 7120, 1407, 156, 4006, 2741, 4922, 4223, 38816, 93328, 4647, 2538, 4310, 1859, 1719, 3372, 3392, 61055, 1959, 19356, 445, 2652, 620, 5406, 12500, 28068, 676, 628, 3002, 1857, 10277, 17067, 1627, 1495, 7710, 2858, 458, 5872, 7029, 17299, 9299, 1544, 45885, 940, 37311, 5430, 38078, 2869, 1946, 5165, 4897, 8540, 617, 690, 12052, 2248, 840, 2850, 1055, 16506, 145853, 12007, 29203, 1389, 3385, 5205, 29127, 4091, 1902, 1356, 6698, 1017, 21906, 6485, 24549, 5762, 7157, 1710, 1401, 2781, 9006, 732, 2376, 5460, 4301, 3292, 2138, 546, 55187, 668, 463, 2993, 884, 16112, 55127, 26199, 56035, 2677, 1418, 1158, 976, 2780, 4240, 7745, 11193, 2589, 12556, 10470, 2775, 6382, 569, 12806, 2367, 4086, 65585, 3146, 13731, 20761, 6719, 1652, 3207, 3134, 2708, 2889, 1794, 6737, 2837, 2985, 2395, 19484, 1784, 1083, 327, 2342, 13646, 5988, 1754, 1724, 3024, 3316, 10360, 1252, 3011, 184897, 943, 24592, 1208, 839, 2932, 2042, 13097, 1712, 794, 614, 950, 1941, 1781, 603, 1749, 5039, 9599, 110521, 1398, 13651, 3131, 2805, 17929, 1342, 1548, 757, 15195, 712, 6053, 2528, 644, 7361, 20573, 27362, 5644, 1221, 44333, 66304, 19761, 1712, 746448, 49044, 182406, 6956, 520, 524, 348420, 1374, 730, 17753, 5585, 3765, 4246, 2109, 2296, 2603, 59398, 1978, 2822, 1247, 2942, 409, 1346, 2728, 152627, 669, 331, 422, 4393, 6272, 12199, 6961, 4135, 1078, 3043, 11503, 4967, 650, 2455, 73642, 6404, 2643, 3031, 3881, 509, 7842, 1793, 20127, 20187, 3858, 36155, 67, 1119, 4095, 257, 3509, 42752, 2656, 9264, 1345, 20857, 5795, 6394, 1683, 758, 1782, 4213, 10998, 12059, 1815, 14988, 4589, 2887, 2411, 8252, 2383, 217, 348, 266, 4731, 2909, 1634, 1046, 2060, 2503, 1657, 6425, 331, 972, 27603, 3125, 28637, 571, 18435, 6905, 4533, 8727, 12160, 4689, 77341, 5001, 3358, 1672, 9186, 3730, 1119, 64749, 707, 11695, 12154, 11083, 17103, 1388, 1711, 1834, 2567, 3942, 14095, 22186, 29026, 8551, 6245, 1753, 5217, 8376, 34317, 2879, 671, 6028, 1580, 2798, 8279, 2548, 1562, 1836, 1231, 12835, 865, 1277, 119555, 3811, 2134, 1116, 1725, 2375, 1498, 106849, 1823, 41476, 3791, 1108, 3552, 3311, 12668, 160318, 1283, 11359, 4128, 1502, 91607, 3101, 9307, 6413, 36428, 13241, 5334, 2263, 11623, 2667, 1473, 12952, 986, 3344, 5600, 856, 1618, 7483, 956425, 9935, 23583, 15973, 1529, 13658, 2618, 5763, 2956, 7425, 3345, 1262, 4355, 4033, 859, 3360, 2385, 14165, 1225, 2509, 12111, 2068, 22219, 310041, 3791, 1284, 190039, 8092, 25244, 970, 75057, 10768, 131628, 1580, 624, 3131, 344, 11131, 49588, 94647, 1204, 1936, 5279, 11550, 1508, 3118, 477, 3980, 23300, 749, 49242, 4523, 28384, 5298, 10721, 28704, 2981, 1056, 5162, 1540, 897, 2998, 5886, 1148, 3121, 10067, 158363, 2195, 8441, 122224, 912, 2638, 1159, 131015, 50314, 136436, 3733, 2027, 2373, 1643, 149935, 2105, 9655, 2323, 1490, 327, 10817, 240, 302, 1136, 6929, 134793, 3043, 1367, 4896, 1613, 2484, 44578, 6002, 1717, 3086, 334, 5336, 27743, 14394, 9466, 5499, 2199, 3511, 2023, 4638, 5772, 6309, 6035, 2940, 61192, 59421, 4518, 831, 15734, 898, 213583, 2433, 3439, 12230, 29334, 6664, 342, 151, 3595, 1815, 11884, 3816, 19569, 1092, 31731, 3283, 1918, 21713, 5910, 14008, 2349, 1989, 3074, 21441, 1653, 415, 976, 1672, 8146, 857, 4883, 218, 933, 11520, 1225, 24577, 6832, 257078, 14648, 10969, 4833, 7765, 4414, 2440, 5942, 24460, 795, 3461, 5730, 36685, 4203, 23735, 316, 24162, 38797, 2354, 25663, 579064, 8937, 4159, 77497, 3157, 4183, 1187, 894, 7735, 8492, 765, 577, 3054, 1189, 18911, 29695, 9108, 818, 62567, 8181, 88108, 956, 4725, 2930, 2437, 30257, 9708, 6188, 15228, 3586, 564, 1498, 1466, 19110, 2434, 1042, 63835, 22973, 19113, 5651, 5566, 176692, 2638, 635, 2224, 1142, 2103, 1847, 355, 1878, 1207, 4473, 3817, 4820, 1445, 318, 11803, 715, 800, 1646, 776, 7802, 12977, 39251, 2895, 2036, 16457, 2526, 3724, 3638, 113868, 2635, 63976, 1572, 3157, 1247, 1075, 9537, 1131, 13136, 59765, 17637, 5568, 7165, 23896, 1928, 4397, 10834, 32353, 8445, 73674, 13273, 9320, 7620, 4743, 17881, 155221, 35858, 13291, 22263, 4469, 118545, 9419, 21380, 22527, 21872, 221705, 3732, 12660, 3407, 102550, 2010, 4902, 24385, 6007, 4895, 20722, 45405, 9197, 20112, 29096, 48936, 11689, 8247, 5523, 44222, 15296, 2909, 1576, 7700, 28681, 6133, 20288, 5145, 23290, 8004, 4691, 42031, 36014, 1679, 5434, 4253, 4467, 4891, 4395, 3902, 4467, 5011, 8562, 3439, 16995, 116363, 15790, 29861, 3695, 22671, 8467, 2418, 19230, 2159, 9169, 2705, 2349, 81917, 25021, 97178, 1583, 34010, 41741, 3820, 44962, 5775, 4532, 158746, 11766, 2891, 2781, 2943, 17548, 6060, 3499, 8506, 2713, 4041, 6041, 5500, 5173, 10004, 4144, 39192, 28661, 18218, 2286, 2624, 1560, 8721, 4340, 89668, 52625, 5497, 3432, 59884, 3685, 902, 3562, 16622, 4060, 4858, 8346, 25326, 1155, 8182, 23631, 13401, 12775, 2817, 43622, 2734, 1294, 32341, 7077, 22225, 55592, 6804, 3221, 187663, 33857, 3909, 3202, 6605, 3785, 5510, 10056, 8849, 11447, 2824, 52507, 4272, 1139, 4962, 1249, 2339, 3471, 25382, 1782, 24662, 3833, 9881, 6150, 7591, 34169, 12957, 21849, 2917, 4466, 1731, 5229, 748, 8705, 7175, 69060, 6701, 27649, 10184, 1688, 86413, 64609, 3365, 16466, 16441, 3840, 5047, 4315, 14885, 10711, 4216, 5702, 1087, 588, 7601, 1408, 11258, 17367, 930, 13113, 1763, 20912, 8408, 5888, 130136, 4933, 20479, 1202, 5491, 18730, 10088, 4174, 8752, 509, 5966, 2553, 136841, 9850, 6547, 70279, 5572, 811, 46829, 15333, 24420, 3715, 13717, 4078, 5118, 7741, 11911, 1530, 1840, 3970, 77793, 8404, 2183, 17067, 2690, 153848, 11534, 10317, 5192, 5957, 7929, 7833, 6271, 86062, 9256, 6583, 4271, 46483, 7794, 14156, 5788, 8086, 8434, 3388, 20576, 4520, 37571, 9185, 39322, 2442, 90531, 14876, 55694, 36365, 18995, 137129, 9287, 8816, 981, 15230, 4868, 5110, 2462, 1017, 2311, 14886, 6267, 6919, 2393, 7098, 1713, 4276, 1206, 3301, 19467, 9673, 3808, 72451, 25900, 36202, 30930, 14910, 23579, 8961, 97718, 5973, 83330, 36611, 2964, 8695, 9687, 1541, 11263, 4579, 3006, 59628, 27355, 4763, 77683, 8219, 10524, 6364, 11907, 12884, 7720, 9678, 4473, 2090, 10982, 5003, 16054, 13337, 3254, 3637, 50804, 1786, 4497, 8873, 4267, 5741, 15394, 10217, 19675, 3166, 3696, 35571, 102294, 13718, 9685, 50752, 12702, 5225, 5717, 29221, 1301, 339, 4730, 2021, 12005, 7817, 4583, 28610, 57074, 15057, 150248, 80513, 32708, 7823, 8207, 8914, 3719, 16077, 5085, 1941, 3089, 828, 19833, 7062, 43626, 2314, 2330, 1863, 7033, 12059, 19181, 4189, 2239, 3120, 25993, 3305, 3700, 9260, 33780, 81010, 2547, 17903, 2890, 3213, 6273, 3574, 5367, 2061, 37512, 8322, 3010, 6391, 18121, 8238, 11221, 3428, 29758, 52855, 8071, 27203, 1462, 5133, 276956, 5860, 29145, 11862, 1330, 5161, 2353, 10687, 3053, 1317, 32172, 11471, 12191, 53886, 17039, 5037, 15087, 3987, 24705, 5390, 118608, 122597, 38833, 10883, 2797, 11484, 30175, 4717, 89626, 2152, 73819, 7258, 49902, 10680, 186118, 27288, 9054, 2353, 13984, 7749, 3872, 195530, 22420, 3322, 7455, 8239, 8535, 36130, 40952, 7148, 109268, 10600, 6983, 3376, 17824, 1890, 2486, 9431, 10642, 6658, 16124, 42895, 18542, 272347, 26349, 4901, 6683, 17625, 5120, 3417, 25976, 20732, 3324, 2712, 4405, 6746, 6755, 65042, 5191, 7449, 18581, 5004, 7175, 1676, 10702, 4587, 8945, 13758, 37344, 67381, 1729, 8600, 67621, 2227, 8857, 2092, 2521, 1899, 7933, 4201, 16506, 558, 170957, 1678, 8872, 1986, 59166, 23132, 38501, 7807, 6161, 6069, 4542, 39396, 9526, 20916, 9780, 6449, 6333, 18129, 8312, 51554, 3122, 35692, 9060, 11220, 21118, 1406, 11916, 9523, 24922, 4081, 145458, 7854, 7038, 1212, 4931, 45148, 3089, 6293, 15852, 5416, 6955, 4993, 3996, 20488, 4563, 28333, 9238, 7147, 5510, 9302, 5329, 5170, 3912, 83963, 6907, 6278, 7044, 4405, 4655, 61752, 1868, 8103, 218486, 7102, 41580, 17432, 54778, 2850, 2708, 5247, 1722, 7135, 4205, 9231, 2951, 12989, 15815, 24814, 18649, 54500, 5780, 5190, 102915, 17436, 3994, 8666, 3101, 29568, 20337, 5987, 6980, 8180, 6389, 22468, 5732, 12120, 30571, 11201, 8879, 1663, 3358, 2026, 3782, 3071, 28667, 178815, 4822, 5005, 3037, 4868, 1408, 10015, 1367, 7130, 7669, 4608, 6083, 2119, 2262, 1462, 2557, 9375, 4289, 1978, 3503, 17660, 4153, 8150, 2726, 16013, 9534, 2166, 28553, 14558, 11114, 6519, 3615, 3917, 8504, 30981, 3860, 67742, 15534, 10679, 16268, 13740, 1212, 9793, 4079, 5499, 6251, 9404, 5432, 70085, 72552, 7075, 3150, 4632, 4045, 4905, 55393, 71751, 8903, 60315, 74063, 22360, 25727, 6758, 5516, 39092, 14228, 5317, 13305, 7721, 3450, 10624, 5419, 24068, 14083, 6318, 149921, 2418, 9277, 5290, 3628, 16414, 15422, 12192, 105341, 7097, 15508, 81702, 1588, 7518, 5222, 7567, 3166, 17444, 5617, 3336, 11451, 4437, 5378, 7568, 1757, 4536, 6447, 24662, 18881, 4393, 4139, 7650, 14174, 4344, 5947, 862, 10502, 26952, 20288, 17375, 12409, 5045, 36487, 4407, 4415, 3097, 2743, 100319, 5427, 2588, 2727, 4452, 7674, 30061, 4343, 1940, 29822, 1525, 10566, 13250, 55170, 1169, 7705, 2853, 2897, 4586, 56186, 158714, 8513, 4457, 18405, 129682, 5086, 4991, 8209, 13144, 23095, 34579, 5367, 25485, 55360, 3776, 487736, 5070, 3156, 78768, 18266, 4348, 1254, 44184, 14816, 33417, 8525, 48189, 15454, 15100, 6015, 9375, 25777, 5883, 30595, 8048, 12173, 9859, 11677, 11152, 4085, 31609, 9536, 21096, 4789, 10407, 17290, 199880, 12316, 8675, 26081, 1445, 1252, 16921, 26842, 1370, 5487, 20750, 18662, 5975, 10737, 3413, 14477, 7504, 1634, 2e3, 2469, 1282, 28579, 15243, 10337, 19364, 33767, 5109, 12518, 117221, 5148, 9900, 17165, 11782, 5779, 3907, 4757, 533, 6249, 5229, 10575, 12852, 5406, 4185, 15334, 3086, 6663, 2965, 3507, 9512, 5080, 3657, 27037, 9112, 2670, 3063, 187001, 7606, 17918, 2434, 11018, 26403, 13344, 3070, 19694, 44949, 13711, 153957, 40714, 5948, 10677, 19726, 4473, 6793, 5001, 10333, 4445, 3534, 48510, 4535, 44808, 32713, 47939, 74608, 29827, 12886, 6727, 38536, 42225, 3428, 4467, 2533, 7797, 3034, 4706, 3784, 5784, 22694, 10781, 5147, 47729, 145152, 5770, 37946, 8015, 25732, 23855, 123695, 50223, 132331, 160433, 32230, 160677, 23598, 11323, 34034, 13072, 1596, 13562, 34822, 6162, 5585, 3200, 876, 9417, 29254, 6070, 32840, 6347, 3829, 4072, 6730, 5393, 9068, 29940, 6914, 18949, 15158, 14756, 9742, 7669, 3165, 7658, 1366, 18793, 2218, 1755, 783, 32992, 31995, 1323, 3423, 2315, 114421, 7689, 41683, 40077, 50586, 11013, 8639, 17770, 8278, 21686, 1841, 10633, 11326, 8187, 9859, 3372, 1288, 3945, 17638, 147824, 22239, 12533, 15429, 33300, 6691, 4102, 6781, 54123, 960, 9401, 2900, 18730, 7703, 15705, 11430, 4820, 33812, 6681, 2234, 4207, 3124, 11790, 34859, 7916, 8651, 3974, 9727, 8675, 1607, 14736, 7215, 1833, 4067, 47958, 25364, 46945, 6099, 45954, 3298, 27364, 5667, 10875, 33871, 1212, 2617, 3596, 1221, 7911, 2309, 42849, 6264, 48690, 947, 12444, 3654, 19234, 14919, 14739, 3470, 149445, 3248, 6265, 6584, 48140, 7641, 873, 7663, 364, 61127, 1714, 63382, 34314, 21851, 126568, 9168, 3021, 71691, 17019, 29342, 58551, 19018, 165552, 4574, 13058, 1334, 288776, 10711, 144262, 14434, 16030, 4982, 1772, 8226, 1712, 8470, 3282, 3397, 15775, 4804, 4428, 10694, 12052, 9925, 1999, 4873, 1787, 25362, 2702, 5828, 9324, 3651, 5269, 10998, 5990, 2824, 6175, 3678, 13618, 33927, 10030, 4273, 1612, 7088, 20102, 2066, 7701, 5281, 2671, 22008, 1497, 7691, 78401, 8449, 14734, 5208, 23131, 14668, 42993, 8643, 5935, 10406, 4149, 36205, 6167, 37821, 5891, 8855, 4076, 64858, 6103, 34595, 2956, 1591, 1544, 2987, 6457, 1782, 18711, 1692, 11709, 3947, 10403, 4815, 5216, 4223, 13960, 4984, 7466, 1513, 9909, 1455, 6396, 33247, 10291, 551, 39488, 4135, 914, 20157, 2871, 1020, 11745, 1935, 19727, 12057, 6484, 29648, 9879, 4769, 6270, 69822, 10929, 26565, 9224, 30280, 28293, 5969, 2141, 5602, 14619, 20220, 151872, 4462, 5400, 12089, 7643, 4540, 4980, 2731, 2119, 21269, 8326, 4587, 7616, 13246, 5853, 7759, 8794, 2426, 1936, 3061, 2513, 3867, 1454, 3357, 1685, 4922, 7782, 4188, 2029, 4113, 7721, 3673, 8182, 5825, 63336, 4966, 3647, 2386, 6925, 2220, 19043, 4078, 12144, 1565, 8991, 24046, 3696, 3866, 1699, 1754, 2365, 6976, 2062, 17433, 23899, 40998, 9424, 7018, 4158, 37451, 4917, 10975, 1366, 41906, 4642, 7889, 1826, 4292, 2096, 15391, 2087, 72042, 9708, 23571, 12026, 25145, 42389, 3632, 2629, 3685, 20841, 4541, 2877, 5330, 4961, 2031, 2451, 5861, 3032, 7962, 57194, 4691, 18651, 3842, 152101, 3051, 2501, 11927, 13900, 12536, 24203, 307021, 3537, 5947, 14488, 6447, 6005, 19329, 18769, 14038, 4903, 15568, 2223, 70212, 17165, 6579, 3807, 16431, 23795, 9124, 5731, 245766, 4245, 11133, 6885, 2396, 2537, 5512, 5258, 134313, 21164, 10139, 15658, 8042, 3376, 7532, 5681, 13460, 17101, 30753, 2563, 53946, 219582, 8044, 59892, 12924, 2594, 3993, 3140, 11147, 9172, 2166, 2075, 11563, 4329, 7538, 1378, 1593, 1343, 30801, 11562, 4409, 7872, 9357, 3926, 27500, 10978, 3912, 6334, 29929, 5874, 14544, 17957, 13886, 6798, 4319, 28896, 6937, 10539, 13516, 6902, 5297, 23701, 2984, 25585, 12215, 7619, 11141, 33634, 62559, 12409, 86965, 6702, 58238, 63739, 4361, 6676, 6234, 115273, 50351, 32949, 20476, 3440, 10067, 3066, 128679, 20549, 4621, 8311, 1496, 17110, 22896, 27253, 1386, 8013, 3342, 7291, 46348, 89949, 84972, 49256, 25171, 2035, 1772, 2011, 7325, 3610, 15162, 4903, 1349, 23120, 26825, 5023, 8578, 7209, 3140, 45924, 22526, 52494, 22102, 5668, 1695, 3696, 9545, 3486, 71350, 3750, 20618, 36849, 8325, 3972, 5759, 6261, 13116, 4268, 11706, 8956, 9552, 8067, 32348, 5485, 1391, 7298, 12722, 2522, 13092, 1608, 4784, 2185, 3818, 3403, 8258, 9191, 7429, 6055, 45319, 6048, 13848, 59068, 73706, 10606, 5148, 19582, 4369, 10278, 18497, 3074, 74960, 2437, 15924, 13823, 16994, 14192, 16759, 8361, 897, 4441, 19227, 15414, 6420, 20149, 11501, 17151, 4335, 3637, 7326, 2882, 33392, 10655, 47157, 17776, 2605, 3916, 8255, 3193, 3118, 11584, 7678, 9129, 4424, 4703, 8242, 5890, 11946, 65581, 5997, 9084, 3545, 7817, 3456, 3758, 2900, 4725, 57941, 200994, 11417, 48491, 29266, 21210, 9072, 1809, 1840, 24768, 3672, 2955, 4371, 3141, 1396, 3145, 8691, 2032, 3245, 5252, 4679, 13699, 9664, 17242, 4524, 5499, 6155, 27314, 23728, 50544, 9726, 7053, 4401, 13981, 52151, 7234, 9745, 45419, 6762, 3676, 2837, 12655, 19862, 112904, 15717, 14074, 11805, 11389, 25624, 5149, 11018, 5527, 3954, 2918, 5062, 17403, 5866, 6262, 20389, 1175, 4621, 113015, 23015, 5751, 73065, 2484, 2830, 12193, 7226, 2786, 36767, 64845, 9891, 24948, 57177, 5654, 1970, 46918, 16640, 17559, 15415, 59142, 2329, 6566, 10805, 10995, 5273, 15744, 9616, 32552, 12115, 86743, 113284, 40164, 20454, 13387, 16402, 15205, 2379, 17687, 6526, 744, 3324, 10431, 3133, 10648, 6537, 795, 8658, 2123, 3605, 5911, 2415, 8947, 1991, 5543, 26812, 12547, 2711, 19028, 6385, 3647, 4105, 13994, 144650, 138984, 167736, 32918, 46173, 3366, 5710, 2056, 2604, 23692, 10896, 20248, 10551, 39728, 8168, 19957, 30278, 3671, 3823, 20266, 7778, 24901, 3707, 3773, 10068, 12994, 26078, 54503, 1279, 18997, 2969, 1634, 5687, 22831, 2269, 148336, 15607, 5211, 29876, 5468, 4398, 2652, 2137, 5451, 4593, 183626, 28164, 10236, 3069, 88942, 983, 3184, 11324, 1646, 231054, 6558, 2841, 591, 6374, 648, 15898, 3265, 14966, 3538, 801, 6498, 11867, 4785, 1374, 893, 726, 1310, 2569, 1661, 1951, 1490, 3268, 4128, 2291, 8660, 2907, 7853, 6549, 1490, 1634, 1362, 18077, 2767, 2789, 916, 1740, 7869, 1213, 659, 739, 4818, 987, 2991, 8101, 1473, 642, 914, 873, 14520, 682, 575, 7049, 8763, 9314, 1204, 1823, 6752, 1278, 2636, 1912, 2962, 185, 1275, 9812, 11282, 1916, 37495, 84212, 2059, 20743, 375, 773, 2826, 788, 2821, 8067, 933, 6637, 3330, 1768, 7148, 15789, 3248, 6862, 11978, 682, 13002, 1722, 1406, 10177, 1781, 10309, 4479, 11319, 1016, 7988, 38387, 12600, 8798, 20278, 3803, 4555, 7306, 36483, 83595, 7192, 10413, 2787, 38742, 4438, 1525, 630, 36724, 1080, 548, 1230, 752, 3563, 2947, 11241, 12906, 4855, 1451, 598, 2953, 8755, 9630, 1128, 1107, 640, 25443, 32566, 2579, 2058, 7049, 9735, 6737, 24687, 2958, 141673, 3717, 2524, 1065, 581, 1660, 1013, 7506, 7125, 2188, 7055, 4303, 3078, 1464, 8104, 41946, 40205, 37779, 1372, 937, 1102, 8267, 3606, 9762, 8851, 91357, 4589, 2285, 1963, 108314, 126722, 48366, 13132, 1105, 694, 16857, 573, 3047, 4482, 1494, 1874, 22837, 3253, 9726, 30345, 2646, 1499, 9098, 19554, 89185, 5103, 2836, 7581, 535, 1088, 17714, 75171, 726, 1139, 1875, 1628, 3108, 297, 215, 555, 778, 7024, 3900, 799, 998, 2361, 10357, 3461, 2634, 10457, 3365, 12104, 17153, 968, 12037, 19426, 5757, 634, 15254, 6920, 4108, 1423, 1588, 802, 1683, 503, 404, 5499, 536, 1845, 2415, 1502, 2121, 657, 314, 5895, 25559, 1846, 4586, 9538, 4199, 1064, 11145, 6519, 5081, 5451, 45345, 17605, 21390, 2184, 2639, 28156, 4200, 13492, 6330, 259716, 53297, 9471, 4944, 10993, 2509, 59059, 18199, 3222, 1053, 4376, 1581, 227, 900, 1301, 343, 800, 915, 18567, 10338, 14182, 7112, 1668, 843, 379, 1317, 624, 2822, 5704, 594, 1045, 2710, 26140, 41194, 6291, 756, 1468, 15061, 1786, 6938, 64334, 1240, 7835, 9566, 20959, 1512, 15448, 16603, 9563, 21509, 37465, 1855, 5562, 2480, 489, 6151, 1189, 136981, 1026, 4547, 323, 88323, 13817, 42905, 9022, 1487, 3418, 4312, 119884, 2466, 68789, 3446, 3797, 3179, 8178, 43269, 12534, 18670, 55972, 4544, 2339, 55705, 19229, 7185, 83078, 31434, 6654, 98049, 10718, 95390, 50449, 91411, 210537, 6811, 56683, 8672, 35993, 19561, 9278, 4345, 13020, 38757, 14443, 21650, 61271, 27403, 4308, 3956, 2981, 2864, 2785, 3198, 4579, 939, 1694, 1247, 14782, 4045, 6371, 3016, 547, 5298, 37963, 7968, 52228, 2772, 3168, 1517, 7636, 6630, 6431, 2938, 10839, 5650, 15264, 1435, 4196, 2263, 2512, 6095, 22578, 3749, 4565, 4054, 2118, 312, 2791, 4700, 6293, 14688, 1017, 6883, 51124, 6315, 1491, 2967, 3334, 3913, 305, 9442, 12183, 11263, 498, 4411, 16954, 3008, 6787, 9758, 5593, 2020, 8337, 9913, 5473, 4273, 8791, 28071, 2957, 7515, 4194, 3972, 5350, 3247, 13011, 2730, 2654, 4402, 4492, 9423, 8077, 3515, 27482, 2320, 1616, 13810, 24716, 12686, 4527, 13723, 12775, 39677, 16581, 12863, 3404, 4808, 3552, 12579, 3561, 12232, 7913, 22237, 5472, 16956, 55854, 4687, 1284, 4711, 2923, 6383, 6676, 6627, 6558, 104364],
            college: [33, 21, 22, 33, 14, 10, 18, 0, 28, 16, 24, 14, 12, 13, 14, 15, 20, 20, 8, 27, 29, 24, 0, 22, 0, 35, 9, 10, 8, 10, 14, 11, 20, 18, 14, 18, 33, 15, 15, 8, 10, 22, 12, 24, 26, 8, 40, 26, 23, 24, 31, 27, 14, 17, 12, 13, 14, 19, 15, 16, 15, 14, 35, 28, 15, 17, 20, 26, 20, 15, 24, 11, 18, 18, 11, 12, 9, 25, 17, 16, 16, 18, 27, 24, 15, 9, 19, 35, 8, 26, 8, 14, 28, 14, 23, 11, 30, 18, 32, 32, 12, 12, 0, 0, 0, 20, 9, 27, 7, 11, 9, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 27, 15, 29, 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 9, 12, 31, 12, 6, 29, 34, 18, 19, 12, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 13, 17, 39, 21, 10, 20, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 14, 19, 22, 0, 0, 0, 0, 0, 0, 26, 9, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 30, 21, 17, 0, 0, 0, 12, 17, 0, 0, 12, 16, 0, 0, 0, 0, 0, 20, 10, 0, 0, 0, 0, 29, 26, 29, 17, 26, 0, 0, 0, 0, 17, 24, 15, 23, 21, 28, 22, 40, 12, 30, 20, 15, 30, 26, 16, 24, 18, 17, 14, 15, 11, 14, 19, 13, 24, 9, 16, 26, 28, 12, 8, 13, 16, 24, 13, 28, 22, 17, 17, 14, 22, 12, 22, 19, 15, 21, 15, 17, 16, 19, 16, 20, 16, 25, 15, 20, 15, 18, 18, 25, 21, 13, 57, 44, 33, 18, 42, 27, 13, 18, 22, 17, 14, 30, 19, 18, 30, 18, 17, 18, 34, 51, 30, 18, 47, 15, 18, 18, 15, 20, 23, 15, 29, 16, 24, 12, 29, 19, 18, 15, 13, 24, 22, 16, 17, 19, 17, 13, 26, 36, 19, 18, 24, 16, 15, 20, 16, 12, 23, 19, 16, 22, 18, 16, 21, 16, 20, 16, 23, 27, 16, 13, 22, 19, 22, 15, 19, 16, 23, 19, 19, 13, 11, 16, 16, 12, 16, 15, 16, 18, 24, 13, 64, 13, 17, 32, 17, 14, 16, 17, 20, 11, 12, 17, 19, 27, 19, 11, 22, 14, 16, 10, 16, 19, 18, 9, 22, 11, 14, 18, 20, 10, 28, 17, 16, 34, 17, 19, 15, 16, 18, 15, 23, 25, 8, 15, 18, 20, 23, 36, 35, 27, 22, 29, 16, 15, 19, 24, 31, 19, 27, 15, 15, 7, 24, 15, 25, 20, 14, 17, 19, 14, 22, 23, 21, 15, 16, 11, 13, 10, 24, 17, 29, 22, 23, 24, 31, 21, 12, 17, 16, 12, 18, 15, 23, 15, 18, 16, 11, 13, 15, 31, 12, 20, 13, 13, 14, 35, 14, 10, 9, 23, 20, 21, 19, 23, 15, 14, 20, 21, 16, 25, 18, 36, 15, 18, 11, 16, 11, 25, 19, 16, 22, 19, 19, 31, 13, 24, 28, 17, 23, 19, 21, 20, 12, 18, 14, 23, 14, 17, 11, 15, 18, 15, 16, 31, 12, 11, 15, 21, 11, 13, 12, 19, 12, 16, 19, 23, 16, 22, 30, 17, 15, 16, 12, 15, 14, 19, 16, 10, 23, 17, 12, 14, 48, 18, 38, 17, 13, 20, 16, 32, 15, 12, 16, 16, 23, 12, 26, 16, 27, 18, 32, 21, 16, 12, 20, 48, 17, 13, 16, 17, 14, 17, 11, 12, 13, 17, 22, 12, 13, 12, 27, 14, 13, 29, 21, 30, 51, 23, 22, 29, 17, 13, 17, 13, 11, 19, 16, 40, 20, 35, 19, 23, 20, 19, 14, 20, 17, 51, 15, 16, 23, 15, 15, 22, 27, 15, 21, 28, 41, 14, 20, 15, 43, 17, 11, 13, 18, 16, 25, 19, 20, 15, 14, 24, 18, 13, 11, 14, 9, 17, 16, 15, 16, 14, 18, 17, 15, 12, 16, 19, 19, 21, 14, 17, 17, 18, 15, 21, 16, 18, 25, 20, 22, 29, 15, 16, 14, 28, 17, 29, 16, 13, 28, 9, 18, 18, 34, 13, 16, 14, 18, 16, 34, 18, 13, 9, 24, 12, 17, 31, 13, 12, 13, 23, 16, 12, 20, 19, 11, 20, 15, 31, 21, 10, 17, 19, 14, 13, 24, 14, 17, 14, 15, 15, 13, 24, 15, 21, 19, 20, 23, 15, 40, 18, 23, 12, 21, 13, 12, 27, 20, 29, 14, 22, 18, 27, 16, 35, 34, 24, 29, 20, 17, 16, 20, 14, 25, 16, 14, 20, 17, 10, 16, 17, 13, 14, 13, 26, 18, 12, 29, 16, 14, 16, 10, 16, 18, 17, 24, 18, 15, 25, 19, 21, 15, 23, 14, 24, 16, 20, 42, 20, 21, 20, 22, 28, 45, 15, 37, 17, 44, 24, 39, 27, 22, 46, 42, 30, 20, 34, 17, 21, 20, 15, 22, 16, 34, 16, 36, 34, 21, 21, 54, 20, 23, 12, 16, 18, 27, 21, 20, 19, 14, 16, 15, 18, 29, 15, 15, 36, 21, 16, 12, 20, 31, 38, 12, 16, 18, 20, 39, 17, 20, 20, 18, 19, 19, 24, 10, 17, 28, 15, 18, 41, 33, 16, 60, 25, 18, 15, 19, 39, 20, 21, 16, 12, 9, 18, 14, 18, 11, 15, 16, 20, 19, 24, 18, 17, 22, 12, 13, 28, 24, 43, 16, 26, 19, 19, 37, 19, 9, 11, 12, 16, 18, 20, 16, 15, 26, 16, 12, 17, 17, 19, 21, 19, 14, 12, 29, 31, 13, 50, 31, 49, 23, 22, 13, 18, 22, 26, 16, 12, 20, 13, 21, 14, 37, 10, 9, 17, 16, 9, 17, 19, 18, 23, 30, 32, 36, 25, 20, 16, 13, 23, 18, 20, 26, 20, 16, 18, 20, 18, 19, 21, 29, 15, 40, 46, 54, 19, 46, 19, 23, 21, 19, 24, 23, 13, 18, 16, 13, 19, 15, 17, 28, 16, 18, 17, 13, 30, 17, 16, 25, 12, 15, 14, 22, 17, 19, 16, 17, 19, 8, 17, 37, 12, 14, 20, 16, 21, 16, 29, 16, 18, 26, 15, 16, 39, 38, 27, 20, 19, 16, 14, 12, 10, 8, 17, 13, 18, 24, 11, 19, 11, 9, 10, 44, 10, 31, 15, 40, 13, 22, 15, 29, 17, 13, 32, 13, 41, 15, 32, 17, 16, 39, 12, 15, 12, 33, 13, 16, 31, 11, 11, 10, 26, 11, 12, 34, 35, 15, 14, 16, 21, 26, 13, 19, 11, 25, 31, 16, 8, 24, 24, 53, 31, 19, 13, 12, 14, 10, 20, 11, 16, 6, 12, 11, 11, 22, 30, 22, 21, 20, 18, 20, 12, 15, 9, 26, 16, 12, 37, 30, 35, 15, 33, 23, 17, 21, 10, 19, 35, 19, 11, 10, 9, 15, 18, 12, 21, 19, 22, 11, 9, 18, 22, 12, 21, 18, 17, 13, 11, 9, 30, 22, 33, 28, 15, 13, 39, 7, 7, 7, 38, 21, 15, 14, 18, 10, 15, 18, 14, 18, 11, 19, 7, 9, 28, 9, 19, 31, 19, 8, 22, 25, 13, 8, 8, 11, 11, 14, 15, 14, 13, 18, 9, 10, 18, 18, 14, 14, 27, 13, 27, 15, 25, 13, 20, 19, 15, 25, 14, 18, 13, 8, 18, 12, 12, 40, 14, 14, 13, 10, 36, 22, 9, 18, 15, 29, 29, 20, 14, 22, 11, 10, 5, 8, 11, 9, 25, 49, 21, 13, 10, 45, 13, 30, 48, 10, 26, 11, 10, 13, 22, 18, 17, 7, 19, 6, 47, 11, 16, 34, 8, 31, 29, 41, 24, 15, 13, 47, 14, 12, 27, 11, 9, 13, 26, 12, 14, 27, 12, 40, 14, 19, 19, 12, 20, 18, 18, 29, 24, 14, 13, 35, 15, 13, 10, 18, 14, 14, 52, 14, 26, 11, 34, 40, 25, 30, 41, 30, 47, 36, 32, 27, 6, 16, 10, 10, 13, 15, 20, 17, 14, 13, 11, 12, 12, 13, 9, 9, 17, 13, 10, 19, 24, 39, 27, 21, 16, 11, 32, 12, 29, 19, 13, 14, 35, 15, 21, 20, 13, 32, 17, 14, 28, 12, 19, 10, 10, 12, 9, 24, 17, 9, 14, 18, 14, 28, 15, 20, 16, 12, 11, 12, 10, 27, 22, 13, 22, 9, 13, 21, 24, 14, 17, 24, 18, 11, 19, 35, 11, 7, 12, 7, 17, 15, 13, 30, 29, 16, 35, 22, 17, 18, 14, 11, 16, 21, 8, 8, 7, 12, 41, 15, 30, 13, 11, 40, 11, 19, 60, 16, 13, 12, 28, 13, 15, 41, 29, 26, 11, 14, 11, 12, 10, 8, 12, 15, 22, 13, 12, 11, 21, 16, 14, 12, 29, 35, 21, 43, 11, 11, 42, 14, 16, 13, 11, 19, 13, 18, 14, 13, 43, 23, 26, 21, 22, 14, 30, 12, 27, 12, 57, 31, 30, 16, 9, 10, 22, 6, 33, 11, 28, 11, 24, 32, 44, 26, 21, 43, 19, 15, 9, 33, 24, 11, 16, 13, 9, 23, 23, 14, 22, 28, 17, 10, 18, 10, 8, 16, 20, 14, 12, 19, 14, 34, 19, 11, 10, 15, 11, 12, 17, 51, 30, 14, 16, 13, 11, 20, 13, 13, 17, 11, 11, 11, 18, 14, 8, 11, 33, 39, 5, 13, 37, 37, 14, 10, 15, 9, 19, 10, 18, 9, 44, 17, 11, 14, 44, 18, 42, 16, 20, 14, 17, 18, 20, 22, 16, 15, 9, 14, 10, 33, 8, 18, 17, 26, 43, 17, 13, 16, 15, 14, 28, 27, 18, 12, 10, 22, 16, 15, 15, 13, 14, 19, 9, 20, 13, 19, 20, 19, 17, 14, 16, 23, 13, 32, 12, 11, 10, 10, 11, 41, 13, 11, 35, 13, 24, 20, 50, 8, 22, 19, 11, 11, 16, 16, 11, 14, 23, 24, 33, 27, 9, 14, 34, 16, 12, 16, 10, 22, 19, 24, 10, 7, 11, 22, 22, 45, 33, 14, 21, 14, 14, 10, 10, 16, 23, 29, 20, 15, 9, 9, 8, 12, 13, 33, 14, 22, 17, 13, 13, 7, 13, 21, 19, 8, 8, 14, 12, 9, 9, 26, 14, 13, 19, 16, 16, 11, 11, 11, 14, 23, 19, 19, 18, 11, 15, 12, 10, 11, 18, 14, 13, 12, 12, 50, 25, 16, 13, 11, 10, 30, 58, 31, 17, 27, 32, 13, 15, 13, 18, 47, 13, 11, 12, 9, 9, 19, 9, 21, 12, 11, 29, 35, 11, 12, 12, 15, 14, 10, 26, 12, 16, 27, 7, 15, 9, 17, 11, 16, 15, 10, 23, 16, 17, 15, 12, 12, 18, 25, 23, 13, 19, 14, 25, 9, 9, 9, 20, 16, 12, 18, 11, 15, 26, 6, 8, 12, 10, 32, 13, 12, 12, 13, 19, 19, 14, 11, 36, 13, 11, 19, 36, 14, 17, 14, 11, 15, 39, 35, 12, 13, 16, 36, 13, 23, 12, 18, 29, 28, 19, 25, 35, 13, 33, 14, 13, 31, 28, 16, 8, 31, 18, 20, 14, 30, 12, 15, 10, 11, 20, 9, 16, 12, 19, 14, 15, 24, 12, 23, 9, 23, 10, 16, 11, 28, 11, 12, 14, 12, 9, 24, 20, 13, 25, 18, 12, 28, 17, 32, 18, 17, 22, 15, 17, 17, 20, 18, 17, 21, 14, 12, 23, 22, 12, 15, 14, 26, 13, 25, 12, 7, 11, 36, 15, 15, 14, 14, 14, 17, 15, 13, 16, 15, 5, 10, 23, 28, 12, 14, 47, 11, 17, 11, 13, 17, 37, 12, 27, 23, 27, 29, 27, 10, 16, 27, 11, 10, 16, 15, 10, 10, 26, 13, 20, 22, 21, 32, 20, 14, 14, 15, 18, 12, 17, 12, 12, 11, 8, 9, 11, 21, 17, 14, 26, 39, 13, 24, 15, 26, 21, 38, 38, 48, 39, 31, 24, 21, 20, 15, 18, 11, 12, 25, 13, 15, 10, 10, 8, 19, 11, 27, 18, 22, 17, 19, 17, 19, 16, 11, 13, 17, 12, 27, 12, 13, 11, 8, 23, 8, 8, 11, 40, 18, 15, 11, 10, 48, 13, 18, 25, 38, 19, 15, 18, 19, 14, 11, 15, 18, 12, 22, 15, 11, 22, 28, 45, 21, 17, 27, 30, 11, 14, 17, 29, 8, 27, 19, 15, 12, 20, 16, 17, 28, 11, 13, 8, 16, 12, 21, 17, 16, 11, 11, 17, 10, 20, 12, 18, 10, 24, 21, 31, 14, 23, 14, 20, 33, 13, 41, 14, 12, 16, 13, 16, 17, 24, 15, 18, 13, 13, 13, 17, 22, 16, 10, 27, 11, 15, 10, 28, 14, 18, 12, 4, 20, 11, 27, 18, 19, 23, 14, 9, 36, 16, 19, 26, 14, 44, 25, 14, 11, 41, 16, 35, 24, 23, 10, 7, 13, 11, 16, 15, 13, 36, 13, 13, 26, 16, 19, 14, 10, 9, 26, 10, 16, 17, 15, 22, 15, 27, 9, 11, 18, 18, 28, 14, 26, 16, 29, 11, 12, 23, 8, 10, 24, 21, 11, 54, 14, 15, 11, 24, 35, 19, 16, 18, 17, 11, 18, 14, 37, 26, 18, 9, 52, 11, 24, 12, 16, 11, 16, 12, 7, 21, 9, 14, 25, 21, 22, 8, 11, 12, 10, 13, 15, 17, 18, 15, 23, 15, 20, 24, 12, 44, 16, 12, 10, 14, 9, 19, 12, 11, 29, 13, 11, 13, 38, 11, 19, 16, 19, 24, 14, 26, 13, 18, 20, 29, 16, 12, 19, 31, 10, 20, 10, 9, 22, 19, 9, 13, 16, 10, 12, 17, 9, 13, 9, 9, 12, 9, 9, 13, 15, 17, 19, 17, 15, 18, 15, 18, 12, 57, 20, 28, 10, 10, 11, 21, 8, 27, 11, 28, 26, 8, 14, 11, 12, 10, 11, 11, 12, 13, 13, 10, 16, 11, 17, 9, 25, 10, 18, 10, 15, 10, 21, 13, 19, 7, 28, 15, 16, 25, 38, 27, 8, 9, 13, 20, 9, 12, 28, 16, 12, 14, 21, 9, 14, 39, 14, 25, 11, 33, 15, 14, 50, 20, 23, 20, 32, 12, 15, 11, 10, 14, 15, 15, 12, 9, 20, 12, 31, 25, 13, 11, 17, 18, 17, 15, 49, 9, 15, 17, 12, 11, 14, 11, 27, 21, 15, 17, 11, 10, 10, 20, 19, 22, 23, 8, 51, 20, 16, 26, 12, 13, 19, 14, 17, 12, 13, 14, 14, 18, 12, 15, 12, 8, 21, 20, 16, 12, 19, 14, 29, 23, 16, 16, 24, 9, 16, 11, 18, 14, 10, 14, 10, 17, 15, 12, 7, 29, 16, 12, 12, 14, 15, 16, 25, 15, 37, 15, 27, 32, 8, 16, 19, 35, 23, 27, 22, 9, 14, 9, 24, 14, 9, 12, 11, 13, 19, 17, 8, 22, 13, 11, 20, 57, 32, 21, 31, 13, 10, 14, 12, 13, 24, 12, 12, 19, 20, 15, 12, 13, 19, 23, 12, 31, 15, 11, 14, 12, 33, 11, 24, 11, 41, 45, 11, 10, 12, 7, 16, 13, 25, 17, 18, 11, 16, 11, 12, 11, 25, 11, 13, 8, 11, 9, 13, 11, 15, 14, 17, 33, 20, 33, 14, 21, 23, 16, 10, 19, 12, 39, 32, 9, 28, 16, 14, 16, 13, 13, 13, 16, 15, 19, 31, 15, 26, 23, 19, 14, 12, 8, 9, 6, 24, 16, 24, 18, 9, 13, 15, 12, 7, 26, 14, 37, 12, 17, 19, 13, 16, 39, 34, 33, 27, 13, 21, 21, 10, 30, 36, 58, 13, 31, 37, 21, 14, 13, 11, 27, 24, 18, 14, 16, 21, 17, 14, 9, 13, 10, 9, 14, 18, 17, 15, 14, 15, 30, 19, 36, 14, 18, 11, 24, 22, 17, 32, 16, 12, 11, 10, 12, 15, 33, 43, 21, 14, 20, 42, 13, 16, 12, 10, 11, 13, 22, 14, 10, 13, 5, 10, 34, 15, 12, 45, 12, 16, 20, 12, 9, 40, 32, 15, 21, 23, 9, 71, 22, 19, 14, 13, 24, 10, 19, 16, 33, 17, 27, 19, 24, 17, 20, 29, 16, 14, 30, 27, 30, 17, 35, 13, 21, 9, 15, 7, 27, 15, 10, 11, 14, 15, 15, 8, 13, 10, 14, 24, 20, 13, 39, 23, 23, 17, 20, 32, 33, 44, 37, 32, 4, 8, 8, 9, 18, 14, 20, 14, 31, 16, 22, 18, 12, 18, 54, 19, 21, 19, 16, 22, 12, 16, 31, 6, 37, 19, 9, 9, 17, 8, 30, 26, 18, 70, 22, 17, 10, 13, 12, 12, 45, 18, 10, 18, 39, 13, 17, 16, 18, 44, 23, 11, 17, 23, 19, 16, 26, 35, 32, 28, 25, 15, 15, 14, 20, 13, 20, 14, 17, 15, 14, 20, 15, 15, 20, 16, 21, 21, 29, 23, 16, 20, 17, 17, 16, 21, 22, 21, 13, 15, 23, 16, 22, 27, 17, 20, 18, 16, 33, 19, 34, 18, 19, 29, 15, 16, 19, 19, 20, 16, 16, 10, 16, 25, 18, 17, 23, 26, 22, 38, 17, 10, 26, 18, 19, 24, 15, 12, 19, 18, 21, 17, 15, 13, 32, 19, 25, 17, 20, 23, 15, 21, 14, 21, 19, 42, 23, 18, 18, 15, 20, 17, 24, 29, 31, 22, 17, 20, 26, 16, 19, 19, 36, 15, 18, 14, 16, 16, 15, 21, 30, 13, 16, 14, 12, 13, 22, 18, 20, 18, 32, 36, 18, 13, 15, 14, 16, 23, 45, 23, 18, 20, 13, 25, 16, 24, 23, 16, 17, 25, 19, 13, 18, 47, 16, 32, 24, 18, 20, 18, 18, 14, 29, 21, 26, 14, 16, 12, 28, 28, 32, 19, 15, 20, 24, 15, 19, 20, 29, 23, 32, 15, 14, 21, 12, 20, 17, 15, 39, 22, 21, 20, 14, 18, 28, 38, 19, 17, 15, 13, 28, 28, 12, 15, 15, 23, 22, 20, 18, 21, 18, 15, 21, 18, 27, 15, 14, 18, 15, 30, 20, 15, 15, 18, 23, 16, 19, 16, 19, 13, 18, 23, 20, 26, 16, 19, 17, 16, 21, 12, 27, 11, 14, 14, 21, 16, 22, 15, 13, 18, 28, 23, 23, 15, 18, 43, 16, 18, 35, 45, 28, 32, 18, 18, 12, 21, 23, 13, 14, 31, 13, 14, 17, 11, 24, 21, 15, 22, 20, 24, 28, 21, 14, 16, 17, 16, 34, 16, 17, 17, 24, 24, 24, 19, 22, 20, 26, 18, 39, 40, 33, 22, 25, 30, 12, 9, 15, 27, 12, 39, 30, 11, 11, 18, 10, 12, 43, 9, 10, 21, 37, 18, 18, 14, 20, 25, 15, 30, 7, 27, 9, 15, 8, 13, 16, 10, 15, 25, 11, 15, 41, 11, 11, 30, 20, 17, 20, 15, 33, 19, 23, 25, 12, 20, 6, 18, 25, 12, 12, 22, 20, 12, 13, 27, 22, 16, 16, 14, 9, 17, 16, 18, 20, 24, 17, 30, 20, 15, 15, 17, 33, 27, 34, 22, 36, 17, 21, 21, 13, 38, 22, 28, 20, 48, 20, 15, 14, 8, 15, 45, 12, 50, 20, 13, 12, 9, 20, 20, 13, 28, 14, 26, 26, 18, 23, 25, 16, 5, 16, 24, 13, 18, 12, 40, 30, 32, 12, 14, 18, 18, 13, 10, 15, 24, 16, 12, 21, 12, 13, 12, 12, 18, 19, 12, 16, 13, 23, 19, 35, 24, 9, 17, 27, 29, 30, 12, 27, 23, 26, 19, 18, 12, 17, 15, 22, 14, 16, 25, 45, 27, 19, 26, 25, 16, 14, 16, 11, 17, 25, 16, 38],
            asian: [1, 1, 20, 7, 1, 52, 2, 0, 1, 0, 4, 1, 0, 1, 3, 0, 0, 1, 0, 3, 4, 6, 0, 1, 0, 6, 34, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 3, 0, 16, 26, 33, 19, 44, 24, 0, 0, 0, 2, 2, 1, 1, 1, 4, 1, 1, 6, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 5, 1, 0, 1, 1, 4, 1, 5, 3, 2, 3, 1, 0, 0, 0, 0, 2, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 4, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 1, 1, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 1, 0, 4, 1, 0, 1, 0, 1, 1, 0, 0, 5, 0, 0, 0, 1, 0, 1, 0, 1, 0, 5, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 2, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 2, 4, 5, 1, 1, 1, 5, 3, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 6, 11, 33, 2, 0, 3, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 4, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 0, 5, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 2, 2, 0, 0, 1, 0, 0, 1, 0, 3, 2, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 7, 7, 1, 0, 0, 0, 2, 1, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 1, 0, 3, 0, 1, 1, 0, 0, 0, 0, 0, 4, 1, 14, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 5, 0, 1, 3, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 6, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 11, 0, 13, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 1, 2, 2, 0, 1, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 2, 0, 1, 3, 1, 3, 2, 0, 0, 5, 1, 0, 1, 1, 1, 0, 0, 2, 0, 3, 1, 0, 0, 1, 0, 0, 0, 4, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 3, 1, 2, 2, 1, 0, 0, 0, 0, 1, 1, 2, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 4, 1, 4, 1, 0, 0, 0, 1, 2, 1, 0, 0, 1, 0, 0, 3, 0, 0, 2, 1, 1, 0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 26, 0, 0, 0, 1, 0, 0, 4, 0, 1, 3, 0, 0, 0, 3, 3, 0, 0, 1, 0, 14, 1, 1, 0, 3, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 14, 1, 2, 0, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 4, 0, 3, 6, 0, 0, 31, 0, 4, 0, 24, 1, 3, 1, 0, 0, 0, 1, 2, 6, 0, 0, 0, 2, 1, 0, 1, 1, 2, 1, 3, 1, 6, 1, 2, 7, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 1, 1, 0, 1, 0, 9, 3, 14, 1, 0, 0, 0, 6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 4, 0, 1, 1, 0, 2, 1, 0, 1, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 2, 0, 0, 0, 0, 14, 1, 0, 1, 1, 1, 0, 4, 1, 0, 1, 1, 1, 0, 2, 0, 1, 2, 2, 1, 0, 0, 0, 1, 0, 1, 1, 2, 1, 1, 1, 2, 2, 1, 0, 1, 3, 8, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 1, 0, 1, 6, 0, 1, 17, 1, 0, 5, 0, 1, 3, 0, 1, 2, 1, 0, 0, 0, 13, 1, 1, 0, 3, 1, 4, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 3, 0, 1, 1, 1, 2, 1, 1, 1, 0, 3, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 5, 1, 3, 1, 2, 1, 1, 1, 2, 0, 3, 1, 2, 0, 2, 0, 0, 0, 4, 0, 2, 0, 2, 0, 0, 1, 23, 0, 0, 2, 0, 6, 1, 3, 1, 1, 3, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 1, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 15, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 1, 1, 0, 2, 0, 0, 10, 2, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 0, 0, 3, 0, 0, 0, 2, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 3, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 2, 0, 1, 1, 3, 0, 1, 0, 2, 0, 1, 5, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 8, 1, 0, 2, 0, 2, 2, 4, 1, 0, 0, 6, 0, 0, 1, 1, 0, 0, 2, 0, 0, 3, 0, 4, 1, 1, 0, 0, 1, 0, 1, 8, 1, 1, 0, 5, 0, 0, 0, 1, 1, 0, 4, 0, 1, 1, 4, 0, 2, 1, 1, 2, 6, 3, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 2, 5, 1, 0, 1, 1, 4, 0, 3, 1, 0, 0, 3, 1, 0, 0, 0, 3, 0, 0, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 3, 0, 1, 1, 1, 1, 0, 0, 2, 1, 0, 4, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 4, 0, 2, 0, 0, 1, 1, 1, 6, 1, 0, 0, 3, 0, 0, 2, 2, 4, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 1, 1, 2, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 2, 1, 1, 1, 0, 2, 0, 14, 4, 4, 0, 0, 0, 2, 1, 4, 0, 5, 0, 7, 2, 14, 1, 0, 5, 1, 0, 0, 2, 2, 0, 0, 0, 0, 2, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 0, 3, 1, 0, 1, 5, 6, 0, 0, 0, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 6, 1, 0, 7, 0, 0, 0, 1, 0, 0, 1, 5, 0, 4, 0, 0, 1, 5, 1, 4, 0, 3, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 2, 0, 1, 0, 2, 5, 0, 0, 0, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 6, 0, 0, 4, 1, 1, 1, 4, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 3, 2, 1, 0, 0, 3, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 1, 0, 3, 3, 1, 1, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 5, 1, 0, 0, 0, 1, 13, 2, 0, 2, 5, 1, 1, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 1, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 0, 1, 4, 0, 0, 0, 1, 0, 2, 5, 0, 1, 1, 3, 0, 0, 0, 0, 1, 3, 0, 1, 13, 0, 6, 1, 0, 5, 2, 0, 0, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 3, 0, 0, 0, 1, 5, 2, 2, 1, 1, 0, 0, 4, 0, 3, 1, 0, 7, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 6, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 1, 0, 0, 5, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 2, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 2, 0, 1, 2, 1, 4, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 3, 0, 2, 1, 3, 1, 20, 9, 9, 5, 3, 2, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 5, 1, 0, 1, 1, 4, 1, 3, 3, 4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 5, 0, 0, 1, 2, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 2, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 2, 1, 1, 0, 1, 1, 0, 9, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 3, 1, 0, 2, 0, 0, 3, 1, 1, 2, 0, 6, 2, 0, 0, 7, 1, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, 0, 1, 1, 2, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 5, 0, 0, 0, 1, 1, 3, 1, 0, 1, 1, 2, 0, 1, 1, 1, 0, 3, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 0, 1, 0, 1, 2, 0, 1, 0, 1, 1, 10, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 14, 0, 0, 0, 0, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 2, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 8, 0, 1, 0, 4, 1, 0, 9, 1, 1, 1, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 1, 0, 0, 9, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 8, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 1, 2, 1, 0, 0, 1, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 3, 3, 0, 0, 1, 5, 1, 1, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 11, 3, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 2, 1, 1, 3, 0, 0, 0, 1, 0, 2, 0, 4, 4, 0, 0, 1, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 1, 1, 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 2, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 5, 1, 1, 0, 1, 0, 1, 0, 2, 2, 17, 0, 4, 3, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 1, 4, 3, 0, 1, 1, 0, 11, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 0, 1, 1, 0, 3, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 6, 1, 0, 1, 1, 3, 4, 4, 3, 2, 0, 1, 0, 0, 1, 0, 1, 0, 2, 1, 1, 2, 0, 0, 7, 1, 2, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 9, 1, 0, 0, 0, 0, 0, 10, 1, 0, 0, 11, 0, 0, 1, 0, 6, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 4, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 1, 1, 0, 2, 0, 1, 3, 1, 1, 0, 1, 2, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 6, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 1, 4, 1, 0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 0, 2, 9, 5, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 5, 0, 1, 1, 1, 8, 1, 0, 1, 0, 0, 2, 7, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 2, 4, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 3, 1, 1, 0, 0, 3, 1, 1, 1, 14, 5, 2, 1, 1, 1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 0, 0, 0, 1, 0, 0, 5, 1, 1, 2, 3, 0, 0, 1, 0, 1, 5, 2, 1, 1, 0, 0, 0, 6, 0, 1, 9, 5, 1, 3, 1, 3, 0, 0, 2, 0, 3, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 3, 0, 0, 1, 1, 0, 2, 1, 3, 1, 3, 4, 0, 2, 0, 2, 1, 0, 0, 1, 3, 1, 0, 1, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 1, 0, 1, 0, 1, 2, 0, 1, 4, 1, 0, 1, 0, 0, 3, 2, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 3, 1, 1, 0, 2, 1, 3, 2, 0, 0, 0, 1, 1, 1, 0, 0, 3, 1, 1, 3, 0, 0, 0, 0, 0, 1, 1, 0, 4],
            d2008: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1939, 3263, 132, 1048, 1382, 47912, 1329, 2167, 3014, 12384, 8854, 2508, 3298, 8274, 346, 1747, 16156, 41805, 2405, 98368, 39727, 20416, 0, 214239, 50819, 8554, 1301, 1716, 2692, 4440, 5147, 90261, 3188, 2729, 5403, 28431, 590982, 48480, 33452, 7153, 4034, 5256, 633, 2250, 4415, 2821, 5362, 6706, 1336, 3645, 275527, 9832, 6982, 4126, 108, 5570, 3006, 4937, 3409, 375, 3599, 1760, 36480, 1052, 1869, 32145, 9662, 65096, 5108, 273009, 59962, 361271, 117102, 13236, 613, 0, 0, 0, 62948, 642, 29710, 2568, 1674, 1996, 2149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14625, 248299, 18135, 272963, 4998, 41886, 0, 0, 0, 0, 0, 0, 0, 0, 1300, 2803, 54450, 4383, 1925, 102686, 99335, 67125, 17655, 6711, 119701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4756, 12492, 5311, 35791, 127795, 9345, 102417, 0, 0, 0, 0, 0, 0, 0, 113865, 0, 0, 0, 0, 0, 11581, 2134, 24726, 0, 0, 0, 0, 0, 0, 127620, 3430, 75565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26697, 492640, 39031, 31460, 0, 0, 0, 6266, 3380, 0, 0, 6994, 12424, 0, 0, 0, 0, 0, 8522, 3491, 0, 0, 0, 0, 20907, 499831, 33508, 70839, 70034, 0, 0, 0, 0, 907, 49013, 18028, 10320, 2303, 32669, 3542, 55567, 1265, 422, 851, 5457, 9468, 4512, 5400, 8393, 67, 2055, 1123, 450, 1146, 2708, 13900, 1247, 49090, 1152, 950, 2250, 422989, 2516, 302, 8945, 1089, 856, 741, 3258, 1332, 402, 85, 346, 11623, 1347, 155, 229, 2591, 104, 622, 20436, 736, 4473, 556, 349, 442, 9159, 233, 283, 771, 1117, 529, 47292, 151, 799, 124159, 16168, 4862, 198, 3332, 99671, 1230, 492, 4696, 2352, 3087, 13816, 758, 5809, 102, 243, 1521, 315720, 666581, 322220, 53761, 4545, 8644, 3790, 2336, 1380, 373, 240, 863, 324, 13255, 52, 2067, 1153, 38819, 5230, 14401, 20298, 552, 96, 1607, 2428, 2900, 2338, 6689, 946, 218, 116810, 3491, 962, 325, 635, 3555, 1338, 424, 14747, 5742, 4338, 2863, 3030, 2256, 1175, 333, 1115, 2422, 1274, 599, 1173, 780, 1125, 1242, 961, 1216, 1513, 3796, 668, 139, 598, 7813, 1592, 3320, 515, 1643, 5749, 4244, 2345, 993, 260, 3535, 5108, 5824, 4311, 4625, 2302, 8621, 1313, 1226, 1009, 5463, 5136, 1235, 502, 15730, 210824, 131, 2586, 10502, 2499, 719, 2225, 1088, 122021, 487, 1630, 193, 545, 1425, 1334, 3051, 257, 116182, 11294, 1675, 4010, 3275, 4433, 341, 1190, 1413, 1190, 4753, 965, 454, 3211, 2341, 5302, 4075, 28010, 82236, 2703, 1681, 3244, 914, 446, 2890, 1036, 68176, 688, 14792, 373, 2023, 1557, 8142, 7351, 40282, 359, 188, 1407, 346, 5085, 5545, 282, 542, 3028, 2618, 430, 2656, 2545, 5087, 3530, 546, 25666, 335, 10826, 2892, 15333, 626, 882, 1271, 1794, 1641, 205, 96, 2822, 659, 163, 1170, 512, 39865, 187601, 8866, 13166, 314, 650, 2034, 10294, 3468, 542, 375, 5924, 244, 10475, 1823, 16072, 1797, 2949, 405, 1236, 3e3, 6318, 243, 1285, 2399, 1192, 2994, 1800, 542, 23726, 435, 147, 3033, 127, 9916, 168888, 9123, 102095, 799, 401, 743, 383, 1163, 2394, 2794, 3551, 1257, 5717, 3504, 2079, 16572, 2168, 8610, 1547, 12703, 105614, 1048, 6230, 8939, 2264, 805, 1474, 1709, 1249, 1692, 802, 3353, 787, 1317, 1036, 38849, 730, 687, 198, 1328, 4983, 2415, 1027, 381, 944, 936, 5762, 299, 643, 109047, 234, 53488, 311, 250, 1886, 742, 5867, 1367, 655, 557, 585, 454, 664, 117, 860, 4838, 4670, 171556, 664, 8197, 5827, 3490, 34398, 221, 566, 333, 5520, 295, 4413, 470, 164, 1322, 8594, 11158, 2166, 684, 22092, 30486, 15579, 1165, 602166, 29998, 206254, 9532, 97, 206, 274880, 291, 234, 7910, 2166, 1489, 600, 1807, 3808, 963, 65734, 640, 1294, 273, 974, 115, 439, 1255, 127091, 500, 2971, 187, 3547, 3813, 6495, 4661, 1582, 1859, 873, 16057, 4323, 178, 912, 89823, 1350, 1480, 1411, 1174, 187, 2660, 690, 14120, 8318, 2073, 9691, 12, 319, 1925, 492, 1929, 20147, 553, 3811, 216, 7913, 1797, 1359, 813, 284, 497, 1085, 5830, 4608, 283, 11532, 1063, 2326, 2295, 4685, 757, 39, 62, 43, 3554, 1475, 1739, 1118, 1924, 1249, 706, 3711, 51, 1120, 17802, 1291, 13673, 2208, 10601, 4268, 2063, 6191, 7498, 911, 30477, 3839, 973, 600, 7194, 1860, 152, 39681, 427, 4610, 8405, 6016, 8887, 699, 250, 619, 1644, 1832, 7884, 31433, 18943, 15390, 1597, 398, 3044, 3487, 12690, 1379, 166, 3145, 589, 1734, 3490, 406, 719, 514, 313, 9813, 211, 278, 489106, 2308, 1240, 549, 557, 986, 657, 82337, 321, 41235, 1493, 254, 2189, 689, 6844, 108899, 1990, 11357, 4037, 287, 113974, 1011, 4426, 3404, 11426, 5603, 3381, 728, 7334, 899, 627, 5243, 367, 1156, 2977, 128, 682, 3586, 2295853, 14854, 17952, 4471, 477, 4010, 658, 2317, 1042, 11917, 3715, 366, 3925, 2915, 483, 1050, 783, 8186, 504, 736, 10495, 468, 21983, 325017, 3241, 208, 462241, 3464, 98745, 324, 222826, 3128, 158158, 1989, 277, 5557, 240, 1627, 28867, 75112, 347, 1e3, 3345, 6619, 1663, 720, 41, 2675, 8492, 468, 40413, 3743, 109320, 4100, 27843, 34031, 1313, 318, 4625, 357, 245, 1009, 3594, 323, 1233, 5084, 96133, 1042, 1462, 29567, 200, 957, 309, 136706, 40529, 306983, 2569, 1037, 2570, 436, 91160, 525, 4142, 704, 403, 81, 5046, 45, 86, 261, 2599, 93457, 1487, 1636, 4250, 622, 7349, 24008, 2846, 546, 3562, 270, 923, 10772, 4538, 4454, 2454, 265, 1370, 411, 2052, 1625, 1332, 4715, 3233, 36889, 44254, 8683, 154, 4505, 288, 316506, 1240, 6947, 4424, 11417, 1631, 99, 8, 740, 586, 4630, 790, 9379, 310, 13868, 1196, 314, 39692, 3734, 24162, 2371, 1848, 2625, 8810, 2154, 1245, 552, 912, 4513, 468, 9802, 264, 3349, 9292, 420, 18559, 3494, 380765, 10672, 4541, 3271, 4629, 1455, 701, 1303, 21459, 197, 1539, 2991, 12912, 1528, 11161, 40, 10815, 88453, 3093, 28617, 549558, 4218, 1801, 80279, 1784, 2976, 225, 710, 7957, 5012, 194, 605, 1121, 343, 13412, 19844, 3819, 369, 204882, 13191, 61960, 1730, 8270, 2448, 655, 41097, 4745, 3767, 3311, 1909, 144, 518, 577, 19164, 2674, 363, 114037, 17412, 9370, 1903, 1418, 176988, 2406, 141, 876, 914, 1520, 1083, 75, 497, 289, 2563, 1432, 2534, 1606, 41, 8642, 458, 212, 1219, 260, 3027, 7855, 39838, 2160, 1454, 6308, 2562, 1052, 2836, 148224, 3521, 93445, 536, 2759, 1102, 673, 7226, 1082, 15366, 43634, 7450, 4493, 2586, 15650, 2135, 2290, 8958, 103456, 17403, 91085, 13085, 9326, 8690, 5906, 4320, 480692, 39180, 13208, 20701, 2898, 177242, 14191, 24742, 24750, 27443, 333123, 4979, 11540, 1795, 84183, 881, 2996, 13959, 3911, 2656, 7420, 32796, 7625, 13779, 21250, 33540, 9900, 4777, 3852, 19627, 11622, 1733, 2819, 1532, 214385, 12524, 13058, 2060, 20209, 5879, 6575, 62166, 13895, 4457, 4594, 3456, 2522, 10334, 4588, 2037, 1829, 2107, 5515, 5816, 12348, 70886, 14199, 28012, 3970, 31017, 2174, 2255, 8167, 978, 13249, 2315, 2298, 83723, 37990, 104820, 13774, 45078, 24813, 4899, 14457, 3539, 3339, 129025, 2900, 2290, 998, 2511, 10237, 4539, 3413, 7107, 3800, 3312, 4235, 1253, 5927, 2595, 2232, 17229, 14334, 6025, 1209, 1459, 3534, 12152, 5519, 120984, 53994, 4653, 2279, 66042, 1555, 1535, 1652, 9752, 3854, 3736, 7011, 21953, 1276, 5153, 11713, 13378, 10784, 2378, 26795, 1350, 849, 15941, 2794, 24640, 42349, 5828, 2700, 223784, 39178, 2924, 5141, 3154, 1204, 3112, 5843, 6621, 13074, 1265, 31384, 3796, 775, 4712, 793, 1799, 2668, 11883, 1572, 132925, 4887, 7953, 6491, 7467, 26245, 13464, 19436, 7597, 6558, 5264, 3121, 4682, 10085, 3064, 20625, 7710, 6091, 7169, 1475, 74310, 38879, 5389, 11226, 12139, 3457, 9799, 4393, 10141, 8802, 4607, 3663, 1554, 515, 2858, 794, 8573, 245800, 590, 4268, 1918, 17352, 2614, 4473, 272e3, 4322, 12676, 210, 2879, 11415, 4237, 5101, 7130, 597, 3102, 1377, 200675, 4052, 1575, 22350, 2596, 830, 62755, 29591, 11017, 3553, 7671, 15705, 2012, 7530, 11767, 1238, 1278, 2488, 71263, 4928, 1563, 13567, 2677, 253958, 6571, 6620, 5026, 6539, 10920, 7607, 4464, 79311, 7421, 7309, 3229, 93994, 4187, 12565, 4839, 6334, 8367, 2466, 29792, 2916, 15521, 4139, 15703, 7913, 146861, 49558, 74264, 48927, 26548, 208976, 11886, 13728, 201, 4936, 3366, 3068, 1374, 3279, 4139, 7123, 4954, 5307, 2286, 3370, 1158, 2151, 1412, 2625, 6732, 7064, 2003, 143927, 30742, 38711, 20082, 12730, 16785, 16047, 142101, 4855, 50828, 20127, 2063, 4643, 15248, 2215, 13181, 2665, 1580, 71060, 21256, 2899, 56181, 5397, 9462, 6259, 6856, 12076, 3141, 11861, 3342, 2213, 5736, 3918, 16246, 17556, 2462, 4286, 53467, 854, 3419, 4308, 2124, 6940, 24934, 5027, 11396, 1517, 2645, 15253, 72721, 9238, 8537, 46122, 9892, 5919, 6454, 25716, 2369, 643, 1932, 1536, 6912, 4239, 4402, 24897, 32260, 10306, 179031, 97047, 19813, 8587, 4107, 4995, 4577, 8063, 1846, 938, 817, 846, 13700, 9821, 68037, 2523, 2029, 4073, 1446, 9850, 50473, 2246, 1484, 2804, 17669, 1890, 3364, 16162, 48406, 167442, 2830, 9318, 1622, 1510, 2752, 766, 2623, 1224, 39423, 9105, 4003, 6590, 25040, 5456, 8765, 3489, 38611, 56645, 6009, 19831, 3634, 5391, 372566, 6405, 53821, 10790, 892, 4141, 1796, 11063, 2619, 1052, 20579, 5693, 6999, 70034, 12589, 4779, 8575, 3315, 19023, 2547, 314444, 160406, 332396, 15607, 1372, 5053, 25716, 1969, 131219, 3100, 159259, 5792, 67830, 8292, 225367, 22893, 7801, 4328, 32327, 5013, 3683, 225213, 13870, 2011, 3980, 6320, 3867, 40381, 40594, 4861, 82839, 11687, 5985, 1901, 13582, 2501, 1862, 4749, 7720, 2964, 6059, 40499, 11138, 373153, 17633, 1471, 9685, 6657, 1027, 2590, 9662, 51027, 5070, 2518, 5446, 4506, 4320, 41632, 3323, 5935, 25431, 11279, 3078, 1248, 5498, 1797, 3340, 11118, 18447, 86323, 3122, 8126, 93435, 2105, 5918, 1618, 1045, 818, 4106, 3872, 82527, 879, 141216, 989, 4811, 1546, 15406, 10691, 20313, 2611, 2562, 1914, 3933, 31398, 8748, 28384, 7175, 3892, 2891, 10330, 5564, 77051, 1706, 37480, 6013, 16679, 41450, 812, 7104, 10049, 8604, 2725, 256297, 8766, 7422, 1241, 1720, 27318, 7513, 9227, 5587, 9608, 9915, 5921, 6794, 9236, 2992, 9357, 9101, 7817, 7235, 7462, 5042, 6403, 1871, 106756, 1474, 2961, 4540, 2140, 2056, 69543, 4612, 1757, 334709, 4401, 29250, 23148, 36653, 2171, 2036, 5170, 2941, 3131, 5908, 3695, 1804, 5541, 6058, 62819, 73623, 37918, 2542, 2456, 158423, 7889, 1967, 10198, 1566, 44158, 20827, 3091, 2725, 3026, 4932, 10453, 4347, 4825, 19812, 5596, 6997, 2626, 1832, 3301, 2075, 2609, 51972, 256299, 4349, 3228, 2390, 2201, 1493, 3484, 1646, 5027, 5044, 4267, 4172, 3043, 1680, 691, 3923, 14405, 5221, 752, 2036, 4618, 1913, 3074, 961, 12329, 8413, 1755, 34561, 13459, 12083, 4562, 2469, 5486, 4403, 12695, 2598, 139301, 18588, 9047, 19397, 13503, 1587, 5853, 2227, 3967, 9732, 8880, 4383, 79321, 113257, 11605, 2415, 2047, 878, 4953, 87120, 48552, 3736, 77267, 240306, 34919, 7038, 8673, 5926, 29776, 9077, 4165, 7215, 7261, 2474, 12064, 1614, 13329, 6374, 7478, 166121, 2930, 5164, 6116, 3151, 6738, 16302, 7503, 66030, 6423, 6807, 64246, 604, 5504, 2983, 5881, 997, 8091, 7163, 1543, 6871, 2775, 2519, 3165, 1471, 3390, 7058, 39184, 11294, 2580, 6050, 10330, 9586, 5233, 3065, 1342, 6482, 22671, 8934, 19652, 4527, 4486, 21553, 743, 3570, 5695, 1352, 98885, 4346, 1182, 1089, 3250, 6284, 24165, 4284, 1638, 37781, 5030, 5161, 7132, 54013, 519, 4703, 1599, 2042, 2784, 105218, 214151, 4422, 3024, 10693, 125015, 4701, 3859, 3114, 11253, 20299, 45906, 8463, 24177, 154140, 3589, 1629024, 3883, 2055, 141417, 25784, 3308, 2267, 28840, 16044, 18372, 8616, 40924, 12870, 5853, 4094, 5188, 8301, 1994, 13497, 3469, 6892, 4411, 7506, 10489, 2832, 45836, 2600, 21448, 1831, 8399, 7964, 458422, 8289, 7689, 25866, 1004, 479, 20526, 52100, 1833, 2001, 16780, 14555, 7518, 6756, 6155, 13230, 7097, 2463, 1798, 3179, 1108, 29129, 18128, 10100, 18888, 28300, 2300, 11493, 595980, 6186, 5382, 7931, 7712, 1569, 4074, 1410, 451, 1962, 1748, 4435, 6539, 2976, 2619, 10578, 2970, 8820, 3971, 2669, 5683, 1119, 1380, 38987, 3636, 3748, 7086, 250891, 13166, 28258, 2105, 7208, 30152, 14558, 2612, 12392, 21487, 6236, 196435, 26480, 2407, 6190, 20005, 4778, 7496, 5039, 6987, 4271, 1598, 68710, 2436, 18354, 12703, 40299, 178768, 36392, 12322, 7082, 40677, 60276, 2347, 2084, 1703, 3553, 2247, 4711, 2243, 2557, 12021, 5505, 3702, 25719, 85339, 5868, 48167, 4971, 43635, 17665, 193812, 107926, 112275, 148737, 21498, 110189, 9536, 5262, 25727, 5281, 1329, 6999, 41856, 6033, 3018, 4982, 4408, 2134, 12225, 3890, 39753, 13148, 7987, 1349, 11502, 4e3, 14875, 19522, 4170, 25027, 9300, 5930, 20722, 3021, 4893, 7242, 993, 15292, 735, 1421, 1305, 41950, 32451, 879, 3024, 1660, 137833, 2705, 338261, 47204, 93937, 7016, 7569, 14307, 10023, 12878, 1233, 8381, 6390, 4109, 7333, 2705, 2838, 2790, 16269, 261810, 18184, 12741, 16281, 54320, 4343, 2891, 3159, 31189, 933, 7275, 2806, 10475, 3020, 10762, 8886, 3385, 16292, 2782, 2210, 6456, 2021, 5167, 28918, 4872, 9276, 5806, 2982, 6705, 1173, 6683, 3410, 1900, 1533, 76160, 42210, 51300, 5083, 53408, 5041, 50529, 13202, 5218, 48597, 759, 2690, 3965, 1423, 8889, 4426, 26101, 4593, 24132, 3029, 3240, 4068, 22428, 5079, 9703, 3429, 319819, 2273, 1968, 5025, 14372, 4817, 1907, 2084, 579, 72492, 7765, 87089, 23310, 19711, 99586, 5178, 2463, 33398, 12368, 21712, 75255, 14329, 253393, 3364, 6396, 2803, 342185, 9080, 207371, 14692, 13655, 4465, 1381, 2965, 3251, 6094, 2905, 2014, 17060, 4357, 2721, 8593, 7769, 3100, 2569, 2752, 1062, 14955, 1819, 10474, 15018, 5195, 4890, 6379, 4396, 808, 5025, 2772, 9907, 40501, 8446, 6829, 2567, 5164, 10177, 1241, 4769, 3110, 2205, 11874, 1208, 5709, 49704, 6455, 11293, 5545, 11130, 17862, 25656, 3785, 5646, 7889, 5285, 27755, 4434, 30396, 5735, 4596, 1355, 27886, 3372, 15886, 2470, 695, 986, 2041, 3984, 1418, 11794, 2189, 9695, 3843, 11333, 3906, 1168, 3636, 3674, 1760, 5914, 1357, 11349, 1090, 4245, 29384, 5843, 3883, 67520, 5025, 1543, 8846, 4454, 1304, 6621, 3256, 17065, 6447, 3068, 34285, 8174, 4931, 4461, 82698, 5375, 26411, 6465, 18381, 39453, 4986, 1225, 860, 12094, 18166, 603525, 3192, 3989, 6916, 4813, 2480, 3174, 1650, 1288, 17597, 2586, 3582, 3750, 7450, 4484, 5996, 10250, 1198, 1482, 4149, 1710, 1356, 2263, 2138, 1133, 3034, 4572, 4202, 1680, 4649, 12462, 6102, 6978, 3219, 74845, 3344, 3235, 1963, 3811, 1577, 11285, 1258, 12299, 1357, 6165, 15622, 1555, 2212, 879, 1615, 1092, 6667, 1474, 23058, 17255, 16414, 9713, 3404, 3094, 23391, 4389, 16308, 1038, 21169, 1576, 7829, 1112, 1391, 1427, 10455, 2402, 78326, 6614, 24777, 13570, 21613, 64799, 4529, 2704, 2419, 15994, 4063, 4973, 5569, 4717, 864, 911, 3554, 2244, 2951, 207128, 3149, 28611, 3596, 202107, 4822, 2575, 29826, 16850, 10172, 17148, 346549, 1067, 4234, 6875, 6221, 8151, 8878, 9641, 11836, 2742, 6002, 1048, 88854, 22446, 3218, 4155, 13449, 32589, 5862, 4839, 464484, 3348, 5434, 3462, 1879, 1427, 1668, 2024, 241987, 9481, 7654, 7224, 2907, 6365, 7853, 2178, 9454, 9739, 21331, 1971, 130578, 660085, 7379, 40460, 10234, 1837, 2435, 2638, 5029, 3899, 1114, 1637, 6258, 3181, 7395, 1900, 1638, 845, 30395, 18617, 3742, 6918, 7657, 2425, 20628, 11716, 7591, 5075, 21806, 7408, 14505, 5658, 5270, 13986, 1938, 5864, 2623, 6613, 7406, 4614, 2066, 38524, 4732, 21882, 6122, 3103, 7385, 31958, 31611, 6558, 64117, 5516, 69975, 48306, 1366, 7290, 5029, 178870, 75775, 75401, 46917, 2966, 6177, 3705, 145997, 17730, 2735, 4034, 782, 6095, 12573, 8469, 1552, 2486, 2942, 4061, 47303, 572370, 129317, 43506, 25103, 1310, 1142, 1548, 4205, 1717, 9334, 2641, 1043, 9825, 15899, 1562, 4541, 4288, 1597, 31546, 12081, 69716, 14901, 3766, 877, 1118, 27919, 1659, 121454, 3025, 56869, 47062, 7842, 1690, 3629, 5312, 6063, 3487, 7394, 4553, 5249, 6799, 16334, 4188, 4011, 2306, 13295, 3567, 5178, 1678, 3563, 2224, 3600, 3016, 7765, 6189, 5250, 6783, 79173, 8444, 7936, 85276, 142852, 6532, 4151, 13332, 2587, 7997, 5159, 5960, 33303, 2755, 7316, 13087, 14926, 15602, 14455, 12352, 1702, 2937, 14616, 9618, 6185, 12961, 11618, 7110, 2109, 3029, 5873, 3430, 22094, 18465, 40567, 4950, 1197, 1935, 3688, 1792, 2207, 19355, 5003, 22324, 3085, 1612, 1632, 4424, 3534, 254594, 17585, 21444, 2391, 7127, 1934, 2862, 2703, 5268, 105656, 310359, 6610, 74776, 45053, 28673, 2985, 5449, 984, 12208, 2706, 1535, 2693, 3542, 9450, 3081, 8345, 1716, 7838, 4316, 1219, 8880, 5749, 5968, 2384, 2238, 4926, 17624, 23099, 49145, 7354, 6255, 3748, 6178, 74693, 3737, 8074, 22433, 3444, 2027, 2065, 9525, 5590, 131817, 25479, 7773, 5316, 7580, 39082, 1996, 6932, 3005, 3029, 1661, 1907, 6093, 5697, 2299, 3522, 1024, 1837, 70215, 19183, 3311, 205984, 2080, 4987, 16661, 2245, 4105, 37689, 72288, 12090, 25487, 68979, 3067, 4695, 33932, 11014, 17635, 11262, 60155, 2227, 9021, 4130, 9035, 3849, 8761, 6708, 11691, 27263, 96990, 160858, 64145, 21498, 15221, 16796, 26971, 2934, 31446, 6246, 743, 3278, 5685, 1042, 4184, 3365, 3535, 2248, 1288, 2462, 2925, 1241, 6137, 2138, 2595, 27825, 26135, 2603, 21031, 3493, 4391, 8914, 13209, 233589, 268721, 242936, 52984, 51041, 761, 1552, 697, 1254, 19282, 10059, 17871, 7288, 24548, 6912, 16263, 19499, 6903, 2838, 53806, 10272, 19352, 1734, 3688, 9016, 11076, 17363, 28060, 381, 1e4, 1694, 1272, 4059, 21457, 2919, 149909, 11374, 4401, 78994, 4463, 3743, 1811, 1140, 3565, 3370, 228698, 23463, 6327, 3317, 182974, 1120, 1203, 8248, 1850, 420958, 4872, 2403, 243, 5595, 430, 19345, 6302, 17114, 2582, 397, 6766, 13335, 4430, 981, 406, 299, 868, 1211, 1043, 1786, 1191, 3027, 2882, 1877, 7276, 3280, 13179, 11501, 2694, 1122, 1552, 13856, 1867, 1476, 579, 933, 5079, 819, 1328, 426, 11676, 953, 1512, 7476, 2564, 210, 687, 405, 16104, 598, 135, 5995, 9974, 8515, 2129, 1966, 5634, 971, 4174, 2160, 3649, 1257, 479, 11803, 10876, 1467, 41614, 95356, 1387, 36531, 114, 1569, 2741, 435, 1306, 9041, 1043, 5277, 4757, 1919, 7850, 12783, 3394, 7084, 16666, 332, 8400, 1494, 1477, 4458, 2672, 13460, 3743, 10125, 1492, 9195, 22120, 15050, 7613, 13624, 2032, 6094, 6817, 32038, 103476, 10701, 13390, 3596, 77351, 3097, 1044, 464, 29208, 527, 583, 546, 422, 1970, 3080, 9256, 19635, 5981, 3423, 110, 2521, 9927, 11907, 930, 478, 286, 15600, 37622, 2816, 2184, 6072, 6547, 5380, 30053, 7374, 181824, 2562, 2817, 830, 233, 1550, 601, 6079, 7705, 2472, 6491, 4693, 1484, 1914, 9070, 33792, 58236, 26343, 1785, 482, 499, 8184, 3722, 12019, 7687, 86976, 4595, 2311, 2673, 105786, 187294, 75882, 8499, 1121, 343, 17664, 111, 2267, 7998, 541, 1294, 21177, 3855, 11195, 36367, 1407, 686, 5848, 24597, 141544, 5906, 1492, 4613, 837, 1054, 17536, 279696, 321, 1702, 857, 3516, 2443, 106, 1145, 229, 1115, 3802, 3513, 505, 1371, 2314, 7123, 4559, 5818, 12078, 5972, 16354, 9601, 385, 7361, 22058, 7072, 385, 9484, 6720, 1933, 638, 1223, 208, 1021, 211, 614, 4056, 621, 2136, 2325, 3402, 1645, 289, 156, 2017, 16138, 1725, 4563, 10259, 4765, 318, 7840, 8424, 5182, 4139, 26288, 13781, 20797, 2907, 1593, 20654, 4337, 16239, 13252, 648230, 68624, 8030, 4965, 7505, 1410, 61816, 19470, 1552, 845, 4173, 636, 68, 1261, 792, 124, 907, 441, 15859, 8454, 10081, 10142, 923, 1436, 146, 737, 298, 1607, 3025, 367, 3403, 2781, 17957, 35690, 2921, 610, 841, 10144, 1550, 7355, 70277, 2019, 15830, 13002, 33146, 1134, 5991, 3939, 2576, 7646, 20502, 1970, 2704, 1476, 1252, 2721, 381, 254017, 512, 2053, 186, 67691, 11687, 44888, 3658, 342, 1467, 2e3, 36703, 1197, 25872, 1751, 4088, 2364, 2863, 6681, 4916, 9171, 19470, 4270, 895, 91747, 7028, 9023, 24596, 16438, 5043, 82181, 3071, 99652, 30244, 61572, 202618, 15582, 23653, 2327, 17781, 7174, 3923, 1821, 3768, 22673, 9419, 20268, 19386, 10618, 3250, 3904, 1886, 1184, 1006, 3102, 3733, 187, 611, 718, 19325, 1108, 3632, 2805, 226, 3037, 29021, 9887, 55536, 2405, 1241, 728, 6994, 2548, 7207, 1061, 3757, 2805, 29901, 1277, 3736, 1400, 1287, 4869, 24205, 1077, 7472, 3493, 2218, 554, 1053, 1065, 7356, 5238, 510, 5242, 23331, 6110, 1517, 612, 908, 4018, 64, 6902, 9480, 5097, 281, 1869, 15149, 1617, 4932, 4630, 5241, 1986, 9917, 4869, 1957, 2869, 14258, 22163, 1746, 3751, 2060, 2144, 2286, 1753, 2990, 3254, 1814, 3682, 2998, 11967, 8246, 8914, 37238, 1887, 2102, 24817, 23258, 18895, 3780, 17381, 12420, 50294, 21710, 17940, 2896, 8321, 5572, 20216, 3441, 12952, 10390, 59611, 8900, 23706, 67269, 5451, 1733, 5902, 3949, 7454, 10571, 10113, 9532, 116778],
            r2000: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 953, 751, 358, 2828, 1721, 49906, 2108, 4092, 6658, 24599, 10599, 4913, 1010, 1911, 663, 556, 21499, 50397, 1774, 73567, 12876, 6583, 0, 101310, 17050, 3143, 3365, 4541, 1032, 7584, 8590, 38301, 6769, 3724, 5216, 20170, 529159, 27800, 13076, 5686, 8645, 4526, 932, 5613, 6231, 6661, 7509, 4498, 623, 4429, 215613, 18787, 6223, 4855, 106, 14637, 5390, 8455, 1789, 1146, 8788, 2638, 53445, 731, 5288, 48491, 18575, 105003, 5057, 134531, 26237, 152964, 39404, 13457, 2593, 0, 0, 0, 50010, 1670, 28639, 3765, 1841, 3300, 3553, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16818, 184849, 20207, 180794, 4747, 30658, 0, 0, 0, 0, 0, 0, 0, 0, 2332, 4058, 60467, 4256, 2697, 83117, 75790, 34705, 12127, 6863, 106151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4388, 17236, 4512, 39564, 82368, 11325, 68607, 0, 0, 0, 0, 0, 0, 0, 90310, 0, 0, 0, 0, 0, 21314, 2454, 12618, 0, 0, 0, 0, 0, 0, 115253, 5416, 34135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41903, 177939, 35428, 29801, 0, 0, 0, 12495, 6302, 0, 0, 3813, 7423, 0, 0, 0, 0, 0, 11981, 16255, 0, 0, 0, 0, 16063, 289574, 33972, 55146, 58023, 0, 0, 0, 0, 1599, 45584, 21434, 2215, 3762, 15423, 4423, 13974, 2331, 281, 1845, 8514, 33921, 7299, 8358, 13145, 514, 2381, 4201, 1911, 2333, 6868, 25596, 3687, 46052, 3337, 2799, 6295, 322345, 4212, 1385, 13270, 3954, 2254, 2023, 10106, 3251, 1358, 486, 1126, 11084, 1770, 1072, 1203, 4891, 333, 2392, 18783, 2076, 5538, 1849, 1102, 1196, 13377, 901, 963, 1487, 3156, 1878, 37409, 628, 1096, 50873, 0, 4300, 957, 2247, 63640, 2234, 1269, 3173, 2721, 2891, 2744, 3850, 7370, 659, 2687, 3337, 221757, 475736, 51496, 39083, 4323, 7814, 8448, 4498, 3919, 976, 1874, 2447, 966, 12583, 528, 1822, 6732, 32132, 6551, 15626, 30294, 1302, 351, 4816, 2341, 4588, 4674, 8871, 1834, 801, 101025, 3977, 2024, 1058, 2126, 3802, 2185, 1311, 16377, 6611, 8496, 3655, 12241, 2776, 1984, 1062, 2350, 5243, 3232, 2322, 3207, 2326, 2338, 2497, 944, 3680, 2623, 9861, 1925, 725, 1755, 8766, 2609, 3444, 2672, 2641, 7132, 4766, 2407, 954, 366, 4458, 10157, 5623, 3395, 4612, 1745, 15794, 1739, 2173, 4693, 11768, 8215, 1771, 2296, 24899, 104418, 317, 5975, 23651, 5690, 2274, 3239, 4060, 57574, 1691, 4907, 846, 1049, 2513, 3334, 10128, 818, 139078, 11820, 3918, 6516, 6442, 5925, 1505, 2638, 2056, 2989, 6144, 1268, 140, 4206, 2776, 4879, 4354, 28979, 75050, 4457, 2514, 3265, 1909, 1534, 3463, 2420, 56859, 1894, 18223, 495, 2693, 548, 4961, 10335, 21263, 612, 785, 2925, 1607, 7618, 14902, 1513, 1546, 5536, 2773, 514, 5308, 6668, 12429, 7076, 1352, 39254, 953, 25481, 3819, 26091, 2425, 1850, 4531, 4418, 6480, 544, 737, 9609, 2446, 859, 2748, 974, 14024, 136173, 9838, 26739, 1520, 2691, 4247, 25920, 3758, 1653, 1302, 6652, 888, 18439, 5415, 21797, 4745, 7624, 1719, 1369, 3003, 8271, 783, 2549, 5511, 4245, 3119, 2242, 624, 43320, 687, 509, 2724, 998, 15179, 63529, 22893, 51604, 2120, 1347, 1172, 848, 2903, 3852, 6601, 6750, 1807, 8187, 7387, 2772, 5070, 668, 10258, 2292, 3495, 71493, 2049, 11746, 17629, 5591, 1320, 2039, 2196, 2072, 2363, 1738, 6176, 2822, 2985, 2182, 20633, 1830, 968, 286, 2116, 11611, 4961, 1872, 1426, 2450, 2624, 9425, 1137, 2687, 128179, 974, 23057, 1375, 931, 3208, 2196, 11931, 1901, 847, 712, 1072, 2105, 1895, 629, 2096, 4904, 8301, 95249, 1273, 11378, 2752, 2600, 17062, 1296, 1287, 692, 10040, 642, 5686, 2107, 624, 7443, 16177, 24733, 4236, 1270, 24386, 56054, 12386, 1619, 479967, 43955, 124579, 6168, 520, 496, 286921, 1333, 589, 13235, 4376, 3502, 3594, 2205, 2363, 2672, 55514, 2239, 2885, 1349, 2953, 422, 1379, 2784, 129965, 767, 252, 359, 4082, 5722, 9266, 6158, 3840, 1056, 2774, 9993, 4526, 728, 2542, 62429, 5067, 1910, 2069, 3230, 502, 6527, 1388, 17103, 13580, 2815, 31514, 124, 1246, 3093, 413, 2543, 30560, 2601, 7054, 1203, 16607, 5250, 5763, 1612, 807, 1506, 3112, 7807, 9286, 1714, 13172, 3656, 3417, 2304, 8162, 2562, 235, 390, 299, 4445, 2495, 1909, 1170, 2275, 2774, 1610, 5758, 329, 1040, 24696, 2111, 23483, 478, 15256, 5625, 3386, 5797, 8138, 3622, 64375, 4475, 3243, 1196, 6918, 2461, 1230, 47393, 651, 9599, 7270, 10560, 13834, 1488, 1645, 1733, 2039, 3922, 9158, 17562, 18180, 5947, 4951, 1738, 4706, 6007, 31701, 2910, 608, 4995, 1143, 2121, 6295, 2216, 1607, 1762, 1400, 10599, 835, 1323, 119279, 3001, 2177, 1105, 1597, 2380, 1701, 93724, 1811, 35894, 3869, 1132, 3379, 2464, 9914, 128294, 1006, 9103, 3570, 1234, 81773, 2633, 6084, 4835, 22679, 9667, 4985, 2084, 9076, 2534, 1507, 9775, 947, 3451, 4011, 772, 1589, 7080, 871930, 8699, 20283, 11234, 1468, 9810, 2521, 5469, 3138, 7015, 3482, 1285, 3992, 4178, 937, 3575, 2534, 12412, 1235, 2434, 10672, 2016, 18864, 231955, 3378, 1066, 188750, 6074, 29627, 826, 80296, 8126, 120138, 1466, 682, 3128, 316, 7941, 43278, 69835, 1295, 1798, 4257, 10321, 1361, 3020, 472, 3007, 13666, 708, 41208, 4713, 34872, 4727, 12272, 26102, 2969, 1054, 4225, 1604, 926, 2998, 5014, 1312, 2918, 8372, 134152, 1920, 6733, 98255, 1262, 2830, 1084, 117342, 42045, 141373, 3629, 2064, 2331, 1631, 102171, 2057, 9636, 1977, 1432, 336, 9220, 244, 284, 1122, 4985, 110663, 3026, 1279, 3677, 1573, 2565, 32396, 5531, 1630, 2569, 294, 4964, 17713, 10860, 6614, 4460, 2092, 2375, 1886, 3503, 4067, 5983, 6343, 3340, 40144, 20122, 3344, 736, 12383, 982, 195619, 2019, 3528, 10628, 24988, 5781, 346, 120, 2951, 1708, 9835, 3091, 16648, 1170, 27802, 3138, 1787, 23219, 5795, 12524, 2282, 2069, 2840, 12981, 1772, 504, 855, 1451, 6477, 877, 4497, 210, 1043, 12198, 1220, 15708, 6237, 170932, 11193, 11025, 4245, 6189, 3836, 2350, 5022, 17785, 959, 2941, 6050, 26202, 4080, 15290, 283, 18325, 43761, 2296, 25998, 541299, 8501, 4156, 67188, 3066, 3684, 1088, 875, 7160, 8080, 760, 724, 2700, 1255, 17350, 20113, 6151, 741, 61224, 7165, 56007, 1078, 4472, 3111, 2185, 22827, 9397, 5688, 12288, 3638, 632, 1372, 1619, 16423, 2581, 1080, 61578, 22186, 18855, 4526, 4362, 171585, 2721, 626, 2333, 1210, 2351, 1760, 317, 1744, 1420, 4014, 3578, 3770, 1273, 324, 6546, 839, 718, 1610, 757, 7302, 11803, 33428, 2846, 1968, 13788, 2562, 2850, 2988, 97768, 2857, 47561, 1663, 3369, 1014, 1221, 6904, 1227, 10803, 54070, 14232, 5161, 4980, 18964, 2032, 3725, 7840, 30150, 6836, 67700, 8501, 7959, 5424, 5077, 11575, 122052, 28940, 12696, 21887, 4274, 120988, 9912, 13688, 20049, 21276, 224689, 3505, 9327, 3121, 72114, 1145, 4072, 20167, 4754, 3723, 13486, 34003, 8181, 13807, 25417, 37946, 11546, 7511, 4180, 24879, 13281, 2427, 1393, 5143, 27150, 7284, 11930, 3366, 17862, 6058, 4762, 38827, 25774, 1732, 4306, 3476, 3448, 4847, 3549, 3165, 3199, 3780, 5552, 2798, 12193, 92714, 10535, 23678, 3216, 19948, 4857, 1974, 15852, 1381, 9304, 2044, 1800, 65860, 21108, 80649, 2109, 30028, 35107, 4034, 26841, 3894, 2980, 121756, 6964, 2304, 2717, 3172, 12587, 5248, 2870, 5991, 2299, 3362, 5089, 3348, 3525, 5488, 2706, 16881, 16326, 12033, 1643, 2398, 1423, 8052, 4396, 79927, 39684, 4645, 3282, 54495, 3033, 827, 3250, 13161, 3871, 5102, 9305, 19417, 1170, 5944, 15951, 11512, 9406, 2114, 27212, 2476, 845, 22579, 4951, 20681, 44637, 6498, 3566, 164265, 31157, 3841, 3461, 5843, 3615, 4405, 7849, 7233, 7364, 2304, 39453, 3353, 1159, 4572, 1335, 2300, 3058, 14824, 1899, 24799, 3688, 7632, 6226, 8058, 27948, 9717, 16338, 3695, 3570, 1629, 4503, 883, 6198, 4666, 47651, 5643, 17117, 7397, 950, 69924, 40300, 2414, 11911, 11676, 2883, 6858, 4486, 9271, 7440, 3162, 5437, 933, 359, 5219, 813, 7587, 18073, 942, 7944, 1423, 14628, 4941, 3590, 104870, 3329, 14346, 763, 4901, 15760, 6820, 3214, 6579, 348, 3596, 1922, 107033, 5841, 3358, 38033, 3640, 590, 37847, 11850, 17224, 2808, 9139, 4034, 4043, 5068, 10209, 1293, 1345, 2947, 70426, 8555, 2441, 16200, 2699, 134068, 9109, 8406, 4676, 4420, 7483, 6352, 5971, 63903, 8358, 6345, 4749, 47314, 6988, 13915, 6020, 7352, 8911, 3497, 18291, 3793, 21327, 6589, 26660, 2315, 62848, 15805, 49686, 32801, 16228, 110010, 9457, 8968, 614, 7326, 3262, 3343, 1841, 792, 2560, 11452, 6393, 7141, 2327, 6872, 1515, 3485, 898, 3250, 13170, 9103, 3223, 66641, 24803, 30641, 25688, 12118, 14762, 6698, 84394, 5680, 78703, 28831, 3119, 8685, 9823, 1708, 10896, 3495, 2976, 52669, 21863, 4190, 59178, 6958, 10662, 5702, 9728, 12286, 6754, 9857, 4353, 2237, 9018, 4397, 15783, 13153, 3406, 3899, 36766, 1281, 2875, 6168, 2907, 5675, 14630, 5911, 14688, 2380, 2484, 25273, 80858, 11642, 9290, 37339, 11201, 3729, 4847, 20731, 844, 271, 3597, 1412, 9636, 6580, 3293, 20739, 44009, 14660, 121927, 71273, 28376, 6041, 6539, 6504, 2932, 12064, 3940, 1228, 2010, 615, 15312, 6339, 40417, 2207, 2262, 1624, 5012, 11332, 19043, 3130, 1837, 2749, 20235, 3044, 3837, 8375, 25291, 61378, 1480, 9675, 2118, 3217, 4795, 3159, 4092, 1838, 35846, 8312, 3130, 5743, 18021, 8321, 10483, 2738, 27961, 46623, 7459, 19109, 1628, 4706, 274319, 5913, 30028, 11399, 1366, 5134, 2519, 8709, 3129, 1160, 31155, 8867, 10905, 53816, 14012, 3609, 9970, 4521, 16856, 5347, 124580, 95828, 49987, 11252, 1797, 7514, 19644, 3144, 72254, 2127, 62464, 6641, 35593, 9246, 152731, 23794, 7332, 1777, 12628, 7124, 3417, 204175, 20985, 1924, 5465, 8530, 5784, 35689, 36809, 6341, 87652, 7045, 6922, 2816, 12948, 1504, 1693, 6678, 7093, 4487, 13598, 32491, 15508, 235361, 20848, 2718, 4723, 7925, 3202, 2381, 14720, 17899, 3248, 2571, 4201, 4651, 4105, 52114, 4098, 5768, 15915, 4524, 5023, 1468, 6356, 3487, 6185, 11870, 28614, 62887, 1565, 7732, 52788, 1850, 7089, 1784, 1465, 1349, 4561, 2790, 19966, 448, 140494, 1091, 5756, 2016, 27769, 16194, 29338, 5463, 5519, 3659, 4381, 36756, 10134, 22105, 8701, 6115, 4035, 15286, 8401, 48254, 3008, 32066, 8891, 10053, 19147, 1151, 9490, 7698, 16734, 3244, 141756, 6237, 6734, 1132, 3579, 29853, 2382, 3439, 12111, 4687, 6843, 4646, 2699, 19040, 2384, 20167, 8072, 7066, 5401, 8362, 4699, 5304, 3285, 76996, 4784, 5363, 5426, 3599, 3996, 48441, 1661, 6413, 197862, 5685, 33523, 16105, 36639, 2172, 2414, 4827, 1922, 4897, 4747, 5435, 2037, 10155, 10266, 21920, 20265, 33776, 3792, 4347, 84117, 10994, 2676, 8217, 2046, 23479, 11127, 3524, 5535, 5539, 5065, 17482, 4522, 7611, 25740, 8655, 6335, 1313, 1987, 1745, 2279, 2630, 27006, 160176, 4476, 4734, 2599, 4069, 1267, 7502, 1330, 5890, 7212, 3776, 5556, 1564, 1793, 1128, 2936, 9397, 4031, 1893, 2969, 13029, 3384, 6058, 2610, 13205, 8743, 2218, 26291, 14273, 10545, 5868, 2673, 3414, 7755, 18617, 2756, 63389, 14792, 10966, 15816, 13213, 1591, 7290, 3889, 5200, 6936, 8490, 4051, 59725, 61043, 6873, 2512, 4028, 3220, 4155, 49809, 52862, 7514, 42315, 66842, 18882, 17084, 5186, 4690, 32210, 10717, 5210, 9900, 6440, 3435, 9917, 4470, 17478, 8475, 4986, 138491, 2190, 5671, 5254, 2470, 13770, 12625, 10027, 86587, 6732, 11824, 66605, 1343, 6458, 3879, 6866, 3571, 13162, 3873, 2646, 8068, 3169, 3150, 6151, 1571, 4687, 5468, 23468, 12158, 3033, 4092, 5857, 8990, 3381, 3198, 768, 6371, 20758, 16826, 13466, 10435, 4970, 29404, 4079, 4019, 3154, 2114, 83674, 4739, 2529, 2275, 4784, 6953, 28197, 4319, 1831, 26106, 1530, 7613, 8788, 45350, 1250, 6550, 2216, 2460, 4232, 58543, 133033, 6796, 4706, 14656, 104209, 4802, 4619, 6409, 12325, 16004, 36398, 5684, 22982, 43804, 3269, 534542, 4974, 2964, 68554, 17139, 3968, 1280, 33277, 12257, 26037, 6767, 37349, 13617, 12485, 5750, 6975, 16777, 4582, 21087, 6119, 6402, 6282, 7016, 10892, 2411, 28891, 6910, 19204, 3417, 9540, 14817, 192099, 11666, 8243, 20013, 1560, 706, 15440, 25485, 1174, 3451, 18858, 18019, 6752, 9796, 2935, 12095, 6064, 1460, 1858, 2388, 980, 29064, 14988, 10033, 18779, 29841, 4858, 9339, 100959, 4910, 8963, 10070, 7952, 5268, 3546, 3992, 630, 4122, 4271, 8569, 9538, 3876, 3353, 12102, 2992, 6313, 3277, 2406, 7294, 3118, 2436, 24071, 4835, 2169, 2202, 142494, 5564, 18994, 2785, 10677, 27956, 10438, 2029, 13682, 27601, 10074, 145052, 35363, 4783, 8647, 18054, 4349, 5937, 5096, 9590, 3761, 2623, 47581, 3698, 33482, 23224, 34620, 78587, 24081, 12906, 6190, 33571, 41152, 3106, 3764, 2175, 5945, 2395, 4020, 3346, 5391, 15551, 8540, 5218, 41162, 133105, 5571, 38330, 5300, 21768, 15494, 93545, 46670, 111066, 119291, 22433, 105684, 14204, 9855, 30138, 12837, 1165, 11176, 28271, 5333, 4054, 2984, 850, 6588, 22150, 4635, 29562, 7367, 4221, 3069, 6790, 5451, 10240, 28647, 6380, 17940, 13533, 10071, 9703, 5153, 2554, 5897, 1425, 16440, 1955, 1887, 675, 26172, 28001, 1383, 2461, 1537, 100080, 5370, 36245, 36946, 47624, 11436, 8485, 18382, 8785, 20218, 1928, 10226, 9635, 7142, 8523, 2855, 1023, 3851, 12518, 139278, 21701, 12596, 14993, 33447, 5319, 3572, 5362, 31876, 706, 9011, 2224, 15401, 5101, 14459, 9247, 3881, 22016, 5585, 2303, 3161, 2531, 9242, 29305, 6226, 7464, 3920, 6601, 5979, 1877, 9647, 6136, 2077, 3026, 42299, 25194, 50374, 5933, 44014, 3994, 27467, 6953, 8556, 34645, 1226, 2968, 3835, 1229, 8526, 2047, 33203, 4450, 35827, 967, 8961, 3522, 19358, 9938, 10518, 2699, 163491, 2382, 4838, 5601, 32983, 6254, 1074, 5424, 366, 52328, 1937, 55492, 28534, 18060, 115900, 8679, 2720, 48318, 15342, 25901, 47396, 18142, 145623, 3960, 11184, 1280, 226954, 9765, 141266, 14879, 15244, 3162, 1187, 5529, 1566, 6660, 1766, 2940, 13595, 4359, 3639, 9607, 8133, 5872, 1603, 2912, 1048, 16055, 2036, 4455, 9229, 4034, 5565, 10809, 5074, 2667, 5153, 2230, 7661, 23192, 6722, 4647, 1659, 6188, 14054, 2065, 6126, 4763, 2084, 15943, 1269, 7452, 56372, 7734, 16153, 4270, 17381, 10248, 34244, 6305, 5245, 10266, 3749, 24796, 5256, 25561, 6050, 6106, 3370, 38901, 3525, 18844, 1826, 1593, 1529, 2446, 4844, 1762, 17331, 1588, 11434, 3804, 8617, 4084, 3333, 3600, 10066, 3719, 5988, 1694, 10715, 1458, 5851, 31537, 10113, 600, 35096, 3294, 957, 16341, 2437, 966, 10408, 1915, 16799, 11473, 5795, 27504, 9941, 4521, 6113, 58229, 9400, 23132, 9661, 27137, 23265, 6103, 2388, 4564, 14147, 18192, 96605, 3574, 3926, 8718, 5378, 4236, 3375, 1807, 1320, 14462, 4427, 3866, 6180, 10206, 5972, 6859, 8729, 1797, 1317, 2559, 1526, 2797, 1351, 2626, 1538, 3657, 4850, 3894, 1956, 4273, 7385, 3769, 5461, 4551, 42453, 3547, 3411, 2219, 5344, 1688, 14745, 3321, 9621, 1666, 7705, 20789, 3654, 3161, 1405, 1329, 2128, 5199, 1796, 11721, 18979, 30959, 6263, 5587, 4408, 28922, 5060, 10773, 1371, 33042, 3753, 5890, 1062, 2902, 1258, 11198, 1570, 62852, 9202, 23249, 12219, 21853, 42304, 3353, 2529, 3411, 13619, 3867, 2561, 4878, 4195, 1759, 1678, 5018, 2254, 5730, 44441, 3545, 16462, 3259, 114139, 3191, 2657, 13351, 12703, 12239, 24200, 240992, 4377, 4534, 12028, 5518, 3740, 15548, 13755, 10410, 2988, 11244, 1862, 55866, 11836, 5540, 3421, 15716, 22150, 8080, 6037, 198914, 3677, 8741, 4909, 2295, 1824, 5460, 4415, 137810, 15364, 7714, 11345, 5900, 2488, 4977, 4956, 10531, 11248, 15427, 1553, 52459, 223021, 7215, 33445, 8549, 2388, 3709, 3246, 7793, 7727, 1936, 2245, 8999, 4718, 7127, 1437, 1430, 1346, 29648, 11586, 4398, 7537, 8588, 3789, 22172, 10495, 3011, 4760, 20734, 3975, 11290, 12827, 10593, 7360, 2793, 19157, 5381, 6560, 8286, 4377, 3746, 24327, 3336, 21804, 8983, 5772, 9220, 27660, 47129, 9824, 62151, 4710, 53631, 54802, 3082, 7347, 5129, 105836, 49027, 37753, 19561, 3451, 7842, 3145, 109792, 17995, 3473, 6099, 1518, 12326, 20428, 12966, 1484, 4567, 3239, 5019, 40952, 79921, 83678, 47603, 23885, 1996, 1884, 1970, 6607, 2169, 12173, 3654, 1311, 17744, 19098, 3285, 5831, 5042, 1628, 32704, 17337, 46101, 18466, 4627, 1580, 2817, 10176, 2912, 59558, 3384, 19202, 28426, 6266, 3487, 4218, 5732, 9805, 3648, 9444, 6430, 6531, 6037, 22306, 4127, 1433, 4154, 10837, 1965, 8657, 993, 2914, 1384, 2387, 3594, 8069, 9187, 8141, 6465, 40460, 5741, 11849, 47957, 73342, 8892, 4114, 17315, 3674, 7081, 12795, 2675, 58095, 1704, 12476, 13863, 15022, 13699, 13706, 9427, 938, 3423, 14456, 11225, 4962, 14574, 9972, 12540, 3606, 3389, 5334, 2348, 23174, 8765, 25815, 7878, 1720, 2298, 6145, 2301, 2280, 13546, 5148, 11448, 3285, 3333, 4210, 4187, 8794, 58807, 7358, 11713, 2844, 6600, 2951, 2940, 2510, 4314, 49675, 202181, 9420, 41168, 24705, 16708, 6087, 1638, 1730, 19832, 3862, 2880, 3676, 3411, 1091, 3145, 8240, 1818, 3369, 4617, 4284, 10787, 7297, 10606, 3402, 4984, 4946, 19882, 17995, 36503, 9054, 6582, 4687, 10184, 38129, 4095, 7301, 35387, 5300, 3044, 2258, 11005, 15845, 82751, 14258, 10358, 9111, 8238, 21253, 3702, 9533, 4667, 2750, 2663, 4154, 11993, 5096, 4273, 12667, 781, 3740, 86851, 21684, 4895, 75790, 2200, 3024, 11987, 5754, 2428, 34008, 62112, 9749, 23830, 48821, 4117, 2131, 37180, 13393, 15038, 12531, 51747, 1561, 6691, 7254, 8874, 4206, 11502, 7492, 24681, 12657, 78153, 96721, 34654, 19549, 12597, 14799, 13793, 1995, 18092, 4959, 639, 3122, 7350, 1947, 5554, 4242, 662, 5153, 1935, 3124, 5165, 2582, 7993, 1588, 3472, 18893, 12248, 1938, 13991, 3934, 2913, 4626, 11404, 122919, 127468, 159659, 29295, 39172, 3224, 4926, 2220, 2469, 21361, 10321, 20331, 8711, 28651, 5847, 16486, 19657, 2667, 2999, 17930, 4943, 19494, 2416, 2415, 8223, 8342, 19064, 41742, 1466, 13580, 2582, 1613, 5413, 20351, 1961, 148602, 10742, 4608, 28555, 4213, 4833, 2521, 2212, 4460, 3416, 201037, 26548, 7329, 2808, 87669, 1090, 2858, 7668, 1804, 225657, 5307, 2750, 739, 6718, 679, 16555, 3721, 15091, 3308, 1057, 6441, 10684, 4845, 1682, 1057, 812, 1590, 2885, 1731, 2235, 1480, 3272, 3733, 2137, 7134, 2977, 8395, 5578, 1550, 2039, 1370, 16963, 2891, 2984, 1178, 1634, 6993, 1257, 761, 904, 6299, 1176, 2765, 7895, 1605, 611, 1172, 1077, 15875, 920, 650, 6932, 8871, 8602, 1808, 2472, 6108, 1216, 2465, 1941, 3523, 225, 1295, 8169, 9557, 1896, 35620, 67219, 2349, 21474, 394, 1055, 3452, 826, 2760, 9060, 1074, 6031, 3929, 1826, 7609, 10937, 3380, 5854, 11712, 709, 11241, 2430, 1466, 8424, 2237, 9545, 3480, 10026, 1353, 8161, 28162, 10257, 9384, 18565, 3546, 4042, 7018, 33922, 77539, 6950, 9369, 3392, 35420, 4695, 1853, 443, 23954, 1124, 703, 1430, 837, 3144, 2967, 9811, 12577, 5529, 1709, 651, 2879, 8706, 9512, 1513, 1080, 698, 22467, 33536, 2598, 2088, 5223, 8197, 5520, 22163, 3005, 118431, 3076, 2151, 1272, 633, 1957, 1181, 6780, 6769, 2142, 6958, 3912, 2797, 1734, 9003, 39494, 34287, 23861, 1623, 1112, 1237, 7526, 3660, 8346, 8152, 69256, 3755, 2912, 2404, 89299, 109615, 39924, 11299, 1033, 750, 18164, 573, 3156, 5799, 1450, 2294, 15240, 3758, 10535, 28883, 2606, 1523, 8512, 16873, 86091, 5356, 3279, 7836, 629, 1245, 14988, 83677, 827, 1410, 1488, 1651, 3008, 316, 269, 707, 1103, 6387, 4999, 820, 1488, 3005, 10577, 4136, 3038, 9848, 3266, 11225, 15830, 982, 8594, 16408, 5775, 679, 14140, 6815, 4353, 1727, 1948, 860, 1971, 541, 655, 5488, 694, 2392, 3099, 1493, 2500, 708, 344, 5806, 22519, 1836, 5278, 9548, 3972, 1061, 8945, 6727, 5125, 4909, 38367, 16980, 19193, 2376, 2723, 20790, 3967, 12835, 6095, 273171, 46427, 7727, 4557, 8782, 2224, 57443, 16251, 3440, 1078, 4523, 1582, 254, 1097, 1348, 405, 1031, 1073, 15035, 7663, 13304, 7810, 1758, 1122, 369, 1639, 698, 2656, 5578, 752, 1416, 2831, 16813, 32402, 5187, 740, 1610, 13997, 2032, 6840, 51502, 1295, 6930, 8911, 20921, 1528, 12458, 11962, 8096, 17325, 32864, 1867, 4197, 2700, 618, 4623, 1063, 141235, 924, 3542, 243, 65041, 10310, 40320, 7071, 1313, 2777, 3699, 80600, 1770, 52186, 2423, 2478, 2147, 4995, 24889, 8009, 10968, 36339, 3038, 1317, 39073, 13814, 5573, 59193, 20421, 4924, 78162, 7862, 89128, 38086, 73171, 152460, 4770, 38682, 5611, 30068, 12186, 6945, 2873, 9326, 32256, 9961, 15449, 40872, 16408, 4589, 4036, 2731, 2468, 3078, 3384, 3662, 938, 1794, 1419, 12942, 3720, 5363, 2988, 592, 5188, 28231, 7221, 46807, 2548, 2899, 1476, 6138, 5692, 6212, 2859, 9884, 5618, 15825, 1612, 4336, 2011, 2552, 5120, 18833, 2764, 5454, 4347, 1984, 384, 2399, 4242, 5625, 10804, 955, 5260, 34838, 6087, 1513, 2289, 2886, 3968, 311, 7849, 9339, 8305, 584, 3277, 10306, 3113, 6327, 7885, 4517, 1903, 8172, 7276, 4600, 3257, 8446, 25359, 2326, 6870, 3530, 3387, 4487, 2283, 10203, 2662, 2220, 3838, 4087, 8689, 7958, 4456, 23967, 2207, 1631, 13214, 22358, 12732, 3842, 10876, 10852, 39460, 17803, 11835, 3152, 5002, 3670, 13274, 3345, 12980, 8822, 26105, 6746, 16449, 54258, 4172, 1564, 4883, 3038, 7461, 7643, 6459, 7329, 87250],
            hhi: [47981, 67703, 60776, 73004, 40909, 54375, 65750, 0, 72500, 84e3, 60383, 52214, 33712, 55217, 68517, 53899, 59596, 60800, 37955, 66598, 62024, 61695, 0, 57454, 0, 75517, 72917, 24496, 21707, 41453, 43719, 42949, 43280, 51786, 37094, 45450, 64752, 45189, 41145, 30493, 24441, 40163, 19959, 61274, 58317, 35940, 79845, 63989, 62531, 41806, 70093, 54996, 28813, 47483, 40668, 25882, 43205, 49138, 31879, 66764, 43258, 41594, 56353, 51444, 31264, 36684, 47324, 43159, 36571, 24388, 44352, 42927, 53263, 60493, 37020, 4e4, 40278, 47048, 48767, 36993, 35087, 48333, 43072, 42179, 41148, 22881, 29186, 66655, 39611, 65607, 30144, 41429, 47559, 47492, 48175, 38339, 50138, 46328, 53242, 37468, 34645, 59555, 0, 0, 0, 46477, 46445, 47341, 37466, 39429, 37039, 39178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63716, 45258, 34946, 49536, 37298, 42011, 0, 0, 0, 0, 0, 0, 0, 0, 41794, 37408, 58106, 35979, 32312, 49388, 58971, 45196, 43079, 35737, 50014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45235, 41783, 53301, 62663, 44400, 40431, 44228, 0, 0, 0, 0, 0, 0, 0, 43946, 0, 0, 0, 0, 0, 48437, 36490, 48090, 0, 0, 0, 0, 0, 0, 49523, 41126, 40644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61185, 51694, 45037, 37933, 0, 0, 0, 42693, 54730, 0, 0, 51725, 47666, 0, 0, 0, 0, 0, 60961, 39200, 0, 0, 0, 0, 53821, 43605, 53210, 40339, 47812, 0, 0, 0, 0, 42083, 43170, 46189, 32213, 37762, 57158, 56886, 52696, 26742, 63478, 42200, 39245, 56041, 37484, 41654, 33189, 34081, 38843, 44216, 49146, 37207, 36509, 46875, 41127, 44142, 33623, 39036, 41969, 47974, 42140, 47073, 38137, 43452, 43540, 53225, 42247, 50702, 44656, 45595, 35549, 52067, 40300, 52566, 42273, 43089, 39712, 37180, 48728, 38168, 43311, 37938, 42009, 37220, 56290, 36297, 32962, 33940, 42114, 39735, 55596, 55972, 36412, 64839, 75590, 42941, 47125, 60426, 55658, 48545, 39975, 33284, 25583, 37117, 35441, 44594, 47696, 51111, 49309, 37102, 55845, 63069, 71304, 58559, 51915, 42890, 44403, 56565, 54599, 36295, 52239, 40808, 29219, 61107, 61184, 41396, 40442, 53071, 37469, 37491, 39711, 38015, 37222, 47689, 42800, 40778, 44018, 42849, 42388, 37031, 51878, 45559, 43167, 43980, 55514, 51303, 35833, 42794, 48684, 60539, 40603, 44085, 51557, 42986, 40428, 39226, 43410, 46457, 44278, 43431, 49493, 42909, 48133, 39310, 46556, 41927, 35165, 49523, 48444, 39159, 38875, 54758, 40870, 30620, 46748, 40419, 41228, 43040, 45657, 36733, 33750, 43750, 43910, 103643, 27997, 48277, 53364, 42455, 42639, 32565, 49104, 39505, 36335, 35556, 43374, 37894, 46252, 36389, 45622, 61340, 41095, 39753, 31083, 42401, 36333, 36308, 40350, 42311, 45714, 44379, 35218, 48899, 49063, 42916, 37002, 49506, 44543, 50454, 49459, 38314, 44595, 43817, 40497, 62039, 48277, 27926, 40820, 41611, 47507, 43182, 68280, 55835, 55877, 48068, 59889, 40221, 39836, 44635, 45625, 57365, 41570, 44848, 34055, 40589, 28488, 36591, 46583, 36657, 30643, 49612, 42947, 39940, 34383, 40636, 43032, 39375, 37785, 46869, 22647, 31929, 39574, 54882, 41642, 38702, 54086, 49414, 50050, 65204, 60877, 35691, 40048, 32452, 39188, 51579, 34196, 43953, 38832, 39698, 44318, 39301, 30385, 38503, 75348, 46807, 43367, 38111, 46393, 44560, 47013, 41967, 41514, 35750, 36921, 45813, 50936, 57794, 52824, 45288, 39144, 44745, 42336, 40879, 46604, 37148, 34937, 41830, 42364, 43729, 42105, 40607, 46139, 36354, 49464, 45606, 50069, 41431, 63274, 45815, 68409, 52135, 35848, 52950, 40372, 43164, 38045, 31082, 53708, 41629, 48683, 42282, 45411, 31335, 37784, 39615, 28773, 41437, 60078, 42491, 33325, 36766, 41437, 32750, 37474, 32677, 34556, 43267, 40261, 49582, 47033, 37525, 52133, 67389, 35240, 41458, 30417, 25974, 46574, 43559, 40843, 44599, 33441, 70147, 69828, 38702, 26951, 80504, 39712, 57077, 28038, 34906, 44404, 40703, 47120, 41107, 45230, 32841, 38631, 33608, 47713, 42386, 39159, 47124, 38090, 47481, 31914, 37524, 37361, 39216, 45831, 39946, 35096, 31679, 45260, 40996, 43960, 46801, 48833, 42213, 43101, 41398, 35346, 36301, 39785, 42562, 39774, 48696, 55054, 40672, 45521, 79461, 41548, 52222, 55306, 46130, 33813, 40085, 42794, 37228, 45682, 35808, 37198, 44510, 50849, 38286, 43583, 39797, 42898, 32e3, 42010, 36798, 73733, 44732, 24392, 44145, 34142, 43111, 46590, 44103, 53587, 41103, 48076, 56422, 36118, 40089, 41678, 56447, 49672, 33286, 37500, 39515, 33859, 42108, 44144, 44012, 42314, 39836, 54945, 83889, 50425, 36814, 35500, 32147, 43218, 44958, 39293, 62159, 39779, 46430, 45622, 37907, 37446, 42004, 50881, 60590, 48187, 50517, 47462, 44596, 38624, 41398, 44443, 37058, 43250, 34063, 39e3, 41867, 46743, 42717, 40368, 45202, 45e3, 38588, 61940, 48250, 39048, 46849, 34383, 39482, 25196, 34752, 35483, 40059, 37820, 41125, 52895, 66866, 39049, 49237, 31764, 32322, 27549, 34096, 52688, 38220, 36966, 48433, 46397, 44425, 35295, 66583, 42469, 29943, 42590, 37580, 49510, 44876, 30184, 42482, 31895, 39035, 41683, 42403, 39498, 36339, 39423, 37908, 36029, 36360, 56106, 35087, 42043, 37759, 54971, 41127, 45859, 69384, 51759, 42534, 41610, 37717, 46116, 31761, 47848, 58341, 47464, 41373, 46739, 41546, 70152, 37847, 56268, 58036, 64902, 60433, 48917, 54341, 41421, 37230, 36413, 60489, 38385, 34387, 34459, 34259, 41117, 43672, 38015, 32055, 35458, 32985, 60530, 42375, 50317, 55476, 39491, 46039, 55207, 41828, 41277, 53853, 58346, 48379, 65771, 44377, 33459, 43542, 47493, 41969, 45221, 48318, 45162, 39435, 36135, 39257, 37861, 44343, 57768, 44175, 46629, 86850, 44551, 65253, 55186, 85648, 39200, 66075, 30058, 37222, 49356, 74659, 35461, 43944, 74447, 41071, 42375, 52720, 47374, 52354, 37823, 52500, 38393, 78032, 43750, 48618, 44808, 89268, 49098, 43759, 43844, 34588, 39413, 50174, 46658, 37931, 42490, 38154, 31186, 35838, 40451, 45613, 29832, 59730, 56927, 37292, 41105, 46435, 46430, 7e4, 78385, 48016, 43889, 42286, 52824, 70622, 44381, 44089, 50814, 34797, 45192, 45181, 50625, 34219, 41295, 53430, 47089, 33969, 58393, 64098, 44084, 64502, 52067, 40961, 41616, 38134, 53438, 44623, 57443, 43524, 36357, 36619, 49743, 31179, 42500, 29811, 43642, 39866, 44e3, 38725, 43290, 51310, 36519, 54737, 43074, 49234, 56439, 48789, 61854, 44128, 50445, 42395, 47750, 61563, 50891, 37260, 40378, 48699, 39148, 47e3, 42971, 40105, 42909, 40089, 43074, 38685, 43286, 47225, 50090, 55487, 33627, 24388, 38189, 39909, 58080, 37625, 68750, 43783, 66399, 36981, 39655, 40340, 51597, 56258, 60721, 67038, 38882, 56379, 39573, 44247, 36900, 65948, 54224, 37047, 46621, 54954, 39568, 58555, 58409, 42550, 59271, 55087, 57121, 74344, 53026, 45713, 51094, 43125, 59481, 39375, 36323, 35286, 40749, 34808, 43958, 47171, 35383, 50944, 60097, 78958, 43058, 45501, 71337, 99198, 30430, 60876, 39871, 57992, 40699, 39004, 57699, 55135, 55656, 61400, 44695, 66525, 42393, 45469, 33455, 42923, 38035, 41818, 46378, 40355, 58004, 38076, 37708, 54518, 42083, 42665, 45453, 38750, 32016, 47639, 36702, 46134, 48594, 32593, 39261, 67365, 41181, 38709, 42022, 41442, 43763, 46138, 51799, 45282, 44521, 44823, 44228, 43039, 56068, 58719, 35935, 54666, 36017, 40292, 61525, 56491, 41181, 35446, 42044, 43851, 41163, 38621, 26582, 47540, 44892, 30969, 32816, 49894, 32665, 46749, 43710, 30320, 34030, 50855, 40038, 55291, 55366, 39775, 51103, 40376, 78948, 39545, 79897, 50484, 51705, 57561, 46911, 38589, 29369, 70331, 44433, 42586, 53877, 34506, 38101, 37191, 42311, 37573, 36948, 65663, 56679, 50717, 37409, 32456, 59418, 34448, 33324, 33174, 45492, 39386, 47396, 46278, 33087, 40178, 29181, 97900, 43725, 44349, 25950, 28280, 33054, 28484, 26005, 30092, 29290, 30143, 34387, 34946, 34846, 38797, 46830, 42666, 40487, 36790, 44470, 41756, 40143, 42345, 30784, 50689, 28022, 37902, 75825, 57809, 69321, 36449, 63012, 39823, 46288, 50876, 32247, 38513, 63219, 40192, 27720, 32619, 27428, 38036, 36176, 37344, 54916, 35760, 51944, 41617, 37062, 41014, 49945, 39319, 62348, 45559, 46544, 35828, 30994, 28066, 55486, 50998, 56094, 67855, 30738, 31236, 47469, 28324, 22097, 35808, 68594, 50139, 48055, 42587, 47368, 29740, 36836, 47450, 33625, 44120, 38354, 49745, 34732, 29087, 41256, 30732, 48618, 72129, 57530, 41222, 53996, 60889, 40512, 45108, 33965, 36575, 42475, 35277, 42377, 48210, 28447, 43253, 41488, 31358, 38818, 39722, 41558, 46364, 51135, 38133, 33652, 50909, 68253, 40864, 44645, 52994, 47744, 50752, 24726, 31727, 25338, 29103, 24150, 32481, 34593, 68380, 36637, 48837, 35685, 44205, 71321, 43142, 37393, 44064, 38959, 73244, 52079, 44694, 41100, 65132, 31382, 47792, 31043, 25708, 37340, 35422, 62242, 58526, 43481, 40916, 44442, 73903, 36741, 76241, 56709, 32894, 50337, 37149, 35813, 39224, 73593, 36191, 64171, 28912, 41529, 36262, 81027, 38646, 53213, 66320, 32419, 51089, 44928, 34253, 54110, 43160, 38257, 42240, 37095, 27907, 47976, 31965, 41310, 50135, 48714, 43317, 46318, 52742, 41989, 55294, 34953, 38615, 38580, 34766, 51025, 41372, 45025, 71084, 53370, 36861, 46685, 45808, 48093, 46454, 40990, 48992, 40038, 44016, 64847, 40582, 61550, 32902, 66333, 62407, 54955, 48907, 60317, 49964, 48248, 64153, 47678, 45264, 32390, 56903, 30543, 30205, 40796, 29994, 32408, 56789, 44666, 48416, 37988, 44592, 50966, 31960, 27186, 50721, 39178, 45818, 36606, 43483, 54885, 64090, 46446, 41377, 42853, 30439, 45676, 38341, 55095, 40658, 46546, 47323, 32169, 43450, 49164, 32079, 35239, 69838, 49120, 40837, 41059, 34044, 42967, 39586, 39844, 47058, 43533, 45338, 51440, 29803, 35282, 39760, 39456, 55546, 46026, 41636, 56756, 30193, 34347, 39543, 34027, 55676, 36422, 38550, 44650, 29729, 33953, 47322, 47689, 39812, 41286, 49687, 45930, 32539, 32430, 93065, 33873, 22188, 38522, 25237, 50171, 34864, 45426, 76574, 56878, 40543, 74828, 53470, 42363, 37237, 38948, 33608, 52990, 40422, 36155, 33834, 31429, 27462, 81055, 42444, 53674, 50457, 43005, 83347, 32247, 46235, 80847, 41825, 47798, 39515, 43954, 43090, 47702, 68333, 61088, 48500, 45682, 50820, 39075, 28376, 32314, 26857, 31283, 43257, 42396, 40114, 41904, 37936, 38508, 43157, 42989, 34720, 55188, 65100, 50864, 59585, 25131, 35968, 66390, 39543, 40670, 43218, 27578, 42857, 35032, 64297, 41450, 22333, 74996, 64724, 65890, 47198, 40579, 42443, 81096, 39728, 80053, 39207, 93373, 75906, 71260, 45266, 33506, 36209, 48930, 36772, 76258, 26441, 60976, 31781, 54766, 35247, 81708, 54292, 30326, 50794, 45488, 41343, 35363, 48234, 49070, 38733, 36160, 48367, 30686, 42625, 42669, 41406, 57494, 65603, 47403, 31347, 39191, 27909, 23876, 36847, 35797, 31635, 40249, 46190, 42752, 47961, 56529, 32202, 34183, 48958, 40455, 30134, 49216, 51380, 44167, 42698, 47955, 38785, 40435, 42680, 40508, 33470, 39137, 24191, 31353, 32106, 52585, 39915, 28809, 34086, 76425, 60114, 38574, 34705, 91098, 62117, 41163, 42182, 35182, 33196, 48297, 36198, 43311, 26250, 65522, 31963, 35202, 40073, 87605, 41066, 82216, 34145, 50571, 36739, 47404, 47258, 52871, 38066, 46722, 46894, 36926, 55427, 39485, 44794, 43406, 46117, 47694, 36880, 38137, 31836, 39312, 40438, 41476, 43612, 44705, 37190, 46707, 38265, 28728, 48962, 30878, 42927, 31173, 30629, 43090, 45888, 27688, 50217, 43200, 40032, 35887, 40039, 40853, 41161, 53470, 50279, 41619, 67767, 40092, 32311, 29375, 30968, 36118, 82534, 23491, 33685, 49087, 39599, 56796, 46593, 87908, 28097, 42067, 50710, 46068, 34777, 41055, 42962, 35e3, 37146, 49343, 42677, 38266, 51925, 38670, 40674, 45668, 36813, 36556, 47333, 30445, 41331, 52361, 45817, 34250, 38226, 32780, 49930, 44417, 74352, 59446, 35215, 60522, 55030, 37062, 37978, 31390, 31488, 49562, 47372, 41983, 46941, 39635, 25993, 20910, 28122, 27157, 56537, 55093, 31968, 34235, 21676, 29908, 32450, 41372, 44741, 54321, 25129, 28865, 36787, 38891, 21493, 28811, 62354, 42133, 49238, 42568, 41123, 45177, 39722, 30222, 27019, 47202, 51502, 32558, 48723, 44435, 40818, 46453, 42198, 38003, 34057, 48667, 41269, 41268, 34381, 35335, 97440, 54944, 44497, 43411, 32039, 33901, 50141, 103273, 77010, 45760, 72664, 55125, 50651, 37661, 33066, 32940, 100980, 49262, 46459, 34132, 42388, 39500, 53463, 33887, 39345, 36312, 32743, 45244, 29155, 40516, 27356, 29911, 52018, 38320, 45887, 54788, 43148, 39807, 45408, 23125, 38565, 31792, 33732, 35593, 43478, 57690, 36989, 55296, 41323, 59326, 35378, 29602, 37120, 54726, 44178, 39233, 37021, 51961, 33716, 34327, 33155, 52257, 30522, 49230, 41224, 33438, 38596, 39807, 35703, 61629, 21928, 44285, 27361, 43635, 64618, 31259, 27441, 32806, 51485, 47479, 50240, 44184, 44503, 42632, 22178, 34985, 40078, 81686, 34008, 40859, 40185, 33456, 36429, 55658, 63959, 31332, 40205, 37747, 83456, 40696, 55752, 34905, 55733, 90838, 49747, 43632, 54487, 55275, 31870, 53942, 41434, 42101, 66791, 54002, 45347, 24038, 83089, 59441, 51507, 33263, 66193, 40511, 49719, 33407, 31927, 53128, 34560, 36422, 33942, 56729, 36856, 44554, 40404, 34863, 54430, 32769, 54769, 29642, 44480, 44280, 43603, 41228, 39469, 34796, 29706, 35096, 55779, 37882, 26194, 34406, 38924, 37130, 75173, 40028, 43558, 42788, 39354, 70299, 43245, 48506, 39955, 40639, 48415, 43943, 44502, 42315, 39196, 56843, 36251, 45664, 44713, 49378, 58028, 29980, 31604, 26946, 27254, 30211, 84315, 36977, 35606, 34934, 37230, 37529, 34689, 40093, 46623, 41309, 43326, 37343, 35661, 38798, 63244, 32716, 30641, 63770, 34025, 46014, 22779, 40380, 43256, 31967, 29451, 41894, 54916, 47494, 45352, 53213, 30820, 36464, 58016, 37480, 34399, 52105, 52292, 39588, 30380, 44644, 31135, 39957, 51020, 51046, 62474, 53183, 44392, 33542, 49120, 42954, 39369, 47162, 38750, 35838, 29586, 35901, 30621, 29636, 39049, 38405, 40372, 64434, 75064, 42540, 50974, 58799, 88825, 64886, 77615, 71217, 96747, 82265, 40894, 59620, 46682, 49509, 42664, 56573, 31776, 49780, 50447, 35912, 38379, 29299, 22222, 34140, 41022, 31081, 54152, 27797, 54737, 34107, 53088, 47624, 43889, 43632, 32791, 42139, 44542, 35392, 31559, 38887, 32414, 31912, 26922, 34492, 30019, 30789, 30954, 47016, 39574, 40733, 32155, 32666, 84741, 34938, 34264, 44457, 56090, 41305, 39523, 42466, 45232, 39194, 36250, 43457, 40338, 36142, 45474, 34881, 46337, 56184, 37058, 79619, 52562, 48327, 51619, 57584, 43800, 40523, 47955, 63386, 32215, 39408, 35071, 37294, 31262, 49750, 38802, 40849, 66549, 24724, 30458, 34745, 30845, 40014, 44167, 34538, 30779, 39885, 38420, 50231, 30459, 39026, 31552, 43686, 38887, 48562, 46226, 52232, 35644, 53855, 43900, 49716, 55800, 37294, 45262, 33029, 41544, 44805, 44891, 45692, 32538, 44468, 33143, 42871, 20081, 33852, 45012, 49354, 42253, 39610, 26944, 43215, 35560, 37176, 35765, 54028, 36739, 30129, 37588, 21360, 42224, 21375, 53541, 52356, 42570, 54765, 44415, 34242, 71274, 41654, 48375, 58762, 38387, 76380, 45255, 52659, 24169, 93613, 42603, 51303, 53345, 51690, 37845, 31581, 41343, 27950, 44757, 39075, 39574, 39167, 38457, 37281, 39669, 38280, 59811, 29051, 37536, 37522, 45287, 30598, 42674, 46170, 45873, 46822, 50075, 43692, 25173, 30235, 43041, 44338, 38592, 44668, 50693, 49673, 48828, 51526, 38481, 40720, 37395, 19906, 61052, 32262, 41103, 81947, 46872, 38985, 36927, 46155, 56038, 43484, 38144, 51112, 50141, 37789, 50777, 40935, 55286, 31176, 32358, 34993, 87832, 33865, 60678, 40214, 34545, 38696, 45194, 36458, 32059, 43824, 28833, 43240, 51946, 61210, 40977, 36077, 31076, 39486, 35595, 27439, 49195, 43304, 49462, 44627, 54232, 45964, 24304, 43673, 30177, 31571, 36017, 25986, 35277, 41700, 25649, 40225, 38406, 44276, 53298, 44538, 33816, 47216, 48433, 37539, 42573, 40097, 42689, 56733, 42846, 49557, 37572, 42318, 43410, 43567, 41186, 35414, 59331, 79574, 32178, 54307, 36399, 41186, 39096, 43394, 32902, 36571, 32131, 36027, 34419, 46396, 27607, 27686, 29268, 35737, 32928, 30494, 30288, 27515, 30592, 50717, 56053, 46597, 47078, 41937, 42489, 54257, 31352, 115574, 64946, 45209, 39115, 34647, 42079, 41630, 22643, 62034, 35425, 39194, 51482, 33703, 35289, 33909, 29964, 35705, 33407, 38375, 29667, 39231, 40346, 30439, 51649, 42817, 43596, 37038, 44217, 35150, 51035, 45240, 40498, 36467, 39540, 30763, 41770, 26521, 69523, 48063, 45333, 45268, 89218, 55008, 39783, 32158, 31212, 52857, 29183, 35184, 42724, 39475, 41552, 36957, 35148, 29066, 35753, 50597, 32700, 48573, 37488, 64152, 39467, 44863, 48655, 48103, 51948, 43867, 84506, 28439, 36034, 42689, 36750, 29368, 44802, 35364, 35740, 32267, 39841, 35346, 45121, 65104, 36154, 36689, 51869, 44659, 52129, 45891, 77377, 27615, 38374, 55506, 30229, 41228, 29834, 35247, 43541, 42266, 44783, 42698, 36761, 29110, 30471, 34918, 40653, 35185, 45806, 26529, 59065, 42241, 39997, 53770, 52897, 40399, 39683, 37706, 41351, 35932, 35012, 30766, 37716, 41917, 45020, 56458, 31173, 39672, 51127, 50390, 43597, 41712, 55278, 38016, 71364, 36457, 32022, 42834, 55034, 26818, 38379, 35065, 43353, 26029, 35140, 38567, 32109, 40983, 35947, 37860, 30623, 49328, 48114, 39502, 30363, 38930, 49246, 44141, 58472, 46261, 55851, 41177, 52371, 60219, 40828, 43745, 32901, 61876, 43595, 39215, 49815, 34962, 49891, 37030, 43965, 39538, 36343, 35517, 36705, 38723, 42146, 51721, 28025, 41298, 36636, 34509, 45964, 64971, 50676, 46708, 56468, 33323, 38882, 32161, 40753, 33850, 52618, 49224, 50589, 50612, 36844, 51589, 38209, 37150, 61091, 53928, 37261, 44190, 37139, 30062, 51291, 37423, 52002, 36398, 47724, 32292, 59505, 45786, 32979, 33938, 33305, 43755, 36904, 42082, 40260, 35831, 43155, 31467, 38407, 30659, 31602, 40690, 61685, 27393, 38239, 33738, 42075, 32722, 41486, 38771, 48502, 50500, 48999, 33702, 40123, 37235, 46493, 52066, 42072, 50533, 31986, 33926, 35593, 39080, 48048, 23378, 52205, 35858, 48475, 42573, 32812, 48056, 42626, 29936, 32788, 42044, 83877, 45555, 68223, 61973, 38115, 36867, 33293, 30868, 35465, 22154, 55098, 35998, 63923, 51506, 38376, 42081, 34625, 31673, 27615, 47027, 41102, 55313, 29960, 39760, 51128, 33297, 42554, 51349, 46714, 50893, 50207, 36431, 47435, 56608, 37424, 44873, 47922, 105416, 35999, 65419, 77175, 59370, 35928, 29714, 28408, 44479, 56230, 41619, 41077, 42461, 27544, 49116, 38974, 43440, 25012, 32424, 26592, 37061, 46575, 50757, 34109, 32743, 33861, 48319, 44499, 48553, 43980, 42707, 39886, 49727, 43834, 55376, 53889, 44249, 29547, 44670, 31815, 32563, 32771, 73131, 67239, 44617, 33525, 49544, 70285, 43728, 37658, 45713, 30120, 31960, 45746, 53255, 33219, 41770, 45549, 24700, 29949, 46759, 52571, 37682, 60519, 34723, 39486, 55910, 35395, 24668, 57642, 76482, 47178, 44337, 51941, 36431, 114409, 53291, 45655, 37527, 36461, 54896, 29202, 27096, 32342, 63017, 28508, 68452, 41815, 41898, 32849, 44941, 47926, 42296, 42081, 49897, 54929, 53828, 46235, 53075, 51459, 33944, 29080, 40889, 42685, 67018, 36109, 22283, 38996, 32712, 36956, 36114, 33496, 35079, 31038, 33580, 55852, 32435, 26928, 43229, 70590, 48118, 22020, 37607, 61114, 62590, 81268, 74906, 69639, 23788, 20175, 28135, 34623, 42821, 41087, 45003, 51272, 67180, 45151, 52422, 43561, 30578, 40561, 52981, 44085, 44599, 35109, 36761, 55321, 35421, 38208, 81621, 19351, 79417, 46238, 40259, 36050, 55005, 31205, 49532, 55487, 50552, 94880, 64438, 39904, 26144, 40430, 36696, 32895, 76581, 51549, 31412, 47196, 51915, 47835, 52516, 57260, 41697, 61328, 45066, 34447, 42833, 43275, 42148, 36574, 51307, 50238, 56695, 41473, 37274, 36647, 34016, 36944, 38393, 41741, 46098, 41835, 44439, 42625, 40041, 39339, 34686, 39310, 42445, 43956, 53623, 52858, 57436, 41064, 42870, 43478, 52922, 60191, 34904, 48480, 50591, 47026, 33255, 38203, 37986, 39578, 57227, 34174, 37451, 33333, 41066, 39500, 44242, 40085, 34792, 42586, 41951, 49235, 41784, 35269, 45531, 46080, 46765, 45550, 39571, 31076, 35808, 60181, 49806, 35485, 42658, 58262, 40227, 42887, 51923, 30479, 41773, 35966, 39041, 45615, 41287, 42927, 33673, 44776, 47233, 64726, 44926, 43938, 50057, 62308, 43e3, 48502, 53912, 48141, 37708, 45621, 45672, 49512, 47568, 36974, 46336, 48104, 38551, 43874, 45582, 39642, 48704, 48641, 62007, 42223, 55199, 43606, 44941, 49400, 37179, 48152, 82190, 48707, 38404, 35615, 34250, 30622, 33734, 46789, 45130, 41332, 38075, 42955, 36654, 46633, 45857, 48786, 48063, 50800, 53465, 47600, 50288, 36925, 45273, 47085, 51173, 54811, 50726, 57869, 38896, 48704, 43894, 48958, 45e3, 36052, 43123, 36695, 38262, 41631, 41641, 37712, 35618, 36368, 42877, 49031, 67963, 36818, 42422, 33361, 40194, 37383, 43394, 46056, 69028, 40226, 48565, 37627, 47250, 66300, 60930, 42845, 40372, 38125, 42389, 35703, 38913, 40202, 43723, 39516, 67446, 38352, 39698, 53471, 37500, 43611, 48708, 45877, 62574, 42133, 41116, 42162, 30877, 47e3, 50975, 49618, 48167, 37034, 44667, 36550, 49010, 43625, 30990, 37727, 49318, 49536, 47131, 49583, 46044, 41792, 44395, 41026, 38111, 42601, 43176, 41899, 42572, 42269, 47749, 57190, 39412, 41354, 45861, 37903, 37607, 36453, 36419, 37685, 39851, 34896, 44191, 44620, 43684, 44290, 44139, 35310, 42050, 30321, 37969, 34536, 44998, 40541, 44489, 45841, 37091, 52529, 41943, 46625, 41034, 41665, 57354, 48674, 52485, 41486, 50752, 80280, 39626, 48672, 46048, 68065, 59549, 41232, 37398, 58544, 43902, 46069, 44398, 40829, 37256, 38830, 37033, 36875, 41023, 37091, 35726, 39071, 31923, 44659, 50848, 45575, 47775, 39517, 38523, 40417, 42949, 31577, 42998, 30823, 40212, 28265, 47055, 71704, 51779, 55396, 38872, 40136, 48793, 48692, 56527, 79109, 49162, 43127, 48376, 45846, 40180, 45929, 52755, 52682, 47914, 37898, 35799, 39429, 38125, 29513, 46285, 56146, 54074, 50653, 43185, 35403, 68780, 51829, 42293, 38062, 43429, 46128, 46986, 65620, 40850, 54242, 37452, 41359, 37613, 36216, 54708, 36352, 38214, 55129, 37459, 40777, 44490, 37261, 42215, 60866, 38957, 47298, 40996, 45202, 46179, 43758, 43573, 49463, 35728, 47770, 47276, 47906, 47273, 42907, 31699, 44494, 45668, 41302, 31813, 50147, 58712, 44181, 47623, 32217, 32714, 35974, 44035, 53183, 46281, 41910, 45895, 47871, 48270, 46059, 47318, 41196, 53501, 42303, 57540, 37181, 50851, 36542, 36004, 57477, 32425, 45134, 36411, 46637, 39704, 48012, 44948, 41631, 39925, 35e3, 35706, 50136, 33589, 70271, 40716, 45596, 27578, 36417, 42523, 49578, 40197, 51875, 38007, 50434, 46872, 44672, 49890, 45638, 46188, 40909, 48257, 44985, 38350, 33403, 32064, 67037, 38264, 42356, 36143, 53343, 37138, 40806, 40307, 32525, 35708, 39738, 45832, 34554, 46180, 32800, 36502, 37551, 33416, 76576, 41871, 39439, 41425, 51449, 41312, 34859, 52232, 45973, 32346, 48446, 51456, 50647, 47533, 39350, 58771, 56366, 55914, 47204, 39748, 34858, 46582, 43191, 47489, 39665, 46876, 45216, 59878, 42706, 42303, 52553, 44718, 37734, 54152, 45302, 42777, 42050, 39831, 41534, 72850],
            d2004: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1662, 2332, 95, 1036, 1232, 44439, 1219, 1709, 2803, 9153, 7764, 2161, 2916, 7199, 217, 1823, 10290, 43919, 1931, 68722, 28803, 14916, 0, 152500, 35116, 5948, 1296, 1610, 2365, 4355, 4322, 62369, 2953, 2561, 5052, 20110, 475865, 33998, 23654, 6145, 3389, 4550, 542, 1738, 4421, 2582, 4409, 6824, 1344, 4045, 210976, 8553, 4757, 3298, 85, 4557, 2640, 4702, 2734, 325, 2532, 1543, 28904, 1229, 2152, 31210, 14417, 72136, 5153, 193354, 38633, 328687, 152610, 12412, 1367, 0, 0, 0, 48221, 845, 23956, 2149, 1718, 2017, 2407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13955, 225460, 15347, 214132, 3960, 37187, 0, 0, 0, 0, 0, 0, 0, 0, 1251, 3049, 43892, 3913, 1960, 88442, 76971, 51835, 11584, 6074, 93860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5585, 12426, 4896, 26399, 115519, 9547, 84749, 0, 0, 0, 0, 0, 0, 0, 86009, 0, 0, 0, 0, 0, 13684, 2401, 18578, 0, 0, 0, 0, 0, 0, 110309, 3244, 62504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18971, 453873, 34256, 29277, 0, 0, 0, 9085, 4181, 0, 0, 6407, 10305, 0, 0, 0, 0, 0, 8856, 9956, 0, 0, 0, 0, 19654, 409732, 30208, 57271, 61262, 0, 0, 0, 0, 931, 42448, 14843, 8683, 2082, 21421, 3253, 47074, 1934, 373, 801, 7452, 7849, 5165, 5259, 7152, 113, 2437, 1009, 376, 1235, 2078, 13452, 1133, 44366, 1114, 839, 2257, 336641, 2752, 305, 7504, 894, 576, 605, 2267, 1012, 398, 66, 296, 9441, 1252, 184, 276, 1959, 99, 911, 16906, 727, 3655, 492, 275, 412, 7495, 229, 201, 813, 1064, 455, 31868, 138, 785, 105564, 10935, 3766, 198, 2989, 74841, 1082, 411, 4025, 1926, 2386, 10987, 626, 5158, 108, 251, 1541, 227789, 526437, 296772, 44670, 4165, 7117, 4225, 2158, 1184, 480, 240, 845, 413, 11039, 44, 1858, 1289, 31179, 5220, 14393, 18089, 557, 81, 1304, 2482, 2211, 2330, 5250, 938, 186, 83330, 2531, 828, 334, 561, 2906, 1326, 393, 10833, 4838, 4338, 2355, 2259, 2215, 1295, 386, 1065, 2364, 966, 483, 893, 743, 990, 1177, 745, 1055, 1297, 2657, 549, 130, 588, 6541, 2130, 4488, 537, 2088, 6933, 3898, 2218, 861, 259, 2822, 3646, 5206, 3340, 4132, 1416, 6458, 1945, 1413, 1022, 5957, 6741, 1201, 494, 13002, 183654, 108, 2958, 8966, 2816, 389, 2427, 981, 95142, 529, 1331, 181, 466, 1631, 1431, 3142, 270, 97298, 12585, 1303, 4033, 2351, 3921, 302, 1068, 1272, 1083, 3619, 1040, 603, 2679, 2243, 4689, 3520, 17455, 58523, 2114, 1646, 3e3, 972, 540, 2988, 1011, 58742, 632, 12903, 361, 1900, 1340, 7095, 6880, 31762, 281, 165, 1328, 408, 5591, 5586, 395, 506, 3707, 2652, 302, 2921, 2663, 4865, 3443, 459, 19862, 279, 7513, 1854, 11640, 703, 773, 1582, 1344, 1084, 191, 112, 2523, 643, 183, 1060, 530, 34923, 148859, 5687, 12306, 288, 608, 2070, 6375, 3415, 493, 326, 5234, 230, 9863, 1364, 13171, 1815, 2577, 264, 1286, 2747, 5331, 222, 1119, 1728, 1040, 3027, 1822, 482, 19970, 508, 134, 2509, 124, 9114, 148261, 8579, 85096, 831, 404, 646, 418, 1130, 2216, 3684, 3742, 1538, 4869, 4041, 2e3, 13051, 1876, 6433, 1422, 9753, 90314, 1213, 6964, 7489, 2232, 1057, 2378, 2283, 1713, 1707, 811, 3217, 816, 1268, 1001, 33666, 545, 758, 235, 1506, 4899, 1848, 829, 304, 685, 730, 5208, 266, 778, 68935, 346, 42885, 268, 228, 1657, 546, 4100, 1293, 620, 759, 541, 430, 559, 123, 764, 4237, 3541, 132252, 551, 6726, 3913, 2824, 28634, 268, 719, 354, 5970, 331, 4590, 643, 141, 1503, 7971, 9007, 2659, 622, 20503, 22472, 14815, 1146, 504849, 26760, 193128, 6977, 71, 250, 207286, 349, 245, 8638, 1628, 1278, 456, 2155, 3315, 904, 52747, 607, 1200, 289, 743, 98, 366, 1086, 97866, 581, 3566, 139, 3164, 3039, 4776, 3867, 1355, 1623, 932, 13409, 3892, 172, 729, 68266, 1458, 1743, 1660, 1335, 214, 2801, 898, 12022, 9929, 2504, 8005, 12, 254, 2204, 375, 1849, 13415, 491, 3751, 257, 8505, 1385, 920, 626, 249, 511, 1299, 4130, 4147, 310, 10104, 1073, 1899, 2397, 3791, 613, 24, 56, 38, 3263, 1272, 1608, 977, 1844, 1059, 564, 2754, 60, 1212, 14213, 2035, 16479, 2543, 10101, 5086, 2564, 7367, 8068, 738, 20893, 3615, 831, 1203, 8623, 2639, 184, 34007, 436, 4439, 5637, 5338, 9642, 867, 315, 623, 1884, 1566, 8314, 29243, 17514, 15658, 1946, 416, 3445, 3185, 10648, 794, 202, 3173, 627, 1778, 4630, 485, 631, 571, 385, 8286, 223, 227, 422585, 2064, 1066, 459, 495, 833, 541, 64839, 347, 36264, 1122, 239, 1922, 472, 5933, 77648, 1807, 9228, 3243, 382, 87012, 1222, 5745, 3916, 9712, 6466, 3206, 745, 5977, 901, 490, 5338, 464, 857, 3648, 170, 525, 3158, 1907736, 13141, 13481, 4783, 391, 4034, 580, 1815, 855, 9851, 3220, 467, 3547, 2275, 481, 830, 546, 7524, 517, 810, 7908, 534, 21455, 228806, 3120, 229, 386100, 4001, 89102, 312, 197922, 2710, 126558, 1663, 210, 4782, 236, 826, 24339, 55573, 391, 1005, 3069, 5122, 1609, 792, 46, 2979, 5320, 378, 27165, 3350, 99070, 3251, 24385, 24491, 1149, 321, 4140, 356, 257, 793, 3726, 320, 1210, 4224, 90220, 1175, 1266, 17357, 256, 802, 272, 103154, 32242, 257254, 1947, 934, 2405, 408, 59346, 557, 2934, 595, 454, 67, 4905, 49, 68, 247, 2176, 68603, 1308, 1278, 3445, 582, 6335, 19564, 2491, 503, 3300, 227, 1016, 11918, 5515, 5910, 2215, 297, 1946, 470, 2562, 1931, 1153, 4129, 2782, 33127, 27252, 6909, 109, 4822, 185, 236657, 970, 5992, 3605, 8356, 1189, 138, 18, 878, 639, 4678, 677, 9302, 262, 12819, 1284, 420, 37988, 2995, 17964, 2459, 1510, 2614, 9157, 1894, 1170, 478, 739, 3556, 374, 8144, 253, 2876, 7880, 434, 16032, 2705, 281767, 8275, 3050, 3398, 4278, 1373, 693, 1511, 18412, 184, 2097, 2286, 12325, 1658, 8947, 55, 11880, 75241, 2628, 24220, 419239, 3589, 1536, 58829, 1789, 2308, 248, 872, 7617, 4818, 200, 641, 1093, 355, 9602, 16681, 2834, 333, 166135, 9744, 39661, 1594, 6392, 2006, 566, 35369, 3843, 2884, 2244, 1361, 144, 418, 414, 17799, 2420, 369, 107769, 15214, 8264, 1593, 1754, 135949, 1906, 123, 707, 885, 1352, 900, 64, 473, 382, 2424, 1355, 2537, 1600, 41, 5703, 361, 196, 1201, 222, 2874, 6228, 32314, 2146, 1415, 6862, 2514, 1340, 2141, 110262, 3017, 69122, 483, 2726, 871, 538, 5616, 931, 11270, 32494, 6564, 3830, 4332, 11507, 1709, 2470, 6923, 74524, 12877, 63340, 9286, 7015, 6615, 5276, 4472, 433835, 36089, 11471, 18355, 2319, 134352, 13403, 12497, 20003, 24263, 295284, 4281, 10748, 1907, 66855, 1084, 2400, 11753, 3632, 2407, 9016, 26447, 7768, 11374, 19850, 30531, 8224, 5366, 3158, 13583, 10220, 1574, 1910, 1724, 175022, 11069, 12379, 2738, 16840, 4334, 5395, 45160, 14131, 3767, 3915, 2435, 2234, 9631, 4078, 1900, 2524, 2374, 6808, 4832, 8954, 55347, 10602, 21442, 3393, 30503, 2016, 1721, 6933, 902, 11434, 2028, 2235, 75437, 32942, 94121, 9682, 39975, 22016, 4487, 10514, 3092, 2774, 81708, 2750, 2504, 1070, 2612, 11815, 4892, 2635, 5015, 2775, 2548, 3324, 1234, 3961, 2444, 1899, 9420, 10224, 5807, 1096, 1366, 2794, 11107, 5043, 105218, 38744, 3978, 2406, 57994, 1907, 2064, 1856, 5636, 2730, 2689, 4315, 17648, 1284, 5732, 9434, 10207, 7657, 1893, 17266, 1472, 1209, 14944, 3834, 20787, 33991, 4085, 2418, 196160, 29388, 2362, 4131, 2905, 1312, 2818, 6206, 7630, 9057, 1272, 20254, 2665, 894, 4479, 828, 1892, 2388, 9059, 1794, 116133, 4512, 6788, 5979, 5650, 20387, 12223, 15137, 6805, 4753, 4527, 2402, 4362, 8375, 2817, 14850, 4961, 5456, 6237, 1851, 49346, 29547, 3840, 8515, 7631, 2699, 8159, 4015, 7460, 5476, 3733, 2523, 1360, 515, 2683, 847, 5871, 202970, 522, 4028, 1506, 11934, 2510, 2739, 199436, 4474, 8962, 250, 2572, 9274, 3112, 3632, 5066, 543, 2880, 1294, 199392, 3868, 1506, 14824, 2809, 773, 45630, 21718, 9102, 3203, 7555, 11088, 1841, 11132, 11620, 1340, 1188, 1862, 46710, 3512, 1135, 9191, 1903, 166828, 5330, 5489, 4234, 5102, 9542, 5518, 3790, 68448, 6574, 6557, 2e3, 76877, 3510, 10647, 3812, 4103, 7629, 1750, 22088, 2807, 10647, 3378, 11442, 7265, 147854, 47743, 72156, 42122, 23296, 194068, 11351, 12690, 231, 3613, 2984, 2774, 1213, 2140, 3036, 6596, 3333, 3335, 1932, 2573, 1139, 3310, 1972, 2032, 9129, 4703, 2913, 128334, 25411, 33285, 15003, 11237, 11563, 11528, 100042, 4467, 35552, 18904, 1781, 3832, 14300, 2269, 11877, 2400, 1561, 58232, 18556, 2355, 46657, 5700, 8724, 6175, 6194, 10568, 2697, 10670, 2986, 2157, 5118, 3735, 14726, 15929, 1752, 3938, 46057, 1033, 4518, 5549, 2724, 6025, 18862, 5268, 12896, 1927, 3869, 15047, 77774, 9024, 8044, 48225, 8060, 5685, 5562, 17208, 1830, 612, 1787, 1458, 5186, 4143, 3431, 16623, 30090, 8590, 163438, 76309, 18105, 6775, 3581, 5802, 3370, 7339, 1848, 799, 930, 936, 10276, 10152, 60442, 2297, 1987, 3608, 1810, 8933, 41116, 2046, 1428, 2398, 14326, 1724, 3001, 14448, 42830, 144811, 2121, 9865, 2007, 1667, 2796, 1266, 4192, 1045, 28767, 7377, 3424, 6343, 18426, 3920, 7123, 2789, 35971, 48730, 5630, 13268, 3168, 5215, 319387, 5441, 44282, 9057, 923, 3975, 1814, 8463, 2457, 987, 17714, 4801, 6005, 59740, 11685, 4034, 7070, 3071, 13776, 2139, 273936, 117172, 260532, 13723, 1595, 5354, 20070, 2924, 110411, 2334, 137765, 5336, 55746, 7242, 207666, 21475, 7398, 2216, 24112, 4891, 3780, 199679, 10352, 2515, 5070, 5111, 6163, 32846, 43010, 5384, 63701, 9301, 4982, 1617, 13238, 1951, 1590, 3864, 5997, 2567, 6016, 42146, 12025, 368912, 13764, 1638, 8591, 4095, 1149, 2180, 7741, 41847, 4490, 2294, 5054, 5548, 4722, 33633, 3001, 5236, 18695, 9044, 4034, 1675, 5918, 2242, 3935, 9851, 13941, 60864, 2514, 6220, 61271, 1837, 5310, 1243, 1007, 736, 3216, 3360, 56113, 798, 103955, 750, 3979, 1568, 9201, 10038, 14887, 2727, 2061, 2245, 3445, 17966, 5210, 20436, 4810, 2621, 3791, 6650, 3886, 61462, 1522, 31025, 3536, 12334, 26965, 926, 6420, 8101, 8621, 2366, 216945, 6737, 6979, 1048, 3086, 18065, 5141, 5794, 6395, 7767, 9733, 5825, 4984, 5977, 4044, 9431, 7730, 6333, 6272, 6713, 4597, 5311, 1813, 73813, 1977, 2828, 4901, 1741, 1865, 64191, 3838, 2236, 285801, 4334, 24783, 21421, 27048, 2043, 1972, 4595, 2614, 4101, 5185, 4546, 2192, 5891, 5708, 43518, 52167, 24226, 2219, 2525, 132737, 8327, 2459, 8973, 2268, 32867, 10939, 2304, 3324, 2899, 5167, 7273, 3627, 3789, 16082, 7184, 5241, 1954, 1552, 2420, 1733, 2473, 35319, 251090, 4127, 2767, 2304, 2616, 1744, 3985, 1469, 4480, 3678, 4990, 4161, 2993, 2206, 939, 3708, 13372, 4747, 878, 2705, 5297, 1823, 3822, 1370, 8980, 7004, 1356, 29891, 10775, 9537, 3879, 3412, 5684, 3112, 14153, 2952, 114743, 16151, 7883, 16881, 12631, 1573, 5757, 1912, 3571, 9080, 8816, 4091, 66476, 94962, 12334, 2214, 2056, 1231, 4278, 72257, 39685, 3291, 66835, 203681, 27875, 8452, 7087, 5037, 26050, 8579, 3610, 6466, 7257, 2654, 11118, 1956, 14628, 8635, 5790, 132286, 2244, 6155, 5013, 2656, 5903, 17576, 7140, 56243, 6300, 7433, 57302, 777, 6906, 2455, 6084, 963, 6862, 4878, 1491, 5277, 2730, 1970, 2979, 1671, 2885, 6747, 35392, 13665, 3135, 5608, 8277, 6840, 4213, 2572, 1119, 4637, 15076, 7862, 14206, 3451, 4434, 13109, 769, 2536, 5642, 1921, 70666, 5188, 1506, 1310, 2203, 4345, 19355, 3341, 1479, 20818, 4346, 6592, 8243, 39503, 582, 4568, 1563, 1972, 2856, 94846, 182474, 3888, 2849, 10576, 103324, 4770, 3124, 2600, 9018, 15967, 41121, 7924, 19177, 127447, 3399, 1439724, 3194, 1862, 119372, 19263, 2836, 1980, 23990, 13749, 17606, 6699, 36272, 11930, 5118, 4438, 3814, 6471, 2408, 15328, 4514, 5696, 5287, 8597, 8224, 3445, 40107, 3808, 17925, 2371, 6975, 7846, 448503, 7773, 7378, 29120, 1159, 464, 12136, 39262, 1612, 1918, 16013, 13518, 5562, 6049, 4085, 10679, 5823, 1498, 1855, 2785, 936, 27257, 17534, 9277, 17080, 29231, 2268, 8656, 542205, 5734, 4348, 7379, 6325, 1772, 4556, 1320, 413, 2846, 1424, 4640, 7129, 3881, 3110, 9205, 3063, 9125, 3449, 2193, 6383, 1258, 1281, 29322, 2590, 2969, 5171, 169909, 8762, 21114, 2843, 5346, 21882, 11232, 4685, 11525, 21458, 5476, 170158, 22834, 3288, 7071, 15483, 3987, 6984, 3920, 4519, 3822, 2255, 52637, 3265, 19637, 12317, 30098, 146179, 23875, 9648, 6810, 36174, 54887, 2147, 1913, 1647, 2959, 2374, 4459, 2250, 2188, 10127, 4418, 2607, 21234, 73626, 5257, 40943, 3810, 29354, 14680, 166628, 91580, 98066, 133773, 16227, 99839, 9126, 4388, 24638, 4392, 1579, 7274, 40675, 5989, 2452, 4631, 3764, 2113, 9144, 3193, 36075, 11569, 7122, 1341, 9575, 3605, 12864, 16470, 4281, 24060, 8576, 6684, 18998, 3448, 4359, 8971, 1266, 16583, 800, 1835, 1220, 30733, 32591, 794, 2534, 1278, 109708, 2714, 283994, 46281, 89323, 6566, 5649, 13514, 9443, 12842, 1213, 7351, 5437, 3888, 5700, 2223, 2155, 2386, 11727, 229849, 15709, 10624, 13405, 47602, 3724, 2644, 3224, 17974, 731, 6097, 2419, 8304, 3327, 10331, 10132, 3198, 12391, 4210, 2608, 5413, 1922, 4618, 20686, 4477, 7881, 5447, 2660, 5461, 1178, 5601, 3664, 1594, 1261, 62410, 39880, 38630, 4697, 48229, 4501, 46598, 11147, 4213, 41524, 761, 2492, 3537, 1367, 7961, 3841, 19799, 4389, 20697, 2565, 3423, 3785, 20652, 4480, 10598, 2719, 297653, 2055, 1496, 3802, 11005, 3272, 1560, 2802, 516, 69573, 6366, 73940, 18109, 21387, 74328, 4095, 2651, 26044, 12538, 19786, 63446, 14602, 222048, 2666, 5423, 2032, 323070, 9449, 173497, 13121, 11504, 3709, 1275, 2527, 2906, 4866, 2523, 2311, 16313, 4788, 2272, 8543, 6281, 2182, 2851, 2432, 931, 14538, 2370, 6619, 13813, 4736, 4205, 6134, 3787, 1504, 3666, 1971, 6999, 24924, 6198, 5354, 2286, 4254, 9043, 1213, 4646, 2884, 3327, 6912, 1042, 4606, 26388, 5378, 8509, 4539, 7732, 12897, 18858, 3635, 5548, 5593, 3573, 20142, 4318, 21505, 4938, 5588, 1951, 21732, 4147, 15277, 2860, 772, 895, 2031, 3586, 1449, 10511, 2016, 9202, 3228, 8286, 2792, 1391, 3303, 3778, 1893, 4627, 1189, 8913, 927, 3744, 25814, 3877, 2821, 59573, 4117, 1340, 7398, 2959, 1179, 5879, 2465, 15831, 6073, 2797, 29401, 6481, 3982, 3708, 63758, 4889, 24831, 6294, 15681, 27967, 4546, 1145, 1155, 11675, 16860, 514973, 3047, 2899, 5105, 3583, 2430, 2240, 1337, 1033, 12516, 2091, 5983, 3518, 9178, 5408, 6435, 10430, 1263, 1494, 3447, 2149, 1277, 2548, 3544, 1567, 3622, 3855, 3841, 1731, 4227, 12456, 5656, 4844, 4005, 47271, 2436, 2477, 1823, 3768, 1769, 11361, 1530, 10730, 1379, 5728, 14253, 1436, 2245, 1102, 2049, 1524, 7593, 1694, 17868, 14430, 12966, 8383, 2925, 2477, 16735, 3626, 14231, 989, 16562, 1475, 7674, 1052, 1430, 1135, 7630, 2220, 63394, 5959, 24133, 12723, 19575, 58702, 5933, 3035, 2610, 12244, 5275, 4062, 3756, 5493, 846, 1450, 4108, 3264, 4517, 182592, 3982, 26561, 3399, 192142, 4349, 2340, 27229, 15034, 9694, 14523, 315909, 1158, 4506, 5767, 6636, 6386, 7650, 8184, 9649, 4069, 7100, 1562, 84532, 15233, 2280, 4076, 11312, 31049, 3880, 3277, 440862, 3012, 5216, 3141, 2532, 1759, 1764, 1923, 162249, 8395, 6524, 8706, 3665, 4938, 6109, 1805, 7025, 10566, 14903, 2789, 109953, 600047, 6034, 31647, 8368, 1754, 2278, 2440, 4578, 3946, 1201, 1618, 6057, 2529, 6771, 1704, 1372, 918, 27608, 15708, 2877, 6112, 6797, 2101, 18044, 9566, 5764, 4051, 14733, 4832, 11829, 7092, 4484, 11175, 1698, 8045, 3016, 7800, 8511, 5273, 2569, 33170, 4402, 23429, 6554, 3089, 6968, 33535, 25887, 5417, 52644, 5712, 55299, 37928, 1421, 6602, 4180, 162601, 67921, 54845, 32016, 2875, 5775, 4243, 142997, 16421, 3694, 3449, 896, 5986, 14025, 5887, 1965, 2327, 3330, 3424, 47602, 526765, 116381, 40792, 21166, 1381, 1349, 1573, 3963, 1986, 9301, 2191, 828, 7019, 18040, 2524, 6564, 5901, 1339, 19803, 9999, 51868, 11728, 3446, 901, 1384, 25550, 1673, 113710, 2854, 51680, 37643, 6729, 1754, 3381, 3538, 5451, 3670, 6666, 3775, 3551, 5347, 15083, 3413, 3210, 3040, 10290, 3173, 5469, 2126, 4263, 2998, 4485, 2518, 6416, 5632, 4273, 7119, 83194, 4726, 6825, 78970, 132715, 6203, 3212, 10292, 2308, 6218, 3923, 4960, 25393, 2648, 6535, 10957, 16827, 12686, 13978, 9436, 1247, 2488, 10712, 8002, 4415, 8853, 12771, 7635, 2475, 4048, 7877, 4501, 15054, 19675, 21096, 3468, 1051, 1558, 5443, 2586, 3515, 15904, 4347, 19177, 2357, 1823, 1407, 3577, 4035, 200787, 15489, 18561, 1914, 5293, 1589, 2176, 2362, 3967, 76283, 245671, 6833, 66062, 39146, 25477, 2839, 4233, 964, 10568, 2137, 1568, 2805, 3215, 7800, 2806, 7694, 1688, 6359, 5577, 1174, 6970, 5661, 7454, 2602, 2080, 4313, 13555, 15693, 35572, 5092, 5117, 2740, 4233, 45788, 2909, 6136, 17191, 5400, 1940, 2249, 14002, 5829, 125178, 22992, 6296, 4666, 6559, 34679, 1528, 5801, 2621, 3381, 1561, 1673, 4758, 4832, 2089, 3938, 2634, 1812, 66013, 16690, 3082, 181052, 2140, 4656, 14300, 2743, 3420, 29877, 50330, 11193, 23341, 63399, 3145, 3944, 30053, 9820, 19024, 12120, 59049, 2245, 8423, 5454, 7367, 3145, 6665, 4483, 10287, 24698, 95337, 156587, 66673, 18853, 13319, 14080, 24438, 2007, 26180, 4569, 725, 3761, 4657, 1148, 3400, 3479, 2715, 2434, 1400, 2617, 3034, 1401, 8411, 1973, 2384, 15997, 19805, 1701, 14128, 2443, 3543, 7566, 10408, 199060, 229902, 205902, 47292, 44647, 952, 1901, 848, 1438, 15788, 7176, 12998, 6171, 13548, 5411, 13857, 11250, 5584, 2335, 42910, 6984, 14019, 1628, 2406, 7994, 10343, 14215, 22974, 430, 8080, 1615, 1332, 3627, 18086, 2675, 116909, 9648, 4179, 63987, 4117, 3093, 1823, 930, 3053, 3716, 180097, 19216, 6976, 3301, 171846, 963, 1120, 7883, 1856, 383841, 4741, 2196, 239, 4803, 370, 19569, 5587, 12717, 1881, 322, 4960, 13555, 4409, 1030, 405, 265, 712, 1117, 1015, 1633, 1045, 2819, 2791, 1871, 6835, 3424, 10598, 11462, 2246, 946, 1536, 12038, 1664, 1245, 436, 847, 4073, 765, 1606, 418, 9307, 846, 1025, 6731, 2195, 195, 518, 264, 12646, 505, 94, 5650, 9381, 6846, 1954, 1863, 4674, 921, 4212, 2390, 3662, 1412, 440, 11176, 11173, 1201, 40417, 79538, 1168, 26983, 99, 1196, 2186, 353, 1009, 7943, 1026, 5034, 4421, 1520, 6729, 12219, 3117, 7228, 12989, 310, 6144, 1321, 1465, 4066, 2527, 13290, 3592, 9337, 1333, 8430, 17584, 12894, 6309, 10726, 1706, 5570, 5729, 24120, 95129, 10461, 12563, 2997, 77958, 2442, 883, 487, 23958, 571, 534, 611, 433, 1502, 3215, 8219, 17412, 5326, 2641, 52, 2331, 8534, 10464, 887, 397, 336, 11621, 26010, 2799, 2137, 5677, 6794, 5292, 25131, 6589, 158231, 2310, 2374, 875, 201, 1478, 404, 5072, 7407, 2395, 5713, 4705, 1268, 1956, 8287, 28474, 48268, 22618, 1817, 463, 418, 7203, 3432, 10592, 6756, 80226, 4539, 2308, 2509, 87490, 156468, 62650, 6822, 1021, 326, 13701, 76, 1630, 6330, 445, 1047, 18784, 3820, 10190, 30899, 1148, 605, 4306, 21589, 121140, 5691, 1269, 4428, 972, 961, 15484, 259585, 320, 1300, 533, 2215, 1847, 89, 804, 200, 1021, 3013, 2821, 497, 1199, 1885, 6476, 4349, 5805, 11696, 5845, 14583, 7779, 365, 5188, 18216, 6750, 390, 8884, 5941, 1582, 456, 956, 154, 761, 181, 616, 3438, 606, 1651, 1905, 2700, 1431, 250, 121, 1689, 11587, 1660, 3829, 8657, 4411, 289, 6649, 7484, 4751, 3319, 21549, 10471, 17572, 3165, 1494, 16456, 4499, 14751, 11610, 580378, 60796, 6731, 4036, 6712, 1361, 57671, 17049, 1315, 542, 3199, 538, 55, 1099, 686, 119, 778, 369, 14005, 8059, 8257, 8367, 878, 1339, 144, 690, 247, 983, 2320, 281, 2564, 2821, 15816, 32659, 2512, 630, 858, 8236, 1169, 6048, 61395, 1733, 16537, 12039, 30068, 993, 6780, 5608, 2104, 11476, 16128, 1729, 2713, 1242, 1159, 2688, 280, 197235, 473, 2276, 159, 43117, 9794, 47066, 4471, 324, 1267, 1899, 28628, 1064, 19368, 2513, 4135, 2260, 2912, 9895, 4522, 8031, 14659, 4050, 1070, 83873, 8937, 8259, 24665, 15345, 4932, 63732, 3666, 82298, 32864, 48329, 158610, 14629, 21068, 2180, 15572, 6213, 4745, 2116, 5107, 23076, 10321, 18166, 15599, 8573, 3104, 3787, 1841, 1104, 780, 2930, 3380, 219, 559, 668, 16865, 960, 3024, 2484, 259, 2697, 27597, 8797, 51739, 1843, 1033, 555, 6466, 2951, 5443, 915, 3007, 2616, 26515, 1163, 3767, 1402, 1279, 4461, 16405, 1476, 5972, 3443, 2323, 641, 1473, 741, 7027, 6764, 464, 5026, 20756, 5292, 1558, 501, 676, 3895, 46, 6412, 7790, 4506, 245, 3008, 10917, 1103, 3857, 4223, 5034, 1859, 9561, 6139, 2473, 3817, 13753, 19940, 2166, 2941, 1910, 2421, 3361, 2677, 2464, 2707, 1645, 3243, 3109, 11555, 8391, 7636, 35616, 1792, 2181, 21861, 18256, 18048, 3189, 16425, 12103, 40169, 18950, 16618, 2871, 8075, 5249, 17624, 3126, 10792, 8768, 49369, 7106, 22857, 54935, 4383, 1276, 5175, 3998, 6966, 9543, 9465, 8585, 104635],
            r2004: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1228, 777, 467, 3147, 2212, 59359, 2267, 4291, 7527, 31574, 13474, 5488, 1160, 2552, 745, 845, 28208, 61290, 1991, 93625, 18187, 9740, 0, 144157, 22032, 4025, 3766, 5100, 1188, 8119, 10389, 50931, 8618, 4348, 6436, 27021, 584723, 34801, 17753, 7679, 9597, 5366, 1051, 6933, 7635, 8072, 10400, 5817, 712, 5428, 260698, 20875, 6968, 5148, 82, 16538, 6569, 9288, 2209, 1314, 11434, 3114, 63662, 989, 5974, 57732, 22734, 117882, 6978, 192539, 43117, 212688, 42847, 18311, 3190, 0, 0, 0, 74389, 2460, 36938, 5049, 2443, 4936, 4805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24661, 225686, 25878, 245576, 5757, 42635, 0, 0, 0, 0, 0, 0, 0, 0, 3396, 5467, 83631, 5524, 4434, 104692, 108172, 47592, 19800, 10410, 144176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4966, 19420, 6777, 59196, 111924, 12877, 103230, 0, 0, 0, 0, 0, 0, 0, 123559, 0, 0, 0, 0, 0, 26358, 3472, 19633, 0, 0, 0, 0, 0, 0, 153068, 7557, 47762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62078, 244674, 44428, 39500, 0, 0, 0, 15069, 7866, 0, 0, 4545, 9039, 0, 0, 0, 0, 0, 14747, 19597, 0, 0, 0, 0, 19467, 361095, 41362, 81283, 81318, 0, 0, 0, 0, 1961, 51662, 29525, 3313, 4997, 22628, 5408, 18466, 2863, 311, 2259, 11134, 40520, 9647, 10715, 14160, 564, 2818, 4601, 2228, 2837, 8025, 30777, 4139, 56519, 3419, 2815, 7241, 346246, 5028, 1473, 15572, 4217, 2414, 2681, 12815, 3785, 1467, 524, 1171, 13171, 1908, 1147, 1287, 6011, 367, 2282, 24558, 2154, 6575, 1950, 1160, 1277, 18438, 888, 970, 1685, 3456, 2050, 55591, 584, 1338, 51586, 12007, 4875, 923, 2522, 81545, 2604, 1454, 3696, 3162, 4026, 3666, 4084, 8395, 733, 2922, 3722, 289306, 596033, 54355, 51193, 5287, 9006, 10232, 4758, 4447, 1214, 1903, 2856, 860, 15949, 488, 2130, 7260, 41757, 7332, 18291, 35956, 1403, 366, 5393, 2674, 5243, 5328, 10716, 2028, 858, 120813, 4703, 2314, 1082, 2169, 4680, 2413, 1596, 21003, 9013, 9598, 4256, 14229, 3128, 2500, 1084, 2491, 6295, 3330, 2509, 3791, 2543, 2589, 2899, 1379, 4129, 2924, 11130, 2146, 740, 1782, 11107, 3665, 4692, 3122, 3363, 9946, 5159, 2719, 1081, 380, 6070, 14430, 5810, 4164, 5042, 2235, 19672, 2535, 2610, 5630, 14121, 10683, 2085, 2506, 31846, 130500, 380, 7021, 31795, 7137, 2375, 3454, 4576, 73261, 1894, 5797, 823, 1388, 3048, 3813, 11908, 911, 174741, 15124, 4751, 7891, 7479, 7391, 1652, 3016, 2349, 3387, 7763, 1544, 223, 4796, 3255, 5762, 4887, 40163, 94641, 5353, 3084, 3987, 2230, 1803, 3758, 3185, 67995, 2088, 21479, 553, 3066, 914, 6135, 13268, 29548, 706, 796, 3149, 1843, 10017, 17685, 1685, 1649, 7610, 3024, 577, 5848, 7480, 16280, 8582, 1600, 51199, 1062, 35633, 5503, 34602, 2803, 2172, 5249, 5177, 7703, 620, 742, 11640, 2498, 869, 3263, 1204, 17919, 160314, 12076, 29939, 1514, 3540, 5057, 32486, 4950, 2023, 1480, 7951, 1064, 21512, 6423, 25951, 5737, 8123, 1848, 1466, 3165, 9534, 820, 2809, 6149, 4518, 3526, 2441, 736, 53392, 726, 565, 3359, 942, 17748, 68204, 27502, 62301, 2701, 1529, 1249, 1055, 3182, 4372, 7472, 10041, 2295, 11474, 10149, 3111, 7351, 928, 14066, 2661, 5149, 76806, 2998, 13778, 21401, 7024, 1546, 2946, 3066, 2635, 2941, 1864, 7092, 3007, 3092, 2531, 22059, 2032, 1161, 347, 2235, 13390, 6256, 2105, 1789, 2859, 2847, 10653, 1338, 3035, 174435, 1051, 28005, 1426, 911, 3396, 2309, 14222, 2063, 1009, 833, 1072, 2136, 2159, 677, 2075, 6003, 10649, 121454, 1427, 14773, 3477, 3082, 20544, 1397, 1529, 838, 14136, 761, 6311, 2470, 684, 7839, 20065, 28185, 5043, 1647, 36794, 70135, 17277, 1899, 679455, 52090, 171109, 7936, 544, 499, 349462, 1429, 815, 17215, 5416, 3973, 4527, 2556, 2692, 2801, 69764, 2238, 3121, 1414, 3356, 442, 1491, 3062, 158103, 817, 526, 450, 4947, 6787, 11218, 6988, 4247, 1261, 3166, 11704, 5356, 712, 2721, 75884, 6193, 2542, 2805, 3993, 549, 7839, 1742, 21170, 18848, 3894, 36585, 65, 1314, 3985, 407, 3158, 41599, 2753, 9225, 1380, 20210, 6160, 6597, 1487, 856, 1629, 3971, 12181, 11456, 1936, 15745, 4542, 3601, 2575, 9233, 2761, 240, 379, 301, 5561, 2922, 1958, 1317, 2402, 2971, 1801, 7083, 378, 1154, 29976, 2516, 27303, 889, 19560, 7443, 4412, 8363, 11467, 4742, 86187, 5400, 3781, 1396, 9569, 3168, 1242, 65720, 691, 11329, 11136, 11429, 16473, 1539, 1736, 1812, 2441, 4114, 12343, 22526, 26556, 8384, 5910, 1794, 5291, 7467, 37197, 3166, 656, 5709, 1447, 2638, 7383, 2450, 1794, 1950, 1495, 13601, 953, 1356, 130911, 3730, 2595, 1237, 1755, 2771, 1884, 110381, 1924, 44188, 4272, 1144, 3867, 3301, 12313, 161361, 1329, 11123, 4260, 1388, 100978, 3199, 8615, 6491, 33297, 12178, 5732, 2465, 11710, 2856, 1776, 12054, 1081, 3410, 5624, 830, 1882, 8126, 1076225, 11093, 24871, 15177, 1604, 12831, 2739, 6081, 3200, 8698, 3955, 1169, 4898, 5018, 986, 3872, 2824, 15111, 1226, 2671, 12672, 2121, 22451, 322473, 3880, 1292, 209094, 7893, 30354, 1012, 83315, 9506, 140644, 1700, 710, 3479, 355, 10693, 52249, 95969, 1368, 2137, 5135, 12421, 1790, 3239, 461, 3792, 20120, 764, 52135, 5091, 34378, 5215, 12955, 32773, 3235, 1077, 5337, 1748, 1014, 3174, 6083, 1353, 3221, 9722, 163452, 2273, 8518, 128269, 1275, 3039, 1177, 141988, 52878, 150608, 4142, 2295, 2697, 1816, 140891, 2256, 10981, 2333, 1587, 357, 11056, 259, 314, 1196, 6326, 140417, 3392, 1402, 4781, 1717, 2784, 41539, 6168, 1819, 3196, 383, 5450, 24976, 13646, 8865, 5443, 2272, 3142, 2201, 4971, 5454, 6562, 6905, 3560, 53468, 37006, 4668, 922, 14976, 1009, 235539, 2501, 4034, 12734, 30048, 7004, 382, 137, 3556, 1912, 11525, 3837, 18932, 1285, 32472, 3685, 1960, 25714, 6308, 15890, 2618, 2362, 3325, 19081, 1864, 566, 1006, 1657, 8094, 971, 5370, 216, 1079, 12673, 1225, 22184, 7335, 255337, 15192, 11938, 5004, 7810, 4572, 2609, 5874, 23302, 956, 3379, 6632, 34818, 4254, 21304, 303, 21791, 47838, 2621, 28790, 641832, 9595, 4516, 85407, 3261, 4556, 1255, 1029, 8626, 9407, 770, 810, 3259, 1355, 20254, 27253, 8389, 785, 69903, 8533, 80651, 1163, 5199, 3448, 2403, 31117, 10378, 6441, 15751, 3896, 571, 1579, 1602, 19812, 3071, 1119, 75007, 26241, 22733, 5422, 5023, 215728, 2971, 646, 2621, 1470, 2600, 2020, 392, 2092, 1407, 4705, 4027, 4800, 1777, 352, 11161, 865, 806, 2017, 890, 8666, 14592, 44189, 3162, 2342, 16551, 2970, 3705, 3601, 119475, 3179, 65912, 1680, 3557, 1253, 1341, 8487, 1336, 14474, 65399, 17187, 6226, 6659, 24627, 2286, 4269, 9611, 34614, 8163, 75294, 11540, 9068, 6769, 5631, 14896, 165954, 37470, 14968, 24369, 5055, 139081, 11111, 19776, 24739, 26101, 244969, 3791, 12087, 3693, 95826, 1668, 5058, 24752, 5686, 4788, 19167, 42877, 9962, 18331, 30370, 48388, 13640, 8576, 5044, 36306, 16318, 2893, 1613, 6223, 36230, 7616, 17505, 4670, 21679, 7483, 5045, 44097, 32477, 1738, 5170, 3888, 4131, 5535, 4193, 3664, 4145, 5030, 7503, 3097, 14264, 111481, 12606, 27689, 3448, 24519, 7403, 2377, 19297, 1705, 10142, 2490, 2261, 82069, 25825, 99724, 2238, 36060, 41750, 4456, 38883, 5068, 4069, 160445, 10434, 2978, 3086, 3440, 18519, 6512, 3303, 7749, 2669, 3832, 6221, 4680, 4554, 8115, 3688, 30843, 24837, 16406, 2048, 2694, 1563, 9497, 4965, 95828, 52283, 5386, 3749, 66406, 3633, 871, 3595, 17055, 4512, 5868, 9480, 24495, 1215, 7340, 20052, 12939, 11834, 2607, 36903, 2645, 1120, 29735, 6087, 25675, 58860, 7833, 3745, 202166, 34794, 4550, 4137, 7170, 3866, 5951, 9903, 8696, 9491, 2693, 43252, 3800, 1124, 5389, 1352, 2421, 4028, 22102, 1899, 27793, 4405, 9468, 6851, 9392, 36917, 12519, 21998, 3676, 4342, 1880, 5068, 950, 8337, 6127, 63435, 6374, 23500, 9308, 1314, 83745, 50447, 2933, 14160, 12916, 3741, 6421, 4875, 13461, 10026, 4081, 6430, 1121, 485, 6819, 1192, 9929, 21256, 982, 11671, 1737, 18949, 7414, 5124, 134372, 4164, 18608, 1016, 5507, 17673, 8955, 3571, 8131, 409, 5188, 2202, 127763, 8467, 5193, 58238, 4992, 905, 45484, 15052, 21925, 3962, 12122, 4172, 4784, 6612, 12281, 1527, 1869, 3499, 82013, 9734, 2797, 19093, 3447, 155084, 10590, 9448, 5175, 5334, 9020, 7726, 6858, 90325, 9990, 7301, 5363, 54734, 8224, 16621, 7172, 8908, 9671, 3797, 21189, 4855, 31682, 8296, 35549, 2602, 82524, 16806, 58527, 39958, 20819, 135114, 10370, 10103, 757, 12503, 4626, 4666, 2291, 950, 2538, 14231, 7361, 8471, 2609, 7936, 1796, 3988, 1021, 3757, 17001, 10859, 3678, 83870, 29781, 37371, 28025, 14545, 20922, 8088, 98254, 6599, 92048, 34492, 3529, 9914, 11190, 1857, 13212, 4275, 3172, 63372, 26429, 4753, 77885, 8585, 11958, 6936, 12211, 14817, 8468, 11613, 5072, 2477, 11097, 5333, 18731, 14457, 4212, 4474, 46624, 1600, 3941, 7859, 3924, 6665, 16661, 8351, 18510, 2849, 3161, 33241, 100087, 14472, 10999, 47673, 13713, 4704, 5688, 28500, 1103, 335, 4657, 1912, 11820, 7906, 4018, 28527, 54959, 16942, 154469, 87122, 35751, 7709, 7911, 8330, 3433, 14749, 4494, 1666, 2853, 821, 19396, 7472, 49442, 2572, 2543, 2040, 6412, 12996, 19844, 4023, 2332, 3534, 25100, 3479, 4417, 9855, 33699, 82337, 1924, 15331, 2675, 3778, 5996, 3661, 4801, 2266, 41463, 9834, 3536, 6770, 20988, 9607, 12804, 3185, 32066, 56158, 8591, 24257, 1679, 5454, 316633, 6677, 35302, 13608, 1501, 5837, 2653, 11198, 3559, 1336, 34904, 10865, 12698, 60782, 18086, 4884, 14489, 5180, 23725, 6102, 136334, 130728, 55532, 12959, 2500, 10123, 28627, 4401, 95936, 2291, 81427, 7471, 49487, 10791, 189833, 28832, 9261, 2064, 15212, 8441, 4274, 222616, 25105, 2931, 6605, 9902, 7859, 41076, 44430, 7686, 114270, 10539, 7782, 3635, 17111, 1859, 2171, 8619, 9659, 6196, 16606, 39916, 18925, 271925, 28247, 3917, 5975, 13520, 4410, 3331, 22311, 22715, 3648, 3119, 4834, 5862, 5825, 62004, 4537, 6592, 18074, 4795, 6448, 1650, 9676, 4086, 8297, 13358, 35404, 71809, 1732, 8363, 69776, 2172, 8769, 2082, 2150, 1694, 6522, 3885, 23106, 509, 173467, 1501, 8306, 2211, 47267, 21400, 37346, 6862, 6129, 5218, 4960, 42967, 11726, 27064, 10468, 7499, 5140, 19197, 9600, 57147, 3414, 40029, 10901, 11754, 22834, 1395, 12314, 10467, 22143, 4094, 158137, 7351, 7981, 1235, 4509, 38675, 2942, 5257, 15768, 5589, 7681, 5694, 3423, 22136, 3739, 25951, 9710, 8124, 6295, 10160, 5435, 6174, 3997, 92065, 5911, 6141, 6720, 4498, 4369, 65130, 1834, 8130, 237253, 7376, 42715, 18597, 53143, 2791, 2915, 5977, 2028, 5787, 5128, 7829, 2819, 11980, 14041, 26401, 21637, 45234, 5105, 5038, 107839, 15144, 3242, 10375, 2566, 30850, 18095, 4902, 6479, 7745, 6077, 21737, 5412, 10276, 30596, 10039, 8600, 1543, 2830, 1890, 3065, 3002, 32208, 184423, 5220, 5702, 3207, 5027, 1385, 9559, 1453, 6937, 8056, 4144, 6184, 1725, 2011, 1340, 3040, 10960, 4869, 2018, 3755, 16819, 4111, 8108, 2565, 16930, 10784, 2565, 32093, 16586, 12964, 6915, 3158, 3815, 9168, 24864, 3262, 71903, 17634, 12632, 19407, 15389, 1619, 7949, 4511, 5880, 7818, 10388, 5021, 72508, 75200, 7591, 2932, 4366, 3740, 4900, 59724, 71565, 9085, 60033, 83374, 24362, 22783, 6061, 5255, 39888, 14161, 6206, 12090, 7856, 3841, 12073, 4894, 22161, 11534, 5798, 158680, 2564, 7730, 5672, 3278, 17016, 15589, 12647, 109872, 7695, 14742, 78547, 1756, 7298, 5489, 8358, 4063, 15891, 4999, 3242, 10909, 4273, 4816, 7247, 1700, 5683, 6658, 28046, 15818, 3864, 4797, 6930, 12252, 4232, 5119, 890, 9488, 24883, 19197, 16264, 11816, 4940, 37765, 4369, 5e3, 3161, 2435, 103752, 5345, 2779, 2013, 5628, 8433, 34022, 4999, 2161, 30897, 1723, 9959, 11793, 59934, 1207, 7815, 2825, 2905, 4673, 65384, 166051, 7999, 5032, 18980, 133231, 5589, 5392, 7780, 14918, 23017, 41051, 6774, 28754, 60646, 3612, 597405, 6083, 3497, 82517, 21095, 4920, 1357, 44506, 15721, 33992, 7264, 48196, 17171, 15650, 6272, 8513, 22056, 5534, 26999, 7690, 8962, 8447, 10567, 11356, 3685, 35587, 8983, 23776, 4293, 11397, 18306, 221600, 13885, 9839, 25045, 1665, 1063, 18856, 29764, 1418, 4650, 21965, 20533, 7257, 11063, 3390, 16052, 8035, 1807, 2067, 2646, 1417, 32434, 17743, 11582, 21321, 35640, 5640, 12444, 130099, 6473, 10566, 14178, 10600, 6009, 4063, 4804, 670, 5379, 5004, 9793, 11128, 4567, 3789, 14466, 3340, 7403, 3530, 2912, 9049, 4333, 3167, 28107, 7363, 2484, 2840, 177324, 6884, 20916, 2836, 12207, 32526, 12659, 2648, 18922, 40181, 12972, 164566, 43664, 5940, 10502, 21989, 4846, 7088, 5934, 11397, 4793, 3188, 55254, 4097, 42555, 30040, 47003, 93079, 31578, 15340, 7364, 42740, 47165, 3563, 4743, 2632, 7797, 2903, 4641, 3919, 6090, 20254, 10008, 6027, 50641, 154926, 6888, 46542, 7396, 28442, 22556, 126492, 56604, 135241, 163650, 27972, 154204, 19702, 11774, 36872, 14370, 1522, 13734, 35583, 6520, 4881, 3281, 958, 8342, 26874, 5562, 34734, 7731, 5348, 3708, 8497, 6472, 12208, 32580, 7653, 21038, 16209, 13447, 10847, 6585, 3140, 7881, 1588, 21035, 2362, 2198, 797, 33133, 34048, 1599, 3360, 1977, 120036, 6904, 56701, 43568, 54872, 12310, 9990, 20051, 9557, 23802, 2056, 11573, 12019, 8173, 10334, 3166, 1254, 4429, 14400, 159628, 24709, 13827, 16969, 37821, 7152, 4381, 6745, 42820, 855, 9386, 2593, 17587, 6538, 16725, 11501, 4953, 32329, 6722, 2269, 3796, 2883, 10928, 33302, 7292, 8660, 4890, 8480, 7883, 1880, 13578, 7234, 2403, 3747, 50203, 29663, 55904, 7057, 52456, 4836, 33151, 7077, 10578, 39896, 1207, 3163, 4534, 1317, 9822, 2138, 39077, 5436, 43355, 985, 11119, 4604, 23027, 13019, 13188, 3271, 180287, 2905, 5577, 6395, 43054, 7138, 1120, 6833, 439, 64953, 1961, 70160, 37089, 21938, 145591, 10678, 3249, 68037, 17532, 31879, 62102, 22262, 175741, 4903, 13919, 1360, 288355, 11338, 163545, 16537, 17729, 4402, 1670, 7254, 1851, 7758, 2837, 3590, 17670, 5485, 4511, 11694, 10883, 8201, 1729, 4027, 1641, 21514, 2522, 6131, 10666, 4312, 6309, 11745, 5140, 2996, 5831, 2965, 10037, 28590, 8973, 5324, 1795, 7115, 19433, 2363, 7764, 5580, 2542, 20771, 1472, 8609, 77887, 9133, 18769, 4868, 17716, 12892, 39602, 7517, 6120, 12074, 4251, 32104, 6294, 33331, 6367, 7817, 3999, 57451, 5269, 28924, 2675, 1660, 1679, 2986, 6551, 1896, 20834, 1831, 12570, 4068, 11132, 5092, 4370, 3897, 12829, 4624, 6730, 1841, 12212, 1696, 6753, 36058, 11617, 630, 44766, 3855, 982, 19125, 2668, 1104, 12126, 2109, 20254, 13371, 7144, 33592, 12040, 4606, 7254, 70297, 11726, 26311, 10941, 33961, 27971, 6624, 2475, 5015, 16024, 21231, 167149, 4320, 4846, 11084, 6668, 4655, 4570, 2309, 1994, 18981, 6690, 4612, 7854, 13057, 6487, 8516, 9462, 2279, 1898, 3066, 1921, 3549, 1492, 2951, 1604, 4311, 6939, 4544, 2148, 4908, 8221, 4242, 7083, 5664, 60382, 4397, 3724, 2584, 6815, 2132, 18218, 4121, 12160, 1733, 9293, 25540, 4109, 4066, 1734, 1586, 2367, 6121, 1752, 15909, 22840, 37771, 7709, 6977, 5260, 34915, 5761, 12686, 1571, 41817, 4772, 7786, 1691, 3823, 1815, 14183, 2112, 79089, 10317, 26325, 13342, 26356, 49526, 4207, 2986, 4004, 21293, 4507, 2852, 5805, 5189, 1962, 2009, 5729, 2759, 7107, 54923, 4009, 20100, 3905, 144094, 3745, 3128, 13994, 15319, 13762, 26980, 309949, 4657, 5647, 13583, 6749, 5141, 17814, 16343, 12600, 3555, 13614, 2030, 67903, 16763, 6165, 4071, 18638, 25448, 9512, 6974, 237815, 4147, 10822, 6363, 2682, 2389, 5628, 5202, 156072, 18811, 10161, 14467, 7301, 3057, 6174, 5678, 12432, 15637, 22925, 2107, 61455, 257750, 8966, 52200, 11316, 2862, 4029, 3422, 10534, 9242, 2280, 2511, 11330, 5153, 8076, 1623, 1720, 1500, 34458, 14415, 5082, 9044, 10219, 4416, 29542, 13015, 3531, 5611, 26006, 4301, 13416, 16904, 13621, 7335, 3777, 26818, 6174, 9129, 10596, 6163, 4907, 28289, 3929, 25753, 11006, 7457, 11718, 34941, 62949, 12938, 77173, 5429, 65296, 67648, 3850, 7872, 5872, 120425, 57372, 36975, 23399, 3758, 10474, 3424, 138371, 22254, 4985, 7790, 1727, 15340, 24948, 21594, 1724, 6847, 3656, 6634, 47111, 107405, 94006, 52392, 27999, 2146, 2061, 2295, 7855, 2951, 15716, 4366, 1432, 22100, 21734, 4205, 7237, 5960, 2480, 40780, 21186, 52491, 18922, 5427, 1706, 3308, 11058, 3219, 70925, 3704, 21315, 37801, 7252, 4102, 5575, 6864, 12392, 4314, 11874, 8586, 8618, 7622, 29814, 4979, 1494, 5923, 14721, 2235, 11625, 1440, 4359, 2026, 3261, 4162, 9307, 10316, 9112, 7656, 48761, 6165, 14471, 61203, 87160, 11117, 4962, 19736, 3956, 9004, 16410, 2901, 67132, 2396, 16204, 15886, 18259, 16224, 17231, 9399, 970, 4162, 19011, 14048, 6458, 19386, 12150, 16382, 4445, 4102, 7047, 2762, 29862, 10218, 42759, 12611, 2347, 3157, 7430, 2833, 2624, 14440, 6760, 11461, 3865, 4368, 6649, 5348, 11032, 73570, 7280, 11491, 3336, 7319, 3497, 3556, 2858, 5283, 56212, 211980, 11070, 49931, 31245, 22324, 7906, 1786, 1797, 23814, 4408, 3155, 4578, 3907, 1570, 3734, 9413, 2175, 3534, 5422, 5109, 13935, 9540, 14398, 4127, 5686, 5745, 24714, 21902, 45351, 11083, 7763, 5427, 12372, 49139, 6013, 9345, 42075, 6187, 4045, 2687, 12611, 19535, 105603, 16622, 13122, 11696, 11108, 26533, 4146, 11603, 5583, 3398, 3083, 4975, 15196, 5899, 5472, 17386, 2078, 4634, 110803, 27201, 5471, 90369, 2507, 3680, 14956, 6711, 2737, 41276, 76412, 11413, 28118, 59384, 5060, 2074, 49016, 17068, 17185, 15455, 62193, 1969, 6996, 8634, 11288, 5014, 15870, 7654, 29759, 12695, 92215, 118558, 40977, 23829, 14614, 17920, 16463, 2304, 20277, 6193, 768, 3591, 10194, 2788, 8878, 5500, 822, 7703, 2179, 3893, 6191, 2798, 10070, 1853, 4584, 25846, 13711, 2495, 17070, 5414, 3539, 4635, 13690, 160390, 154919, 189605, 35252, 50160, 3369, 5726, 2356, 2726, 25372, 13137, 23714, 11015, 38430, 7801, 19877, 25890, 3176, 3679, 20771, 6609, 23575, 3209, 2967, 10389, 10773, 22750, 55275, 1558, 18801, 3084, 1700, 6311, 25556, 2503, 171201, 15349, 5457, 29635, 5593, 5258, 2769, 2412, 5657, 4154, 218902, 33291, 8302, 3303, 97096, 1164, 3110, 11190, 1893, 255133, 6444, 3300, 708, 7778, 755, 17564, 4124, 16494, 3844, 944, 7245, 12953, 5299, 1744, 1044, 844, 1592, 2839, 1946, 2392, 1749, 3706, 4214, 2438, 8875, 3089, 8936, 6642, 1754, 1913, 1483, 19734, 3014, 3285, 1254, 1897, 8325, 1434, 921, 945, 6381, 1159, 3090, 8889, 1762, 719, 1219, 952, 17298, 907, 704, 7734, 9680, 10332, 1794, 2262, 7470, 1428, 2769, 2093, 3539, 288, 1359, 10437, 12095, 2019, 40318, 88646, 2468, 23989, 449, 1002, 3541, 915, 3166, 10386, 1076, 6945, 3935, 1982, 8724, 15705, 3767, 7033, 14365, 790, 13279, 2466, 1527, 9689, 2396, 10705, 4527, 11704, 1307, 8686, 36173, 11987, 9636, 21042, 4015, 4634, 8214, 40903, 97691, 8503, 11868, 3505, 40112, 5355, 1890, 751, 36055, 1178, 655, 1449, 902, 3461, 3224, 11793, 14690, 5942, 1828, 590, 2922, 11043, 11351, 1522, 1280, 808, 26577, 39619, 2878, 2267, 7194, 9698, 6854, 26139, 3290, 150783, 3693, 2695, 1435, 702, 2259, 1144, 8379, 7665, 2318, 8155, 4762, 3012, 1884, 9397, 43352, 40296, 36176, 1671, 1143, 1329, 9122, 3982, 10237, 9795, 91853, 4768, 3187, 2608, 111606, 134317, 47992, 13015, 1171, 764, 19028, 623, 3297, 5666, 1509, 2232, 22679, 3985, 11866, 36394, 2823, 1470, 8900, 20217, 107223, 6119, 3132, 8879, 720, 1406, 19508, 98439, 791, 1424, 1778, 2028, 3342, 335, 319, 727, 1147, 7220, 5264, 953, 1352, 2943, 11009, 4312, 3313, 12030, 3754, 12871, 17799, 935, 10757, 19754, 7003, 694, 17068, 7798, 4425, 1677, 1853, 856, 1993, 546, 586, 6517, 754, 2543, 3194, 1725, 2476, 706, 348, 6017, 26019, 1977, 5582, 12150, 4951, 1178, 10697, 8024, 6235, 5320, 44350, 18482, 23839, 2481, 2884, 28510, 4743, 15450, 6650, 301043, 55608, 9052, 5016, 11407, 2732, 69900, 18871, 3751, 1242, 4771, 1663, 228, 1242, 1475, 396, 1107, 1180, 19106, 10043, 14323, 8910, 1967, 1132, 407, 1583, 698, 2868, 5889, 734, 1392, 3030, 25182, 41726, 6278, 781, 1654, 17008, 2303, 7733, 65751, 1489, 8448, 10879, 24653, 1703, 14821, 15030, 9297, 20292, 37594, 1980, 5263, 3167, 715, 5394, 1173, 147885, 1248, 4405, 306, 83284, 13290, 44423, 8347, 1482, 3277, 4160, 104654, 2311, 69693, 3159, 3298, 2792, 7369, 33976, 11153, 16758, 52059, 4191, 1927, 51615, 16083, 6333, 75139, 26181, 5822, 92014, 9470, 99943, 46075, 93566, 220190, 6253, 53404, 7738, 35134, 17555, 8055, 3782, 12581, 39703, 12095, 18315, 52971, 23783, 4898, 4430, 3098, 2963, 3204, 3631, 4538, 1007, 1762, 1482, 15737, 4232, 6830, 3368, 631, 6017, 35726, 8689, 54292, 2863, 3274, 1468, 7746, 6295, 7662, 3079, 10917, 6253, 18460, 1804, 4794, 2351, 2729, 6361, 22392, 3138, 5124, 4917, 2200, 447, 2514, 4965, 6870, 13391, 1129, 6211, 46571, 7203, 1736, 2836, 3231, 4367, 302, 9656, 12257, 11194, 612, 4181, 15183, 3067, 7489, 9599, 5673, 2088, 8959, 8448, 5192, 3580, 10160, 31260, 2736, 8347, 4238, 3873, 5076, 2575, 12415, 3175, 2593, 4762, 4669, 10309, 8619, 4260, 29761, 2570, 1853, 16546, 27446, 14405, 5084, 13881, 13134, 48903, 20592, 14196, 3592, 5878, 4387, 15330, 4017, 15941, 9869, 26422, 6765, 18029, 67173, 5284, 1591, 5970, 3502, 7966, 8383, 7378, 8143, 108959],
            d2000: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1638, 2616, 77, 1114, 1172, 45349, 1233, 1877, 2542, 7131, 7840, 2229, 3990, 6505, 261, 1854, 8311, 40020, 2317, 47569, 23484, 13470, 0, 139618, 28670, 5995, 1446, 1570, 2678, 4696, 4025, 61390, 2888, 2766, 3872, 11387, 418267, 33214, 18120, 5046, 2996, 4481, 486, 1426, 4322, 2407, 3997, 7418, 1512, 3795, 185158, 8176, 5056, 3436, 119, 4002, 2637, 4838, 3218, 316, 1901, 1617, 24883, 1266, 2171, 27190, 14627, 70411, 4589, 140236, 28187, 269754, 137630, 12107, 1435, 0, 0, 0, 36571, 789, 19769, 2342, 1442, 1910, 2398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13385, 200657, 14169, 169576, 3240, 32648, 0, 0, 0, 0, 0, 0, 0, 0, 1407, 2649, 29939, 3321, 1827, 72869, 59227, 41560, 9637, 5398, 73571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5222, 11762, 3838, 19509, 97313, 9851, 69576, 0, 0, 0, 0, 0, 0, 0, 75207, 0, 0, 0, 0, 0, 14414, 2047, 13897, 0, 0, 0, 0, 0, 0, 97341, 3075, 47380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14668, 387760, 29646, 25531, 0, 0, 0, 8704, 4425, 0, 0, 6523, 9745, 0, 0, 0, 0, 0, 8918, 11682, 0, 0, 0, 0, 16487, 328867, 26621, 44674, 49226, 0, 0, 0, 0, 882, 31338, 11980, 6540, 1762, 14899, 3e3, 32017, 1969, 265, 825, 7627, 7209, 5387, 5366, 6204, 118, 2455, 1040, 531, 1241, 2158, 13647, 1240, 33153, 1463, 766, 2143, 275308, 2768, 341, 6507, 846, 387, 619, 1789, 1066, 438, 66, 312, 7354, 1247, 206, 321, 1840, 116, 1027, 14726, 869, 3516, 534, 244, 420, 6755, 264, 203, 718, 1082, 477, 23436, 143, 783, 69983, 0, 2768, 209, 2188, 52097, 1069, 452, 3294, 1689, 1868, 7039, 696, 4650, 108, 251, 1874, 214749, 437666, 241578, 39084, 3994, 5069, 4180, 2206, 1076, 566, 198, 878, 472, 9733, 39, 1158, 1376, 22061, 4090, 11610, 14193, 584, 85, 1407, 2326, 2293, 2170, 5021, 820, 179, 73347, 2660, 848, 346, 683, 2551, 1133, 363, 11041, 4554, 4770, 2179, 2148, 2099, 1327, 447, 1134, 2413, 857, 446, 844, 774, 863, 1052, 457, 1188, 1382, 2612, 610, 141, 637, 5906, 2263, 4206, 635, 2210, 6618, 3760, 2093, 839, 214, 2027, 3855, 4149, 2975, 3960, 720, 5777, 1865, 1544, 1304, 6122, 6536, 1271, 517, 11737, 160419, 104, 3011, 8878, 3263, 447, 2417, 1193, 83848, 618, 1344, 252, 437, 1587, 1636, 3153, 268, 81590, 12520, 1313, 3926, 2431, 3321, 306, 1028, 1223, 1062, 3656, 818, 256, 2481, 2132, 4463, 3297, 14637, 40650, 2250, 1414, 2358, 799, 534, 2845, 1018, 44526, 681, 10892, 222, 1970, 1076, 5673, 7108, 23912, 349, 215, 1249, 599, 5514, 6543, 468, 567, 4189, 2364, 380, 2833, 2744, 4704, 3692, 417, 19890, 202, 5465, 1476, 10629, 811, 968, 1774, 1360, 1100, 224, 103, 3138, 687, 207, 1186, 521, 32411, 133258, 5546, 11244, 415, 723, 2316, 5170, 3298, 541, 454, 5190, 190, 8646, 1184, 12162, 1930, 2336, 178, 1246, 2540, 4591, 213, 823, 1740, 976, 2695, 1736, 468, 16470, 319, 137, 2331, 144, 9025, 117295, 9425, 75116, 752, 443, 540, 391, 1422, 2211, 3752, 3679, 1530, 4510, 4140, 2081, 10281, 1456, 5465, 1471, 8169, 73411, 1225, 6877, 7242, 2515, 1245, 2510, 2334, 1809, 1562, 871, 3549, 807, 1512, 1025, 28097, 580, 884, 263, 1636, 4841, 1643, 755, 307, 623, 458, 5521, 355, 853, 42884, 429, 33747, 250, 265, 1614, 575, 3927, 1162, 513, 377, 564, 392, 500, 98, 821, 3596, 3471, 99461, 353, 6340, 4127, 2653, 18249, 374, 839, 507, 6037, 334, 4166, 822, 162, 1796, 7857, 9288, 2775, 705, 17470, 18469, 11794, 1216, 386683, 23462, 147688, 4601, 132, 294, 173758, 360, 284, 8763, 1346, 1282, 513, 1300, 2638, 991, 44650, 604, 1314, 306, 778, 78, 379, 1037, 79118, 468, 1667, 113, 2963, 2885, 4041, 2556, 1223, 1296, 1235, 7864, 3117, 211, 809, 46055, 1950, 1814, 1703, 1416, 241, 3115, 1068, 11971, 9753, 2568, 7534, 29, 387, 2142, 577, 1769, 10588, 475, 3524, 251, 8704, 1419, 1046, 856, 344, 602, 1460, 4001, 3557, 345, 9359, 1174, 1838, 2086, 3686, 678, 26, 65, 43, 2936, 955, 1780, 897, 1753, 1001, 583, 2550, 55, 924, 11123, 2095, 15555, 993, 9319, 5647, 2435, 7186, 7540, 779, 18845, 3745, 958, 1148, 7256, 2799, 227, 27792, 469, 4755, 3955, 4172, 8878, 1401, 359, 544, 1852, 1439, 7700, 20280, 13360, 13025, 2256, 548, 3429, 3355, 10504, 1108, 228, 3008, 726, 1625, 4618, 480, 727, 709, 380, 7093, 217, 263, 342889, 1990, 1063, 497, 460, 848, 644, 62561, 418, 34818, 1126, 281, 2132, 553, 5293, 61799, 1099, 6087, 2308, 441, 79776, 1402, 5554, 4272, 8367, 6659, 3156, 794, 4943, 1256, 562, 5553, 617, 1114, 3783, 150, 488, 2982, 1710505, 10717, 11650, 4830, 556, 3893, 449, 1650, 806, 9131, 2838, 663, 3294, 2208, 522, 934, 570, 7487, 505, 886, 6188, 597, 17691, 202576, 3171, 264, 332490, 4102, 66618, 338, 166757, 2804, 100970, 1495, 173, 3059, 188, 816, 20127, 42449, 469, 1013, 2795, 4493, 1318, 969, 72, 3283, 3642, 283, 21011, 2652, 79135, 2816, 16634, 22726, 945, 354, 3660, 400, 292, 951, 3783, 350, 1314, 3264, 81656, 1400, 1387, 16445, 294, 707, 320, 95059, 26220, 224338, 1745, 913, 2165, 482, 40144, 611, 2772, 631, 484, 60, 5205, 48, 84, 296, 2037, 66003, 1361, 705, 2393, 564, 4137, 15465, 2296, 510, 3243, 168, 1084, 10813, 6467, 5425, 1866, 339, 1906, 583, 2361, 2408, 1087, 3458, 1932, 24063, 19650, 5233, 152, 5245, 266, 212792, 745, 3748, 3310, 7235, 1211, 185, 14, 993, 837, 5041, 876, 9957, 243, 14108, 1356, 579, 24851, 2498, 15489, 2301, 1459, 2493, 8244, 1749, 1054, 511, 507, 2750, 384, 5304, 149, 1598, 6323, 516, 12055, 2191, 196100, 5837, 2542, 3386, 3499, 1424, 751, 1843, 15325, 282, 2219, 2566, 11778, 1899, 7455, 62, 11662, 67618, 1788, 17670, 391819, 3272, 1475, 56448, 1831, 2039, 231, 482, 7076, 5535, 211, 523, 1196, 424, 8416, 14921, 2326, 293, 122693, 6772, 27076, 1145, 4208, 1707, 543, 28888, 3937, 2852, 2555, 1128, 150, 461, 395, 17085, 2321, 402, 78583, 11864, 7541, 1569, 1893, 107576, 1838, 133, 680, 794, 1361, 955, 74, 598, 383, 2588, 1494, 2530, 1872, 49, 3844, 416, 202, 965, 228, 3238, 5952, 27042, 1949, 1411, 6644, 2258, 1564, 1432, 82614, 2455, 54132, 531, 2503, 666, 476, 4525, 916, 9819, 33006, 6447, 3553, 5365, 11095, 1508, 2201, 6475, 53907, 11315, 52457, 7454, 6443, 5880, 4502, 4611, 416967, 31555, 9627, 15959, 2062, 115058, 12572, 8444, 19180, 23355, 250631, 3600, 9075, 1820, 53806, 1107, 2567, 12056, 3350, 2311, 11621, 24614, 6643, 11264, 15327, 25059, 6805, 4872, 2623, 9586, 8500, 1486, 1763, 1977, 158765, 9021, 11127, 3059, 15781, 4357, 4361, 40371, 16060, 4020, 4143, 2356, 2251, 8436, 3519, 1726, 2564, 2566, 7378, 4896, 8139, 43810, 9445, 17157, 3063, 26251, 2014, 1405, 7034, 962, 8224, 1940, 1884, 61628, 25400, 77625, 8751, 30622, 21457, 4045, 10259, 2721, 2137, 61434, 2530, 2299, 1024, 2332, 11047, 4028, 2460, 4126, 2340, 2118, 2726, 1300, 3540, 2489, 1519, 6743, 8752, 5470, 1053, 1278, 2551, 8844, 4222, 89715, 33578, 3672, 1813, 47277, 1591, 1525, 1710, 4763, 2608, 2965, 5412, 17360, 1038, 6093, 8412, 9527, 6785, 1822, 13704, 1318, 1255, 14769, 3735, 18365, 28780, 4430, 2605, 172625, 26790, 2481, 3823, 2604, 1085, 2568, 6097, 7164, 7733, 1006, 19281, 2478, 808, 4585, 790, 1792, 2529, 7896, 1812, 96557, 4400, 5797, 6542, 5899, 18221, 10668, 14469, 5662, 4515, 4415, 2368, 3670, 8396, 3094, 13183, 4845, 6485, 5783, 1966, 38638, 29113, 3646, 7428, 8782, 2166, 6694, 3734, 5831, 4364, 3476, 2733, 1196, 541, 2736, 752, 5162, 171923, 453, 4032, 1387, 9090, 2230, 2070, 152039, 4224, 7778, 249, 2254, 7834, 2708, 2922, 4182, 542, 2612, 1390, 188450, 4112, 1413, 12295, 2729, 600, 37590, 15167, 8160, 2214, 6870, 7762, 1713, 10088, 10853, 1452, 1049, 1754, 41636, 3775, 1328, 9015, 2103, 126911, 4747, 4683, 3505, 4929, 8058, 5092, 3370, 73828, 5741, 6505, 2370, 69231, 3498, 9481, 3906, 4123, 6899, 1919, 16255, 2658, 9056, 3297, 8969, 5474, 136325, 37934, 62363, 35857, 17478, 178400, 8634, 9453, 272, 3232, 2527, 2835, 1217, 1539, 3048, 6020, 3605, 3643, 1817, 2697, 951, 3202, 1699, 2101, 8342, 4822, 3062, 119833, 23211, 25822, 12562, 9793, 9155, 10222, 80787, 4006, 29600, 18898, 1815, 4397, 11773, 2030, 11921, 2646, 1563, 52390, 16172, 2257, 41091, 5131, 8450, 4474, 5328, 8183, 2066, 9691, 2638, 2044, 4641, 3982, 15406, 13489, 1987, 3524, 38616, 939, 4507, 6056, 2574, 5169, 17920, 6136, 13556, 1756, 3700, 14688, 71792, 8196, 7537, 44961, 6904, 4953, 4748, 12596, 1662, 556, 1963, 1340, 4420, 4836, 3359, 13455, 25037, 7911, 132914, 59150, 15774, 5893, 3462, 6412, 2922, 7549, 2093, 821, 956, 893, 8622, 9632, 48897, 2294, 1934, 2874, 2177, 8480, 33633, 2110, 1181, 2547, 12180, 1458, 2735, 13424, 43265, 142469, 1944, 10249, 2022, 1293, 2678, 1210, 4698, 927, 29222, 6538, 3370, 5573, 17570, 4277, 6495, 2561, 35534, 43359, 5390, 10416, 2288, 4896, 281201, 4597, 37865, 7677, 1184, 4256, 1943, 7516, 2490, 996, 15030, 4627, 5529, 51981, 12192, 3785, 6257, 2958, 11912, 2209, 232453, 90902, 216119, 12886, 1555, 5327, 18818, 2921, 99506, 2489, 127166, 5289, 52880, 6851, 202682, 22189, 6924, 1724, 22286, 4557, 3351, 161578, 8798, 2697, 5239, 4367, 6492, 28152, 38524, 4937, 51958, 6860, 4363, 1621, 13009, 1584, 1777, 3547, 4862, 2643, 5474, 38925, 11127, 329963, 11682, 1640, 7735, 3657, 1220, 2234, 7508, 31174, 2863, 2181, 4690, 5441, 5107, 29559, 2682, 4662, 14365, 6723, 3841, 1931, 6062, 2192, 3872, 8898, 12044, 48645, 2314, 5963, 44745, 1462, 5255, 1076, 1013, 783, 2839, 2971, 40042, 821, 86676, 816, 3593, 1440, 6694, 10282, 11912, 2736, 2100, 2040, 3301, 16402, 5090, 20876, 4776, 2889, 3914, 6228, 4155, 48807, 1518, 28160, 3899, 10228, 17523, 940, 6734, 8054, 8208, 2117, 190404, 5722, 6841, 1088, 2967, 15434, 5484, 5017, 6724, 7358, 8514, 5020, 5060, 5785, 4884, 8768, 6300, 5579, 5639, 6685, 4355, 4585, 1928, 60127, 2099, 2792, 4947, 1546, 1839, 69530, 3444, 2692, 202018, 3363, 19065, 17732, 17134, 1961, 1944, 3932, 2426, 4003, 4640, 5060, 2281, 6142, 5905, 38221, 42717, 19251, 2214, 2582, 120508, 7644, 2705, 7460, 2278, 28193, 6703, 2238, 3552, 2684, 5442, 5834, 2953, 3184, 16141, 7227, 4313, 1845, 1513, 2006, 1639, 2187, 29779, 240176, 3907, 3215, 2388, 2312, 1136, 4101, 1580, 3995, 3744, 4661, 3595, 2820, 2122, 1017, 3435, 12185, 4033, 836, 2258, 4856, 1727, 3690, 1229, 8749, 6691, 1471, 27312, 10273, 8808, 3675, 3019, 4986, 3319, 12700, 3060, 109078, 13796, 7153, 15520, 10845, 1878, 5763, 2090, 3886, 8940, 10201, 3870, 56232, 90324, 10693, 2187, 2167, 1319, 3627, 58556, 35665, 2872, 61095, 185505, 28188, 10381, 5999, 4841, 21387, 6598, 3384, 6138, 5895, 2296, 9485, 2653, 13875, 9066, 5242, 129889, 2063, 6296, 4997, 2674, 5564, 15980, 5972, 46390, 4960, 7564, 51708, 690, 6249, 2069, 5627, 891, 6659, 4314, 1496, 4435, 2583, 1554, 2790, 1710, 2601, 5915, 30112, 12376, 3096, 5045, 7224, 5561, 3720, 2281, 1107, 3636, 13005, 7226, 11266, 3127, 3714, 11952, 701, 2253, 6018, 1648, 62268, 5464, 1205, 1604, 2392, 4103, 15495, 3833, 1336, 18220, 3383, 6643, 8741, 30725, 555, 4993, 1554, 1828, 2817, 74203, 160635, 4114, 3198, 10894, 89624, 4862, 3488, 2563, 7673, 12986, 38604, 6577, 15492, 118206, 3413, 1280547, 3333, 1870, 112003, 14798, 2870, 1876, 21353, 13718, 15584, 6449, 26635, 10370, 5212, 3674, 4523, 6652, 3064, 17433, 4793, 5037, 5425, 8332, 7485, 3765, 32429, 4600, 15203, 2529, 6175, 7741, 359913, 6721, 5594, 28152, 1092, 460, 8295, 31413, 1381, 1776, 13250, 11718, 5262, 5605, 3360, 8975, 5521, 1048, 1699, 2650, 941, 27016, 17031, 9112, 17424, 26215, 2037, 7330, 449182, 4813, 3536, 6300, 5472, 1710, 3505, 1174, 341, 2747, 1448, 4493, 6516, 4253, 2877, 7920, 2560, 8355, 2883, 2096, 6203, 1372, 1273, 24996, 2172, 2704, 4576, 123466, 7092, 19736, 2603, 5071, 23403, 7959, 4349, 9309, 22118, 4633, 149901, 19100, 3251, 6261, 13394, 4136, 6287, 3752, 5374, 3915, 2043, 47703, 3236, 21354, 11933, 29739, 127539, 22790, 8574, 6433, 33002, 50825, 2092, 2176, 1860, 3217, 2756, 4047, 2387, 2250, 9142, 4358, 2960, 18115, 64319, 4239, 33983, 3396, 21873, 12327, 154998, 83256, 88039, 131476, 14574, 102104, 8992, 4225, 20572, 4063, 1650, 6375, 31446, 4923, 2782, 4652, 3504, 2769, 9412, 2981, 34808, 10405, 5842, 1426, 7863, 3301, 10691, 13996, 3581, 19831, 6685, 6753, 13158, 3166, 3887, 8371, 1112, 14896, 773, 1617, 1267, 21409, 30308, 779, 2233, 1313, 82047, 2869, 265801, 45381, 85617, 6336, 6300, 13697, 8322, 12028, 1066, 6481, 4617, 3638, 4209, 2017, 1981, 2139, 10374, 218010, 14977, 9641, 12193, 38162, 3596, 2178, 3092, 14890, 849, 5044, 2097, 7757, 3287, 10191, 9541, 3048, 9248, 4787, 2087, 4792, 1715, 4166, 17459, 4011, 6544, 4826, 2771, 4524, 1127, 5092, 3486, 1587, 1285, 55961, 37957, 38414, 5427, 41563, 3837, 40472, 8936, 4183, 35515, 787, 2789, 3113, 1310, 7754, 3451, 16409, 3766, 19606, 2338, 4440, 3437, 17667, 5220, 10543, 2783, 252329, 2104, 1620, 3548, 8050, 3227, 1706, 2994, 555, 62199, 5447, 56667, 16093, 20593, 54968, 4209, 2037, 19142, 10383, 14779, 53097, 13670, 177990, 2356, 4459, 2103, 341610, 10249, 161743, 12017, 10476, 3441, 982, 2285, 2757, 4812, 2047, 2094, 12603, 4059, 1939, 7653, 5724, 1936, 2776, 2194, 832, 11950, 1976, 5347, 12276, 4238, 3962, 5935, 3114, 1714, 3741, 2033, 6415, 19685, 5042, 4339, 2208, 4348, 8195, 888, 3963, 2595, 2902, 6503, 1078, 4898, 18002, 5802, 9712, 4091, 8839, 10461, 16246, 3239, 4522, 5541, 3024, 17707, 4551, 17487, 4101, 5570, 1859, 18745, 4135, 16561, 2870, 708, 1077, 2033, 4116, 1298, 12197, 2357, 9314, 3060, 6481, 2737, 1664, 3707, 4806, 2045, 4679, 1211, 8062, 954, 4018, 25379, 4119, 2786, 57471, 3104, 1048, 7713, 2835, 1168, 5073, 2311, 13667, 5566, 2656, 22687, 5454, 3661, 3397, 49520, 4835, 23817, 5510, 14663, 21939, 4333, 1114, 1397, 12224, 16799, 497468, 3004, 2580, 4553, 3197, 2467, 1774, 1275, 975, 10616, 2121, 6049, 3341, 8347, 4963, 6e3, 8699, 1065, 1250, 2973, 1957, 1379, 2727, 3255, 1806, 3270, 3102, 3230, 1691, 3808, 11351, 4945, 4309, 4031, 30938, 2125, 1937, 1747, 3885, 1680, 11412, 1418, 9521, 1300, 5635, 12040, 1299, 2223, 1149, 1910, 1438, 7107, 1867, 17834, 13260, 11366, 7935, 2591, 2717, 14891, 3415, 11069, 843, 14922, 1425, 7230, 879, 1495, 1169, 6379, 1977, 58170, 5991, 22857, 11460, 18525, 46618, 5656, 2719, 2503, 8797, 5745, 3387, 3324, 4678, 851, 1414, 4003, 3527, 4120, 154888, 3496, 22341, 2778, 173769, 3830, 2122, 21807, 14348, 9170, 14600, 306306, 1158, 3833, 5030, 6295, 5627, 7066, 7697, 8768, 4102, 6669, 1563, 68320, 12471, 2147, 3685, 9769, 28251, 4107, 3655, 404043, 2673, 4930, 2902, 1875, 1880, 1779, 1950, 134189, 7571, 5481, 9575, 3722, 4660, 5889, 1686, 6634, 10785, 13118, 2970, 86647, 530414, 5326, 27360, 6961, 2023, 2425, 2646, 4055, 4476, 1262, 1430, 6452, 2491, 6794, 1657, 1518, 927, 23569, 13035, 2932, 6799, 6436, 2212, 16543, 8904, 5263, 3950, 12168, 4930, 10253, 7056, 4906, 10967, 1934, 9758, 2908, 7828, 8663, 5527, 2361, 28455, 3710, 20657, 7399, 3205, 5955, 27984, 20927, 4791, 48199, 5813, 44390, 31053, 1317, 5754, 4163, 134861, 59399, 46789, 27490, 2261, 4529, 3605, 114597, 13415, 4289, 3480, 818, 6341, 12664, 5484, 1764, 2230, 2849, 3158, 47781, 449300, 109896, 43933, 19761, 1172, 1267, 1392, 3515, 1648, 7891, 2132, 822, 6643, 15840, 2535, 6319, 5527, 1187, 16284, 8588, 38545, 11924, 3569, 851, 1359, 17945, 1718, 100103, 2721, 38543, 28811, 6111, 1692, 3150, 3549, 6183, 3557, 6262, 3606, 3800, 5616, 15781, 3606, 3395, 3497, 8202, 3059, 5226, 2081, 4239, 3304, 4205, 2822, 6111, 5829, 4600, 6080, 69212, 3482, 5945, 59809, 108344, 5287, 2793, 8412, 2841, 5139, 3478, 3899, 22830, 1896, 6593, 9512, 13997, 11146, 11662, 8221, 1116, 1957, 8296, 7145, 3431, 7158, 12315, 7909, 2355, 3939, 8927, 4845, 13301, 17716, 11971, 3420, 1105, 1558, 5146, 2587, 3651, 13990, 3441, 15281, 2268, 1628, 1458, 3398, 4655, 154509, 11319, 15140, 1671, 4797, 1499, 1844, 2026, 3318, 62701, 196501, 7197, 60449, 33554, 24023, 3094, 4557, 997, 9334, 2164, 1620, 2912, 3192, 7665, 2570, 8068, 1601, 4981, 4182, 1122, 6778, 4918, 6851, 2233, 1535, 3979, 11232, 12376, 29292, 5330, 5117, 3167, 3651, 38626, 2595, 5589, 16199, 5514, 1670, 2008, 13611, 5415, 115376, 20790, 6323, 4996, 6708, 29560, 1677, 5855, 2085, 3245, 1432, 1938, 4942, 5188, 2710, 4977, 1419, 1813, 60969, 14580, 3282, 142317, 2177, 4005, 12636, 2846, 3041, 24936, 40698, 11015, 24262, 59077, 3386, 3109, 23196, 7133, 17488, 11307, 46497, 1886, 8065, 5059, 5854, 2922, 5040, 4428, 8927, 19802, 75308, 119759, 57643, 15879, 9852, 10719, 17382, 1750, 18326, 4001, 867, 3951, 4174, 1178, 2912, 3192, 2414, 2869, 1319, 2473, 2770, 1214, 7940, 1901, 2326, 11162, 16650, 1622, 11720, 2055, 2907, 6401, 7537, 197928, 221167, 193769, 43319, 41806, 1032, 1723, 736, 1610, 14126, 7647, 12899, 5870, 10786, 5232, 13209, 10269, 5513, 2188, 30921, 5874, 12213, 1361, 2430, 6900, 9986, 13455, 20146, 339, 6236, 1394, 994, 3303, 15749, 2584, 95442, 9389, 3694, 50260, 3370, 3216, 1568, 978, 3235, 3738, 152550, 18181, 6701, 2771, 138470, 830, 1018, 6247, 1507, 307599, 3632, 2139, 147, 4192, 359, 17196, 4072, 9982, 1513, 278, 3884, 11538, 3745, 888, 353, 223, 689, 841, 923, 1475, 956, 2533, 2251, 1466, 5534, 2952, 9514, 8620, 1835, 686, 1430, 9844, 1465, 1011, 350, 653, 3439, 676, 880, 388, 8967, 702, 925, 5688, 2059, 156, 474, 235, 10593, 484, 64, 5533, 7970, 5451, 1575, 1514, 4034, 848, 3579, 2244, 2903, 949, 335, 8559, 8961, 932, 32868, 61767, 1173, 17241, 82, 952, 1933, 286, 840, 7173, 884, 4132, 4066, 1394, 5764, 9593, 2458, 6148, 10128, 244, 4451, 1093, 1256, 3330, 1700, 10583, 2831, 8220, 1107, 5661, 13488, 10876, 4335, 9891, 1417, 4895, 4958, 20370, 76421, 8296, 10331, 2760, 64237, 2128, 806, 306, 17503, 474, 458, 405, 283, 1165, 3014, 6352, 15503, 4597, 2211, 61, 2225, 7260, 8339, 618, 330, 296, 9842, 21451, 2528, 2036, 4376, 5274, 4402, 20432, 4426, 138249, 1973, 1753, 791, 209, 1274, 295, 4329, 7053, 2071, 4706, 3695, 832, 1620, 6509, 25546, 34033, 16762, 1492, 356, 297, 6370, 3242, 7301, 5253, 68008, 3830, 1910, 2158, 74604, 129612, 50467, 5560, 803, 303, 13137, 53, 1501, 5472, 305, 847, 13077, 3161, 8676, 26546, 895, 515, 3822, 18233, 90662, 4616, 836, 3577, 549, 926, 11921, 188441, 267, 1246, 462, 2345, 1434, 85, 724, 161, 959, 2784, 2490, 443, 1080, 1658, 4995, 3413, 4356, 8928, 4427, 13304, 7073, 300, 4653, 14778, 5762, 326, 7809, 5484, 1352, 423, 792, 115, 638, 164, 475, 3067, 410, 1512, 1743, 2672, 1273, 243, 106, 1187, 8329, 1400, 3254, 7335, 3333, 256, 4318, 6664, 4199, 2736, 19512, 8412, 14254, 2698, 1364, 12462, 3626, 12102, 8281, 476700, 50302, 5516, 3062, 5609, 1197, 49430, 13779, 1406, 382, 2154, 512, 36, 939, 500, 88, 687, 295, 11255, 6009, 7188, 6560, 721, 921, 121, 630, 176, 758, 1629, 243, 2681, 2434, 12109, 24800, 2330, 540, 661, 7533, 1046, 4635, 49637, 1171, 13593, 9172, 24078, 816, 7311, 5595, 1511, 11887, 12359, 1349, 2450, 1539, 1064, 2946, 468, 125526, 467, 2235, 219, 26591, 6973, 45409, 4533, 328, 811, 1733, 23286, 1015, 16989, 2503, 3041, 1723, 2798, 11008, 4076, 7049, 12818, 3015, 1017, 61444, 8892, 8355, 22722, 15843, 5058, 58640, 3958, 76516, 33919, 40990, 108039, 9736, 18873, 2392, 14193, 5643, 5162, 2156, 4801, 19142, 9853, 18067, 13997, 6955, 2681, 3533, 1866, 1193, 589, 2796, 3093, 164, 416, 565, 12329, 1004, 2474, 2281, 218, 2212, 21425, 7041, 47530, 1129, 980, 336, 5361, 3227, 4546, 660, 2424, 2195, 19444, 1049, 3624, 1367, 1328, 4459, 10009, 1753, 4019, 3216, 2081, 314, 1444, 699, 6270, 6288, 402, 5036, 17277, 4737, 1590, 361, 555, 3407, 63, 6343, 6926, 4235, 202, 2674, 8561, 799, 2797, 4135, 4970, 1674, 8479, 6278, 2315, 3937, 10861, 16682, 2063, 2267, 1979, 2055, 3283, 2883, 1967, 2691, 1488, 2681, 2687, 8477, 6701, 5676, 31198, 1677, 1854, 17942, 14371, 12983, 2774, 13140, 9981, 32735, 15936, 13649, 2696, 6678, 4380, 15542, 2790, 8787, 7927, 39156, 5859, 21386, 49096, 3546, 1129, 4670, 3237, 5931, 8870, 7593, 6570, 85446],
            hsgrad: [94, 92, 88, 92, 78, 64, 91, 0, 96, 91, 93, 78, 79, 80, 74, 84, 91, 83, 74, 93, 92, 92, 0, 92, 0, 95, 70, 57, 58, 79, 77, 73, 78, 84, 68, 79, 89, 76, 80, 65, 48, 68, 54, 85, 86, 64, 89, 89, 88, 80, 90, 91, 55, 77, 75, 61, 77, 78, 60, 85, 78, 76, 88, 78, 62, 63, 80, 79, 76, 75, 89, 74, 81, 85, 71, 69, 70, 81, 80, 64, 70, 60, 86, 85, 75, 57, 78, 91, 66, 84, 60, 76, 84, 72, 82, 72, 87, 84, 87, 83, 78, 82, 0, 0, 0, 87, 81, 86, 60, 71, 81, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 88, 79, 86, 62, 86, 0, 0, 0, 0, 0, 0, 0, 0, 77, 79, 85, 67, 73, 91, 91, 83, 85, 80, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 75, 84, 93, 87, 70, 86, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 73, 78, 90, 0, 0, 0, 0, 0, 0, 91, 76, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 87, 88, 85, 0, 0, 0, 76, 80, 0, 0, 82, 82, 0, 0, 0, 0, 0, 85, 79, 0, 0, 0, 0, 90, 77, 89, 84, 87, 0, 0, 0, 0, 90, 86, 81, 82, 78, 90, 92, 86, 80, 92, 91, 82, 91, 84, 76, 81, 85, 82, 69, 71, 78, 70, 85, 66, 89, 67, 90, 88, 76, 75, 72, 80, 88, 89, 92, 91, 94, 91, 87, 88, 88, 87, 81, 89, 84, 84, 91, 88, 86, 90, 87, 93, 88, 92, 81, 89, 86, 84, 85, 85, 90, 80, 94, 95, 91, 88, 97, 86, 84, 84, 80, 84, 77, 88, 86, 88, 82, 71, 77, 78, 85, 86, 91, 90, 93, 83, 91, 92, 79, 76, 83, 72, 91, 78, 84, 79, 93, 92, 86, 86, 87, 98, 91, 87, 88, 89, 85, 86, 92, 90, 91, 92, 92, 78, 90, 87, 74, 70, 92, 86, 91, 86, 89, 87, 83, 87, 90, 86, 90, 94, 90, 73, 80, 84, 92, 86, 90, 93, 92, 92, 87, 80, 77, 86, 80, 83, 79, 88, 78, 90, 87, 73, 99, 70, 90, 89, 83, 81, 84, 83, 86, 79, 83, 90, 81, 87, 85, 81, 85, 77, 65, 73, 74, 71, 81, 75, 88, 77, 87, 75, 82, 72, 85, 83, 86, 92, 70, 90, 89, 91, 90, 89, 94, 88, 77, 91, 91, 90, 79, 95, 93, 93, 90, 92, 88, 88, 93, 83, 88, 90, 91, 86, 86, 80, 85, 80, 75, 79, 70, 89, 85, 82, 86, 88, 88, 81, 90, 50, 79, 71, 86, 79, 80, 89, 90, 91, 91, 83, 82, 88, 78, 72, 86, 81, 87, 82, 87, 81, 82, 90, 79, 82, 77, 82, 71, 58, 79, 92, 86, 90, 63, 84, 91, 92, 91, 92, 80, 79, 92, 90, 89, 90, 90, 91, 76, 91, 74, 92, 83, 84, 88, 92, 91, 74, 88, 86, 73, 86, 87, 87, 88, 90, 88, 86, 79, 88, 78, 87, 85, 89, 70, 85, 85, 77, 79, 80, 81, 75, 75, 82, 76, 76, 76, 81, 83, 89, 91, 87, 88, 94, 82, 75, 81, 76, 71, 79, 84, 82, 92, 75, 92, 90, 86, 78, 93, 74, 84, 88, 90, 89, 92, 92, 88, 85, 73, 88, 90, 92, 94, 88, 89, 82, 86, 86, 76, 76, 86, 95, 84, 77, 72, 85, 80, 87, 79, 82, 83, 80, 81, 83, 75, 83, 83, 80, 90, 86, 80, 87, 94, 77, 85, 84, 82, 73, 83, 84, 76, 92, 81, 91, 89, 93, 95, 90, 92, 88, 91, 88, 88, 96, 85, 81, 82, 80, 78, 85, 88, 88, 79, 88, 94, 81, 91, 84, 94, 83, 79, 83, 89, 79, 84, 82, 88, 83, 81, 81, 92, 72, 81, 62, 77, 82, 88, 78, 81, 79, 74, 90, 76, 67, 82, 89, 92, 84, 79, 87, 86, 88, 88, 89, 90, 93, 94, 96, 88, 92, 87, 89, 91, 92, 91, 94, 93, 85, 91, 69, 81, 83, 89, 83, 86, 82, 87, 85, 95, 86, 90, 79, 84, 76, 79, 90, 86, 74, 86, 89, 84, 78, 78, 88, 77, 90, 83, 87, 85, 72, 81, 77, 81, 82, 84, 68, 78, 73, 84, 75, 82, 88, 68, 90, 91, 91, 91, 77, 86, 92, 90, 85, 86, 90, 90, 88, 89, 90, 68, 93, 89, 97, 79, 92, 95, 86, 95, 89, 77, 81, 84, 81, 91, 83, 84, 75, 80, 70, 74, 82, 75, 72, 80, 91, 73, 80, 76, 86, 68, 81, 63, 81, 91, 88, 90, 74, 79, 85, 91, 88, 88, 92, 90, 88, 87, 90, 94, 90, 85, 79, 88, 87, 86, 82, 84, 79, 89, 79, 93, 85, 91, 93, 91, 95, 88, 93, 89, 86, 90, 88, 91, 77, 92, 77, 91, 84, 89, 89, 92, 90, 83, 67, 84, 89, 93, 86, 92, 91, 87, 86, 89, 86, 88, 74, 85, 93, 90, 88, 76, 73, 93, 88, 71, 86, 87, 75, 91, 90, 86, 91, 87, 97, 92, 87, 93, 91, 93, 71, 80, 95, 93, 85, 96, 89, 87, 85, 84, 97, 73, 89, 85, 80, 77, 84, 77, 82, 77, 80, 79, 92, 90, 89, 84, 71, 95, 79, 76, 85, 87, 92, 85, 91, 88, 91, 91, 84, 73, 75, 73, 78, 92, 83, 74, 79, 90, 74, 62, 88, 91, 91, 88, 81, 74, 72, 94, 94, 83, 95, 93, 95, 88, 89, 72, 88, 84, 91, 84, 83, 91, 85, 92, 77, 94, 68, 72, 70, 82, 70, 83, 85, 83, 71, 87, 94, 83, 88, 90, 75, 89, 87, 91, 85, 88, 86, 93, 86, 92, 91, 78, 92, 96, 86, 84, 87, 98, 76, 97, 84, 92, 86, 86, 93, 91, 81, 88, 83, 75, 86, 83, 88, 90, 86, 87, 83, 79, 89, 82, 89, 93, 82, 90, 91, 95, 90, 91, 87, 89, 91, 53, 95, 96, 90, 89, 90, 94, 86, 83, 91, 89, 90, 88, 80, 84, 93, 90, 86, 81, 85, 85, 92, 79, 82, 86, 80, 67, 85, 88, 68, 87, 84, 68, 70, 86, 77, 87, 80, 84, 72, 91, 80, 80, 88, 85, 91, 86, 88, 85, 92, 85, 88, 91, 81, 79, 71, 92, 80, 83, 89, 78, 80, 76, 85, 84, 76, 90, 92, 88, 81, 79, 87, 84, 78, 76, 84, 77, 90, 83, 73, 85, 79, 93, 85, 81, 72, 79, 73, 67, 71, 72, 76, 66, 75, 75, 76, 80, 84, 83, 81, 82, 86, 83, 72, 67, 73, 90, 72, 79, 93, 89, 91, 72, 91, 84, 88, 76, 74, 75, 87, 75, 76, 79, 77, 78, 81, 73, 83, 78, 84, 73, 77, 80, 79, 76, 86, 79, 82, 77, 81, 69, 92, 92, 91, 89, 78, 75, 88, 67, 70, 76, 93, 87, 89, 82, 85, 69, 81, 80, 76, 81, 78, 81, 68, 75, 84, 73, 88, 94, 89, 84, 88, 91, 81, 83, 72, 73, 79, 79, 80, 80, 79, 79, 74, 87, 80, 82, 85, 84, 92, 84, 81, 89, 91, 83, 86, 83, 87, 84, 74, 78, 75, 75, 84, 77, 72, 91, 77, 79, 75, 75, 89, 87, 75, 83, 78, 88, 90, 90, 75, 83, 75, 60, 70, 78, 78, 70, 86, 86, 74, 73, 76, 93, 75, 90, 90, 73, 86, 73, 74, 76, 79, 81, 86, 67, 80, 77, 93, 72, 83, 89, 68, 93, 87, 84, 85, 82, 77, 85, 79, 69, 85, 78, 71, 78, 88, 83, 90, 89, 85, 88, 79, 83, 77, 79, 84, 79, 88, 88, 91, 84, 85, 91, 85, 87, 85, 85, 85, 86, 91, 79, 87, 72, 90, 93, 80, 90, 95, 91, 95, 88, 92, 90, 68, 84, 73, 72, 73, 72, 78, 88, 88, 81, 82, 75, 81, 81, 73, 86, 82, 81, 70, 88, 92, 94, 87, 84, 81, 73, 87, 85, 91, 82, 88, 87, 89, 87, 88, 80, 84, 89, 85, 82, 89, 79, 87, 84, 80, 86, 56, 89, 86, 75, 82, 79, 85, 87, 86, 86, 86, 74, 71, 80, 71, 94, 81, 74, 84, 72, 77, 85, 91, 87, 89, 89, 87, 70, 75, 92, 79, 58, 74, 63, 83, 76, 73, 89, 92, 85, 92, 83, 90, 78, 77, 70, 77, 80, 75, 67, 73, 75, 95, 86, 93, 82, 87, 93, 74, 86, 91, 83, 79, 83, 85, 81, 88, 86, 89, 79, 83, 81, 79, 66, 73, 57, 71, 85, 87, 87, 85, 84, 85, 85, 87, 62, 90, 92, 86, 88, 63, 81, 92, 83, 88, 85, 77, 90, 81, 91, 85, 74, 95, 89, 92, 84, 88, 81, 90, 84, 89, 84, 91, 90, 86, 85, 73, 73, 90, 76, 91, 73, 85, 73, 85, 84, 91, 88, 79, 94, 82, 86, 84, 88, 91, 78, 77, 88, 69, 87, 86, 82, 87, 85, 89, 81, 84, 66, 69, 76, 81, 80, 84, 90, 88, 92, 85, 69, 69, 79, 73, 70, 78, 95, 91, 90, 89, 74, 79, 80, 75, 76, 82, 78, 69, 72, 82, 77, 71, 72, 91, 89, 70, 73, 88, 80, 79, 75, 81, 73, 81, 66, 83, 78, 90, 73, 74, 86, 91, 76, 94, 78, 88, 74, 87, 80, 85, 85, 88, 85, 72, 85, 82, 92, 81, 88, 87, 89, 91, 76, 78, 84, 81, 80, 85, 81, 84, 77, 73, 84, 73, 80, 77, 79, 86, 87, 68, 85, 78, 80, 88, 88, 87, 84, 87, 89, 78, 83, 80, 69, 68, 79, 76, 88, 69, 69, 89, 82, 92, 89, 96, 79, 86, 89, 87, 75, 88, 79, 78, 78, 84, 84, 80, 86, 74, 82, 85, 80, 77, 88, 72, 84, 83, 79, 74, 66, 71, 78, 80, 89, 90, 76, 83, 79, 79, 68, 72, 75, 89, 88, 89, 82, 74, 67, 57, 70, 71, 88, 88, 83, 79, 69, 69, 78, 88, 92, 92, 65, 70, 74, 77, 63, 73, 91, 87, 83, 87, 83, 85, 80, 78, 73, 89, 88, 81, 86, 85, 85, 89, 85, 78, 66, 87, 83, 84, 84, 78, 93, 81, 85, 65, 73, 71, 86, 95, 91, 84, 89, 82, 76, 74, 75, 80, 94, 83, 86, 74, 84, 80, 90, 75, 83, 74, 74, 87, 89, 75, 74, 75, 90, 87, 80, 87, 83, 78, 85, 68, 87, 78, 78, 79, 83, 82, 73, 83, 81, 84, 74, 80, 79, 93, 89, 83, 76, 90, 76, 85, 75, 76, 68, 89, 81, 73, 77, 77, 78, 90, 62, 82, 71, 82, 92, 82, 78, 77, 88, 89, 89, 86, 78, 91, 66, 75, 81, 91, 87, 84, 80, 76, 82, 93, 89, 74, 86, 85, 90, 82, 90, 74, 87, 92, 89, 86, 89, 80, 79, 83, 87, 88, 84, 91, 90, 62, 93, 86, 88, 75, 92, 83, 88, 82, 73, 84, 75, 81, 70, 83, 79, 81, 83, 69, 88, 71, 89, 72, 88, 86, 86, 86, 85, 83, 75, 71, 85, 82, 70, 80, 86, 86, 81, 87, 87, 87, 86, 78, 88, 90, 73, 86, 85, 85, 88, 84, 86, 91, 79, 85, 82, 83, 87, 72, 76, 69, 70, 76, 94, 84, 84, 81, 79, 75, 87, 84, 87, 78, 83, 76, 73, 81, 88, 76, 73, 92, 73, 85, 65, 81, 86, 87, 67, 84, 85, 85, 87, 87, 68, 81, 93, 79, 83, 86, 86, 74, 76, 86, 80, 82, 87, 85, 88, 85, 84, 84, 88, 87, 78, 80, 85, 83, 66, 70, 73, 76, 81, 82, 86, 92, 95, 84, 90, 82, 90, 87, 88, 87, 93, 91, 85, 89, 80, 89, 84, 91, 77, 86, 90, 77, 76, 70, 73, 72, 82, 73, 89, 73, 92, 76, 90, 87, 89, 87, 75, 84, 86, 78, 87, 79, 75, 77, 72, 86, 74, 73, 70, 93, 88, 85, 75, 77, 92, 75, 69, 88, 91, 88, 85, 87, 86, 83, 86, 87, 87, 72, 83, 72, 75, 91, 83, 87, 87, 86, 90, 88, 85, 78, 82, 86, 74, 86, 79, 75, 73, 90, 84, 82, 90, 66, 72, 78, 71, 76, 81, 77, 78, 84, 76, 83, 81, 87, 79, 89, 79, 87, 87, 91, 82, 87, 87, 87, 90, 81, 92, 86, 81, 87, 84, 89, 76, 84, 77, 81, 73, 76, 86, 90, 79, 80, 71, 85, 73, 77, 71, 87, 76, 71, 71, 60, 87, 67, 86, 84, 86, 82, 90, 76, 91, 88, 85, 87, 84, 93, 87, 85, 64, 90, 83, 88, 88, 89, 73, 80, 73, 67, 78, 75, 76, 87, 80, 84, 89, 80, 83, 73, 76, 77, 87, 79, 89, 89, 90, 84, 85, 86, 65, 75, 85, 84, 85, 82, 91, 90, 88, 83, 74, 83, 76, 63, 91, 84, 83, 96, 89, 83, 75, 88, 84, 81, 82, 90, 83, 76, 86, 81, 91, 88, 82, 75, 95, 74, 88, 81, 86, 76, 85, 82, 73, 89, 76, 83, 88, 85, 81, 70, 71, 76, 71, 76, 88, 89, 88, 88, 90, 88, 77, 87, 77, 81, 77, 73, 81, 86, 67, 87, 87, 80, 92, 89, 78, 88, 87, 81, 87, 88, 86, 89, 86, 89, 77, 86, 88, 78, 80, 70, 85, 79, 73, 79, 77, 79, 83, 81, 69, 86, 79, 79, 85, 90, 65, 71, 73, 73, 75, 69, 75, 78, 76, 85, 92, 82, 91, 90, 87, 81, 71, 93, 87, 82, 77, 74, 81, 85, 65, 95, 84, 85, 87, 73, 82, 79, 69, 82, 76, 78, 69, 77, 76, 75, 85, 83, 80, 77, 89, 81, 84, 83, 84, 73, 86, 69, 79, 61, 87, 84, 86, 88, 94, 90, 71, 74, 80, 85, 64, 67, 83, 88, 83, 86, 84, 73, 79, 83, 83, 89, 78, 89, 92, 84, 92, 84, 89, 87, 89, 75, 76, 79, 76, 75, 80, 80, 75, 73, 82, 78, 88, 85, 81, 81, 91, 87, 90, 87, 92, 74, 77, 87, 69, 81, 69, 74, 84, 81, 84, 81, 74, 72, 74, 81, 81, 81, 85, 64, 94, 83, 87, 88, 83, 84, 85, 88, 83, 75, 89, 76, 76, 89, 78, 89, 79, 85, 89, 89, 88, 86, 86, 86, 89, 89, 78, 78, 89, 66, 77, 68, 82, 77, 74, 77, 73, 80, 80, 78, 68, 93, 88, 85, 78, 80, 88, 85, 87, 86, 88, 76, 89, 90, 73, 90, 74, 91, 89, 84, 89, 83, 86, 86, 88, 87, 73, 80, 84, 76, 87, 80, 69, 83, 82, 76, 88, 85, 89, 86, 91, 80, 87, 79, 83, 74, 89, 80, 79, 84, 85, 85, 81, 81, 88, 85, 75, 87, 75, 70, 83, 76, 91, 68, 83, 75, 92, 92, 73, 75, 81, 81, 76, 80, 86, 80, 88, 72, 79, 75, 75, 73, 92, 77, 78, 80, 75, 69, 82, 81, 86, 84, 85, 91, 87, 77, 86, 89, 87, 84, 74, 82, 79, 85, 87, 68, 88, 78, 85, 87, 81, 87, 82, 76, 72, 79, 90, 80, 85, 83, 86, 77, 79, 66, 75, 60, 87, 82, 89, 79, 70, 78, 82, 82, 72, 89, 80, 92, 73, 79, 85, 76, 85, 88, 91, 92, 88, 75, 85, 80, 72, 80, 88, 92, 75, 90, 92, 85, 75, 73, 76, 86, 90, 84, 85, 83, 79, 90, 84, 75, 70, 72, 66, 84, 81, 86, 85, 76, 72, 88, 82, 90, 84, 84, 84, 84, 88, 85, 92, 79, 69, 78, 71, 71, 76, 92, 91, 90, 76, 85, 92, 79, 81, 80, 70, 79, 86, 85, 72, 75, 75, 66, 69, 88, 86, 74, 94, 75, 89, 91, 80, 65, 93, 92, 87, 87, 89, 78, 96, 88, 88, 87, 82, 91, 69, 80, 77, 88, 72, 90, 75, 81, 77, 88, 90, 86, 85, 91, 90, 90, 80, 91, 77, 78, 64, 82, 72, 88, 75, 66, 70, 82, 83, 80, 83, 78, 70, 77, 86, 81, 77, 88, 86, 78, 69, 80, 88, 87, 88, 92, 91, 57, 59, 71, 75, 87, 84, 86, 88, 93, 81, 87, 88, 69, 83, 90, 82, 88, 83, 77, 89, 77, 80, 89, 58, 90, 81, 76, 74, 89, 80, 88, 88, 91, 92, 90, 88, 77, 89, 79, 73, 92, 88, 68, 90, 90, 87, 85, 91, 86, 92, 91, 84, 86, 88, 85, 84, 84, 94, 92, 91, 89, 87, 88, 86, 86, 70, 86, 85, 87, 84, 83, 89, 88, 84, 90, 87, 88, 90, 92, 90, 88, 88, 86, 85, 71, 88, 88, 84, 80, 82, 91, 85, 92, 90, 89, 92, 88, 87, 92, 86, 90, 92, 91, 93, 88, 90, 89, 90, 93, 88, 89, 82, 90, 92, 91, 89, 90, 91, 86, 93, 89, 80, 88, 85, 87, 90, 88, 86, 90, 88, 87, 91, 87, 86, 92, 86, 91, 86, 88, 93, 86, 92, 87, 88, 89, 93, 91, 87, 84, 85, 91, 86, 91, 91, 91, 91, 89, 91, 92, 88, 86, 91, 94, 84, 82, 79, 79, 87, 88, 91, 92, 89, 79, 91, 82, 87, 92, 87, 88, 89, 92, 94, 90, 87, 88, 87, 89, 88, 94, 90, 88, 90, 85, 92, 84, 91, 90, 88, 86, 92, 90, 83, 89, 96, 71, 91, 93, 89, 87, 83, 88, 85, 89, 90, 93, 88, 85, 86, 92, 91, 93, 90, 92, 95, 91, 91, 91, 85, 93, 86, 95, 85, 88, 88, 87, 89, 79, 86, 90, 84, 93, 88, 84, 87, 89, 89, 91, 85, 90, 84, 91, 91, 80, 80, 88, 87, 87, 88, 87, 86, 90, 89, 90, 86, 92, 84, 75, 92, 68, 95, 89, 90, 81, 88, 89, 88, 87, 92, 89, 85, 89, 86, 89, 88, 81, 85, 87, 82, 87, 86, 92, 82, 85, 86, 88, 88, 91, 87, 87, 89, 88, 83, 87, 87, 90, 95, 88, 88, 94, 92, 93, 90, 87, 89, 78, 82, 91, 68, 83, 89, 86, 92, 85, 82, 87, 89, 68, 91, 90, 87, 93, 83, 84, 75, 87, 82, 95, 86, 73, 82, 90, 93, 90, 88, 91, 83, 92, 88, 93, 96, 93, 91, 91, 92, 87, 73, 85, 86, 86, 84, 80, 77, 65, 54, 77, 69, 86, 62, 77, 80, 92, 81, 81, 82, 77, 88, 79, 86, 73, 91, 78, 80, 74, 79, 84, 80, 82, 88, 75, 75, 91, 69, 73, 88, 79, 81, 82, 84, 87, 82, 87, 87, 76, 86, 78, 85, 84, 76, 74, 83, 83, 74, 73, 88, 86, 87, 86, 83, 82, 90, 89, 93, 88, 93, 88, 93, 89, 86, 90, 86, 93, 82, 92, 84, 93, 80, 88, 89, 75, 92, 92, 93, 89, 94, 87, 89, 84, 85, 84, 96, 78, 95, 82, 85, 77, 74, 85, 92, 77, 91, 79, 84, 88, 90, 92, 95, 90, 69, 85, 91, 80, 88, 83, 93, 92, 93, 80, 86, 83, 88, 83, 80, 81, 90, 87, 78, 93, 83, 76, 77, 81, 91, 90, 86, 83, 87, 90, 85, 92, 90, 81, 89, 90, 93, 91, 85, 90, 90, 92, 89, 87, 84, 86, 86, 84, 84, 88, 89, 93, 88, 86, 90, 90, 83, 90, 88, 81, 83, 88, 85, 94],
            other: [15, 11, 18, 16, 77, 16, 62, 0, 9, 51, 22, 86, 76, 86, 82, 81, 15, 78, 96, 13, 26, 22, 0, 12, 0, 20, 12, 0, 0, 1, 1, 1, 1, 3, 0, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 2, 32, 27, 46, 27, 33, 2, 1, 1, 0, 2, 1, 0, 1, 2, 2, 1, 1, 0, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 3, 1, 2, 2, 1, 1, 0, 1, 2, 1, 0, 0, 1, 1, 2, 1, 0, 1, 4, 2, 2, 3, 2, 2, 2, 1, 2, 0, 0, 0, 2, 1, 2, 0, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 7, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 2, 5, 38, 3, 1, 15, 3, 4, 23, 27, 3, 20, 2, 23, 1, 2, 0, 2, 2, 1, 0, 1, 4, 1, 4, 1, 5, 1, 2, 1, 3, 4, 1, 3, 2, 4, 1, 1, 0, 2, 4, 1, 3, 4, 6, 6, 3, 2, 2, 2, 1, 3, 1, 3, 0, 1, 8, 2, 3, 2, 2, 4, 2, 3, 2, 1, 2, 4, 7, 2, 12, 2, 3, 8, 2, 1, 5, 3, 2, 3, 4, 4, 4, 2, 2, 2, 2, 3, 1, 1, 0, 3, 4, 0, 7, 3, 3, 5, 6, 4, 2, 1, 1, 0, 1, 1, 1, 2, 0, 3, 6, 1, 3, 3, 1, 6, 3, 3, 2, 7, 0, 1, 0, 4, 2, 3, 3, 1, 7, 1, 2, 1, 1, 0, 1, 5, 2, 1, 0, 2, 5, 17, 25, 4, 15, 29, 2, 1, 1, 1, 4, 2, 3, 2, 1, 2, 2, 27, 9, 5, 13, 17, 1, 2, 4, 3, 2, 1, 2, 1, 0, 1, 2, 1, 2, 3, 6, 2, 2, 0, 2, 0, 8, 24, 1, 2, 1, 3, 0, 0, 2, 1, 1, 11, 89, 1, 1, 1, 1, 3, 3, 1, 1, 1, 15, 1, 1, 1, 3, 1, 5, 52, 2, 5, 2, 2, 2, 0, 1, 1, 8, 29, 7, 3, 2, 11, 1, 0, 2, 3, 2, 1, 1, 2, 0, 3, 2, 2, 1, 5, 1, 2, 2, 4, 1, 2, 1, 1, 3, 2, 2, 3, 7, 2, 2, 2, 1, 2, 2, 1, 1, 2, 4, 3, 2, 3, 2, 3, 5, 0, 1, 2, 2, 5, 1, 1, 3, 1, 1, 2, 46, 2, 2, 1, 2, 3, 2, 6, 1, 6, 1, 2, 3, 3, 20, 11, 10, 6, 10, 2, 75, 0, 8, 4, 14, 3, 2, 3, 2, 5, 10, 21, 24, 20, 3, 1, 3, 1, 11, 2, 3, 3, 2, 0, 1, 1, 3, 5, 4, 6, 6, 3, 2, 3, 2, 3, 4, 1, 0, 5, 0, 1, 7, 1, 67, 2, 13, 1, 1, 1, 3, 2, 6, 5, 3, 42, 3, 6, 2, 10, 4, 9, 1, 1, 1, 0, 3, 2, 2, 2, 1, 4, 2, 45, 4, 3, 1, 4, 1, 0, 1, 2, 2, 2, 17, 2, 2, 2, 32, 5, 2, 3, 1, 2, 1, 2, 1, 3, 8, 2, 0, 92, 6, 2, 1, 2, 13, 2, 2, 5, 7, 10, 2, 1, 2, 5, 24, 27, 11, 6, 9, 12, 11, 16, 27, 1, 22, 2, 0, 0, 13, 3, 2, 1, 4, 1, 2, 3, 3, 1, 0, 2, 3, 2, 2, 5, 3, 1, 2, 1, 1, 0, 2, 6, 4, 5, 1, 1, 1, 2, 0, 1, 3, 56, 11, 4, 5, 86, 9, 25, 17, 22, 21, 7, 3, 5, 2, 24, 41, 23, 1, 9, 0, 1, 4, 22, 1, 1, 1, 2, 1, 2, 16, 29, 4, 74, 2, 1, 2, 15, 3, 1, 1, 1, 4, 2, 2, 3, 2, 4, 1, 4, 2, 1, 5, 10, 1, 1, 2, 1, 2, 4, 2, 4, 2, 1, 3, 1, 3, 5, 2, 2, 1, 7, 4, 15, 18, 27, 8, 14, 2, 0, 2, 2, 2, 3, 1, 1, 24, 1, 0, 6, 2, 5, 3, 2, 4, 2, 2, 3, 2, 3, 1, 1, 1, 2, 2, 0, 1, 3, 3, 3, 3, 1, 4, 3, 2, 1, 4, 2, 3, 1, 5, 2, 2, 9, 1, 3, 0, 2, 6, 3, 1, 2, 2, 4, 16, 1, 0, 1, 2, 2, 4, 12, 3, 6, 7, 2, 5, 1, 1, 2, 3, 1, 8, 1, 1, 2, 11, 6, 9, 3, 3, 5, 4, 3, 4, 4, 4, 1, 1, 1, 3, 3, 2, 2, 1, 4, 1, 2, 1, 1, 2, 3, 1, 2, 2, 2, 2, 2, 2, 2, 4, 2, 3, 20, 9, 29, 6, 4, 15, 5, 51, 7, 2, 4, 8, 3, 7, 1, 1, 2, 2, 5, 3, 2, 7, 2, 2, 1, 5, 1, 2, 1, 2, 1, 0, 2, 2, 1, 9, 4, 2, 0, 1, 1, 16, 3, 4, 2, 2, 2, 3, 2, 1, 2, 7, 1, 2, 7, 4, 4, 6, 2, 1, 3, 1, 2, 2, 0, 3, 2, 2, 2, 2, 0, 3, 3, 5, 3, 3, 2, 2, 3, 1, 1, 2, 41, 3, 4, 4, 1, 2, 2, 5, 2, 2, 4, 3, 1, 2, 4, 1, 1, 4, 2, 3, 1, 2, 6, 5, 4, 5, 3, 3, 3, 4, 4, 7, 2, 1, 4, 51, 2, 1, 1, 2, 1, 0, 2, 3, 7, 2, 2, 2, 0, 2, 1, 0, 1, 1, 2, 1, 4, 2, 1, 15, 1, 5, 2, 3, 4, 3, 2, 2, 8, 5, 4, 14, 4, 2, 5, 1, 1, 3, 1, 1, 1, 3, 1, 2, 2, 1, 1, 1, 1, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 4, 3, 2, 2, 3, 1, 1, 2, 1, 1, 3, 1, 2, 1, 3, 1, 0, 2, 1, 2, 2, 2, 1, 1, 2, 3, 1, 2, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 8, 1, 2, 1, 2, 1, 1, 1, 5, 1, 1, 2, 2, 0, 0, 1, 0, 1, 1, 1, 2, 2, 2, 2, 0, 0, 2, 2, 2, 3, 0, 1, 2, 3, 0, 1, 1, 2, 1, 1, 2, 0, 2, 1, 1, 2, 3, 2, 1, 2, 2, 2, 2, 1, 1, 0, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 7, 2, 2, 1, 2, 0, 1, 0, 2, 1, 3, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 0, 0, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 3, 0, 4, 1, 0, 2, 2, 1, 1, 1, 2, 2, 4, 2, 2, 2, 2, 1, 1, 1, 2, 2, 0, 0, 0, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 3, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 4, 1, 3, 2, 1, 1, 2, 2, 1, 2, 1, 2, 8, 3, 2, 2, 2, 1, 2, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 4, 2, 3, 3, 2, 1, 1, 3, 7, 2, 2, 2, 2, 1, 1, 2, 3, 2, 2, 2, 2, 1, 1, 3, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 3, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1, 0, 1, 3, 2, 2, 2, 1, 4, 4, 1, 3, 3, 2, 1, 2, 1, 1, 1, 1, 3, 1, 2, 0, 1, 1, 1, 1, 1, 2, 4, 1, 1, 2, 1, 1, 1, 4, 2, 1, 1, 0, 2, 2, 2, 3, 2, 4, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 3, 2, 1, 3, 1, 3, 2, 2, 1, 1, 2, 4, 2, 2, 1, 2, 1, 2, 1, 2, 1, 3, 3, 3, 2, 1, 2, 1, 3, 2, 1, 1, 2, 4, 1, 2, 2, 1, 0, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 0, 2, 2, 2, 1, 1, 3, 1, 2, 1, 2, 1, 1, 1, 0, 1, 2, 2, 1, 2, 2, 0, 1, 4, 2, 1, 2, 0, 2, 1, 1, 2, 0, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 0, 3, 2, 0, 3, 1, 3, 3, 1, 2, 2, 5, 2, 2, 2, 2, 1, 2, 2, 11, 1, 0, 1, 2, 3, 13, 1, 1, 1, 1, 6, 1, 2, 1, 2, 2, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 0, 2, 3, 2, 2, 3, 2, 3, 2, 1, 1, 2, 1, 3, 1, 2, 2, 3, 3, 2, 1, 1, 2, 1, 0, 2, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 0, 1, 1, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 0, 3, 2, 2, 1, 3, 3, 3, 1, 2, 1, 1, 2, 1, 2, 3, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 3, 2, 1, 2, 2, 3, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 4, 2, 1, 2, 10, 2, 0, 1, 2, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 2, 3, 1, 2, 2, 1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 0, 3, 2, 1, 2, 1, 1, 1, 1, 1, 0, 2, 4, 2, 4, 2, 0, 6, 2, 0, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 3, 1, 1, 16, 1, 2, 2, 1, 1, 2, 2, 1, 3, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 4, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 5, 1, 2, 3, 3, 1, 1, 1, 3, 1, 2, 1, 1, 3, 2, 0, 2, 2, 2, 1, 3, 1, 1, 2, 2, 3, 1, 2, 2, 1, 2, 1, 0, 0, 1, 2, 2, 2, 1, 1, 1, 2, 0, 1, 1, 1, 0, 2, 3, 1, 6, 2, 1, 2, 1, 1, 3, 2, 0, 3, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 3, 3, 1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 3, 4, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 2, 2, 0, 3, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 4, 1, 1, 2, 1, 1, 1, 1, 1, 8, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 28, 1, 1, 3, 2, 1, 2, 1, 1, 2, 1, 2, 2, 0, 1, 2, 1, 2, 2, 3, 2, 1, 0, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 2, 1, 1, 2, 1, 3, 2, 2, 3, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1, 0, 1, 1, 2, 2, 1, 1, 2, 2, 1, 3, 0, 2, 2, 0, 1, 2, 1, 2, 2, 1, 1, 2, 3, 4, 2, 2, 1, 1, 1, 1, 3, 0, 1, 2, 2, 1, 0, 2, 1, 0, 3, 1, 1, 1, 3, 1, 2, 2, 2, 2, 2, 1, 2, 4, 1, 1, 1, 3, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 0, 2, 2, 2, 1, 1, 1, 1, 1, 4, 1, 1, 2, 2, 3, 1, 2, 0, 1, 2, 2, 0, 1, 1, 4, 1, 0, 3, 1, 4, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 3, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 0, 1, 0, 2, 0, 2, 2, 1, 2, 1, 1, 0, 2, 2, 2, 2, 1, 3, 3, 0, 1, 1, 1, 3, 3, 1, 1, 2, 2, 2, 1, 2, 1, 4, 1, 2, 40, 2, 2, 4, 1, 1, 2, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 1, 0, 3, 1, 0, 1, 1, 2, 2, 3, 2, 2, 1, 2, 1, 2, 3, 2, 2, 1, 1, 1, 1, 1, 1, 12, 2, 2, 3, 2, 2, 1, 2, 2, 5, 2, 1, 2, 1, 1, 3, 0, 1, 1, 0, 1, 1, 1, 3, 1, 1, 2, 2, 1, 4, 8, 1, 1, 2, 13, 3, 2, 2, 2, 2, 2, 1, 1, 13, 1, 1, 3, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 1, 3, 3, 0, 2, 2, 2, 4, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 3, 1, 3, 2, 1, 1, 1, 2, 2, 1, 3, 3, 4, 1, 2, 3, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2, 3, 2, 2, 1, 1, 0, 1, 8, 1, 1, 0, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 0, 2, 3, 1, 1, 2, 2, 1, 2, 2, 7, 4, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 6, 1, 0, 1, 1, 1, 2, 1, 2, 1, 2, 2, 3, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 0, 2, 1, 2, 2, 1, 1, 2, 0, 2, 2, 1, 5, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 3, 1, 4, 2, 2, 2, 1, 3, 2, 0, 1, 3, 1, 2, 1, 3, 2, 0, 1, 0, 3, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 6, 2, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 2, 3, 2, 1, 2, 1, 1, 2, 0, 2, 2, 0, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 11, 0, 2, 1, 1, 2, 2, 9, 2, 2, 1, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 0, 2, 0, 1, 1, 1, 1, 0, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 4, 2, 2, 2, 2, 3, 1, 2, 1, 4, 1, 1, 0, 1, 0, 0, 1, 1, 3, 2, 1, 3, 3, 1, 1, 3, 1, 2, 1, 2, 2, 2, 1, 3, 2, 3, 2, 1, 3, 4, 2, 3, 3, 3, 3, 3, 4, 3, 1, 27, 2, 3, 1, 0, 0, 1, 4, 0, 1, 6, 19, 2, 10, 13, 3, 3, 7, 3, 21, 1, 1, 8, 3, 1, 22, 5, 1, 76, 1, 3, 6, 2, 2, 62, 2, 0, 3, 4, 1, 2, 2, 4, 5, 4, 2, 2, 2, 2, 1, 4, 81, 7, 1, 2, 20, 2, 4, 5, 5, 3, 53, 1, 4, 3, 4, 4, 1, 3, 35, 3, 1, 3, 4, 3, 2, 2, 3, 32, 3, 36, 5, 2, 1, 1, 3, 3, 6, 13, 4, 4, 5, 3, 6, 3, 3, 4, 23, 4, 2, 1, 1, 2, 12, 3, 0, 1, 7, 2, 1, 3, 4, 67, 0, 3, 2, 2, 1, 1, 0, 5, 3, 3, 10, 7, 1, 1, 4, 2, 8, 6, 5, 1, 3, 4, 3, 2, 1, 4, 11, 3, 4, 2, 3, 6, 5, 2, 10, 1, 3, 21, 2, 22, 10, 3, 4, 1, 14, 5, 5, 6, 8, 2, 5, 7, 1, 3, 2, 3, 3, 1, 1, 2, 2, 11, 5, 3, 4, 4, 6, 3, 4, 64, 1, 5, 5, 3, 51, 5, 64, 1, 0, 86, 3, 1, 2, 3, 3, 1, 10, 7, 1, 13, 2, 11, 7, 3, 5, 2, 5, 3, 2, 5, 5, 1, 12, 17, 4, 5, 2, 0, 3, 3, 1, 2, 5, 10, 1, 3, 5, 3, 17, 1, 8, 19, 0, 2, 1, 2, 4, 3, 3, 4, 1, 2, 1, 6, 1, 6, 5, 7, 3, 5, 1, 3, 4, 7, 2, 3, 3, 1, 7, 9, 6, 2, 1, 1, 2, 2, 3, 1, 17, 44, 4, 4, 0, 1, 3, 0, 77, 3, 2, 2, 7, 1, 3, 5, 2, 5, 3, 10, 4, 2, 2, 3, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 0, 1, 0, 2, 2, 1, 2, 0, 1, 2, 2, 1, 4, 1, 1, 1, 4, 1, 3, 2, 3, 2, 2, 2, 1, 1, 2, 1, 3, 2, 3, 1, 2, 4, 3, 1, 3, 2, 2, 3, 3, 3, 2, 3, 1, 1, 2, 1, 5, 1, 4, 3, 4, 2, 1, 4, 2, 0, 2, 2, 3, 1, 8, 12, 5, 2, 2, 1, 2, 8, 1, 1, 2, 2, 2, 3, 4, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 74, 3, 2, 1, 4, 11, 2, 4, 2, 1, 0, 2, 1, 0, 2, 3, 2, 3, 3, 1, 2, 4, 2, 1, 1, 2, 2, 4, 2, 6, 4, 2, 5, 2, 2, 3, 3, 2, 1, 1, 18, 2, 1, 6, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 3, 1, 2, 2, 1, 7, 2, 3, 1, 1, 2, 2, 1, 4, 3, 2, 1, 2, 1, 7, 1, 1, 2],
            sen_r2006: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 409, 445, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672, 0, 548, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 83, 0, 0, 0, 932, 797, 0, 0, 0, 509, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 667, 0, 0, 0, 0, 0, 0, 618, 212, 386, 0, 0, 605, 0, 0, 289, 0, 0, 0, 0, 708, 435, 515, 0, 0, 532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 572, 0, 0, 0, 0, 0, 0, 451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 935, 0, 0, 600, 0, 294, 0, 0, 0, 0, 0, 0, 565, 135, 0, 0, 0, 0, 0, 802, 362, 0, 0, 715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 922, 858, 0, 0, 0, 0, 0, 844, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 394, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 602, 0, 0, 0, 0, 0, 0, 838, 936, 893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 993, 0, 890, 0, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 0, 0, 0, 0, 895, 0, 874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 509, 0, 0, 0, 0, 0, 0, 814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 623, 180, 0, 0, 0, 0, 0, 0, 0, 0, 893, 0, 0, 784, 0, 679, 359, 0, 887, 0, 0, 0, 0, 419, 0, 912, 362, 694, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 584, 0, 0, 384, 0, 0, 0, 0, 878, 0, 0, 0, 0, 0, 0, 0, 0, 270, 298, 0, 966, 416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 66, 741, 0, 218, 0, 0, 0, 0, 943, 0, 0, 0, 955, 633, 853, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 173, 123, 0, 0, 0, 0, 0, 0, 796, 0, 158, 463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 533, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 478, 986, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 991, 0, 600, 0, 0, 549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 660, 0, 0, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 481, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 267, 0, 0, 609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 144, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 702, 0, 491, 0, 0, 0, 0, 0, 0, 175, 61, 0, 994, 0, 0, 0, 599, 0, 0, 996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 510, 0, 0, 0, 0, 0, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 510, 0, 0, 0, 985, 0, 0, 0, 0, 0, 0, 0, 0, 595, 0, 452, 908, 804, 144, 0, 0, 0, 0, 0, 943, 194, 0, 255, 370, 0, 369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 980, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 798, 0, 0, 0, 0, 0, 0, 891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 939, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 837, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 995, 0, 0, 946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 964, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 612, 0, 890, 642, 0, 0, 0, 914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 707, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 651, 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 547, 0, 0, 0, 509, 0, 0, 0, 0, 0, 0, 0, 0, 663, 719, 762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 504, 0, 0, 0, 0, 0, 0, 0, 867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 785, 0, 0, 0, 615, 356, 280, 681, 0, 0, 0, 885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 469, 687, 0, 0, 0, 0, 0, 887, 0, 0, 0, 262, 354, 380, 0, 344, 0, 0, 0, 0, 937, 0, 0, 815, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 857, 0, 187, 338, 0, 287, 0, 0, 770, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 703, 498, 0, 0, 0, 0, 0, 693, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 767, 197, 0, 430, 252, 504, 368, 0, 0, 0, 0, 0, 0, 490, 0, 0, 0, 365, 419, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 864, 0, 0, 0, 0, 0, 0, 828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 846, 0, 0, 0, 0, 733, 594, 0, 554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 624, 0, 0, 0, 0, 133, 117, 309, 361, 0, 0, 251, 417, 842, 0, 0, 0, 0, 0, 0, 0, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 456, 213, 0, 223, 725, 951, 0, 0, 503, 260, 0, 0, 0, 0, 0, 0, 951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 782, 0, 0, 180, 0, 541, 298, 316, 0, 0, 0, 0, 0, 0, 721, 317, 0, 552, 0, 0, 596, 377, 0, 0, 0, 0, 487, 631, 0, 0, 0, 0, 889, 0, 0, 0, 776, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 791, 0, 694, 0, 283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 925, 0, 0, 0, 0, 0, 0, 0],
            black: [0, 1, 1, 5, 1, 10, 0, 0, 2, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 4, 0, 0, 0, 1, 0, 1, 11, 0, 0, 0, 3, 7, 4, 4, 8, 7, 1, 2, 14, 1, 0, 0, 0, 6, 14, 3, 21, 1, 1, 0, 2, 1, 0, 7, 10, 0, 11, 3, 0, 9, 2, 7, 4, 19, 0, 0, 25, 18, 4, 1, 1, 1, 10, 2, 1, 0, 9, 7, 6, 2, 0, 0, 2, 1, 14, 2, 0, 1, 10, 11, 2, 7, 26, 13, 26, 8, 20, 9, 16, 59, 16, 1, 0, 0, 0, 9, 8, 8, 8, 9, 4, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 10, 9, 16, 14, 5, 0, 0, 0, 0, 0, 0, 0, 0, 22, 21, 6, 13, 6, 4, 10, 18, 10, 9, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 32, 13, 5, 10, 32, 4, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 19, 13, 11, 0, 0, 0, 0, 0, 0, 10, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 25, 5, 3, 0, 0, 0, 14, 22, 0, 0, 51, 52, 0, 0, 0, 0, 0, 27, 16, 0, 0, 0, 0, 6, 18, 5, 12, 8, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 4, 3, 2, 2, 15, 18, 1, 23, 1, 2, 22, 5, 5, 1, 1, 8, 1, 1, 22, 19, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 3, 6, 1, 1, 2, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 3, 0, 4, 9, 5, 6, 3, 1, 1, 9, 1, 0, 9, 1, 0, 7, 9, 4, 0, 5, 0, 0, 0, 0, 1, 0, 1, 0, 3, 0, 0, 0, 0, 11, 18, 1, 4, 0, 0, 1, 0, 7, 1, 6, 0, 1, 1, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 3, 0, 2, 1, 0, 4, 0, 1, 0, 0, 0, 0, 4, 1, 2, 2, 0, 0, 2, 24, 0, 17, 2, 3, 0, 24, 5, 3, 1, 0, 0, 1, 0, 0, 3, 2, 15, 11, 0, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 2, 4, 1, 1, 0, 1, 1, 0, 0, 5, 2, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 3, 0, 0, 26, 5, 0, 8, 0, 1, 0, 0, 0, 9, 3, 7, 3, 0, 0, 1, 0, 4, 0, 1, 0, 0, 26, 2, 2, 20, 3, 1, 17, 1, 1, 0, 2, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 0, 2, 3, 0, 2, 0, 0, 18, 0, 0, 0, 0, 3, 1, 4, 15, 1, 1, 1, 1, 1, 3, 9, 0, 2, 9, 2, 1, 1, 0, 3, 1, 0, 2, 3, 11, 10, 7, 1, 1, 5, 3, 9, 0, 1, 1, 1, 1, 2, 2, 3, 3, 24, 18, 0, 0, 0, 0, 0, 0, 1, 2, 8, 6, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 6, 3, 0, 1, 0, 0, 4, 0, 8, 8, 2, 0, 0, 4, 4, 2, 9, 4, 14, 4, 1, 7, 1, 0, 5, 15, 3, 0, 0, 7, 14, 4, 3, 3, 0, 0, 0, 0, 1, 0, 3, 0, 2, 1, 0, 0, 0, 1, 4, 0, 0, 0, 1, 2, 0, 0, 0, 1, 3, 0, 3, 0, 3, 1, 1, 8, 2, 2, 12, 3, 2, 17, 2, 3, 6, 0, 4, 11, 0, 1, 0, 0, 7, 0, 6, 3, 0, 6, 5, 12, 1, 1, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 6, 0, 3, 1, 0, 9, 11, 0, 1, 4, 0, 0, 1, 10, 0, 4, 0, 15, 1, 0, 22, 5, 7, 0, 23, 0, 0, 1, 4, 0, 0, 0, 9, 2, 7, 5, 0, 9, 8, 18, 17, 1, 2, 0, 0, 1, 0, 1, 12, 1, 1, 1, 0, 0, 1, 9, 0, 9, 4, 1, 1, 0, 6, 6, 2, 0, 0, 1, 7, 6, 2, 3, 2, 7, 0, 2, 22, 5, 1, 13, 8, 5, 4, 1, 6, 8, 8, 2, 4, 1, 1, 5, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 1, 0, 6, 0, 2, 6, 6, 2, 2, 7, 1, 1, 3, 1, 1, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 17, 0, 2, 0, 22, 5, 0, 20, 1, 3, 1, 1, 4, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 10, 7, 0, 0, 0, 1, 0, 5, 1, 9, 1, 1, 1, 0, 8, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 5, 0, 0, 0, 0, 0, 1, 2, 6, 1, 0, 1, 1, 2, 2, 1, 0, 8, 3, 0, 2, 0, 1, 0, 1, 4, 0, 0, 3, 5, 10, 0, 0, 0, 0, 1, 0, 0, 1, 12, 21, 1, 15, 0, 11, 9, 3, 1, 1, 3, 0, 1, 0, 3, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 10, 0, 1, 1, 0, 0, 0, 1, 5, 5, 17, 1, 3, 12, 10, 0, 23, 3, 1, 0, 2, 1, 1, 3, 1, 0, 0, 0, 2, 3, 0, 0, 1, 0, 2, 3, 1, 0, 10, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 1, 4, 1, 0, 1, 0, 0, 3, 9, 1, 0, 2, 0, 6, 0, 0, 0, 3, 0, 2, 0, 1, 3, 0, 0, 0, 0, 0, 1, 1, 2, 3, 0, 0, 2, 0, 1, 1, 9, 0, 3, 1, 0, 0, 5, 2, 2, 1, 1, 1, 2, 2, 11, 1, 6, 26, 37, 57, 26, 27, 37, 49, 0, 12, 18, 2, 2, 1, 0, 6, 7, 4, 15, 1, 23, 1, 4, 0, 4, 1, 6, 11, 0, 0, 6, 30, 1, 32, 1, 7, 0, 3, 34, 19, 36, 35, 56, 9, 64, 0, 13, 1, 36, 36, 5, 54, 12, 68, 42, 45, 28, 65, 42, 35, 0, 1, 3, 54, 31, 18, 34, 41, 43, 2, 2, 33, 4, 37, 0, 44, 39, 1, 1, 2, 79, 1, 36, 1, 7, 29, 39, 22, 4, 4, 0, 0, 8, 1, 39, 13, 38, 28, 2, 10, 45, 1, 18, 16, 18, 2, 24, 32, 70, 1, 1, 6, 29, 47, 1, 14, 1, 4, 2, 1, 0, 1, 2, 7, 1, 8, 5, 40, 20, 32, 15, 1, 2, 4, 3, 2, 0, 1, 0, 7, 3, 2, 3, 0, 3, 1, 4, 1, 33, 0, 15, 37, 0, 6, 0, 2, 0, 1, 0, 50, 0, 0, 3, 6, 9, 1, 24, 74, 58, 74, 35, 85, 41, 21, 10, 51, 9, 30, 7, 21, 14, 47, 25, 24, 5, 0, 1, 33, 16, 53, 0, 63, 34, 20, 43, 25, 52, 0, 4, 32, 13, 0, 17, 43, 35, 26, 9, 6, 22, 19, 35, 32, 55, 28, 33, 5, 13, 11, 5, 12, 22, 41, 26, 6, 6, 26, 20, 2, 1, 10, 24, 1, 24, 12, 0, 1, 2, 0, 30, 4, 1, 1, 43, 1, 29, 1, 9, 1, 1, 1, 11, 0, 4, 0, 4, 0, 0, 10, 3, 17, 23, 15, 3, 3, 3, 2, 7, 2, 3, 0, 0, 2, 13, 30, 34, 30, 73, 45, 1, 0, 1, 1, 0, 1, 1, 29, 0, 4, 0, 1, 20, 6, 5, 3, 1, 21, 51, 32, 0, 1, 32, 0, 1, 14, 0, 2, 7, 0, 9, 1, 0, 3, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 13, 5, 1, 1, 1, 0, 1, 10, 0, 1, 28, 8, 4, 4, 2, 3, 2, 1, 0, 3, 3, 41, 51, 17, 61, 57, 29, 40, 2, 2, 38, 15, 1, 0, 4, 4, 2, 42, 4, 5, 28, 1, 19, 20, 17, 59, 14, 3, 4, 0, 0, 7, 5, 6, 21, 8, 0, 12, 9, 7, 0, 0, 1, 8, 34, 7, 1, 1, 2, 0, 1, 0, 9, 3, 0, 0, 7, 1, 1, 37, 9, 1, 1, 38, 75, 0, 13, 0, 14, 1, 1, 0, 0, 1, 0, 4, 1, 4, 1, 12, 4, 40, 7, 0, 14, 0, 16, 11, 64, 1, 1, 2, 19, 3, 16, 61, 18, 47, 15, 40, 5, 5, 41, 13, 52, 1, 2, 25, 2, 1, 10, 0, 0, 15, 5, 0, 5, 6, 1, 1, 1, 62, 36, 29, 37, 25, 0, 6, 1, 13, 1, 12, 48, 11, 3, 36, 10, 4, 1, 0, 2, 2, 7, 20, 27, 31, 47, 67, 1, 2, 2, 9, 2, 22, 9, 28, 60, 37, 19, 6, 5, 31, 27, 28, 25, 48, 64, 76, 24, 32, 27, 0, 2, 14, 19, 0, 10, 8, 1, 5, 1, 6, 0, 0, 22, 0, 4, 11, 0, 8, 1, 2, 3, 10, 6, 7, 1, 3, 51, 2, 4, 36, 0, 12, 59, 33, 1, 56, 1, 0, 52, 1, 2, 4, 3, 1, 3, 8, 1, 0, 14, 5, 15, 32, 10, 0, 1, 11, 73, 0, 21, 2, 6, 8, 3, 0, 5, 0, 0, 6, 1, 6, 1, 4, 1, 43, 51, 19, 28, 30, 28, 0, 14, 1, 2, 45, 38, 25, 1, 1, 1, 2, 2, 5, 5, 3, 4, 48, 23, 60, 29, 46, 40, 13, 1, 0, 5, 2, 0, 1, 58, 5, 1, 23, 1, 54, 29, 21, 0, 1, 0, 1, 0, 1, 3, 2, 0, 1, 3, 0, 11, 5, 5, 0, 1, 52, 1, 4, 29, 25, 4, 0, 1, 1, 1, 28, 1, 0, 3, 0, 45, 8, 11, 2, 46, 31, 14, 15, 17, 12, 0, 9, 40, 19, 2, 50, 53, 2, 3, 1, 20, 0, 7, 1, 12, 10, 3, 37, 42, 8, 11, 57, 39, 0, 4, 1, 7, 0, 4, 20, 0, 2, 0, 3, 1, 14, 29, 8, 8, 10, 3, 5, 43, 1, 0, 9, 12, 23, 1, 49, 27, 52, 28, 61, 19, 32, 4, 39, 4, 1, 1, 0, 0, 63, 3, 19, 40, 0, 3, 0, 1, 1, 4, 0, 4, 70, 2, 3, 8, 0, 5, 1, 0, 2, 2, 25, 33, 1, 7, 15, 8, 0, 21, 0, 13, 17, 0, 1, 12, 42, 25, 3, 0, 21, 6, 1, 71, 2, 14, 2, 40, 1, 4, 0, 1, 31, 20, 11, 15, 4, 29, 14, 4, 46, 2, 6, 3, 1, 0, 1, 0, 29, 1, 1, 4, 14, 23, 43, 53, 61, 1, 2, 2, 12, 1, 23, 1, 1, 12, 0, 1, 6, 2, 4, 1, 6, 2, 0, 5, 43, 1, 1, 19, 5, 1, 1, 1, 0, 3, 0, 0, 0, 26, 24, 25, 1, 1, 0, 36, 0, 4, 30, 51, 13, 52, 53, 20, 50, 11, 0, 0, 7, 1, 0, 3, 7, 3, 20, 5, 0, 33, 2, 0, 0, 0, 1, 0, 0, 12, 0, 2, 21, 13, 23, 23, 3, 0, 2, 18, 1, 3, 3, 1, 21, 2, 0, 0, 27, 30, 1, 1, 1, 2, 2, 13, 39, 6, 9, 20, 3, 7, 23, 3, 13, 0, 9, 0, 2, 0, 4, 1, 29, 59, 80, 10, 25, 38, 5, 70, 1, 19, 1, 1, 1, 12, 0, 3, 1, 1, 3, 8, 51, 5, 0, 5, 0, 0, 63, 3, 3, 0, 44, 35, 6, 11, 31, 4, 12, 1, 2, 1, 2, 2, 3, 0, 1, 1, 7, 32, 49, 0, 29, 13, 3, 3, 1, 5, 4, 7, 4, 12, 36, 4, 1, 3, 13, 2, 3, 7, 3, 3, 2, 49, 1, 5, 18, 0, 51, 3, 13, 2, 0, 0, 3, 0, 21, 30, 9, 11, 3, 11, 0, 5, 1, 1, 12, 0, 3, 1, 0, 1, 63, 25, 28, 16, 73, 13, 0, 1, 17, 16, 46, 26, 34, 24, 39, 19, 35, 73, 6, 60, 3, 82, 5, 2, 3, 3, 1, 0, 3, 1, 1, 4, 2, 8, 1, 1, 70, 10, 1, 14, 2, 2, 41, 34, 8, 61, 19, 37, 0, 3, 0, 1, 3, 36, 17, 47, 31, 25, 10, 0, 42, 2, 0, 1, 6, 5, 2, 41, 27, 19, 34, 27, 1, 0, 7, 1, 0, 6, 3, 0, 2, 22, 0, 3, 2, 7, 34, 6, 14, 8, 1, 1, 0, 38, 25, 7, 20, 2, 7, 6, 4, 2, 7, 2, 0, 19, 0, 6, 1, 3, 36, 2, 3, 2, 9, 4, 43, 9, 15, 42, 0, 9, 0, 0, 1, 0, 86, 2, 52, 7, 28, 59, 12, 5, 59, 2, 0, 0, 2, 1, 45, 0, 30, 1, 5, 2, 4, 11, 1, 1, 12, 1, 5, 33, 1, 40, 9, 28, 2, 7, 32, 26, 35, 1, 3, 3, 6, 1, 0, 1, 36, 36, 56, 30, 16, 55, 0, 38, 2, 25, 0, 0, 0, 5, 0, 18, 4, 7, 19, 29, 1, 6, 8, 10, 4, 1, 0, 4, 2, 0, 5, 0, 41, 0, 34, 33, 24, 19, 6, 30, 0, 0, 16, 1, 1, 16, 3, 1, 3, 33, 1, 42, 33, 43, 9, 6, 1, 2, 2, 1, 1, 1, 1, 6, 2, 59, 12, 2, 3, 13, 37, 0, 1, 21, 12, 2, 9, 3, 1, 0, 3, 8, 0, 2, 7, 2, 3, 4, 4, 39, 11, 10, 27, 7, 3, 13, 35, 41, 30, 1, 0, 1, 0, 0, 4, 42, 5, 2, 4, 3, 3, 1, 26, 8, 5, 2, 2, 62, 35, 3, 26, 2, 11, 1, 12, 41, 0, 12, 2, 3, 3, 1, 0, 1, 0, 0, 11, 1, 10, 1, 32, 3, 2, 1, 0, 2, 4, 0, 3, 4, 59, 39, 25, 46, 41, 1, 19, 69, 21, 1, 15, 3, 19, 11, 0, 1, 0, 2, 31, 27, 2, 9, 1, 2, 23, 37, 17, 3, 25, 0, 41, 19, 7, 68, 49, 3, 0, 0, 21, 3, 1, 29, 0, 4, 1, 16, 0, 1, 0, 28, 7, 13, 10, 5, 2, 3, 2, 0, 3, 0, 1, 22, 4, 4, 8, 3, 1, 10, 15, 14, 5, 6, 7, 41, 1, 17, 1, 29, 8, 51, 2, 9, 33, 0, 0, 0, 27, 7, 2, 0, 12, 39, 20, 43, 74, 5, 0, 54, 2, 2, 4, 0, 3, 9, 4, 5, 10, 4, 16, 6, 1, 8, 19, 6, 40, 42, 32, 24, 17, 64, 14, 50, 2, 2, 3, 3, 5, 48, 63, 2, 8, 8, 15, 4, 3, 2, 1, 0, 2, 11, 28, 53, 34, 7, 27, 23, 2, 2, 17, 0, 30, 1, 43, 1, 0, 41, 14, 54, 1, 1, 19, 37, 10, 11, 37, 11, 45, 9, 33, 5, 3, 2, 14, 73, 0, 7, 0, 1, 4, 0, 83, 0, 3, 1, 72, 1, 0, 21, 5, 6, 0, 1, 19, 14, 37, 15, 0, 1, 0, 6, 35, 6, 4, 9, 1, 0, 1, 0, 1, 8, 4, 1, 5, 4, 1, 20, 3, 0, 28, 0, 1, 18, 46, 15, 1, 28, 2, 9, 3, 37, 5, 40, 2, 1, 16, 58, 7, 1, 0, 16, 8, 25, 5, 3, 1, 5, 2, 3, 38, 59, 11, 13, 42, 2, 30, 6, 62, 7, 14, 8, 1, 0, 1, 0, 39, 1, 33, 5, 0, 1, 10, 18, 19, 85, 4, 0, 1, 1, 0, 0, 51, 30, 37, 66, 51, 4, 16, 14, 70, 43, 12, 12, 10, 4, 1, 1, 5, 4, 0, 5, 2, 7, 0, 4, 27, 5, 16, 58, 20, 12, 38, 22, 2, 34, 3, 31, 21, 3, 0, 5, 2, 1, 1, 1, 9, 9, 14, 1, 8, 0, 1, 0, 1, 1, 16, 4, 1, 30, 0, 10, 1, 0, 1, 0, 11, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 10, 2, 1, 1, 0, 1, 0, 2, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 1, 1, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 3, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 0, 0, 0, 1, 1, 7, 0, 0, 0, 0, 1, 0, 0, 1, 8, 1, 1, 0, 0, 2, 1, 1, 1, 0, 0, 0, 5, 0, 1, 0, 4, 0, 1, 1, 2, 2, 3, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 3, 1, 1, 1, 1, 1, 6, 3, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 7, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 2, 3, 0, 0, 0, 2, 0, 0, 3, 0, 1, 1, 1, 0, 11, 6, 0, 8, 11, 1, 16, 5, 0, 11, 3, 8, 0, 12, 0, 6, 8, 34, 16, 0, 2, 11, 4, 31, 9, 21, 36, 36, 14, 5, 10, 17, 5, 38, 11, 30, 18, 50, 11, 30, 36, 34, 13, 45, 25, 22, 29, 56, 10, 13, 22, 6, 16, 14, 7, 22, 31, 41, 9, 7, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 2, 47, 0, 0, 0, 0, 18, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 9, 0, 2, 1, 1, 0, 0, 1, 1, 0, 39, 1, 2, 0, 0, 0, 0, 0, 2, 4, 0, 0, 0, 1, 0, 0, 0, 1, 1, 4, 24, 0, 30, 0, 0, 21, 1, 0, 0, 1, 21, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 3, 1, 1, 0, 1, 0, 0, 2, 3, 2, 0, 2, 2, 1, 3, 2, 0, 1, 0, 0, 0, 6, 0, 1, 4],
            white: [81, 83, 53, 64, 19, 6, 32, 0, 87, 46, 72, 11, 22, 12, 11, 16, 79, 19, 3, 74, 64, 67, 0, 83, 0, 68, 24, 8, 8, 47, 61, 46, 34, 60, 46, 75, 72, 43, 61, 11, 1, 47, 7, 56, 60, 20, 37, 32, 31, 35, 19, 32, 3, 64, 58, 13, 48, 47, 8, 71, 47, 45, 60, 34, 11, 4, 46, 67, 24, 45, 82, 37, 67, 59, 20, 5, 34, 31, 49, 18, 30, 37, 73, 71, 49, 11, 77, 78, 40, 55, 17, 77, 68, 79, 58, 67, 47, 43, 62, 31, 73, 97, 0, 0, 0, 75, 83, 78, 49, 67, 88, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 78, 72, 55, 36, 83, 0, 0, 0, 0, 0, 0, 0, 0, 71, 74, 67, 56, 91, 86, 68, 63, 82, 81, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 61, 81, 86, 76, 58, 81, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 69, 80, 77, 0, 0, 0, 0, 0, 0, 78, 74, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 46, 86, 90, 0, 0, 0, 80, 68, 0, 0, 48, 42, 0, 0, 0, 0, 0, 66, 70, 0, 0, 0, 0, 72, 16, 81, 75, 74, 0, 0, 0, 0, 94, 76, 43, 19, 59, 48, 95, 44, 74, 63, 88, 73, 79, 70, 61, 63, 89, 68, 40, 41, 59, 39, 80, 32, 85, 39, 90, 90, 35, 63, 57, 73, 96, 94, 94, 88, 97, 98, 95, 97, 72, 93, 68, 77, 76, 84, 94, 90, 93, 96, 96, 95, 98, 91, 76, 94, 90, 79, 88, 68, 81, 60, 80, 80, 87, 89, 93, 67, 77, 62, 38, 71, 57, 37, 86, 95, 82, 52, 61, 35, 50, 42, 85, 95, 85, 83, 81, 91, 72, 57, 90, 59, 81, 67, 85, 71, 89, 89, 88, 90, 95, 98, 94, 98, 93, 95, 89, 89, 94, 73, 60, 95, 91, 56, 97, 88, 97, 37, 94, 82, 99, 91, 97, 96, 82, 92, 93, 91, 91, 92, 92, 61, 97, 100, 94, 94, 86, 96, 99, 95, 80, 77, 70, 89, 71, 68, 70, 96, 40, 59, 67, 45, 77, 37, 97, 82, 84, 70, 78, 81, 78, 74, 98, 95, 87, 64, 91, 74, 86, 79, 42, 53, 59, 14, 71, 66, 89, 74, 96, 75, 80, 48, 61, 59, 98, 93, 48, 92, 90, 97, 95, 98, 96, 89, 9, 97, 96, 97, 70, 84, 87, 96, 97, 95, 84, 97, 96, 82, 72, 87, 87, 47, 93, 22, 49, 53, 30, 66, 61, 93, 87, 66, 82, 91, 87, 80, 95, 19, 63, 54, 87, 76, 82, 79, 93, 86, 86, 66, 77, 77, 82, 69, 88, 72, 93, 75, 96, 76, 95, 95, 44, 50, 60, 62, 51, 61, 70, 86, 85, 89, 40, 73, 90, 89, 94, 81, 81, 64, 92, 97, 96, 85, 94, 89, 65, 97, 59, 97, 97, 63, 51, 97, 96, 63, 87, 68, 43, 42, 80, 90, 90, 94, 87, 92, 66, 82, 77, 79, 85, 96, 11, 15, 54, 54, 14, 50, 88, 73, 51, 67, 82, 74, 68, 73, 86, 97, 92, 94, 85, 95, 58, 44, 72, 74, 70, 67, 82, 68, 95, 69, 81, 82, 78, 80, 65, 57, 51, 98, 96, 85, 100, 90, 90, 93, 31, 96, 84, 94, 97, 97, 92, 52, 43, 77, 45, 22, 51, 82, 83, 72, 64, 84, 69, 95, 82, 74, 75, 75, 59, 81, 44, 80, 58, 44, 49, 60, 60, 56, 86, 72, 85, 53, 86, 65, 75, 89, 72, 92, 65, 91, 95, 85, 97, 92, 95, 93, 97, 91, 89, 83, 97, 6, 79, 57, 63, 78, 76, 84, 57, 87, 81, 66, 95, 78, 85, 84, 64, 68, 84, 68, 74, 80, 59, 79, 66, 55, 78, 45, 81, 28, 63, 73, 93, 74, 74, 82, 53, 93, 53, 43, 62, 93, 85, 77, 67, 82, 89, 96, 97, 89, 97, 99, 93, 94, 94, 93, 98, 97, 98, 93, 98, 96, 97, 39, 82, 63, 74, 10, 80, 68, 80, 65, 65, 87, 86, 86, 92, 73, 51, 65, 80, 77, 99, 64, 79, 72, 66, 71, 71, 97, 72, 88, 66, 55, 59, 20, 89, 80, 66, 53, 68, 47, 91, 51, 84, 60, 77, 88, 40, 92, 96, 84, 92, 71, 35, 86, 96, 97, 85, 95, 97, 71, 86, 76, 38, 95, 92, 96, 73, 73, 91, 71, 91, 88, 37, 64, 75, 61, 81, 73, 96, 68, 59, 47, 50, 77, 64, 45, 68, 89, 50, 67, 28, 75, 40, 81, 45, 85, 94, 89, 84, 39, 78, 84, 95, 93, 97, 95, 98, 83, 96, 95, 80, 96, 79, 41, 89, 87, 37, 81, 61, 54, 44, 78, 81, 55, 92, 90, 92, 91, 83, 77, 96, 97, 96, 62, 81, 66, 97, 59, 75, 62, 52, 67, 74, 83, 70, 33, 79, 96, 98, 83, 93, 96, 90, 95, 97, 83, 67, 66, 83, 85, 93, 88, 68, 34, 81, 49, 42, 93, 91, 86, 66, 95, 84, 96, 97, 96, 91, 98, 96, 97, 92, 40, 65, 92, 92, 79, 89, 84, 81, 80, 54, 95, 56, 75, 83, 66, 82, 79, 73, 88, 43, 80, 74, 86, 84, 82, 58, 17, 98, 86, 51, 50, 93, 79, 76, 86, 87, 87, 82, 91, 51, 62, 49, 64, 96, 69, 64, 74, 78, 57, 15, 98, 96, 97, 75, 42, 32, 61, 92, 91, 88, 84, 81, 89, 80, 97, 37, 77, 50, 84, 70, 96, 95, 95, 97, 82, 85, 35, 75, 46, 78, 62, 71, 80, 66, 34, 69, 87, 46, 94, 95, 48, 96, 96, 95, 59, 89, 83, 91, 99, 95, 97, 52, 90, 91, 94, 52, 68, 86, 53, 92, 57, 88, 55, 76, 96, 89, 70, 90, 86, 72, 87, 78, 93, 85, 89, 82, 76, 78, 75, 44, 90, 95, 84, 96, 97, 99, 91, 91, 86, 97, 96, 11, 98, 95, 99, 97, 97, 95, 84, 75, 87, 95, 97, 77, 77, 87, 80, 65, 50, 54, 88, 90, 85, 69, 80, 74, 37, 34, 88, 94, 96, 79, 97, 92, 53, 43, 38, 60, 64, 58, 49, 97, 83, 29, 93, 93, 93, 96, 66, 86, 75, 74, 89, 70, 97, 93, 98, 90, 94, 89, 84, 97, 96, 91, 65, 95, 65, 96, 86, 91, 94, 63, 72, 60, 64, 41, 88, 28, 96, 80, 95, 59, 58, 63, 40, 79, 30, 56, 53, 66, 33, 53, 64, 97, 95, 88, 41, 62, 71, 62, 55, 53, 93, 94, 63, 63, 60, 96, 52, 58, 94, 93, 88, 15, 95, 60, 85, 65, 60, 55, 47, 81, 94, 98, 94, 88, 97, 55, 81, 54, 71, 95, 85, 46, 94, 77, 76, 74, 93, 63, 68, 29, 95, 94, 82, 61, 52, 97, 74, 96, 95, 97, 94, 97, 95, 85, 86, 99, 88, 86, 52, 60, 61, 71, 97, 95, 91, 93, 88, 95, 97, 98, 85, 87, 95, 96, 97, 95, 96, 89, 97, 58, 90, 77, 48, 99, 84, 99, 96, 98, 94, 98, 42, 97, 97, 94, 90, 84, 94, 68, 23, 41, 24, 64, 15, 53, 75, 82, 46, 88, 68, 86, 67, 78, 37, 70, 70, 88, 96, 94, 61, 72, 44, 93, 37, 55, 73, 56, 71, 33, 98, 81, 65, 78, 89, 75, 42, 62, 66, 89, 90, 74, 78, 62, 58, 43, 66, 66, 82, 74, 86, 82, 84, 61, 51, 58, 90, 93, 67, 66, 95, 98, 84, 74, 93, 73, 77, 95, 94, 88, 97, 52, 89, 91, 95, 52, 82, 61, 95, 65, 96, 96, 97, 73, 97, 89, 95, 93, 96, 96, 79, 95, 73, 60, 75, 87, 86, 91, 93, 84, 87, 77, 97, 97, 66, 82, 64, 61, 57, 24, 50, 97, 97, 86, 97, 94, 97, 94, 69, 94, 90, 86, 78, 73, 86, 84, 85, 94, 65, 40, 56, 96, 86, 63, 98, 93, 77, 96, 92, 91, 96, 76, 96, 97, 90, 97, 93, 97, 96, 92, 98, 94, 97, 96, 95, 93, 81, 89, 96, 89, 96, 95, 97, 85, 97, 97, 63, 79, 91, 93, 95, 92, 95, 97, 98, 94, 92, 56, 41, 69, 38, 39, 60, 57, 91, 95, 60, 73, 96, 97, 88, 78, 96, 54, 95, 92, 64, 96, 71, 57, 76, 40, 75, 92, 90, 82, 98, 83, 89, 87, 55, 88, 96, 85, 82, 89, 98, 95, 92, 68, 63, 85, 97, 98, 95, 99, 98, 97, 86, 88, 98, 97, 87, 96, 96, 61, 78, 93, 94, 57, 24, 96, 76, 84, 78, 91, 94, 98, 98, 89, 97, 80, 94, 94, 97, 74, 92, 53, 88, 97, 77, 98, 51, 69, 16, 87, 96, 93, 68, 94, 72, 36, 61, 52, 59, 55, 64, 87, 54, 72, 41, 96, 96, 68, 91, 96, 86, 92, 97, 76, 89, 98, 87, 86, 97, 96, 95, 36, 51, 59, 59, 61, 98, 91, 98, 81, 91, 83, 49, 76, 90, 58, 80, 84, 88, 98, 95, 93, 87, 71, 59, 66, 48, 31, 97, 98, 95, 87, 94, 72, 86, 59, 38, 60, 50, 90, 91, 62, 67, 69, 72, 47, 16, 23, 58, 67, 61, 98, 82, 74, 70, 96, 82, 86, 96, 78, 93, 88, 96, 97, 70, 97, 91, 81, 98, 86, 93, 88, 87, 87, 90, 89, 92, 92, 40, 82, 91, 57, 98, 79, 34, 41, 96, 41, 89, 98, 41, 90, 94, 89, 93, 93, 91, 87, 97, 96, 83, 61, 79, 67, 83, 98, 96, 66, 27, 95, 68, 94, 90, 85, 89, 97, 91, 93, 97, 91, 96, 88, 95, 91, 91, 45, 38, 73, 69, 67, 59, 96, 77, 93, 93, 45, 54, 71, 97, 85, 97, 92, 97, 87, 89, 95, 89, 50, 72, 38, 65, 53, 47, 78, 91, 92, 90, 94, 100, 97, 41, 87, 93, 71, 84, 40, 59, 73, 97, 93, 97, 98, 98, 96, 93, 97, 96, 94, 91, 98, 80, 89, 88, 97, 96, 43, 96, 90, 68, 56, 83, 95, 95, 94, 97, 68, 96, 97, 93, 97, 53, 64, 46, 86, 51, 66, 80, 78, 61, 80, 97, 82, 34, 52, 85, 46, 46, 88, 94, 94, 75, 98, 91, 94, 86, 86, 90, 59, 53, 86, 77, 38, 60, 97, 94, 97, 85, 98, 84, 73, 98, 95, 99, 94, 98, 81, 64, 87, 82, 86, 96, 91, 54, 97, 97, 85, 81, 74, 97, 46, 66, 47, 68, 34, 72, 56, 89, 50, 86, 94, 93, 99, 97, 35, 94, 65, 56, 95, 88, 98, 90, 90, 94, 98, 81, 28, 95, 91, 79, 97, 91, 97, 97, 95, 92, 64, 65, 96, 89, 74, 87, 97, 61, 89, 80, 74, 97, 87, 32, 55, 44, 92, 98, 47, 81, 96, 26, 89, 77, 94, 56, 95, 90, 97, 97, 62, 75, 86, 80, 81, 68, 82, 91, 50, 91, 79, 93, 91, 98, 88, 97, 62, 97, 97, 93, 75, 66, 45, 39, 36, 89, 96, 95, 51, 97, 63, 95, 96, 44, 97, 98, 91, 90, 92, 96, 88, 94, 97, 84, 37, 93, 96, 77, 89, 96, 95, 98, 100, 94, 94, 95, 96, 68, 72, 69, 97, 88, 94, 58, 98, 93, 68, 43, 78, 45, 38, 63, 42, 82, 98, 96, 87, 93, 99, 91, 88, 92, 72, 90, 98, 62, 91, 95, 96, 96, 94, 97, 98, 76, 95, 95, 70, 76, 63, 66, 89, 97, 92, 71, 95, 91, 95, 96, 74, 95, 97, 96, 69, 68, 93, 95, 91, 92, 91, 78, 51, 88, 51, 56, 76, 78, 70, 87, 80, 97, 87, 94, 95, 97, 92, 96, 67, 40, 18, 85, 69, 60, 86, 28, 97, 78, 96, 95, 97, 83, 97, 91, 97, 96, 91, 88, 45, 93, 98, 91, 98, 98, 36, 88, 94, 98, 54, 63, 83, 84, 11, 87, 77, 96, 94, 92, 80, 96, 95, 97, 97, 96, 85, 66, 41, 98, 64, 59, 91, 93, 96, 82, 91, 90, 92, 75, 57, 91, 66, 86, 84, 92, 94, 86, 91, 95, 96, 46, 89, 88, 68, 95, 47, 91, 80, 93, 82, 92, 93, 95, 78, 64, 77, 83, 92, 75, 96, 85, 95, 95, 72, 98, 81, 95, 98, 91, 36, 68, 69, 79, 24, 84, 96, 93, 73, 80, 52, 55, 66, 75, 52, 77, 63, 26, 91, 40, 90, 17, 74, 88, 93, 86, 95, 98, 90, 96, 95, 82, 95, 80, 94, 97, 30, 67, 86, 74, 94, 92, 57, 57, 87, 33, 75, 61, 97, 90, 99, 97, 93, 60, 77, 47, 66, 69, 83, 97, 43, 93, 97, 96, 89, 89, 95, 55, 71, 74, 58, 67, 96, 98, 88, 96, 98, 87, 95, 98, 94, 73, 98, 87, 95, 87, 61, 88, 71, 79, 93, 96, 90, 55, 64, 89, 66, 93, 88, 91, 87, 95, 88, 94, 95, 74, 97, 90, 96, 93, 61, 94, 94, 76, 81, 93, 55, 82, 80, 54, 97, 86, 99, 98, 95, 96, 14, 91, 46, 79, 66, 39, 83, 92, 36, 95, 98, 96, 91, 94, 52, 96, 62, 97, 91, 95, 92, 72, 97, 97, 84, 96, 86, 36, 96, 57, 86, 69, 94, 86, 65, 60, 57, 92, 97, 95, 91, 98, 98, 96, 62, 57, 41, 65, 74, 41, 97, 60, 84, 73, 97, 99, 98, 90, 97, 77, 94, 64, 76, 70, 97, 89, 91, 84, 92, 96, 98, 91, 94, 96, 92, 96, 56, 93, 61, 65, 27, 74, 82, 60, 98, 97, 74, 96, 93, 81, 91, 97, 94, 65, 96, 55, 61, 56, 70, 88, 95, 93, 84, 96, 98, 98, 97, 87, 96, 40, 83, 97, 95, 85, 60, 97, 96, 49, 82, 94, 87, 82, 95, 88, 81, 76, 96, 95, 73, 94, 94, 92, 93, 47, 82, 84, 54, 89, 88, 85, 57, 52, 63, 95, 96, 92, 97, 91, 78, 57, 92, 95, 95, 94, 94, 96, 61, 86, 91, 94, 93, 35, 55, 85, 66, 90, 81, 86, 73, 49, 96, 77, 94, 94, 95, 97, 85, 96, 97, 95, 85, 97, 87, 94, 64, 93, 88, 93, 98, 96, 92, 97, 87, 92, 38, 56, 67, 47, 55, 83, 71, 30, 72, 93, 79, 90, 78, 86, 96, 91, 96, 95, 66, 68, 94, 86, 95, 94, 67, 60, 71, 90, 72, 98, 57, 72, 87, 29, 42, 93, 94, 98, 73, 93, 98, 66, 99, 92, 96, 79, 98, 95, 98, 68, 88, 48, 80, 86, 92, 96, 97, 99, 94, 90, 96, 76, 94, 92, 84, 94, 96, 85, 80, 73, 89, 85, 83, 57, 98, 79, 93, 67, 69, 47, 87, 82, 62, 97, 96, 96, 70, 89, 91, 90, 73, 58, 74, 55, 22, 92, 93, 45, 93, 94, 92, 97, 95, 87, 89, 90, 86, 89, 78, 74, 95, 81, 72, 90, 50, 55, 66, 71, 78, 33, 78, 48, 94, 92, 94, 87, 90, 48, 32, 95, 82, 88, 79, 86, 94, 94, 98, 99, 96, 88, 62, 42, 56, 84, 70, 72, 91, 95, 79, 97, 66, 95, 52, 95, 94, 53, 72, 30, 95, 96, 78, 59, 87, 85, 59, 71, 46, 56, 64, 79, 88, 86, 80, 25, 95, 89, 99, 96, 90, 98, 15, 96, 92, 89, 26, 97, 97, 68, 91, 88, 96, 95, 64, 78, 55, 77, 92, 94, 96, 86, 48, 89, 90, 82, 96, 98, 97, 98, 95, 85, 89, 96, 90, 91, 93, 78, 88, 97, 70, 97, 98, 78, 47, 84, 89, 68, 95, 85, 92, 61, 83, 58, 96, 95, 70, 37, 83, 84, 97, 79, 87, 65, 75, 93, 96, 91, 95, 91, 61, 40, 85, 80, 56, 93, 61, 88, 34, 88, 80, 88, 96, 97, 96, 96, 56, 93, 63, 93, 98, 95, 86, 77, 77, 14, 92, 99, 97, 97, 99, 98, 43, 66, 52, 31, 48, 86, 80, 82, 25, 54, 69, 67, 68, 87, 92, 96, 93, 95, 97, 91, 95, 88, 97, 90, 67, 90, 69, 39, 75, 72, 56, 67, 96, 61, 90, 61, 75, 92, 100, 90, 96, 97, 95, 93, 86, 77, 81, 91, 64, 94, 97, 95, 98, 96, 81, 71, 92, 66, 98, 68, 95, 94, 95, 97, 73, 94, 97, 97, 95, 85, 95, 67, 93, 94, 98, 69, 97, 96, 97, 99, 99, 98, 92, 97, 97, 81, 77, 96, 87, 86, 92, 95, 89, 95, 77, 98, 95, 91, 95, 97, 75, 94, 96, 23, 99, 92, 94, 96, 94, 37, 97, 97, 96, 89, 99, 96, 97, 94, 92, 92, 96, 96, 96, 96, 97, 94, 12, 89, 96, 96, 75, 95, 83, 94, 91, 97, 45, 96, 95, 93, 93, 94, 93, 91, 60, 91, 95, 93, 91, 91, 98, 94, 94, 64, 93, 62, 93, 96, 86, 97, 91, 92, 84, 69, 87, 94, 85, 95, 88, 85, 88, 91, 73, 93, 94, 95, 97, 85, 85, 96, 99, 94, 91, 96, 97, 93, 95, 31, 100, 94, 96, 96, 98, 97, 97, 93, 91, 93, 88, 91, 97, 95, 78, 91, 71, 90, 89, 97, 95, 95, 96, 96, 97, 86, 87, 96, 92, 97, 83, 49, 83, 94, 89, 98, 97, 72, 97, 75, 88, 86, 95, 95, 83, 87, 76, 80, 88, 94, 95, 88, 98, 95, 96, 95, 95, 95, 97, 97, 91, 86, 90, 70, 87, 71, 79, 95, 91, 32, 97, 81, 73, 97, 49, 94, 31, 96, 99, 13, 97, 97, 95, 94, 97, 97, 88, 89, 97, 84, 95, 87, 82, 59, 90, 44, 83, 88, 93, 71, 93, 96, 86, 81, 94, 92, 98, 98, 95, 96, 95, 89, 92, 87, 99, 85, 93, 94, 75, 97, 89, 79, 97, 95, 97, 96, 93, 76, 72, 80, 93, 95, 91, 92, 95, 89, 66, 80, 87, 84, 93, 66, 70, 85, 41, 94, 96, 96, 83, 86, 91, 98, 97, 98, 96, 94, 75, 96, 83, 52, 93, 93, 94, 96, 95, 99, 21, 93, 93, 91, 90, 98, 97, 89, 96, 91, 86, 88, 93, 94, 92, 96, 70, 88, 79, 84, 60, 53, 61, 28, 16, 77, 40, 51, 42, 69, 45, 65, 58, 46, 76, 73, 79, 66, 73, 66, 78, 74, 58, 55, 79, 91, 78, 75, 86, 55, 82, 60, 79, 48, 81, 65, 59, 60, 81, 48, 70, 67, 58, 34, 80, 82, 71, 85, 79, 78, 86, 68, 65, 56, 84, 88, 89, 92, 96, 95, 94, 90, 97, 93, 96, 100, 91, 90, 89, 95, 91, 86, 75, 92, 48, 96, 81, 91, 93, 66, 93, 95, 93, 93, 84, 97, 93, 98, 97, 96, 94, 88, 84, 88, 89, 24, 86, 85, 96, 87, 89, 56, 78, 88, 98, 98, 94, 92, 51, 93, 88, 92, 96, 94, 89, 93, 93, 89, 95, 94, 90, 71, 90, 57, 85, 88, 68, 91, 96, 92, 93, 74, 90, 95, 96, 62, 91, 97, 92, 96, 96, 97, 98, 93, 94, 96, 96, 86, 94, 90, 94, 96, 97, 94, 88, 91, 94, 96, 93, 92, 96, 93, 85, 95, 97, 96, 97, 95, 82, 97, 96, 83],
            sen_tv2006: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 856, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 530, 0, 0, 0, 0, 0, 0, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 858, 0, 0, 0, 0, 0, 0, 0, 494, 0, 0, 0, 735, 0, 0, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 883, 0, 331, 0, 0, 0, 0, 0, 0, 0, 392, 0, 0, 0, 0, 0, 0, 932, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 982, 0, 0, 0, 0, 0, 0, 0, 0, 0, 628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 827, 0, 0, 492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 533, 0, 0, 593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 557, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 0, 0, 0, 85, 0, 0, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 871, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 331, 273, 0, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 452, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 868, 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 966, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 911, 0, 0, 0, 683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 379, 0, 261, 376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 835, 0, 606, 0, 0, 0, 0, 0, 0, 280, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 612, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 327, 0, 0, 913, 0, 993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 895, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 430, 0, 0, 970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 0, 0, 757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 395, 821, 803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 858, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 486, 0, 0, 0, 0, 0, 0, 0, 0, 488, 0, 845, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 896, 0, 0, 0, 991, 0, 488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            sen_i2006: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 796, 860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 446, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 519, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 996, 0, 440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 946, 0, 103, 961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 209, 100, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 841, 38, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 499, 319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 408, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 523, 0, 0, 0, 64, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372, 0, 326, 0, 0, 0, 0, 0, 0, 448, 0, 216, 0, 62, 0, 482, 114, 0, 309, 0, 0, 0, 0, 908, 0, 0, 0, 0, 0, 921, 558, 10, 13, 7, 15, 0, 0, 0, 0, 0, 177, 110, 397, 135, 0, 366, 0, 0, 92, 0, 19, 38, 16, 17, 101, 0, 0, 0, 0, 0, 0, 0, 0, 9, 14, 8, 104, 4, 0, 0, 0, 0, 94, 0, 0, 68, 169, 119, 159, 6, 0, 198, 162, 29, 0, 0, 21, 0, 9, 10, 19, 9, 0, 0, 51, 400, 0, 0, 336, 729, 141, 407, 580, 10, 0, 18, 18, 0, 0, 573, 196, 442, 51, 0, 0, 241, 159, 297, 41, 123, 0, 0, 0, 0, 0, 0, 0, 204, 13, 5, 0, 13, 4, 26, 15, 0, 0, 530, 0, 0, 0, 0, 0, 130, 146, 9, 6, 5, 192, 202, 148, 0, 370, 465, 338, 372, 51, 0, 96, 58, 0, 0, 0, 0, 0, 0, 0, 137, 41, 0, 6, 130, 391, 397, 0, 0, 0, 0, 0, 0, 507, 413, 0, 300, 134, 13, 0, 0, 863, 204, 37, 0, 0, 0, 0, 0, 0, 0, 577, 65, 97, 688, 0, 15, 103, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 6, 9, 15, 50, 31, 5, 12, 20, 0, 29, 55, 217, 89, 240, 313, 8, 58, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 28, 8, 3, 26, 0, 0, 0, 0, 0, 0, 0, 101, 120, 30, 0, 0, 162, 62, 114, 419, 193, 0, 141, 0, 0, 43, 352, 119, 0, 780, 93, 78, 506, 0, 0, 290, 32, 0, 0, 0, 0, 0, 8, 0, 4, 0, 892, 498, 181, 189, 0, 61, 0, 0, 0, 0, 0, 0, 37, 213, 940, 0, 27, 0, 11, 105, 149, 0, 0, 111, 198, 184, 358, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 240, 0, 0, 0, 0, 0, 0, 0, 0, 835, 0, 0, 0, 0, 0, 0, 426, 0, 0, 0, 0, 437, 0, 0, 0, 0, 0, 0, 0, 271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268, 774, 725, 0, 0, 0, 26, 296, 0, 0, 0, 808, 686, 813, 342, 0, 0, 72, 48, 0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 135, 34, 140, 0, 665, 0, 0],
            tv2000: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2616, 3391, 439, 4004, 2921, 97326, 3392, 6069, 9387, 32748, 18699, 7249, 5030, 8464, 937, 2431, 30567, 92983, 4128, 123509, 39248, 21773, 0, 255990, 50860, 9229, 4856, 6183, 3753, 12459, 12873, 101050, 9806, 6563, 9425, 34317, 974822, 62057, 31571, 10858, 11809, 9194, 1444, 7273, 10746, 9227, 11698, 12023, 2157, 8330, 412726, 27408, 11474, 8420, 228, 19228, 8247, 13426, 5062, 1490, 11073, 4308, 80019, 2014, 7546, 78293, 34449, 179151, 9854, 280155, 55690, 433222, 181221, 26239, 4183, 0, 0, 0, 88611, 2505, 49627, 6236, 3365, 5395, 6148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30844, 398526, 35152, 360354, 8139, 65236, 0, 0, 0, 0, 0, 0, 0, 0, 3826, 6810, 92202, 7812, 4667, 160977, 137805, 77990, 22261, 12730, 184400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10053, 30020, 8587, 60771, 183674, 21810, 142769, 0, 0, 0, 0, 0, 0, 0, 168629, 0, 0, 0, 0, 0, 36675, 4645, 27116, 0, 0, 0, 0, 0, 0, 218488, 8675, 85757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57559, 575239, 66900, 57248, 0, 0, 0, 22235, 10931, 0, 0, 10705, 17713, 0, 0, 0, 0, 0, 21510, 28621, 0, 0, 0, 0, 33895, 625552, 62016, 102971, 110344, 0, 0, 0, 0, 2641, 83721, 34657, 9161, 5651, 31755, 7877, 49471, 4348, 586, 2839, 16357, 41790, 12836, 13890, 19799, 642, 4889, 5290, 2465, 3623, 9110, 39940, 4984, 84796, 4839, 3734, 8627, 613039, 7075, 1744, 20854, 4959, 2802, 2785, 12594, 4491, 1852, 571, 1480, 19452, 3096, 1294, 1557, 6966, 491, 3561, 34467, 3055, 9506, 2431, 1393, 1668, 21002, 1192, 1219, 2257, 4358, 2445, 64541, 803, 1963, 139626, 0, 7610, 1212, 4924, 122301, 3543, 1755, 6826, 4586, 4960, 10895, 4775, 12834, 774, 2962, 5312, 454893, 958634, 319786, 80173, 8531, 14151, 12808, 6968, 5175, 1557, 2088, 3376, 1446, 23271, 571, 3614, 8185, 57885, 11513, 29379, 47220, 1945, 453, 6460, 4823, 7059, 7044, 14472, 2792, 1011, 183156, 6866, 2998, 1474, 2856, 6543, 3429, 1709, 28335, 11607, 13745, 6009, 14692, 5033, 3478, 1563, 3649, 8092, 4215, 2847, 4186, 3215, 3315, 3625, 1421, 5025, 4150, 12859, 2613, 894, 2498, 15464, 4922, 7781, 3352, 4900, 14001, 8872, 4753, 1834, 593, 6772, 14256, 10218, 6612, 8878, 2671, 22530, 3669, 3750, 6056, 18162, 14985, 3105, 2899, 37481, 272062, 435, 9074, 33225, 9118, 2744, 5715, 5326, 145042, 2333, 6518, 1133, 1574, 4259, 5022, 13469, 1103, 223111, 24693, 5342, 11160, 9150, 9658, 1875, 3828, 3392, 4269, 10280, 2167, 408, 6880, 5041, 9568, 7977, 45278, 123485, 7016, 4004, 5772, 2765, 2184, 6592, 3472, 108886, 2682, 30852, 733, 4894, 1651, 11241, 17787, 46653, 982, 1029, 4373, 2220, 13353, 21683, 2013, 2200, 9843, 5438, 922, 8236, 9548, 17505, 10910, 1801, 62742, 1225, 32461, 5675, 37307, 3291, 2940, 6414, 6007, 7836, 772, 861, 12920, 3267, 1090, 4095, 1595, 48272, 282692, 16127, 38433, 1949, 3459, 6641, 33142, 7384, 2252, 1770, 12455, 1127, 28388, 6845, 35323, 6770, 10404, 1968, 2692, 5740, 13684, 1033, 3621, 7507, 5414, 6061, 4141, 1122, 60624, 1040, 664, 5154, 1163, 25430, 197006, 32901, 131735, 2918, 1880, 1847, 1317, 4520, 6308, 10482, 10539, 3372, 12870, 11701, 5010, 15879, 2191, 16204, 3844, 12097, 154974, 3333, 18994, 25376, 8159, 2593, 4628, 4585, 3930, 4049, 2662, 10232, 3780, 4691, 3420, 51724, 2420, 1872, 556, 3805, 16633, 6858, 2709, 1798, 3188, 3216, 15691, 1515, 3578, 175420, 1415, 61436, 1684, 1242, 5089, 2862, 16461, 3139, 1413, 1116, 1705, 2576, 2486, 752, 3006, 8740, 11969, 204319, 1711, 18149, 7088, 5461, 39838, 1683, 2152, 1205, 16276, 990, 10371, 2974, 793, 9351, 24466, 34626, 7116, 2002, 44141, 76008, 25147, 2960, 899808, 68789, 287640, 12121, 659, 799, 472389, 1719, 881, 22316, 5983, 5026, 4243, 3579, 5105, 3808, 107132, 2985, 4416, 1740, 3849, 513, 1820, 3978, 217536, 1268, 1953, 507, 7312, 8998, 14215, 9384, 5337, 2628, 4046, 20490, 8294, 968, 3458, 118537, 7100, 3788, 3849, 4697, 757, 9743, 2482, 29333, 23741, 5484, 39740, 156, 1654, 5297, 1012, 4483, 43e3, 3177, 10735, 1474, 25627, 6745, 7077, 2501, 1171, 2126, 4637, 12480, 13232, 2111, 23727, 4896, 5394, 4560, 12438, 3368, 272, 462, 349, 7528, 3573, 3784, 2145, 4123, 3940, 2263, 8626, 395, 2082, 36557, 4293, 40159, 1494, 24947, 11411, 5925, 13178, 15909, 4546, 87855, 8538, 4398, 2362, 14468, 5315, 1484, 76171, 1158, 14537, 11992, 15444, 22970, 2927, 2031, 2352, 3930, 5520, 17736, 40883, 33204, 19433, 7330, 2314, 8269, 9664, 43020, 4054, 842, 8103, 1900, 3784, 11019, 2742, 2354, 2503, 1877, 18876, 1088, 1616, 494336, 5250, 3369, 1665, 2138, 3340, 2443, 163417, 2303, 74373, 5096, 1489, 5766, 3171, 16056, 200757, 2465, 17104, 6353, 1687, 167239, 4094, 11746, 9210, 31360, 16458, 8408, 2920, 14374, 3874, 2084, 15430, 1576, 4598, 7866, 938, 2090, 10586, 2695154, 20919, 33395, 16368, 2043, 13884, 3060, 7418, 4051, 16831, 6555, 1984, 7578, 6662, 1519, 4627, 3208, 21527, 1854, 3482, 18253, 2775, 37896, 451127, 6900, 1347, 548129, 10340, 108350, 1173, 259399, 11115, 235491, 3174, 925, 7236, 566, 8970, 66544, 117799, 1890, 2871, 7274, 15087, 2735, 4046, 549, 6369, 17652, 1060, 63291, 7815, 123155, 8074, 34410, 50418, 4107, 1460, 8121, 2053, 1261, 4088, 9130, 1727, 4503, 12686, 218691, 3349, 8397, 120256, 1608, 3729, 1435, 220835, 72136, 381478, 5590, 3063, 4630, 2160, 146790, 2792, 12853, 2791, 2030, 412, 15114, 301, 378, 1495, 7731, 182308, 4524, 2233, 6665, 2220, 7800, 51054, 8096, 2199, 6094, 486, 6088, 28951, 17488, 12254, 6529, 2456, 4324, 2507, 5977, 6532, 7279, 10401, 5797, 68082, 41290, 8893, 903, 17891, 1273, 431550, 3055, 7938, 14465, 33556, 7430, 536, 137, 3997, 2574, 15080, 4024, 26974, 1452, 42713, 4577, 2389, 55972, 8711, 28937, 4719, 3616, 5469, 21517, 3671, 1648, 1445, 2111, 9847, 1303, 11068, 436, 3255, 19819, 1837, 28652, 8823, 382198, 17974, 14180, 7792, 10118, 5366, 3266, 6954, 34054, 1255, 5202, 8917, 38726, 6048, 23063, 353, 30320, 117534, 4371, 47479, 970905, 12461, 5903, 128267, 5115, 5915, 1397, 1386, 15034, 14210, 1006, 1266, 4040, 1759, 26564, 35869, 8965, 1134, 198347, 15188, 86225, 2529, 9638, 5075, 2855, 53946, 13839, 8919, 15483, 5030, 837, 1956, 2119, 34751, 5145, 1550, 152188, 36733, 27844, 6214, 6326, 307258, 4744, 781, 3122, 2112, 3847, 2827, 409, 2451, 1876, 6886, 5290, 6613, 3176, 385, 10556, 1310, 963, 2631, 1014, 10955, 18546, 61369, 4940, 3491, 20744, 5134, 4468, 4758, 189942, 5659, 107852, 2278, 6181, 1798, 1802, 12181, 2293, 21377, 89818, 21162, 9049, 10535, 30690, 3610, 6019, 14390, 84604, 18202, 120942, 16051, 14804, 11389, 10167, 16477, 555930, 61795, 22904, 38888, 6496, 242164, 23174, 22769, 40183, 46007, 486884, 7311, 18841, 5065, 128686, 2301, 6790, 32775, 8302, 6219, 25641, 60114, 15430, 25451, 42600, 65204, 18896, 12776, 6881, 34936, 22251, 3953, 3191, 7284, 192404, 17677, 23400, 6491, 33930, 10544, 9556, 80328, 42681, 5787, 8540, 5895, 5758, 13538, 7175, 4924, 5821, 6429, 13131, 7759, 20860, 140293, 20351, 41437, 6373, 49245, 7043, 3507, 23302, 2365, 18668, 4026, 3740, 134173, 49393, 165761, 11062, 63684, 58211, 8315, 38150, 6703, 5197, 191111, 9691, 4713, 3812, 5625, 24061, 9542, 5492, 10483, 4892, 5605, 7996, 4681, 7137, 8201, 4385, 24260, 25741, 17721, 2722, 3719, 4098, 18406, 8980, 174167, 74585, 8368, 5179, 105477, 4710, 2381, 4995, 18396, 6817, 8268, 15106, 37336, 2249, 12309, 24529, 21163, 16283, 3964, 41155, 3849, 2131, 37942, 8782, 40093, 75475, 11110, 6302, 345559, 59378, 6447, 7387, 8558, 4756, 7103, 14231, 14663, 15194, 3361, 59179, 5870, 2006, 9355, 2179, 4154, 5725, 23228, 3802, 124752, 8318, 13796, 13093, 14334, 47470, 21277, 31795, 9553, 8165, 6088, 6919, 4615, 14775, 7919, 62128, 10587, 24090, 13360, 2945, 110951, 71265, 6469, 19677, 20705, 5284, 14695, 8435, 15391, 12244, 6691, 8333, 2145, 909, 8004, 1575, 12950, 201894, 1437, 12205, 2859, 24492, 7370, 5852, 263212, 7618, 22384, 1020, 7385, 24255, 9711, 6363, 10900, 904, 6299, 3346, 317177, 10116, 4885, 52348, 6477, 1207, 76475, 28904, 26149, 5123, 16303, 13224, 5823, 15394, 21654, 2788, 2459, 4788, 114320, 12590, 3874, 25769, 4893, 263036, 14011, 13234, 8325, 9366, 16076, 11925, 9543, 142121, 14408, 13222, 7284, 120595, 10675, 23970, 10132, 11871, 16095, 5518, 36846, 6611, 31226, 9972, 36008, 8856, 211337, 59411, 121086, 70568, 35364, 310333, 19671, 20501, 898, 10650, 5853, 6263, 3080, 2366, 5694, 17650, 10158, 10991, 4209, 9761, 2492, 6984, 2651, 5510, 22150, 14216, 6479, 190865, 49272, 59392, 38607, 22273, 24167, 16970, 166264, 9930, 110599, 49024, 5021, 13424, 23090, 3866, 23470, 6279, 4708, 111762, 39194, 6629, 102926, 12490, 20175, 10756, 15447, 21360, 9145, 20723, 7138, 4414, 14075, 8660, 32100, 28691, 5508, 7631, 77204, 2239, 7496, 12440, 5594, 11175, 33442, 12207, 28779, 4196, 6311, 40662, 156709, 20523, 17541, 84441, 18914, 8803, 9697, 34246, 2531, 832, 5610, 2780, 14452, 11740, 6714, 35021, 70824, 23330, 263422, 135163, 45140, 12126, 10225, 13310, 6026, 20222, 6099, 2071, 2995, 1519, 24583, 16572, 92064, 4637, 4303, 4926, 7396, 21094, 55199, 5344, 3081, 5368, 32975, 4588, 6724, 23272, 73470, 218308, 3446, 20164, 4230, 4568, 7597, 4434, 8985, 2828, 66221, 15179, 6633, 11629, 36228, 12883, 17473, 5454, 66946, 95057, 13548, 29859, 3944, 9855, 570265, 10772, 69270, 19557, 2637, 9691, 4587, 16584, 5767, 2213, 47751, 13840, 16793, 109297, 26939, 7604, 16761, 7637, 29501, 7693, 371688, 191670, 271909, 24837, 3390, 13003, 39044, 6162, 177541, 4743, 196861, 12321, 91102, 16551, 366721, 47594, 14857, 3725, 35455, 12068, 7161, 377899, 30617, 4697, 10827, 13252, 12421, 65241, 76670, 11518, 144244, 14378, 11693, 4514, 26578, 3113, 3493, 10328, 12058, 7210, 19435, 73593, 27423, 582478, 33433, 4410, 12592, 12102, 4533, 4661, 22781, 52769, 7548, 4947, 9143, 10250, 9359, 83553, 6891, 10589, 30672, 11331, 9e3, 3442, 12616, 5728, 10239, 21463, 41585, 114252, 3906, 14072, 100511, 3513, 12697, 2949, 2509, 2150, 7541, 5799, 61402, 1277, 235027, 1929, 9430, 3561, 35755, 26825, 42449, 8390, 7782, 5762, 8153, 54482, 15504, 44147, 13785, 9171, 8292, 22036, 12928, 100656, 4609, 61946, 13101, 21069, 40220, 2124, 16489, 16039, 25365, 5473, 336755, 12121, 14333, 2237, 6615, 45586, 7897, 8582, 19102, 12149, 16139, 10223, 7883, 25284, 7348, 29443, 14754, 13016, 11428, 15360, 9413, 10322, 5362, 141405, 7055, 8356, 10525, 5281, 5988, 122580, 5126, 9318, 414074, 9278, 54094, 35015, 55403, 4238, 4512, 9094, 4491, 8989, 9621, 10659, 4420, 16600, 16406, 61946, 65926, 54351, 6061, 7106, 208588, 19017, 5440, 16335, 4370, 52163, 18375, 5902, 9335, 8372, 10792, 23994, 7827, 11168, 42817, 16344, 11166, 3230, 3567, 3906, 3944, 4849, 57825, 424654, 8671, 8152, 5072, 6474, 2425, 11774, 3010, 10137, 11167, 8626, 9590, 4452, 3979, 2185, 6584, 22162, 8344, 2764, 5307, 18120, 5179, 9910, 4058, 22309, 15783, 3768, 55080, 25151, 19825, 9801, 5877, 8496, 11281, 32391, 5922, 175994, 29482, 18566, 32218, 24652, 3558, 13612, 6153, 9338, 16277, 19212, 8099, 120377, 156573, 18480, 4860, 6361, 4675, 8085, 112779, 91424, 10655, 107298, 259573, 48684, 27989, 11290, 9608, 56455, 17740, 8946, 16323, 12828, 5988, 19968, 7249, 32137, 17906, 10432, 273763, 4448, 12185, 10516, 5228, 19892, 30141, 16429, 136737, 12261, 19699, 120379, 2075, 13472, 6097, 12808, 4534, 20327, 8351, 4187, 12738, 5824, 4772, 9051, 3325, 7458, 11766, 55085, 25157, 6215, 9410, 13234, 14782, 7135, 5635, 1887, 10119, 33884, 24323, 24826, 13682, 8764, 42284, 4855, 6503, 9313, 4007, 149771, 10395, 3927, 3971, 7316, 11277, 44891, 8262, 3239, 46295, 4954, 14470, 17788, 78661, 1842, 11712, 3854, 4373, 7175, 142620, 304084, 10998, 8112, 26371, 200657, 9942, 8385, 9066, 20601, 29806, 76812, 13044, 40458, 167361, 7006, 1865907, 8500, 4975, 186373, 33233, 7051, 3245, 57490, 26972, 42841, 13390, 66883, 24815, 18294, 9795, 11660, 23804, 7808, 39348, 11103, 11529, 11841, 15556, 18623, 6265, 63709, 11756, 36099, 6029, 16242, 23267, 574782, 19176, 14268, 49532, 2740, 1176, 24649, 57538, 2569, 5341, 33321, 30609, 12410, 15843, 6681, 21894, 11994, 2580, 3647, 5162, 1975, 58720, 33978, 20250, 37710, 58300, 7090, 17364, 561180, 10218, 12841, 16552, 13786, 7074, 7226, 5247, 998, 6992, 5861, 13635, 16708, 8271, 6372, 20410, 5704, 15139, 6462, 4551, 13761, 4566, 3749, 49776, 7059, 4890, 6795, 268220, 12701, 39747, 5453, 16142, 52216, 18723, 6458, 23666, 50477, 15061, 302362, 56249, 8180, 15609, 32199, 8701, 12607, 8987, 15310, 7846, 4860, 97474, 7126, 55727, 35915, 66287, 212995, 48247, 22024, 12928, 68516, 93756, 5303, 6065, 4094, 9356, 5215, 8265, 5848, 7841, 25094, 13e3, 8327, 61412, 203734, 10248, 76080, 8952, 44592, 28876, 258849, 135559, 206508, 262141, 38264, 216393, 23634, 14485, 52779, 17344, 2866, 18166, 62899, 10560, 6932, 7731, 4396, 9559, 32057, 7705, 68436, 18328, 10541, 4545, 15276, 9107, 21956, 43795, 10235, 39472, 21258, 17098, 25447, 8399, 6478, 14619, 2615, 32216, 2816, 3582, 1954, 49538, 60286, 2246, 4719, 2877, 187562, 8376, 308048, 87063, 141969, 18689, 15054, 33733, 17624, 32985, 3105, 17271, 14772, 11001, 13175, 4994, 3066, 6111, 23506, 371775, 38329, 23555, 28621, 78225, 9071, 5873, 8632, 47161, 1566, 14225, 4370, 23358, 8482, 26069, 19182, 7102, 31984, 10611, 4473, 7985, 4313, 13492, 47091, 10316, 14166, 9116, 9510, 10740, 3064, 15112, 9932, 3772, 4359, 100393, 65095, 91485, 11650, 88865, 8293, 70404, 17427, 13046, 74285, 2055, 5899, 7177, 2602, 16823, 5551, 50782, 8374, 56681, 3340, 13613, 7194, 38824, 15434, 21532, 5551, 433537, 4567, 6528, 9206, 41435, 9574, 2903, 8564, 941, 119586, 7422, 116280, 45880, 39640, 175317, 13219, 4946, 69078, 26515, 42436, 104690, 33251, 332422, 6492, 16071, 3413, 589707, 20809, 317762, 28366, 27223, 6709, 2184, 7993, 4355, 11712, 3837, 5139, 27367, 8579, 5772, 17964, 14036, 7884, 4495, 5230, 1904, 29216, 4108, 9972, 22180, 8571, 10052, 17627, 8303, 4456, 8951, 4306, 14154, 43075, 11833, 9417, 4004, 10770, 22701, 3019, 10326, 7453, 5073, 22950, 2441, 12619, 75926, 13772, 26386, 8422, 26461, 20931, 50841, 9674, 10531, 16150, 6978, 43316, 9985, 44148, 10552, 11844, 5306, 58429, 7775, 35916, 4782, 2334, 2660, 4542, 9186, 3131, 30109, 4022, 21671, 7032, 15523, 7102, 5092, 7374, 15092, 5883, 10752, 2989, 19378, 2469, 10163, 58348, 14620, 3408, 96381, 6447, 2140, 24340, 5317, 2214, 15957, 4261, 31401, 17574, 8667, 52194, 15919, 8276, 9827, 111476, 14614, 48725, 15804, 43183, 46878, 10923, 3682, 6108, 27705, 36418, 617105, 6820, 6550, 13699, 8777, 6852, 5412, 3103, 2314, 25432, 6750, 10043, 9782, 18875, 11223, 13498, 17835, 2883, 2593, 5566, 3546, 4221, 4121, 6040, 3383, 7161, 8068, 7413, 3758, 8349, 19365, 9032, 10096, 8748, 75653, 5769, 5455, 4022, 9332, 3420, 26689, 4799, 19653, 3021, 13673, 33829, 5010, 5482, 2593, 3293, 3739, 12586, 3738, 29747, 32528, 42696, 14269, 8339, 7281, 44133, 8647, 23918, 2283, 48969, 5285, 13634, 1963, 4497, 2456, 17804, 3615, 126549, 15843, 48473, 25358, 42547, 94550, 9141, 5328, 6051, 23010, 9856, 5997, 8514, 9405, 2688, 3181, 9307, 5900, 10207, 217e3, 7234, 40323, 6176, 310148, 7238, 4938, 40060, 28524, 22454, 40563, 573866, 5569, 8519, 17182, 11956, 9403, 22818, 21716, 19239, 7235, 18422, 3507, 127151, 24661, 7738, 7267, 26244, 51636, 12432, 9904, 657048, 6408, 13844, 7967, 4240, 3770, 7328, 6429, 279903, 23575, 13488, 21326, 9772, 7176, 10908, 6694, 17313, 22438, 28839, 4596, 144940, 768627, 12982, 62182, 15913, 4484, 6276, 6010, 12151, 12454, 3257, 3781, 15704, 7428, 14287, 3179, 3016, 2330, 55201, 25653, 7512, 14771, 15427, 6135, 40801, 20093, 8398, 8834, 33641, 8990, 21863, 20285, 15806, 18464, 4795, 29525, 8403, 14691, 17137, 10066, 6194, 55559, 7263, 44427, 16887, 9343, 15680, 57559, 69877, 15070, 113318, 10832, 100658, 88062, 4436, 13578, 9385, 248077, 112335, 87770, 47887, 5993, 12839, 7115, 230987, 32624, 7878, 9628, 2382, 18895, 33857, 19083, 3308, 6956, 6288, 8282, 93257, 563232, 203629, 95996, 45948, 3221, 3208, 3467, 10439, 3887, 20426, 5927, 2210, 25271, 35935, 6013, 12484, 10981, 2831, 49381, 26115, 85476, 30658, 8499, 2493, 4328, 33366, 4765, 172093, 6281, 68626, 59609, 12526, 5294, 7534, 9494, 16253, 7351, 16146, 10294, 10531, 11834, 38909, 7803, 4904, 7823, 19947, 5254, 14087, 3127, 7264, 4754, 6681, 6578, 14620, 15421, 13065, 13012, 114119, 9958, 18455, 112180, 187350, 14667, 6952, 25970, 6587, 12678, 16602, 6642, 83081, 3661, 19670, 24351, 29945, 25744, 26016, 18307, 2080, 5739, 23481, 18829, 8706, 22392, 22873, 20816, 6134, 7464, 14439, 7303, 36988, 27201, 38867, 11635, 2852, 3943, 11594, 5032, 6072, 29362, 8693, 29749, 5609, 5049, 5898, 7648, 13827, 219980, 21491, 29147, 4689, 11654, 4609, 5027, 4591, 7886, 115421, 413775, 17090, 109147, 62700, 43963, 9311, 6243, 2808, 29859, 6202, 4581, 6744, 6772, 8831, 5907, 16663, 3499, 8415, 8959, 5469, 17773, 12473, 17943, 6015, 6600, 8974, 31301, 30513, 66319, 14602, 11931, 8030, 13998, 77151, 6739, 13002, 52047, 11e3, 4803, 4362, 24935, 21541, 211577, 37838, 17099, 14397, 15308, 56224, 5523, 15755, 6903, 6060, 4292, 6178, 17208, 10395, 7101, 17973, 2224, 5657, 150586, 37701, 8485, 232739, 4522, 7394, 25587, 8862, 5523, 60898, 106185, 21389, 49499, 111104, 7596, 5593, 62466, 21260, 34636, 24452, 102564, 3481, 14879, 12638, 15234, 7173, 17024, 12372, 34582, 32734, 159844, 224839, 96239, 37118, 23879, 26795, 33395, 3831, 38733, 9136, 1530, 7226, 11880, 3198, 8562, 7536, 3086, 8167, 3346, 5712, 8123, 3928, 16241, 3520, 5877, 30964, 29064, 3585, 27160, 6114, 6145, 11276, 19230, 341099, 367556, 370289, 77433, 87338, 4305, 6719, 3006, 4154, 36240, 18315, 34095, 14896, 40221, 11392, 30030, 30215, 8200, 5242, 49344, 10903, 31985, 3852, 4890, 16066, 18425, 32746, 64027, 1826, 20268, 4070, 2673, 8882, 37234, 4693, 250318, 20753, 8864, 83559, 8050, 8232, 4233, 3260, 7881, 7266, 364362, 46589, 14653, 5987, 244278, 2090, 4033, 14929, 3624, 573846, 9613, 5009, 917, 11138, 1090, 35143, 8549, 27269, 5163, 1394, 11448, 23951, 9256, 2737, 1519, 1145, 2468, 3896, 2723, 3830, 2536, 5970, 6382, 3824, 13593, 6352, 19194, 15081, 3638, 2885, 2980, 28511, 4646, 4353, 1626, 2364, 11223, 1986, 1681, 1329, 16703, 1965, 3918, 14216, 3813, 812, 1743, 1427, 28385, 1469, 731, 12832, 17316, 14711, 3641, 4151, 10505, 2187, 6563, 4453, 6879, 1233, 1688, 17962, 19762, 3038, 73206, 135544, 3690, 46576, 525, 2154, 5748, 1160, 3689, 16556, 2106, 11092, 8339, 3423, 14140, 21987, 6320, 13068, 23358, 1051, 17238, 3779, 2896, 12236, 4074, 21714, 6811, 19285, 2637, 15311, 43812, 22480, 14798, 29986, 5197, 9519, 12487, 57499, 162262, 16474, 21195, 6558, 107464, 7166, 2786, 794, 43793, 1728, 1268, 1992, 1276, 4721, 6188, 17205, 29179, 10434, 4124, 744, 5385, 16596, 18891, 2371, 1471, 1039, 34482, 58995, 5515, 4198, 10253, 14677, 10672, 45221, 8407, 268427, 5438, 4249, 2108, 871, 3284, 1590, 11507, 14132, 4366, 12322, 8045, 3884, 3507, 16237, 67299, 73757, 43366, 3197, 1494, 1614, 14354, 7080, 17217, 14333, 145619, 8260, 5199, 4716, 172112, 250967, 97422, 17999, 1973, 1110, 33317, 645, 4905, 12132, 1846, 3314, 29954, 7366, 19921, 58374, 3687, 2107, 12855, 36962, 185974, 10664, 4294, 12076, 1243, 2224, 28449, 296685, 1142, 2759, 2074, 4161, 4789, 442, 1041, 928, 2184, 9777, 8015, 1332, 2719, 4977, 16021, 7930, 7890, 19904, 8259, 25972, 23798, 1329, 13614, 33004, 12376, 1062, 23060, 12617, 5994, 2228, 2896, 1008, 2832, 746, 1210, 9118, 1189, 4112, 5182, 4534, 3963, 999, 479, 7452, 33839, 3393, 8992, 17603, 7767, 1369, 14537, 14239, 9721, 7985, 59779, 26517, 35539, 5437, 4271, 35021, 8151, 26173, 15833, 794196, 102596, 14086, 8159, 15394, 3609, 113334, 32232, 4974, 1639, 7406, 2207, 306, 2079, 1971, 531, 1840, 1417, 28128, 14908, 21365, 15220, 2553, 2224, 518, 2378, 935, 3656, 7846, 1044, 4398, 5752, 30835, 62476, 7807, 1343, 2410, 22482, 3305, 12009, 107009, 2820, 21706, 19330, 47875, 2405, 20077, 17836, 9920, 29654, 46941, 3580, 6802, 4303, 1757, 7714, 1540, 301263, 1398, 5866, 477, 95935, 18308, 86909, 11742, 1666, 3767, 5536, 106213, 2816, 70819, 4990, 5643, 3966, 8026, 36865, 12461, 18514, 50402, 6163, 2410, 103154, 23238, 14503, 83737, 37155, 10169, 139745, 12205, 168989, 73636, 116856, 265181, 14731, 58876, 8155, 45107, 18323, 12546, 5175, 14548, 52616, 20778, 34151, 56480, 23787, 7748, 8122, 4739, 3752, 3846, 6336, 6969, 1129, 2330, 2031, 27402, 4918, 8277, 5438, 835, 7534, 51459, 15327, 95639, 3978, 4070, 1909, 12331, 9005, 10984, 3641, 12836, 8258, 38226, 2727, 8424, 3494, 3991, 9778, 32040, 4591, 10431, 7739, 4176, 721, 3981, 5088, 12249, 17625, 1381, 10596, 53646, 11489, 3284, 2738, 3550, 7574, 382, 14520, 16787, 12903, 841, 6140, 19330, 4196, 9406, 12368, 9747, 3709, 17048, 13745, 7193, 7289, 21118, 44388, 4459, 9366, 5663, 5628, 8096, 5263, 12540, 5527, 3850, 6897, 7335, 19138, 15708, 11246, 58907, 3992, 3664, 33760, 38229, 28574, 6849, 26021, 22257, 75742, 35761, 27493, 5997, 12168, 8417, 30555, 6364, 22804, 17932, 72017, 13641, 39779, 107769, 8072, 2892, 10084, 6641, 14149, 17447, 15448, 14600, 182249],
            tv2004: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2898, 3118, 564, 4201, 3455, 104560, 3501, 6022, 10397, 41043, 21320, 7690, 4091, 9781, 963, 2674, 38752, 105981, 3930, 163169, 47430, 24876, 0, 298547, 57702, 10034, 5077, 6732, 3566, 12521, 14826, 113683, 11649, 6929, 11587, 47823, 1067968, 69156, 41556, 13881, 13063, 9973, 1600, 8741, 12116, 10702, 14885, 12691, 2065, 9518, 475314, 29602, 11795, 8483, 169, 21246, 9268, 14039, 4962, 1645, 14072, 4673, 93248, 2230, 8177, 89923, 37864, 191663, 12190, 388044, 82204, 544622, 197103, 30973, 4640, 0, 0, 0, 123950, 3325, 61414, 7249, 4188, 7015, 7277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39100, 455357, 41496, 463222, 9775, 80547, 0, 0, 0, 0, 0, 0, 0, 0, 4675, 8581, 128683, 9510, 6442, 195652, 186195, 100063, 31842, 16652, 240667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10735, 32273, 11763, 86290, 228939, 22694, 190916, 0, 0, 0, 0, 0, 0, 0, 210830, 0, 0, 0, 0, 0, 40574, 5931, 38480, 0, 0, 0, 0, 0, 0, 265462, 10855, 111328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81495, 706872, 79786, 69467, 0, 0, 0, 24552, 12153, 0, 0, 11108, 19617, 0, 0, 0, 0, 0, 23837, 29838, 0, 0, 0, 0, 39535, 774726, 72453, 139677, 143621, 0, 0, 0, 0, 2936, 96157, 45006, 12116, 7144, 44541, 8793, 66200, 4797, 701, 3102, 18586, 48587, 14812, 16034, 21466, 684, 5278, 5628, 2613, 4101, 10154, 44423, 5291, 102189, 4545, 3702, 9563, 687709, 7818, 1782, 23444, 5174, 3051, 3417, 15446, 4866, 1897, 598, 1486, 23106, 3190, 1337, 1576, 8061, 481, 3244, 41820, 2930, 10384, 2467, 1467, 1714, 26280, 1130, 1183, 2546, 4559, 2530, 88653, 735, 2155, 159259, 23235, 8770, 1134, 5613, 159079, 3802, 1881, 7851, 5157, 6507, 14835, 4877, 13778, 843, 3177, 5289, 522777, 1134848, 357465, 96460, 9540, 16624, 14526, 7077, 5725, 1702, 2147, 3730, 1277, 27331, 533, 4165, 8572, 74048, 12799, 33362, 54984, 2002, 453, 6797, 5191, 7513, 7731, 16172, 3009, 1053, 207071, 7328, 3193, 1440, 2758, 7680, 3845, 2012, 32110, 14016, 14116, 6670, 16570, 5374, 3863, 1496, 3603, 8791, 4349, 3042, 4746, 3337, 3633, 4147, 2150, 5258, 4278, 13987, 2727, 883, 2403, 17891, 5795, 9180, 3659, 5451, 16879, 9204, 4998, 1964, 644, 9014, 18181, 11197, 7593, 9258, 3690, 26435, 4480, 4023, 6652, 20078, 17424, 3312, 3040, 45085, 315993, 499, 10007, 40957, 10014, 2773, 5902, 5572, 169573, 2431, 7201, 1014, 1876, 4741, 5268, 15107, 1193, 272039, 27709, 6101, 12187, 9933, 11476, 1973, 4168, 3668, 4536, 11529, 2629, 841, 7543, 5542, 10524, 8490, 58334, 155030, 7565, 4834, 7048, 3245, 2370, 6796, 4217, 129050, 2762, 34844, 931, 5032, 2267, 13392, 20270, 61960, 993, 966, 4574, 2251, 15608, 23271, 2080, 2186, 11317, 5779, 886, 8806, 10201, 21293, 12062, 2077, 72691, 1360, 44018, 7512, 46444, 3519, 2988, 6857, 6580, 8906, 811, 876, 14253, 3190, 1062, 4398, 1763, 53401, 313193, 18024, 42398, 1807, 4164, 7161, 39731, 8508, 2544, 1812, 13440, 1314, 32068, 7914, 39879, 7586, 10846, 2162, 2778, 5978, 15110, 1053, 3994, 7956, 5612, 6615, 4313, 1236, 73664, 1271, 717, 6007, 1066, 27324, 220690, 36310, 148837, 3551, 1960, 1948, 1501, 4376, 6686, 11156, 13783, 3833, 16343, 14190, 5191, 20623, 2826, 20764, 4117, 14999, 169861, 4229, 20846, 29056, 9256, 2603, 5324, 5349, 4348, 4686, 2691, 10488, 3870, 4418, 3604, 56599, 2584, 1923, 587, 3757, 18344, 8181, 2958, 2133, 3590, 3651, 16272, 1610, 3826, 245154, 1398, 72269, 1733, 1148, 5152, 2895, 18608, 3408, 1649, 1630, 1643, 2599, 2745, 809, 2878, 10431, 14286, 256811, 1993, 21705, 7487, 5968, 50111, 1665, 2248, 1192, 20106, 1103, 11047, 3126, 828, 9369, 28194, 37417, 7745, 2275, 57915, 93151, 32404, 3067, 1192751, 79254, 367492, 15312, 615, 752, 560141, 1784, 1063, 25853, 7134, 5325, 5054, 4798, 6136, 3764, 124509, 2889, 4384, 1720, 4137, 549, 1877, 4213, 258687, 1426, 4214, 595, 8180, 9936, 16219, 11015, 5725, 2949, 4098, 25513, 9421, 892, 3502, 146436, 7651, 4285, 4465, 5328, 768, 10640, 2640, 33192, 28777, 6398, 44834, 80, 1574, 6213, 788, 5059, 55698, 3281, 13053, 1643, 28849, 7577, 7641, 2120, 1110, 2144, 5288, 16664, 15742, 2265, 26235, 5654, 5556, 5018, 13286, 3424, 266, 437, 339, 8952, 4304, 3592, 2325, 4278, 4085, 2391, 9950, 444, 2387, 44968, 4601, 44211, 3524, 29661, 12529, 6976, 15730, 19535, 5556, 109268, 9139, 4678, 2599, 18192, 5807, 1426, 99727, 1132, 15839, 17151, 17096, 26223, 2416, 2059, 2480, 4348, 5779, 20843, 52391, 44595, 24220, 7897, 2231, 8783, 10720, 48099, 3970, 863, 8907, 2082, 4439, 12049, 2944, 2430, 2521, 1915, 22343, 1183, 1599, 562090, 5888, 3715, 1731, 2293, 3657, 2471, 177679, 2299, 81577, 5439, 1406, 5873, 3841, 18526, 241788, 3196, 20647, 7609, 1770, 189864, 4421, 14360, 10407, 43009, 18644, 8992, 3220, 17822, 3768, 2271, 17470, 1552, 4271, 9272, 1004, 2412, 11450, 3023280, 24719, 38850, 20047, 2002, 16929, 3392, 8081, 4114, 18725, 7242, 1640, 8588, 7386, 1483, 4743, 3398, 23041, 1789, 3525, 20911, 2710, 44195, 557579, 7118, 1527, 603816, 11960, 122084, 1329, 284857, 12281, 271568, 3402, 934, 8420, 602, 11637, 77731, 153278, 1800, 3156, 8266, 17625, 3451, 4049, 507, 6795, 25581, 1167, 79724, 8616, 135325, 8658, 38429, 57960, 4467, 1406, 9553, 2121, 1291, 4010, 9913, 1692, 4503, 14159, 253672, 3448, 9957, 149173, 1565, 3905, 1455, 247463, 86364, 413028, 6166, 3266, 5156, 2245, 201410, 2847, 14089, 2971, 2075, 429, 16199, 312, 386, 1467, 8823, 211174, 4745, 2721, 8357, 2325, 9256, 61885, 8766, 2337, 6592, 619, 6466, 36894, 19161, 14775, 7725, 2569, 5088, 2671, 7533, 7385, 7821, 11190, 6513, 87583, 64622, 11668, 1037, 19856, 1197, 477866, 3527, 10147, 16565, 38871, 8507, 522, 156, 4451, 2558, 16301, 4536, 28364, 1558, 45545, 4990, 2394, 65886, 9454, 34274, 5113, 3911, 5994, 28238, 3803, 1760, 1493, 2428, 11842, 1360, 13735, 486, 4019, 20899, 1686, 38529, 10237, 545397, 23898, 15309, 8466, 12222, 5991, 3349, 7409, 41970, 1143, 5490, 9016, 47422, 5931, 30366, 359, 33760, 124653, 5338, 53920, 1075399, 13367, 6159, 145624, 5108, 6940, 1523, 1940, 16527, 14447, 981, 1470, 4408, 1740, 30145, 44217, 11364, 1146, 238826, 18511, 121201, 2803, 11762, 5526, 3003, 67187, 14390, 9489, 18368, 5367, 738, 2047, 2053, 37950, 5566, 1515, 185872, 42275, 31515, 7025, 6799, 362138, 4950, 773, 3379, 2394, 4011, 2979, 461, 2599, 1818, 7231, 5463, 7463, 3395, 396, 17066, 1248, 1017, 3271, 1119, 11706, 21154, 77632, 5350, 3774, 23413, 5583, 5045, 5839, 232365, 6279, 136677, 2186, 6369, 2168, 1917, 14510, 2327, 26012, 98860, 23889, 10119, 11070, 36441, 4029, 6784, 16583, 109651, 21079, 139125, 20918, 16290, 13440, 11082, 19487, 605392, 74132, 26734, 43275, 7421, 275295, 24708, 32527, 45036, 50729, 542983, 8146, 22933, 5653, 163488, 2774, 7508, 36701, 9381, 7259, 28367, 69830, 17840, 29898, 50442, 79282, 21954, 13993, 8252, 50215, 26745, 4491, 3536, 8001, 213563, 19065, 30043, 7433, 38675, 11883, 10546, 89650, 47007, 5523, 9132, 6356, 6392, 15307, 8350, 5592, 6710, 7463, 14400, 8016, 23442, 168833, 23593, 49545, 6919, 56067, 9498, 4126, 26378, 2619, 21804, 4544, 4514, 158816, 59281, 195427, 11949, 76647, 64444, 9001, 49744, 8194, 6874, 244179, 13269, 5524, 4196, 6100, 30525, 11490, 6030, 12928, 5499, 6409, 9603, 5924, 8549, 10630, 5631, 40496, 35317, 22328, 3151, 4082, 4385, 21079, 10091, 202618, 91541, 9415, 6203, 125576, 5575, 2957, 5481, 22898, 7330, 8638, 13931, 42337, 2528, 13177, 29579, 23179, 19543, 4513, 54357, 4157, 2347, 45006, 9954, 47012, 93742, 11986, 6212, 402410, 64873, 6971, 8315, 10143, 5206, 8824, 16229, 16435, 18601, 3987, 63755, 6472, 2031, 9939, 2197, 4340, 6466, 31348, 3736, 144638, 8974, 16370, 12930, 15180, 57904, 25043, 37503, 10608, 9141, 6433, 7507, 5355, 16809, 9001, 78906, 11393, 29161, 15632, 3191, 133814, 81347, 6846, 22915, 20814, 6505, 14895, 8949, 21026, 15605, 7847, 9003, 2489, 1008, 9555, 2049, 15871, 227586, 1520, 15792, 3286, 31090, 10014, 7921, 336407, 8682, 27696, 1269, 8215, 27417, 12163, 7316, 13254, 965, 8111, 3516, 331137, 12414, 6745, 73686, 7853, 1689, 91607, 37388, 31404, 7195, 19807, 15450, 6658, 17885, 24133, 2890, 3073, 5397, 129609, 13340, 3992, 28515, 5380, 323102, 16002, 15024, 9463, 10452, 18717, 13356, 10728, 160143, 16696, 14006, 7421, 133053, 11834, 27618, 11092, 13136, 17466, 5614, 43726, 7731, 42545, 11745, 47170, 9997, 232878, 65291, 132148, 82722, 44652, 333233, 22142, 23247, 991, 16167, 7659, 7470, 3514, 3129, 5603, 20969, 10783, 11877, 4574, 10599, 2958, 7374, 3026, 5848, 26425, 15679, 6659, 213775, 55755, 71575, 43234, 25932, 32571, 19647, 199314, 11188, 128643, 54069, 5336, 13835, 25826, 4153, 25241, 6724, 4808, 123881, 45318, 7171, 125266, 14334, 21166, 13199, 18481, 25558, 11220, 22760, 8104, 4679, 16379, 9119, 33714, 31103, 6006, 8457, 93264, 2645, 8510, 13535, 6700, 12779, 36e3, 13706, 31682, 4809, 7090, 48712, 178696, 23659, 19273, 96177, 21967, 10466, 11291, 45986, 2945, 951, 6463, 3381, 17146, 12319, 7492, 45445, 85425, 25652, 319816, 164487, 54178, 14560, 11554, 14312, 6848, 22514, 6370, 2470, 3792, 1764, 29880, 17858, 110740, 4916, 4571, 5724, 8300, 22398, 61515, 6111, 3790, 5977, 39711, 5236, 7475, 24732, 78018, 231324, 4053, 25323, 4706, 5484, 8863, 4964, 9065, 3344, 70654, 17379, 7017, 13227, 39744, 13602, 20216, 6027, 69469, 106873, 14557, 37728, 4900, 10796, 641977, 12297, 80313, 22873, 2437, 9899, 4514, 19831, 6068, 2335, 53032, 15797, 18802, 121425, 29960, 8994, 21794, 8301, 37916, 8287, 415225, 249609, 318474, 26873, 4132, 15568, 48998, 7360, 207956, 4673, 220933, 12971, 106097, 18218, 400244, 50762, 16966, 4320, 39534, 13392, 8109, 424025, 35619, 5481, 11757, 15105, 14118, 74671, 87928, 13158, 179269, 19993, 12832, 5276, 30588, 3824, 3775, 12529, 15707, 8814, 22679, 82543, 31097, 645469, 42228, 5599, 14649, 17744, 5592, 5540, 30277, 65373, 8281, 5480, 9978, 11492, 10615, 96758, 7578, 11934, 37003, 13918, 10540, 3357, 15697, 6357, 12311, 23458, 49611, 133418, 4258, 14656, 132063, 4050, 14251, 3361, 3169, 2442, 9789, 7267, 79600, 1309, 279866, 2266, 12332, 3836, 56904, 31625, 52587, 9666, 8231, 7502, 8590, 61380, 17066, 47939, 15403, 10199, 9124, 26029, 13628, 119783, 4996, 71795, 14548, 24390, 50467, 2342, 18843, 18701, 30970, 6499, 377282, 14174, 15325, 2293, 7628, 56973, 8132, 11088, 22313, 13507, 17666, 11698, 8560, 28360, 7828, 35637, 17581, 14611, 12740, 16948, 10137, 11584, 5865, 167297, 7991, 9103, 11677, 6327, 6304, 131231, 5682, 10423, 525827, 11757, 67882, 40085, 80456, 4866, 4921, 10688, 4697, 9924, 10392, 12457, 5054, 18003, 19864, 70570, 74325, 70181, 7353, 7647, 242302, 23637, 5722, 19554, 4879, 64006, 29179, 7243, 9967, 10689, 11423, 29216, 9181, 14182, 46973, 17480, 14068, 3522, 4406, 4345, 4820, 5497, 67952, 445138, 9457, 8540, 5547, 7685, 3155, 13629, 2963, 11502, 11844, 9211, 10481, 4757, 4249, 2299, 6806, 24516, 9694, 2920, 6513, 22264, 5968, 12028, 3992, 26025, 17967, 3960, 62667, 27657, 22697, 10880, 6667, 9588, 12354, 39376, 6249, 188022, 34174, 20763, 36651, 28338, 3225, 13979, 6479, 9549, 17035, 19352, 9201, 140279, 171311, 20222, 5218, 6507, 5033, 9285, 133810, 112728, 12484, 127964, 289348, 53185, 31491, 13200, 10322, 66680, 22852, 9879, 18714, 15189, 6540, 23259, 6885, 37107, 20321, 11729, 292967, 4845, 14001, 10987, 5972, 23034, 33322, 19892, 166819, 14112, 22318, 136936, 2551, 14321, 7996, 14553, 5047, 22997, 9954, 4754, 16313, 7043, 6822, 10295, 3388, 8652, 13501, 63907, 29801, 7074, 10475, 15300, 19195, 8482, 7735, 2019, 14175, 40046, 27154, 30535, 15313, 9431, 51255, 5178, 7604, 8868, 4431, 175687, 10650, 4378, 3367, 7892, 12905, 53907, 8394, 3671, 52360, 6097, 16658, 20167, 100594, 1817, 12453, 4424, 4918, 7570, 162962, 353479, 11947, 7980, 29855, 239667, 10425, 8586, 10419, 24091, 39351, 82771, 14845, 48446, 189446, 7157, 2049434, 9332, 5416, 203387, 40768, 7798, 3395, 69396, 29781, 51760, 14106, 84878, 29258, 20890, 10771, 12395, 28680, 8002, 42680, 12269, 14737, 13809, 19298, 19683, 7173, 76428, 12875, 42115, 6700, 18516, 26313, 673777, 21801, 17303, 54707, 2852, 1530, 31181, 69349, 3047, 6638, 38322, 34233, 12903, 17184, 7542, 26869, 13967, 3332, 3963, 5480, 2389, 60942, 36052, 21341, 39075, 65269, 7962, 21299, 674069, 12379, 14983, 21677, 17050, 7821, 8706, 6166, 1090, 8338, 6480, 14777, 18530, 8512, 6946, 23829, 6450, 16707, 7062, 5116, 15521, 5621, 4468, 57754, 9983, 5471, 8027, 348844, 15677, 42606, 5718, 17698, 54855, 24050, 7394, 30707, 61968, 18580, 337350, 67123, 9304, 17832, 37807, 8937, 14226, 9924, 16027, 8677, 5549, 108619, 7470, 62639, 42705, 77749, 241461, 55980, 25239, 14359, 79743, 102852, 5760, 6691, 4307, 10831, 5298, 9178, 6204, 8346, 30639, 14496, 8703, 72467, 230363, 12246, 88596, 11356, 58241, 37674, 295805, 149510, 235154, 299939, 44610, 256306, 29073, 16278, 61840, 18849, 3150, 21127, 76647, 12576, 7361, 7945, 4748, 10520, 36201, 8795, 72514, 19597, 12542, 5068, 18248, 10178, 25264, 49256, 12e3, 45407, 24979, 20233, 30045, 10096, 7548, 16967, 2889, 37950, 3179, 4072, 2031, 64253, 66983, 2406, 5923, 3275, 230823, 9670, 342979, 91890, 147199, 19270, 15746, 34262, 19164, 36778, 3285, 19040, 17571, 12128, 16123, 5438, 3439, 6849, 26340, 395770, 41200, 25103, 31059, 87712, 10951, 7079, 10028, 61001, 1590, 15588, 5044, 25992, 9932, 27580, 21777, 8217, 45082, 11002, 4919, 9225, 4827, 15600, 54175, 11823, 16632, 10456, 11240, 13432, 3089, 19280, 11018, 4031, 5030, 113189, 69972, 95375, 11814, 101569, 9420, 80479, 18579, 14869, 82434, 1978, 5700, 8135, 2706, 17902, 6036, 59492, 9925, 64722, 3591, 14627, 8477, 44160, 17616, 23935, 6021, 482236, 5001, 7120, 10228, 54726, 10474, 3093, 9714, 970, 136028, 8383, 145091, 55665, 43442, 221278, 14827, 5928, 94422, 30216, 51848, 126740, 37134, 399591, 7624, 19427, 3418, 618343, 21221, 342981, 30287, 29948, 8155, 2955, 9843, 4777, 12695, 5379, 5951, 34306, 10351, 6847, 20392, 17237, 10421, 4647, 6498, 2587, 36686, 4955, 12805, 24684, 9168, 10711, 18164, 9021, 4539, 9534, 4958, 17085, 53643, 15214, 10784, 4123, 11484, 28627, 3610, 12490, 8520, 5944, 27867, 2542, 13352, 104906, 14614, 27460, 9437, 25575, 25922, 58688, 11199, 11835, 17814, 7936, 52937, 10683, 55235, 11404, 13496, 5984, 79650, 9495, 44452, 5583, 2445, 2585, 5034, 10198, 3364, 31477, 3873, 22215, 7369, 19541, 7963, 5798, 7227, 16693, 6576, 11394, 3061, 21320, 2636, 10577, 62338, 15627, 3469, 105819, 8009, 2349, 26666, 5765, 2301, 18058, 4603, 36248, 19560, 10006, 63346, 18639, 8685, 11043, 136316, 16802, 51564, 17426, 50049, 56342, 11397, 3692, 6238, 28310, 38800, 687884, 7498, 7773, 16333, 10338, 7137, 6939, 3657, 3039, 31654, 8886, 10655, 11461, 22379, 11990, 15072, 20062, 3553, 3404, 6537, 4109, 4845, 4080, 6615, 3191, 8044, 10853, 8454, 3918, 9200, 20874, 10011, 12035, 9770, 108430, 6872, 6230, 4435, 10644, 3925, 29797, 5693, 23053, 3133, 15145, 40175, 5578, 6349, 2845, 3667, 3958, 14153, 3477, 33871, 37388, 50910, 16145, 9992, 7804, 51867, 9468, 27422, 2573, 58569, 6271, 15565, 2758, 5280, 2964, 21927, 4365, 144673, 16573, 51607, 26652, 46563, 110033, 10198, 6051, 6655, 33785, 9829, 6926, 9629, 10773, 2865, 3496, 9909, 6096, 11761, 240645, 8084, 47043, 7354, 340636, 8167, 5521, 42402, 30966, 23902, 42284, 638712, 5843, 10230, 19414, 13479, 11547, 25553, 24658, 22288, 7723, 20902, 3624, 153620, 32189, 8488, 8216, 30272, 57059, 13481, 10366, 688960, 7197, 16140, 9591, 5272, 4177, 7447, 7163, 320838, 27532, 16844, 23338, 11054, 8032, 12313, 7524, 19522, 26442, 37977, 4929, 173264, 864728, 15160, 84409, 19839, 4644, 6346, 5898, 15189, 13252, 3502, 4167, 17448, 7749, 14956, 3352, 3108, 2436, 62625, 30417, 8007, 15267, 17131, 6554, 48208, 22780, 9435, 9746, 41317, 9235, 25454, 24169, 18231, 18573, 5500, 35191, 9275, 17077, 19221, 11537, 7527, 62136, 8388, 49465, 17841, 10718, 18776, 68807, 89079, 18414, 131062, 11271, 121208, 106082, 5299, 14550, 10111, 284538, 125898, 92500, 55741, 6703, 16328, 7729, 282584, 38866, 8718, 11281, 2654, 21453, 39227, 27624, 3714, 9228, 7038, 10091, 96580, 641951, 214589, 95369, 50102, 3544, 3435, 3918, 11929, 4983, 25151, 6655, 2282, 29704, 40154, 6770, 13955, 12065, 3830, 60824, 31348, 105013, 30762, 8980, 2621, 4752, 37381, 4954, 186639, 6630, 74422, 76046, 14049, 5895, 9009, 10517, 17952, 8040, 18700, 12453, 12221, 13032, 45249, 8416, 4717, 9049, 25276, 5508, 17215, 3598, 8673, 5056, 7793, 6729, 15876, 16039, 13467, 14929, 132904, 11030, 21398, 140742, 220430, 17398, 8214, 30170, 6306, 15401, 20465, 7898, 93432, 5122, 22855, 26991, 35203, 29014, 31671, 19112, 2221, 6734, 29915, 22223, 10957, 28540, 25194, 24194, 6999, 8312, 14987, 7299, 45198, 30493, 64153, 16173, 3414, 4742, 13011, 5493, 6219, 30975, 11167, 31448, 6251, 6247, 8117, 8951, 15229, 276509, 23316, 30767, 5377, 12780, 5129, 5772, 5245, 9343, 133801, 461379, 18449, 118360, 71729, 48861, 10819, 6021, 2779, 34565, 6574, 4741, 7424, 7183, 9407, 6584, 17224, 3897, 10015, 11117, 6321, 21015, 15317, 22030, 6867, 7798, 10080, 38382, 37673, 81247, 16309, 12971, 8232, 16680, 95226, 8976, 15548, 59496, 11655, 6025, 4960, 26770, 25516, 233297, 40426, 19519, 16441, 17773, 62634, 5735, 17496, 8247, 6806, 4707, 6671, 20081, 10777, 7600, 21504, 4740, 6480, 178419, 44336, 8665, 274249, 4717, 8459, 29555, 9576, 6217, 71620, 127948, 22785, 51746, 123678, 8247, 6098, 79420, 27045, 36372, 27710, 121823, 4247, 15479, 14239, 18864, 8207, 22631, 12409, 40510, 37564, 188459, 276320, 108145, 42906, 28222, 32298, 41347, 4344, 46971, 10839, 1504, 7406, 14944, 3956, 12350, 9029, 3550, 10193, 3600, 6551, 9293, 4245, 18609, 3844, 6995, 42104, 33662, 4213, 31515, 7946, 7139, 12463, 24270, 366392, 391808, 400967, 83984, 96668, 4352, 7687, 3239, 4190, 41483, 20504, 37021, 17310, 52302, 13339, 33890, 37277, 8770, 6038, 64153, 13648, 37756, 4866, 5386, 18695, 21191, 37079, 79349, 1999, 27132, 4741, 3059, 10028, 44147, 5246, 290891, 25229, 9800, 94650, 9868, 8429, 4673, 3364, 8771, 7907, 402446, 53036, 15525, 6700, 272577, 2177, 4308, 19313, 3819, 646981, 11340, 5563, 959, 12751, 1138, 37733, 9859, 29843, 5868, 1286, 12576, 27108, 9940, 2820, 1494, 1130, 2335, 4034, 3011, 4090, 2829, 6599, 7093, 4361, 15910, 6606, 19920, 18334, 4077, 2921, 3067, 32178, 4750, 4617, 1722, 2762, 12633, 2234, 2564, 1369, 16084, 2038, 4213, 15851, 4028, 927, 1766, 1242, 30470, 1439, 815, 13549, 19238, 17372, 3810, 4192, 12307, 2400, 7071, 4541, 7309, 1710, 1820, 21876, 23503, 3341, 82112, 170439, 3674, 52454, 564, 2246, 5813, 1291, 4271, 18599, 2141, 12214, 8452, 3585, 15668, 28260, 7017, 14518, 27737, 1119, 19867, 3856, 3030, 14029, 4982, 24367, 8248, 21349, 2682, 17553, 54603, 25394, 16342, 32428, 5811, 10431, 14139, 66286, 195e3, 19309, 24917, 6657, 119565, 7911, 2821, 1268, 60639, 1774, 1213, 2113, 1369, 5153, 6511, 20309, 32488, 11419, 4562, 655, 5337, 19794, 22039, 2444, 1716, 1165, 38814, 66711, 5758, 4441, 13065, 16758, 12334, 52230, 10088, 313331, 6198, 5159, 2327, 917, 3774, 1605, 13619, 15211, 4765, 14002, 9567, 4379, 3879, 18012, 72790, 90394, 59534, 3540, 1618, 1813, 16488, 7516, 21131, 16801, 174066, 9452, 5562, 5153, 202587, 294997, 112789, 20340, 2235, 1119, 33459, 709, 5048, 12242, 1983, 3359, 41835, 7927, 22270, 68059, 4050, 2107, 13372, 42473, 231308, 12002, 4521, 13519, 1724, 2412, 35489, 362694, 1137, 2768, 2356, 4311, 5321, 432, 1140, 944, 2200, 10400, 8215, 1469, 2602, 4900, 17700, 8763, 9199, 23937, 9699, 27953, 25995, 1320, 16159, 38559, 13951, 1104, 26322, 13887, 6127, 2170, 2860, 1029, 2830, 736, 1213, 10122, 1391, 4248, 5186, 4543, 4018, 979, 482, 7970, 38678, 3684, 9543, 20999, 9453, 1491, 17684, 15700, 11074, 8786, 66886, 29396, 42142, 5735, 4484, 45411, 9321, 30524, 18616, 893534, 118453, 16084, 9237, 18412, 4149, 129619, 36766, 5127, 1837, 8218, 2247, 292, 2364, 2195, 522, 1922, 1579, 33545, 18384, 22925, 17491, 2880, 2508, 560, 2311, 973, 3933, 8449, 1033, 4044, 5949, 41454, 75577, 8929, 1439, 2561, 25612, 3527, 13917, 128449, 3303, 25187, 23172, 55437, 2724, 21691, 20710, 11553, 31908, 54309, 3760, 8030, 4428, 1890, 8125, 1453, 352113, 1728, 6721, 469, 128198, 23441, 91866, 12873, 1816, 4584, 6088, 133988, 3387, 89756, 5700, 7478, 5079, 10366, 44253, 15802, 24991, 67307, 8304, 3021, 136379, 25230, 14827, 100592, 42135, 10835, 156771, 13281, 183642, 79698, 143278, 381061, 20984, 75024, 9955, 51075, 23976, 13007, 5963, 17869, 63288, 22824, 36760, 69320, 32743, 8139, 8349, 4965, 4089, 4061, 6603, 8004, 1240, 2358, 2187, 33119, 5283, 10051, 5905, 900, 8835, 64103, 17741, 106595, 4774, 4359, 2063, 14424, 9279, 13375, 4055, 14231, 9034, 45735, 3014, 8681, 3794, 4048, 10877, 39842, 4639, 11359, 8480, 4566, 1116, 4038, 5769, 14009, 20401, 1623, 11336, 68121, 12673, 3342, 3396, 3991, 8335, 353, 16182, 20236, 15806, 880, 7289, 26293, 4242, 11619, 13927, 10788, 4011, 18631, 14678, 7799, 7452, 24325, 52041, 4943, 11504, 6203, 6384, 8551, 5294, 15099, 5952, 4268, 8115, 7949, 22318, 17310, 12181, 66772, 4409, 4066, 38961, 46191, 33122, 8380, 30745, 25608, 90050, 40071, 31546, 6531, 14062, 9726, 33736, 7235, 26974, 19082, 77696, 14211, 41755, 123294, 9778, 2937, 11273, 7591, 15125, 18316, 17261, 16925, 215846],
            tv2008: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2866, 3876, 537, 4176, 3261, 101230, 3655, 6287, 10765, 48261, 21396, 8353, 4409, 9792, 1035, 2309, 47560, 105004, 4062, 202822, 51789, 27224, 0, 306813, 66916, 10939, 5057, 6626, 3587, 12373, 15737, 130972, 13292, 6879, 11648, 59052, 1171472, 76025, 46821, 15508, 14377, 9876, 1551, 9297, 9938, 11721, 16366, 11612, 1815, 8157, 527492, 29931, 12820, 8766, 202, 22556, 9778, 14418, 4903, 1628, 16746, 4527, 104940, 1776, 8248, 95642, 37893, 181120, 12839, 462711, 100925, 591436, 147439, 33279, 3793, 0, 0, 0, 147371, 3377, 70802, 7442, 4261, 7819, 7218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46571, 465152, 44922, 514501, 10917, 88257, 0, 0, 0, 0, 0, 0, 0, 0, 5310, 9387, 141988, 10164, 7293, 208005, 206426, 120974, 48983, 18789, 269977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10960, 33168, 14376, 106081, 244855, 22903, 215589, 0, 0, 0, 0, 0, 0, 0, 245704, 0, 0, 0, 0, 0, 40696, 6049, 49217, 0, 0, 0, 0, 0, 0, 288927, 11703, 125967, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94723, 735091, 85499, 76509, 0, 0, 0, 24833, 10449, 0, 0, 12564, 21656, 0, 0, 0, 0, 0, 25397, 13541, 0, 0, 0, 0, 40402, 864636, 78522, 162542, 152467, 0, 0, 0, 0, 2841, 98707, 46511, 12941, 6720, 58630, 8950, 72223, 4473, 694, 2938, 17209, 51832, 14262, 16321, 23391, 594, 5248, 5437, 2458, 4074, 9943, 45564, 4744, 101047, 4096, 3683, 9629, 740074, 7652, 1589, 24560, 4974, 3154, 3666, 16678, 4799, 1766, 553, 1379, 23680, 3026, 1256, 1402, 8486, 439, 2279, 42324, 2796, 10160, 2328, 1404, 1552, 27873, 1096, 1138, 2247, 4483, 2513, 105866, 745, 1920, 171763, 29453, 9921, 1111, 5767, 180414, 3842, 1742, 7895, 5485, 6941, 16886, 4739, 13620, 920, 3109, 5063, 606334, 1231047, 383796, 110025, 10454, 17117, 15164, 6854, 6451, 1595, 2102, 3778, 1264, 30591, 557, 4077, 8133, 79782, 12332, 30951, 52937, 1817, 440, 6568, 4808, 7359, 7333, 15550, 2794, 1019, 226701, 8094, 2947, 1423, 2661, 7583, 3809, 1756, 35108, 15377, 13907, 6455, 16665, 5053, 3626, 1357, 3564, 8667, 4087, 3059, 4839, 3033, 3203, 3608, 2431, 5044, 3968, 13420, 2543, 801, 2462, 18879, 5338, 8223, 3471, 5373, 15983, 8813, 4813, 1951, 626, 9696, 18645, 11069, 8340, 9100, 4659, 28613, 4173, 3763, 6381, 18693, 16741, 3292, 2943, 48219, 339266, 439, 10216, 47951, 9890, 3713, 5599, 5569, 185630, 2457, 6890, 1027, 1870, 4617, 5217, 15032, 1077, 279354, 26583, 6220, 12447, 10354, 11791, 1844, 3839, 3387, 4174, 12122, 2439, 619, 7352, 5195, 10395, 8420, 68022, 180760, 7529, 4352, 7701, 2839, 2204, 6368, 4491, 133155, 2704, 35437, 843, 4801, 2196, 13755, 20093, 69280, 1044, 827, 4560, 2203, 15362, 22612, 1909, 2074, 10738, 5623, 898, 8624, 9689, 22596, 12919, 2121, 73394, 1314, 49529, 8625, 53853, 3526, 2879, 6509, 6847, 10441, 830, 804, 15015, 2980, 1019, 4121, 1599, 57409, 341041, 21401, 42610, 1715, 4067, 7288, 41922, 7777, 2509, 1750, 12911, 1293, 33267, 8568, 41625, 7646, 10433, 2159, 2689, 5914, 15613, 993, 3775, 7986, 5578, 6396, 4012, 1105, 79560, 1133, 627, 6157, 1020, 26512, 229351, 35651, 161588, 3533, 1852, 1991, 1384, 4021, 6781, 10539, 14744, 3846, 18273, 13974, 4975, 23207, 2760, 21766, 3996, 16940, 175407, 4236, 20149, 30013, 8983, 2457, 4681, 4843, 3957, 4714, 2633, 10337, 3673, 4376, 3521, 59642, 2521, 1784, 538, 3715, 18722, 8613, 2842, 2162, 4058, 4356, 16703, 1569, 3702, 297457, 1195, 79749, 1567, 1110, 4979, 2836, 19293, 3175, 1495, 1208, 1572, 2462, 2495, 732, 2659, 10134, 14438, 285778, 2112, 22112, 9097, 6384, 53398, 1563, 2114, 1090, 20715, 1018, 10754, 3023, 817, 8761, 29524, 38861, 7910, 1914, 67995, 97534, 35932, 2920, 1371370, 79674, 394840, 16920, 619, 735, 628553, 1690, 972, 25663, 7948, 5391, 5074, 3978, 6242, 3664, 127490, 2671, 4190, 1549, 3968, 533, 1811, 4084, 284211, 1207, 3350, 618, 8065, 10234, 19153, 11825, 5871, 3002, 3916, 27979, 9531, 852, 3442, 166375, 7754, 4123, 4442, 5055, 705, 10502, 2483, 34247, 28505, 5931, 46274, 79, 1454, 6077, 759, 5577, 64706, 3302, 13188, 1570, 28993, 7645, 8007, 2535, 1057, 2296, 5339, 17463, 16893, 2127, 27303, 5716, 5289, 4797, 13210, 3185, 263, 416, 316, 8455, 4507, 3436, 2206, 4053, 3808, 2423, 10320, 390, 2126, 46280, 4580, 43212, 2828, 29036, 11173, 6596, 14918, 19658, 5744, 110902, 9031, 4448, 2272, 16380, 5590, 1271, 104430, 1174, 16417, 21103, 17592, 26158, 2116, 1985, 2546, 4252, 5912, 22417, 54583, 49081, 24355, 7950, 2177, 8357, 12069, 47439, 4280, 838, 9245, 2187, 4567, 11846, 2980, 2291, 2350, 1584, 23421, 1096, 1570, 622913, 6253, 3474, 1707, 2351, 3431, 2221, 193730, 2179, 84550, 5336, 1376, 5855, 4161, 19919, 273175, 3369, 23082, 8309, 1789, 210308, 4112, 13733, 9817, 47854, 18844, 8878, 3010, 19146, 3602, 2116, 18362, 1368, 4525, 8577, 990, 2316, 11433, 3318248, 25629, 42474, 20639, 2032, 17784, 3393, 8383, 4089, 19788, 7191, 1643, 8402, 7092, 1384, 4473, 3226, 22788, 1781, 3293, 23100, 2588, 44815, 647299, 7191, 1505, 665589, 11694, 127736, 1304, 303292, 14019, 295068, 3643, 914, 8871, 599, 13058, 80390, 173812, 1586, 2976, 8790, 18332, 3254, 3867, 518, 6710, 32066, 1236, 90334, 8533, 140570, 9677, 40184, 64051, 4420, 1410, 9907, 1931, 1159, 4054, 9665, 1498, 4451, 15434, 254496, 3237, 10189, 157279, 1135, 3688, 1482, 273452, 92926, 453244, 6448, 3129, 5015, 2119, 243263, 2667, 14045, 3086, 1930, 416, 16277, 293, 393, 1418, 9837, 232850, 4615, 3060, 9383, 2261, 9966, 69631, 8977, 2304, 6761, 623, 6259, 38515, 18932, 13920, 8135, 2464, 4881, 2434, 6690, 7397, 7893, 11028, 6430, 100185, 105398, 13344, 1006, 20395, 1197, 542859, 3773, 10573, 17156, 41703, 8771, 448, 163, 4365, 2431, 16655, 4629, 29153, 1420, 45982, 4509, 2245, 63968, 9879, 38820, 4804, 3896, 5849, 30251, 3874, 1697, 1558, 2629, 12906, 1351, 14899, 496, 4350, 21564, 1671, 43772, 10605, 651172, 25904, 16019, 8283, 12515, 5948, 3203, 7305, 46640, 994, 5052, 8864, 50050, 5808, 35145, 361, 35186, 129783, 5571, 55647, 1153687, 13386, 6059, 161512, 5036, 7283, 1440, 1641, 16075, 13787, 974, 1218, 4232, 1548, 33021, 50179, 13206, 1217, 271533, 21658, 151819, 2750, 13199, 5444, 3147, 72427, 14730, 10212, 19217, 5664, 745, 2107, 2102, 39260, 5251, 1434, 182910, 42049, 29399, 7634, 7041, 367444, 5130, 798, 3150, 2110, 3697, 2996, 438, 2415, 1525, 7192, 5359, 7544, 3077, 367, 20767, 1199, 1030, 2945, 1048, 11057, 21271, 80552, 5123, 3547, 22765, 5258, 4776, 6625, 266156, 6286, 160501, 2175, 6036, 2418, 1836, 17491, 2307, 28899, 105525, 25406, 10219, 9914, 39990, 4144, 6818, 19904, 136897, 25930, 166133, 26639, 18792, 16416, 10883, 22443, 640137, 76631, 27096, 43798, 7492, 299900, 24032, 46728, 48016, 50310, 559854, 8825, 24550, 5363, 188957, 2952, 8026, 38834, 10085, 7683, 28652, 78912, 17375, 34204, 51245, 83729, 22013, 13371, 9461, 64323, 27184, 4685, 4427, 9335, 245968, 19129, 33767, 7360, 43846, 13955, 11398, 104743, 50542, 6159, 10067, 7780, 7034, 15381, 9058, 5965, 6399, 7223, 14400, 9350, 29667, 190657, 30290, 58373, 7738, 54850, 10799, 4724, 27791, 3164, 22754, 5060, 4678, 167822, 63848, 204709, 15540, 80106, 67244, 8852, 60130, 9371, 7921, 290938, 14859, 5316, 3846, 5563, 28259, 10833, 6988, 15801, 6586, 7406, 10389, 6797, 11196, 12813, 6463, 57076, 43583, 24605, 3522, 4128, 5139, 21301, 10033, 214409, 107521, 10221, 5832, 127648, 5314, 2515, 5270, 26692, 8055, 8736, 15653, 47884, 2489, 13545, 35798, 26897, 23788, 5227, 71017, 4199, 2206, 48982, 10035, 47865, 99906, 12771, 6028, 420176, 74246, 6990, 8490, 9903, 5079, 8754, 16155, 15798, 24725, 4171, 84402, 8103, 1983, 9848, 2098, 4214, 6260, 37697, 3456, 159104, 8848, 18083, 12909, 15394, 61600, 27050, 41854, 10568, 11092, 7020, 8397, 5453, 18915, 10384, 90643, 14502, 34088, 17496, 3239, 162088, 104798, 8854, 27985, 28921, 7431, 15179, 8861, 25295, 19741, 8878, 9535, 2662, 1111, 10575, 2214, 19997, 265853, 1554, 17655, 3705, 38603, 11186, 10474, 405625, 9338, 33403, 1428, 8531, 30433, 14456, 9388, 16006, 1116, 9139, 3962, 344916, 14153, 8221, 93973, 8337, 1656, 110442, 45666, 35830, 7369, 21613, 20044, 7210, 15659, 24079, 2825, 3193, 6529, 150547, 13513, 3814, 31089, 5441, 410817, 18386, 17238, 10379, 12541, 19120, 15623, 10934, 166578, 17032, 14225, 7629, 143026, 12234, 27319, 10822, 14646, 17135, 5964, 50984, 7590, 53635, 13454, 55466, 10553, 243120, 66130, 132353, 86378, 46581, 353462, 21584, 22980, 1188, 20341, 8332, 8252, 3856, 4332, 6520, 22217, 11395, 12392, 4744, 10586, 2918, 6703, 2761, 6045, 26955, 16974, 6036, 220495, 57616, 76470, 51614, 28067, 40705, 25091, 241771, 11026, 136539, 57521, 5142, 13624, 25532, 3814, 24849, 7359, 4740, 132302, 49458, 7771, 136147, 14047, 20389, 13016, 19231, 25582, 11134, 21920, 7932, 4414, 17029, 9116, 33016, 31433, 5794, 8061, 106050, 2671, 8092, 13392, 6501, 12872, 40772, 15507, 31570, 4784, 6479, 51645, 177547, 23481, 18663, 98516, 22932, 11237, 12255, 55455, 3701, 990, 6726, 3587, 19223, 12302, 9067, 54069, 90761, 25889, 333324, 180511, 53298, 16564, 12491, 14138, 8377, 24500, 7002, 2907, 3942, 1689, 33897, 17230, 113369, 4921, 4476, 6052, 8616, 22335, 70364, 6527, 3812, 6034, 44145, 5275, 7166, 25905, 84074, 253630, 5420, 27614, 4593, 4791, 9151, 4397, 8235, 3355, 77913, 17738, 7135, 13241, 43884, 13871, 20449, 6994, 69842, 111387, 14402, 47269, 5126, 10798, 660395, 12509, 84456, 23196, 2255, 9469, 4264, 22232, 5826, 2402, 53365, 17406, 19540, 126704, 30266, 9924, 24045, 7453, 44409, 8071, 439261, 287179, 374026, 26994, 4237, 16777, 56639, 6822, 223775, 5300, 236382, 13200, 119249, 19179, 415909, 50983, 17067, 6787, 46665, 13149, 7817, 425086, 37055, 5457, 11646, 14852, 12628, 77666, 82887, 12236, 195286, 22659, 13223, 5407, 32078, 4421, 4376, 14269, 18494, 9704, 22548, 85032, 30263, 654039, 44741, 6453, 16478, 24633, 6249, 6052, 36175, 72989, 8632, 5362, 10008, 11437, 11289, 108328, 8603, 13551, 44358, 16443, 10420, 2994, 16428, 6459, 12481, 25215, 56248, 154966, 4887, 16850, 162446, 4405, 15050, 3745, 3593, 2740, 12147, 8132, 99514, 1440, 316124, 2702, 13758, 3612, 75503, 34322, 59441, 10643, 8849, 8103, 8600, 71458, 18593, 49976, 17174, 10488, 9467, 28811, 14156, 131061, 4903, 74679, 15285, 28410, 63387, 2250, 19348, 19861, 33941, 6919, 404555, 16866, 14741, 2469, 6783, 73162, 10650, 15627, 21769, 15174, 17280, 11234, 10876, 30134, 7741, 38191, 18664, 15223, 13009, 17221, 10615, 11750, 5914, 193299, 8558, 9358, 11764, 6712, 6868, 132193, 6494, 10031, 561763, 11718, 72147, 41375, 92581, 5115, 4855, 10629, 4729, 10422, 10262, 13130, 4834, 18789, 22184, 88446, 93085, 93696, 8382, 7736, 265223, 25712, 6037, 19152, 4763, 74162, 41482, 9165, 9875, 11447, 11494, 33334, 10195, 17174, 50975, 17061, 16126, 4325, 5248, 5363, 5909, 5712, 81295, 441985, 9380, 8379, 5540, 7196, 2968, 13704, 3040, 12297, 12913, 9094, 10579, 5208, 4041, 2217, 6586, 24143, 9665, 2773, 5649, 22500, 6178, 11389, 3847, 28721, 18285, 3998, 64196, 28641, 23576, 11305, 6319, 9505, 13088, 44653, 6610, 209039, 34766, 20169, 36415, 27798, 2872, 15976, 6400, 9680, 16369, 18641, 9947, 151430, 187713, 19187, 5620, 6772, 4987, 10020, 145233, 123295, 12872, 139946, 316550, 58194, 33166, 15552, 11471, 70015, 23787, 9769, 20766, 15437, 6188, 23090, 7075, 38104, 20874, 13981, 318524, 5429, 14680, 11477, 6826, 23559, 32536, 20166, 174059, 13985, 22669, 148034, 2241, 13220, 8347, 13732, 4218, 25814, 12919, 4941, 18540, 7309, 8049, 10860, 3318, 8086, 13717, 64787, 30968, 7130, 10342, 18255, 23976, 9637, 9104, 2212, 17108, 49882, 29724, 37191, 17147, 9717, 58786, 5224, 8170, 8969, 4279, 201249, 9960, 3960, 3966, 7838, 14146, 55380, 8782, 3640, 68636, 6589, 16020, 20790, 111186, 1748, 12553, 4559, 5028, 7474, 164151, 380938, 13010, 7643, 29742, 259619, 9995, 9018, 11402, 24850, 44057, 81704, 14075, 50422, 211616, 7430, 2137466, 9153, 5339, 222426, 44974, 7801, 3559, 74417, 31532, 52915, 17321, 90652, 29092, 21299, 10407, 14674, 34315, 7957, 44737, 11693, 19254, 14450, 19519, 21764, 7065, 78789, 12355, 43166, 6739, 19232, 25838, 667299, 21225, 16938, 52844, 2521, 1739, 37784, 79422, 3217, 7633, 38307, 34022, 13627, 17877, 9677, 28278, 14791, 4140, 3874, 5766, 2423, 58802, 34022, 20847, 38695, 63605, 7551, 24284, 718025, 11530, 15566, 25316, 19730, 7475, 8154, 6274, 1015, 8419, 7065, 15474, 19981, 8642, 6978, 26282, 6179, 15940, 7062, 6205, 15487, 6288, 5084, 66448, 12867, 6454, 10195, 442245, 20871, 47018, 4651, 18534, 57444, 28372, 5820, 32537, 67362, 20214, 354936, 68213, 8517, 17179, 40381, 9479, 14605, 10181, 17602, 8877, 5324, 118389, 7252, 63997, 45835, 89070, 256621, 66925, 25702, 14096, 80900, 104283, 5856, 6665, 4314, 11563, 5356, 9614, 6154, 8514, 34960, 16402, 9006, 74411, 232897, 11849, 87677, 13218, 70127, 42494, 321874, 160378, 247519, 313414, 54325, 274977, 33551, 16835, 61239, 18680, 3e3, 21049, 78402, 12506, 8648, 8214, 5305, 11657, 41735, 10022, 73986, 19583, 11969, 5457, 18534, 9536, 24320, 50495, 11414, 45076, 25185, 21040, 31259, 10834, 8121, 15194, 2429, 34732, 3018, 3265, 2109, 76111, 66006, 2257, 6487, 4007, 255252, 10552, 381322, 88837, 147266, 18406, 16424, 32617, 18663, 35368, 3126, 19415, 18126, 12579, 17475, 6157, 4153, 6829, 34341, 413044, 41045, 25730, 32245, 89149, 11206, 7121, 10060, 86089, 1910, 16909, 5798, 29525, 10944, 26890, 20670, 8330, 50774, 9598, 4543, 10733, 5263, 17254, 64353, 13069, 18055, 9986, 12868, 15576, 2869, 21741, 10851, 3823, 5664, 126054, 68401, 100106, 11476, 100642, 8450, 79169, 19238, 16379, 84408, 2024, 5432, 7674, 2699, 17113, 6814, 69770, 11001, 73787, 4024, 15787, 7846, 42414, 20128, 24843, 6943, 475192, 5563, 8305, 11671, 63103, 12610, 2795, 9951, 950, 135968, 9543, 152473, 58563, 42349, 229249, 14701, 5646, 106426, 29932, 52276, 135954, 34114, 422741, 8076, 19848, 4168, 635618, 20175, 356424, 29802, 30149, 9518, 3188, 11365, 4984, 14700, 6236, 5575, 33569, 9361, 7276, 19540, 19963, 13112, 4678, 7705, 2880, 41179, 4676, 16400, 24722, 8990, 10280, 17667, 10562, 3692, 11252, 6501, 23749, 74884, 18632, 11284, 4259, 12406, 30726, 3399, 12635, 8522, 5030, 34253, 2734, 13650, 129279, 15095, 26344, 10862, 34597, 32880, 69451, 12586, 11893, 18571, 9524, 64781, 10781, 68870, 11871, 13690, 5527, 93836, 9647, 51159, 5507, 2339, 2569, 5084, 10624, 3287, 30902, 3937, 21824, 7960, 22238, 8860, 6492, 7894, 17785, 6819, 13435, 2907, 21657, 2607, 10868, 63854, 16357, 4478, 108539, 9210, 2479, 29273, 7370, 2354, 18731, 5223, 37302, 18912, 9819, 65164, 18396, 9798, 11002, 154434, 16502, 54168, 16010, 49447, 68618, 11138, 3411, 6553, 27184, 38886, 759848, 7795, 9455, 19222, 12562, 7220, 8260, 4424, 3460, 39250, 11108, 8338, 11547, 21022, 10603, 14001, 19422, 3650, 3442, 7235, 4406, 5286, 3763, 5830, 2902, 8180, 12460, 8548, 3818, 8903, 20574, 9957, 15353, 9227, 139459, 8388, 6938, 4422, 10890, 3855, 30754, 5407, 24889, 2981, 15404, 40297, 5307, 6199, 2617, 3449, 3622, 14010, 3635, 40834, 41612, 58147, 19327, 10642, 7410, 61560, 9462, 27935, 2468, 63917, 6306, 16114, 2962, 5764, 3556, 26068, 4522, 151982, 16584, 49349, 26121, 47244, 109161, 8370, 5409, 6232, 37292, 8734, 7914, 11015, 9857, 2959, 3505, 9558, 5511, 11338, 269222, 8138, 47963, 7615, 363594, 8093, 5149, 42552, 31183, 23131, 41911, 659779, 4665, 10331, 21743, 12889, 14217, 28506, 28720, 26038, 7928, 22079, 3381, 161343, 39908, 9855, 8128, 30629, 57588, 15208, 10805, 726031, 7650, 16807, 10552, 4379, 4060, 7298, 7390, 380090, 31132, 18146, 23276, 11106, 9763, 15480, 7943, 23010, 27316, 52608, 4632, 187548, 891731, 15741, 101899, 23619, 4502, 6552, 5931, 16387, 13262, 3316, 3838, 18082, 7650, 15202, 3337, 3270, 2231, 62107, 30626, 8288, 15155, 17314, 6466, 49108, 23076, 11619, 11520, 52405, 13417, 29334, 24015, 19320, 20852, 6291, 35305, 9725, 17432, 21253, 11689, 7503, 63218, 7831, 48699, 18624, 10868, 18936, 66987, 95734, 19342, 152899, 12435, 129845, 113825, 5789, 14362, 11321, 297510, 128271, 108902, 67943, 6620, 16679, 6982, 279031, 39225, 7530, 12436, 2326, 23654, 36126, 36079, 3057, 10690, 6454, 11434, 95272, 667885, 218239, 94365, 51020, 3395, 2975, 3642, 11796, 5437, 24887, 7630, 2432, 33338, 43719, 6793, 13612, 11955, 4821, 77994, 35155, 123795, 37443, 9527, 2621, 4893, 38529, 5225, 197720, 6841, 79570, 85251, 16359, 5784, 9567, 11839, 19311, 7881, 19524, 13697, 15e3, 14956, 49242, 9709, 5415, 9745, 26474, 6184, 18532, 3354, 8498, 4501, 7580, 6558, 16357, 15625, 12941, 13042, 127659, 14675, 22283, 146859, 220457, 17510, 9359, 33114, 7009, 18460, 23910, 9153, 109512, 5232, 23718, 27553, 32723, 30377, 31925, 20890, 2617, 7516, 34219, 25401, 12735, 33612, 23740, 24670, 6606, 6835, 13465, 6430, 56034, 29689, 88486, 23016, 3840, 5911, 12299, 5218, 5582, 31617, 12778, 32200, 7554, 6442, 9986, 10385, 15769, 322846, 24081, 31165, 6006, 15082, 5440, 6699, 5650, 10126, 165037, 516254, 18270, 124874, 75501, 50844, 12195, 7278, 2898, 37355, 6477, 4538, 7209, 6831, 10877, 6348, 17364, 3835, 11193, 9813, 5957, 22778, 15628, 23741, 7162, 7846, 11210, 45328, 47118, 100665, 17374, 13490, 8315, 20368, 127575, 11102, 18048, 68581, 10375, 5802, 4972, 22643, 25766, 249817, 41997, 22197, 17338, 19321, 66160, 7246, 18208, 8647, 7047, 4686, 7079, 23641, 11630, 8644, 24267, 2238, 6591, 186086, 42823, 9181, 282939, 4629, 7981, 29272, 9652, 6943, 75878, 139632, 22373, 51216, 128690, 8775, 6750, 82570, 28285, 36071, 27390, 121642, 4638, 15696, 15182, 20328, 9183, 24984, 16524, 45128, 39754, 188010, 278629, 107271, 43057, 29056, 33614, 42823, 5364, 49890, 12892, 1512, 6753, 16356, 4231, 14945, 10024, 4348, 11130, 3507, 6203, 8971, 3741, 15430, 4161, 8224, 55197, 38886, 5343, 40653, 9991, 8133, 13081, 27465, 382886, 412728, 413741, 87253, 98966, 4172, 7364, 2797, 3930, 43622, 21319, 38833, 18091, 65054, 15274, 36667, 50203, 10618, 6712, 74910, 18180, 44598, 5543, 7512, 19656, 24282, 43835, 84760, 1686, 29316, 4751, 2970, 9938, 45362, 5292, 303799, 27346, 9888, 110153, 10213, 8255, 4591, 3362, 9149, 8092, 417973, 52323, 16938, 6536, 277386, 2191, 4516, 20053, 3605, 663780, 11638, 5360, 854, 12185, 1110, 35994, 9830, 33029, 6341, 1236, 13956, 25758, 9434, 2416, 1348, 1057, 2241, 3906, 2787, 3830, 2740, 6396, 7169, 4261, 16307, 6356, 21460, 18449, 4269, 2861, 2990, 32687, 4736, 4397, 1532, 2715, 13339, 2076, 2019, 1192, 17042, 2006, 4667, 15972, 4153, 875, 1651, 1345, 31333, 1314, 734, 13311, 19064, 18149, 3434, 3885, 12647, 2313, 6969, 4192, 6802, 1448, 1804, 22107, 22643, 3501, 80467, 183925, 3516, 59277, 499, 2374, 5694, 1271, 4256, 17426, 2035, 12257, 8281, 3810, 15334, 29305, 6822, 14383, 29259, 1040, 22101, 3307, 2938, 14981, 4536, 24395, 8499, 21895, 2568, 17916, 62535, 28513, 16987, 34969, 6008, 11055, 14398, 70679, 191878, 18548, 24768, 6625, 118814, 7700, 2620, 1131, 67132, 1644, 1165, 1837, 1228, 5868, 6162, 20918, 33260, 11072, 4971, 727, 5667, 18968, 21927, 2130, 1640, 943, 41999, 71834, 5569, 4335, 13544, 16743, 12545, 56253, 10586, 331336, 6605, 5490, 1940, 833, 3269, 1718, 13852, 15124, 4750, 13750, 9112, 4734, 3432, 17589, 77534, 100906, 65578, 3205, 1440, 1686, 16708, 7505, 22236, 16965, 182224, 9410, 4739, 4683, 221007, 322199, 127390, 22591, 2306, 1073, 35396, 722, 5452, 12771, 2083, 3272, 44821, 7272, 21255, 67940, 4164, 2258, 15280, 45512, 236632, 11380, 4465, 12594, 1406, 2218, 36207, 364710, 1091, 2926, 2807, 5219, 5750, 411, 1378, 803, 1927, 11127, 7563, 1346, 2433, 4762, 17823, 8194, 8574, 22886, 9468, 29184, 27634, 1373, 19795, 42159, 13297, 1047, 25523, 13901, 6232, 2123, 2885, 1038, 2814, 735, 1032, 9784, 1197, 4041, 4882, 5074, 3911, 983, 486, 8212, 43744, 3644, 9346, 20089, 9085, 1433, 19550, 15268, 10402, 9780, 73341, 32163, 43526, 5244, 4444, 49683, 8688, 30231, 20123, 926457, 125011, 17977, 10164, 19029, 4058, 124563, 38520, 4858, 1997, 8898, 2306, 300, 2191, 2139, 492, 1752, 1375, 35165, 19339, 24877, 17481, 2650, 2343, 563, 2121, 966, 4568, 9227, 1001, 4534, 5634, 44990, 78756, 9373, 1410, 2377, 25768, 3414, 14464, 137059, 3348, 24066, 22989, 55010, 2685, 21626, 20702, 12338, 29406, 58673, 3900, 8322, 4010, 1757, 8958, 1578, 399888, 1545, 6665, 519, 159166, 25918, 88430, 12776, 1843, 4939, 6377, 158251, 3697, 95781, 5260, 7978, 5587, 11167, 50892, 17662, 28215, 76377, 8907, 3286, 148935, 26711, 16421, 109542, 48602, 11866, 181424, 14074, 197349, 82131, 154874, 416693, 22538, 81366, 11087, 54296, 27139, 13501, 6264, 17056, 61957, 24252, 42493, 81413, 38392, 7806, 8135, 4988, 4112, 3909, 6395, 8481, 1153, 2353, 2011, 35070, 5310, 10352, 5930, 785, 8468, 68380, 18245, 108660, 5297, 4506, 2320, 15009, 9220, 13945, 4105, 14985, 8777, 46478, 2784, 8152, 3786, 3915, 11159, 48272, 4874, 12316, 7714, 4445, 891, 3995, 5881, 13931, 20532, 1553, 12257, 76073, 12708, 3126, 3683, 4354, 8081, 375, 16600, 22080, 16685, 812, 6475, 32643, 4763, 12055, 14644, 11053, 4106, 18556, 15063, 7681, 7349, 23889, 51982, 4846, 11606, 6354, 6328, 7907, 5152, 16320, 6085, 4564, 8318, 7729, 21850, 16654, 12668, 65986, 4346, 3771, 39422, 48843, 32165, 8499, 31799, 25795, 91563, 39052, 31650, 6420, 13314, 9251, 33337, 7178, 25511, 18595, 83440, 14728, 41326, 124754, 10309, 3101, 10787, 7e3, 14187, 17520, 17178, 16348, 225472],
            r1996: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 463, 274, 1929, 1376, 37470, 1335, 2687, 4195, 16763, 7678, 3381, 543, 756, 511, 413, 14254, 35251, 1225, 49945, 9323, 5325, 0, 85779, 13516, 1050, 2533, 3577, 604, 5876, 5710, 24437, 4101, 2832, 3239, 12865, 421462, 18434, 4712, 3559, 6319, 3391, 650, 3700, 4102, 4669, 4530, 2989, 307, 3611, 161619, 14457, 4357, 3494, 71, 11173, 3769, 6163, 1332, 845, 5940, 1869, 36392, 570, 3697, 36419, 12105, 92820, 3418, 106059, 18337, 133811, 39576, 9786, 1365, 0, 0, 0, 35097, 1166, 22714, 2928, 1361, 1939, 2430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10885, 152155, 15617, 136656, 3855, 22046, 0, 0, 0, 0, 0, 0, 0, 0, 1636, 3188, 42593, 3275, 1399, 69213, 59797, 28899, 5960, 4299, 80898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2698, 12014, 2933, 27318, 63091, 8018, 48355, 0, 0, 0, 0, 0, 0, 0, 67962, 0, 0, 0, 0, 0, 13944, 1563, 8234, 0, 0, 0, 0, 0, 0, 88022, 4039, 25316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30370, 142870, 27847, 20125, 0, 0, 0, 7653, 4493, 0, 0, 2832, 6025, 0, 0, 0, 0, 0, 9316, 13549, 0, 0, 0, 0, 12076, 209740, 28522, 41409, 44136, 0, 0, 0, 0, 1553, 38961, 17478, 1938, 3245, 11015, 3781, 10857, 1458, 264, 2078, 5966, 28266, 5366, 5236, 10361, 380, 1449, 3353, 1485, 1576, 5905, 17169, 3051, 33771, 2319, 1948, 4290, 260058, 2691, 970, 10292, 3436, 1682, 1290, 6550, 2623, 1120, 439, 977, 9168, 1419, 869, 1073, 3668, 277, 1932, 15648, 1941, 4413, 1475, 901, 1013, 13979, 811, 851, 1208, 2589, 1566, 26518, 567, 917, 41922, 0, 3052, 739, 1746, 49477, 1399, 995, 2315, 2140, 2154, 2126, 2681, 5580, 583, 2448, 2166, 180135, 402876, 45479, 28935, 2780, 5967, 5174, 2930, 2702, 610, 1493, 1493, 626, 10778, 382, 1384, 6102, 21135, 4790, 10886, 21855, 1094, 241, 4266, 1817, 4032, 3877, 7484, 1478, 752, 92334, 3686, 1696, 1031, 1772, 3070, 1636, 1210, 12368, 5256, 7428, 3056, 10864, 2209, 1636, 1088, 1962, 5174, 2520, 1905, 2571, 1982, 1954, 2177, 801, 3112, 2089, 7948, 1504, 564, 1696, 6870, 1712, 2400, 2188, 1605, 5268, 3769, 1907, 789, 321, 3396, 7661, 4999, 2616, 3477, 1251, 12393, 1189, 1638, 3423, 9741, 5689, 1361, 1583, 18361, 85534, 237, 4008, 14580, 3666, 2042, 2260, 2929, 43255, 991, 4008, 865, 744, 2077, 2123, 7320, 488, 120429, 8974, 3396, 6809, 6188, 5007, 1277, 2042, 1707, 2171, 4878, 981, 134, 3384, 2077, 3392, 3636, 23023, 61811, 3479, 1970, 2234, 1680, 1628, 2629, 1575, 46733, 2110, 14058, 417, 2096, 436, 3993, 8534, 17541, 489, 628, 2155, 1179, 5230, 11712, 1090, 1604, 3745, 2153, 367, 3443, 5007, 7575, 4341, 949, 27443, 741, 17637, 2222, 16046, 1714, 1927, 3272, 3358, 4925, 416, 738, 6524, 2397, 796, 2458, 953, 14011, 109202, 7971, 21611, 973, 1812, 2888, 16832, 2343, 1164, 946, 6612, 757, 13182, 3764, 16924, 2840, 6045, 1330, 967, 2156, 8382, 629, 1991, 4794, 3453, 2592, 1707, 530, 32171, 646, 463, 1966, 809, 14275, 53555, 17746, 40742, 1099, 1142, 877, 778, 2842, 3318, 3892, 4363, 1224, 5949, 5243, 2169, 4470, 561, 9065, 1943, 2551, 63915, 1123, 6473, 14995, 4422, 865, 1442, 1510, 1229, 1627, 1323, 5952, 2725, 2688, 1884, 17439, 1530, 537, 166, 1296, 8423, 3901, 1501, 993, 2033, 1829, 5591, 790, 1793, 83750, 729, 18807, 1105, 778, 2458, 1695, 10004, 1428, 709, 539, 822, 1834, 1457, 551, 1698, 3885, 7378, 78832, 923, 9991, 2245, 1975, 16116, 1036, 905, 448, 7228, 443, 4303, 1162, 386, 6350, 10746, 18112, 2804, 968, 17997, 47304, 9262, 1159, 386015, 30666, 104121, 3867, 394, 323, 208312, 988, 421, 9802, 3362, 2637, 2435, 1711, 2008, 2659, 44812, 2283, 2591, 1393, 2504, 385, 1011, 2123, 110368, 630, 253, 283, 3356, 4557, 6730, 4175, 2466, 728, 2151, 8057, 3670, 549, 2068, 45935, 4093, 1380, 1457, 2318, 331, 4723, 1042, 14461, 9861, 2058, 25382, 48, 984, 2058, 329, 1902, 23988, 1740, 4401, 986, 10345, 4230, 4031, 1159, 667, 1072, 1997, 3881, 5744, 1548, 10386, 2480, 2583, 1674, 6924, 2005, 187, 309, 284, 3371, 1740, 1314, 920, 1655, 2150, 1346, 4391, 303, 835, 19293, 1379, 16482, 482, 11686, 4127, 2560, 4246, 5827, 2648, 42768, 4283, 2033, 734, 5046, 1580, 986, 36457, 540, 6483, 4753, 7554, 9835, 966, 1242, 1348, 1260, 2989, 6407, 13638, 14365, 4761, 3029, 1044, 3019, 4222, 23682, 2013, 360, 3438, 744, 1488, 4066, 1742, 1231, 1382, 1374, 8279, 808, 1143, 106581, 2682, 1888, 892, 1296, 2084, 1383, 93397, 1750, 34845, 3812, 1053, 2797, 1659, 7437, 102403, 682, 6281, 2264, 959, 65131, 2127, 3943, 3422, 18139, 6769, 3123, 1465, 7177, 1620, 1151, 6393, 599, 2593, 2935, 582, 1246, 5194, 746544, 7458, 16510, 6330, 1009, 6228, 1763, 3471, 2250, 5384, 2686, 860, 3129, 3290, 766, 3015, 1923, 12475, 1239, 3347, 11113, 1864, 16368, 178611, 2828, 792, 168291, 3495, 27766, 587, 73508, 4750, 101517, 996, 486, 2230, 289, 5706, 34736, 49808, 1372, 1327, 3281, 7143, 1024, 1941, 421, 1944, 8319, 482, 30348, 3924, 32714, 3976, 9765, 20847, 2285, 741, 3129, 1443, 855, 2793, 4138, 1211, 2743, 6047, 111243, 1346, 4743, 69653, 1264, 2239, 1041, 98813, 32759, 123954, 3047, 1736, 1641, 1457, 65313, 2005, 7965, 1846, 1582, 294, 7482, 233, 229, 1123, 4504, 92151, 2504, 984, 2661, 1284, 1969, 24761, 4032, 1272, 1905, 179, 4139, 12883, 8144, 4733, 3008, 1893, 1542, 1504, 2956, 2912, 4663, 4905, 2530, 29921, 13034, 2256, 523, 7453, 685, 166049, 1576, 3003, 8391, 19977, 3631, 187, 97, 1974, 949, 6458, 2360, 11789, 1018, 20495, 2037, 1355, 19803, 5041, 9705, 1861, 1576, 2034, 9392, 1149, 333, 680, 920, 4458, 715, 3261, 153, 773, 8653, 1205, 13013, 4369, 103431, 8828, 6512, 2904, 5117, 2812, 2435, 3647, 13332, 645, 1783, 5681, 16246, 2351, 8697, 194, 12750, 39794, 1882, 21784, 446717, 8142, 4173, 52403, 2811, 2958, 1155, 726, 6447, 7872, 691, 571, 2369, 1255, 14264, 13495, 4125, 417, 58529, 4637, 32120, 712, 3019, 2129, 1697, 17402, 7641, 4514, 8373, 2334, 412, 936, 1107, 12610, 1945, 933, 48253, 16048, 12116, 3008, 2839, 127951, 2139, 475, 1953, 1009, 1979, 1294, 308, 1814, 1336, 3409, 3014, 3487, 1007, 258, 4201, 642, 625, 1292, 609, 7855, 10183, 27432, 2236, 1684, 11605, 1997, 1994, 1963, 82778, 2038, 36666, 1321, 2633, 705, 743, 3979, 814, 7779, 46272, 10067, 3362, 3337, 12642, 1356, 2701, 5432, 27825, 6010, 59160, 5648, 6142, 3701, 3674, 8212, 107650, 19678, 8679, 16547, 3012, 93149, 7822, 8958, 14595, 15299, 196096, 2078, 6200, 1988, 47705, 846, 2900, 16140, 2990, 2554, 9837, 27939, 5970, 10931, 19662, 30677, 8703, 5135, 3219, 18135, 11278, 1586, 1200, 3311, 28467, 5229, 8737, 2481, 14908, 5281, 4319, 37784, 21765, 1703, 3322, 2239, 2470, 4027, 2535, 2629, 2253, 3122, 4226, 2111, 8865, 71210, 7023, 18490, 2520, 12053, 2959, 1544, 12368, 882, 6824, 1417, 1332, 46201, 14484, 59441, 2261, 21231, 28559, 2986, 19280, 2674, 1702, 96610, 4730, 1505, 1906, 2069, 8628, 3348, 2416, 4435, 1763, 2605, 3876, 2319, 2676, 3041, 1826, 10152, 11157, 8237, 1131, 1715, 1016, 5346, 3221, 60884, 29251, 3498, 2313, 42930, 2220, 421, 2619, 11338, 2988, 4062, 8020, 14396, 608, 4272, 11439, 9433, 7321, 1682, 18704, 1651, 504, 18960, 3980, 14168, 30598, 4638, 2174, 120616, 22931, 3151, 2554, 4249, 2763, 2697, 5130, 5370, 5498, 1801, 33149, 2689, 777, 2931, 773, 1508, 2199, 9477, 1081, 22121, 2688, 5350, 4770, 6352, 21434, 7193, 12687, 3441, 2948, 1561, 3470, 784, 5025, 3304, 37090, 4138, 12762, 5206, 683, 56650, 26159, 2024, 8513, 7544, 2201, 4043, 3505, 7376, 5688, 2348, 4033, 735, 235, 3709, 460, 5416, 17339, 631, 5232, 1073, 10120, 3121, 2597, 89809, 2481, 12305, 532, 3547, 12127, 4679, 2530, 5216, 224, 2306, 1196, 92982, 4130, 2054, 24527, 2513, 398, 31987, 10504, 11955, 2015, 7189, 4091, 2540, 3139, 7132, 863, 838, 2119, 59255, 6960, 1947, 13188, 2070, 97719, 6407, 5267, 3110, 3590, 5858, 5013, 4473, 52207, 6100, 4410, 3827, 43096, 5303, 9574, 4708, 5958, 6126, 2693, 15243, 2433, 13058, 4847, 21291, 1739, 47164, 13055, 40144, 26751, 12468, 89120, 6372, 6192, 335, 5022, 2393, 2451, 1206, 557, 2446, 8318, 4858, 6156, 1759, 5531, 1098, 2345, 598, 2075, 8659, 6782, 2111, 49332, 20092, 22860, 19182, 7995, 11596, 5700, 67727, 3855, 61436, 21548, 2234, 6564, 7422, 1233, 8393, 2983, 1883, 41929, 13715, 2997, 48193, 4922, 7684, 4017, 7102, 8750, 5213, 7606, 3339, 1328, 5991, 3147, 12015, 10324, 2381, 2974, 23877, 1046, 1756, 4310, 1910, 4213, 12283, 4634, 11943, 1626, 2395, 19310, 62058, 8398, 7056, 27777, 8077, 2961, 3358, 14098, 652, 235, 2518, 1002, 7440, 4966, 2275, 13786, 32038, 10393, 94899, 56289, 21282, 4570, 4274, 4660, 2333, 9098, 2572, 784, 1580, 408, 11396, 4932, 30958, 1565, 1586, 1222, 3249, 8712, 15554, 1975, 999, 1554, 15784, 2116, 3036, 6988, 19992, 49901, 1072, 6685, 1258, 2365, 3006, 2296, 2222, 1334, 28509, 6214, 2334, 3670, 15751, 6990, 7947, 1974, 22106, 34337, 5353, 14467, 1382, 2904, 219855, 3947, 21873, 7868, 790, 3961, 1677, 6177, 2245, 910, 22078, 6404, 8527, 44479, 9734, 2919, 7147, 2878, 11835, 4029, 117730, 62506, 52697, 8859, 1228, 5257, 15133, 2070, 57337, 1591, 52791, 5193, 29538, 6973, 141164, 19357, 5471, 1560, 10686, 5506, 2310, 186493, 17252, 1468, 4206, 6385, 4393, 28254, 29311, 4235, 65188, 5287, 4888, 1895, 8857, 1111, 1143, 5613, 5649, 3646, 10064, 26048, 11052, 204067, 15338, 1950, 3272, 5342, 1925, 1516, 9250, 13402, 2541, 2080, 3083, 3166, 2781, 35972, 2825, 3855, 12080, 3957, 4023, 1108, 4283, 2746, 4481, 9110, 22086, 54430, 1176, 6490, 39292, 1505, 5387, 1424, 1163, 847, 3054, 2033, 20625, 293, 114188, 789, 3934, 1460, 15013, 12426, 21005, 3373, 4632, 2364, 3134, 28770, 6840, 18126, 6851, 4782, 2589, 12872, 6719, 40703, 2281, 24987, 7705, 7460, 16744, 695, 6363, 5092, 11847, 2110, 136315, 4244, 5004, 782, 2646, 21163, 1823, 1914, 10540, 3595, 5166, 3466, 2148, 15084, 1857, 15478, 5289, 5066, 3807, 5937, 3211, 3915, 2241, 54375, 3117, 3961, 3766, 2601, 2542, 40395, 1454, 4728, 178412, 4831, 26850, 12204, 24123, 1491, 1545, 3600, 1528, 3960, 3848, 4551, 1298, 7655, 7097, 18693, 20993, 22222, 2752, 3030, 78453, 8096, 1872, 5299, 1712, 19360, 7274, 2118, 4086, 3289, 3706, 14035, 3274, 5116, 20700, 6131, 4657, 944, 1290, 1378, 1354, 1943, 23072, 132343, 3478, 3272, 1568, 3122, 772, 5402, 1e3, 4270, 5173, 2112, 3957, 1056, 1146, 727, 2191, 7427, 2966, 1302, 1812, 9454, 2140, 4502, 1786, 9221, 6321, 1678, 20953, 12188, 7373, 4066, 1789, 2523, 6322, 11695, 1657, 47873, 11347, 7821, 11714, 9154, 856, 5278, 3077, 3881, 5155, 5354, 2949, 51869, 53594, 4994, 1616, 2803, 2366, 3055, 40849, 39686, 5400, 32116, 65162, 14744, 12323, 3841, 4013, 26379, 8666, 3760, 6689, 4606, 2183, 6991, 2955, 14058, 5650, 3157, 130980, 1742, 3893, 4152, 1711, 10169, 8213, 6970, 67023, 4449, 9797, 55205, 1259, 4268, 2814, 4434, 2599, 10273, 2816, 1912, 5307, 2186, 1614, 4573, 1041, 3355, 3835, 19322, 9210, 2e3, 3043, 4673, 6646, 2590, 2027, 541, 4222, 16588, 12395, 10518, 8439, 3973, 23733, 3045, 3056, 2205, 1143, 63741, 3136, 1927, 1401, 3980, 5513, 20859, 3207, 1266, 22556, 1287, 6115, 7038, 34494, 660, 4653, 1560, 1595, 2634, 42620, 114449, 5023, 3225, 12136, 83574, 3237, 3265, 4545, 9558, 11509, 30990, 3796, 15099, 38288, 2402, 461557, 3965, 2002, 65912, 12380, 2978, 1008, 26746, 9294, 19509, 4462, 26120, 11112, 8832, 3622, 5214, 12937, 3191, 16835, 4449, 4406, 5059, 5283, 9261, 1696, 18296, 4742, 12681, 2307, 7469, 10798, 163770, 8730, 6018, 14019, 933, 470, 13006, 23670, 816, 2213, 14659, 12987, 5799, 6916, 2579, 8234, 4293, 916, 1272, 1877, 713, 21261, 11093, 7319, 14287, 22920, 3714, 6697, 85345, 3226, 6742, 7585, 4349, 4017, 2309, 3106, 368, 2766, 3422, 6093, 6877, 2428, 1910, 8057, 2233, 4828, 2457, 1738, 4579, 1738, 1632, 20778, 3577, 1562, 1861, 108780, 4651, 14106, 1434, 8107, 23151, 8146, 1201, 9212, 20863, 6686, 114860, 28579, 3262, 6053, 13694, 3108, 3742, 3770, 7778, 2620, 1526, 38281, 2635, 29296, 16852, 22187, 60943, 15932, 9764, 4135, 22495, 31577, 2124, 2603, 1333, 4387, 1595, 2259, 2172, 3754, 11815, 5960, 3934, 25829, 91729, 3573, 27880, 3874, 17432, 10885, 82433, 40559, 95830, 99975, 17985, 82830, 10862, 7696, 23697, 9294, 747, 8139, 18939, 3759, 3082, 1893, 796, 4725, 17476, 3219, 23482, 6762, 2866, 2254, 4697, 3565, 7021, 24325, 4763, 13287, 10402, 8164, 7154, 4002, 2293, 3669, 1e3, 13179, 1335, 1137, 525, 20935, 20341, 1113, 1862, 1003, 77029, 3890, 30435, 31327, 39785, 8107, 6395, 12971, 7017, 14735, 1352, 7354, 7382, 5088, 6570, 2103, 729, 2928, 11441, 123719, 15837, 8954, 11152, 26212, 2855, 2588, 3264, 18802, 488, 6734, 1444, 11117, 3473, 10821, 7054, 2592, 15085, 3917, 1229, 2193, 1936, 6748, 22461, 5203, 5403, 2450, 4289, 3768, 1275, 6844, 4065, 1597, 2178, 33066, 20626, 42174, 3693, 30107, 2642, 20096, 4798, 5887, 28232, 862, 2214, 3029, 941, 6528, 1715, 26539, 3054, 24137, 941, 6035, 2208, 13239, 7805, 8305, 2093, 119407, 1721, 3371, 4018, 24585, 4455, 906, 3490, 269, 43577, 1536, 45103, 21885, 13088, 92875, 6999, 1673, 33210, 11965, 19628, 35726, 13551, 121047, 2785, 8156, 1121, 196820, 7172, 115694, 11324, 10981, 2259, 678, 3992, 1006, 5094, 1219, 2131, 10189, 2649, 2599, 7267, 6118, 3983, 978, 1988, 519, 10178, 1351, 3042, 7624, 2944, 3925, 7477, 3516, 1612, 4382, 1561, 5538, 18227, 4883, 3532, 1284, 4936, 8697, 1371, 4157, 3151, 1058, 12907, 990, 5746, 42792, 5392, 13443, 3310, 11721, 7731, 26898, 3883, 3452, 8158, 3493, 17691, 3955, 17575, 4656, 4622, 2715, 27699, 2498, 13817, 1306, 1091, 1053, 1513, 3274, 903, 13836, 1212, 7881, 3018, 6181, 3466, 2063, 2623, 7910, 2694, 4785, 1278, 8871, 1112, 4215, 24395, 8275, 489, 26930, 2615, 850, 13020, 1890, 763, 7324, 1439, 12874, 8156, 4128, 20518, 7747, 3808, 4473, 48675, 6888, 17213, 6838, 21535, 17326, 3965, 1841, 2925, 10085, 12362, 81406, 2566, 3254, 6447, 4119, 3004, 2351, 1391, 791, 10578, 2576, 2229, 4380, 7768, 3581, 4460, 6414, 815, 955, 2077, 907, 1796, 1013, 1823, 971, 2367, 3272, 3042, 1445, 3065, 5778, 2827, 3768, 3225, 25715, 2346, 2709, 1368, 3888, 999, 10221, 2527, 6905, 1295, 4989, 16640, 2531, 2067, 816, 973, 1137, 3919, 976, 8146, 14255, 23030, 3973, 4167, 3984, 22754, 4091, 7955, 902, 25392, 2665, 4002, 723, 2030, 924, 8716, 958, 45956, 6865, 17159, 8774, 17452, 26594, 1917, 1441, 2155, 9859, 2785, 2059, 4526, 2741, 1167, 990, 3376, 1512, 3807, 39753, 2307, 13391, 2013, 87021, 2379, 2054, 11532, 9321, 9416, 17710, 182510, 3300, 2681, 9471, 3569, 2858, 11446, 9792, 8241, 2034, 8243, 1025, 44780, 8572, 4223, 2247, 11139, 16038, 5965, 4642, 169926, 2521, 5700, 2972, 1439, 1064, 3876, 3032, 133329, 10503, 4645, 9044, 4476, 1745, 3335, 3870, 8154, 9093, 10065, 1094, 40097, 175886, 4866, 24565, 4897, 1453, 2384, 2097, 5223, 5020, 1213, 1339, 6641, 3137, 5422, 987, 1036, 850, 20067, 7448, 3409, 5563, 6065, 2703, 17160, 8038, 2414, 3640, 15283, 2774, 8220, 9823, 8288, 6612, 1939, 14308, 3249, 5296, 6614, 3269, 2875, 16482, 2172, 15386, 6642, 4418, 6568, 22297, 36457, 7504, 50390, 3545, 44417, 43943, 1947, 4889, 4527, 92628, 39884, 35653, 16596, 2566, 5655, 1856, 95391, 13861, 2155, 4746, 928, 8817, 15502, 7934, 654, 2685, 2037, 3783, 31438, 67839, 73771, 37996, 17237, 1431, 1265, 1242, 4257, 1391, 8803, 2625, 847, 13458, 13662, 1925, 3757, 2864, 1074, 23035, 12653, 30518, 13853, 3134, 979, 1842, 8055, 1770, 48513, 2500, 14787, 22047, 4028, 2420, 2895, 4461, 7627, 2209, 6990, 4521, 4089, 4707, 18088, 3352, 1154, 3048, 7049, 1455, 6446, 742, 2002, 944, 1892, 2568, 6677, 7653, 6518, 5049, 31397, 4945, 8325, 34937, 58120, 6871, 3017, 15055, 2392, 4753, 8609, 1973, 39658, 1104, 8773, 9713, 11679, 10033, 10286, 9254, 835, 2374, 11063, 7382, 3442, 10608, 6160, 9779, 2285, 2530, 2627, 1550, 17050, 6330, 16968, 4782, 1085, 1423, 4021, 1678, 1525, 9934, 3694, 7750, 2321, 2295, 2343, 3035, 5449, 60255, 5261, 8015, 2141, 4933, 2206, 2296, 2063, 3681, 39092, 176033, 6153, 33039, 19394, 13237, 4375, 1369, 1180, 15557, 3106, 1839, 2507, 2430, 987, 2453, 5999, 1170, 2926, 3240, 3187, 8285, 4739, 6414, 2312, 3874, 3379, 14760, 15309, 27889, 5883, 4827, 3584, 8141, 29804, 2569, 4977, 24797, 3382, 2177, 1526, 7160, 11945, 64626, 11500, 7190, 6996, 5567, 16302, 2288, 7336, 3427, 1820, 1882, 2890, 9509, 3627, 3037, 9056, 589, 3137, 70761, 12890, 3765, 59487, 1344, 2149, 8377, 3543, 1676, 26428, 41136, 7235, 18161, 35758, 2900, 1644, 28276, 10159, 10212, 8832, 40974, 993, 5378, 4960, 6997, 3130, 8290, 5670, 17151, 10494, 60212, 73555, 24811, 13388, 9168, 10685, 10252, 1627, 13543, 3503, 416, 2229, 4958, 1170, 3829, 2884, 438, 3260, 1217, 1977, 3325, 734, 5492, 990, 2478, 14495, 11144, 1374, 10517, 2852, 1988, 4456, 9169, 106636, 111566, 144632, 22960, 31645, 2521, 3716, 1654, 1509, 15844, 8537, 16771, 6073, 22293, 4337, 12473, 13396, 1881, 2270, 15053, 2999, 13264, 1769, 1659, 5617, 6017, 13474, 30316, 920, 10477, 1709, 950, 3475, 13369, 1213, 121335, 7621, 3171, 26106, 2888, 3746, 1502, 1613, 3059, 2417, 164630, 16488, 4433, 1992, 66954, 695, 2021, 4450, 1284, 173887, 3593, 1760, 623, 4995, 398, 10400, 2794, 11665, 2248, 753, 4723, 6247, 2815, 1187, 765, 705, 1220, 1658, 1352, 1782, 964, 2281, 2696, 1423, 4791, 2119, 4617, 4034, 958, 1660, 990, 11808, 1988, 1953, 1005, 1338, 4699, 1055, 657, 726, 3909, 832, 1871, 5941, 1209, 520, 801, 760, 11606, 731, 537, 4408, 5925, 6002, 1392, 1523, 3638, 814, 1684, 1447, 2080, 230, 861, 4599, 5387, 1091, 22885, 46794, 1682, 16034, 281, 850, 2449, 575, 1947, 6801, 775, 4078, 2769, 1413, 5563, 5984, 2129, 3080, 8764, 499, 8138, 1678, 965, 5892, 1646, 6506, 1924, 7119, 1055, 6311, 18740, 7149, 5890, 13238, 2587, 2598, 4864, 26367, 59443, 5334, 6205, 2601, 25553, 2988, 1418, 488, 12734, 830, 517, 1148, 691, 2043, 2014, 6747, 8805, 4038, 1270, 562, 1588, 5389, 6339, 1188, 710, 483, 15464, 24238, 2006, 1200, 2948, 5054, 3428, 16397, 2523, 89295, 2012, 1387, 998, 592, 1651, 733, 4630, 4525, 1429, 4496, 2703, 1937, 1260, 6734, 27668, 27153, 13224, 1282, 979, 983, 5137, 2463, 5806, 5461, 41745, 2327, 2068, 1166, 66628, 81885, 29835, 7524, 619, 558, 14291, 522, 2467, 3114, 1109, 1701, 8253, 2219, 7231, 19874, 1667, 948, 5682, 11221, 65221, 3662, 2379, 5414, 533, 955, 11478, 71094, 615, 1127, 1029, 1336, 2147, 260, 207, 566, 814, 4086, 3345, 576, 920, 2077, 6675, 2545, 1863, 6158, 2250, 7635, 10895, 623, 5946, 12387, 3884, 476, 9703, 4244, 3671, 1392, 1438, 663, 1274, 417, 486, 3784, 542, 1820, 2222, 883, 1838, 563, 237, 3871, 16542, 1209, 3108, 6396, 2603, 778, 6207, 4076, 3206, 2860, 26664, 12363, 13900, 1541, 1890, 12380, 2452, 7520, 4607, 232811, 35304, 5224, 2662, 5474, 1381, 46415, 12432, 2356, 549, 3837, 1121, 186, 861, 1017, 284, 745, 1080, 10095, 4835, 9085, 4948, 1461, 877, 284, 1203, 505, 1984, 3552, 634, 823, 2141, 8699, 21474, 3590, 491, 1192, 10546, 1508, 5155, 31219, 1010, 5167, 4917, 13900, 927, 7784, 8529, 5867, 12560, 22082, 1438, 2564, 1730, 383, 2878, 688, 98454, 714, 2174, 185, 36836, 6323, 32821, 4523, 898, 1919, 2354, 51011, 1374, 40683, 1409, 1851, 1520, 3524, 16159, 5742, 7588, 26301, 2195, 913, 33930, 9246, 4031, 44761, 15517, 3254, 66775, 5526, 77811, 26494, 60997, 126959, 3817, 28365, 3686, 24918, 7709, 4311, 1717, 5820, 25486, 6296, 12273, 29487, 12141, 3700, 2887, 1815, 1822, 2110, 2473, 2550, 887, 1249, 1187, 9082, 2821, 3250, 2353, 493, 4469, 19476, 5057, 38445, 2089, 2318, 1053, 3902, 3482, 5112, 2334, 7430, 3975, 12450, 1297, 3272, 1321, 1737, 3260, 14559, 1660, 3918, 3670, 1401, 375, 1426, 3042, 4293, 7182, 795, 3526, 23748, 4932, 1199, 1698, 2071, 3109, 266, 5489, 6276, 6099, 418, 2246, 6647, 2414, 4430, 5855, 2884, 1287, 6275, 4874, 2852, 2021, 6717, 18331, 1478, 4984, 2484, 2303, 2966, 1409, 6382, 2211, 1464, 2634, 2590, 5318, 4793, 2705, 15403, 1545, 1007, 9631, 16355, 8345, 2455, 7016, 7293, 27758, 12666, 7238, 2227, 3035, 2262, 9759, 2157, 8679, 6379, 19020, 4089, 10827, 38563, 2856, 819, 3431, 1800, 4622, 5072, 3757, 4703, 57244],
            d1996: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1786, 2629, 117, 1372, 1635, 50009, 1135, 2110, 3119, 7132, 8132, 2795, 3958, 6312, 437, 2945, 8079, 38458, 2593, 38163, 20600, 13357, 0, 143793, 27262, 5307, 1785, 2074, 2242, 5374, 3880, 56335, 2876, 2753, 3961, 11580, 386726, 34891, 18997, 4535, 3460, 5136, 503, 1383, 4259, 2719, 3713, 7116, 1437, 4561, 180308, 8238, 5623, 3397, 133, 4192, 2964, 5176, 3789, 414, 2092, 2154, 22959, 1522, 2575, 32504, 18810, 80407, 4826, 105539, 21874, 230687, 144720, 12010, 2103, 0, 0, 0, 29752, 829, 16375, 2417, 1530, 1985, 2480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15263, 184748, 14250, 144266, 3885, 28524, 0, 0, 0, 0, 0, 0, 0, 0, 1388, 3583, 23185, 3222, 1734, 63665, 45058, 36169, 7017, 4938, 65699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6416, 15087, 3056, 16716, 78919, 12402, 66475, 0, 0, 0, 0, 0, 0, 0, 66747, 0, 0, 0, 0, 0, 18550, 2096, 9585, 0, 0, 0, 0, 0, 0, 80445, 3356, 40161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13259, 320779, 27121, 22044, 0, 0, 0, 12609, 5348, 0, 0, 7247, 9937, 0, 0, 0, 0, 0, 10612, 14312, 0, 0, 0, 0, 15251, 317555, 20855, 37045, 41891, 0, 0, 0, 0, 965, 30651, 12070, 6995, 2097, 13081, 2757, 26349, 2270, 258, 899, 8475, 9177, 6470, 6078, 7641, 164, 2973, 1358, 738, 1470, 3204, 14338, 1655, 29230, 1612, 980, 2633, 255766, 3236, 483, 7290, 1107, 304, 928, 1887, 1172, 520, 87, 409, 7269, 1458, 357, 376, 2324, 140, 1108, 13276, 836, 4008, 663, 310, 483, 7294, 342, 279, 923, 1439, 649, 21325, 161, 1046, 63316, 0, 2768, 328, 1863, 44915, 1397, 519, 3374, 2154, 2072, 6635, 945, 4864, 213, 467, 2582, 183372, 389964, 209777, 32603, 3445, 6399, 5032, 2690, 1520, 750, 343, 1200, 750, 9098, 70, 1199, 2114, 17151, 4202, 12171, 15250, 621, 106, 1653, 2371, 2220, 2236, 5181, 931, 224, 70708, 2444, 1058, 432, 633, 2576, 1357, 524, 11254, 4237, 5269, 2176, 2392, 2170, 1367, 539, 1050, 2423, 1033, 551, 1059, 880, 1065, 1285, 541, 1365, 1517, 3010, 750, 180, 730, 5868, 2620, 4219, 900, 2624, 6377, 4106, 2173, 943, 264, 2209, 5393, 3983, 3001, 4031, 866, 6826, 2222, 1973, 1626, 6882, 6831, 1493, 805, 11462, 140317, 131, 4168, 9447, 3938, 676, 3256, 2099, 83964, 726, 1977, 271, 478, 1590, 2138, 3782, 434, 80438, 12963, 1489, 4142, 2420, 3552, 365, 1099, 1237, 1218, 3477, 1091, 465, 2616, 2193, 4333, 3420, 12806, 43040, 2432, 1682, 2378, 1088, 638, 2853, 1484, 40395, 736, 12806, 302, 1999, 1208, 5860, 8959, 22766, 509, 189, 1631, 816, 5094, 7504, 619, 651, 4639, 2727, 427, 3383, 3732, 5459, 4522, 618, 21404, 265, 4816, 1374, 10832, 1218, 932, 2594, 1679, 1427, 408, 160, 4138, 804, 239, 1297, 598, 31252, 110772, 5789, 13659, 643, 1012, 2630, 6595, 4172, 687, 703, 4884, 325, 11240, 1803, 13676, 2427, 2827, 283, 1439, 2787, 4918, 245, 1108, 2180, 1293, 2632, 1981, 656, 18265, 423, 184, 2526, 243, 9108, 100738, 12017, 64644, 993, 568, 573, 496, 1434, 2491, 4350, 3753, 1675, 4854, 4332, 2142, 10124, 1646, 5938, 1830, 7965, 70650, 1265, 6360, 9273, 3245, 1430, 2762, 2748, 1998, 1679, 1144, 3638, 866, 1529, 966, 24588, 986, 1142, 355, 1924, 5988, 2119, 1070, 429, 895, 677, 7088, 595, 1488, 37854, 581, 33033, 359, 372, 1782, 806, 4277, 1569, 664, 507, 567, 573, 577, 138, 933, 3775, 4116, 88140, 423, 7014, 4030, 2659, 18116, 511, 1240, 729, 6256, 490, 4718, 1019, 213, 2553, 8801, 11782, 3340, 1122, 16629, 22786, 12912, 1755, 363991, 27050, 137983, 4177, 186, 487, 170431, 495, 509, 9141, 1968, 1503, 807, 1913, 2980, 1006, 43339, 688, 1367, 335, 830, 94, 527, 1266, 68129, 647, 1926, 156, 3386, 3347, 4019, 2578, 1635, 1338, 1431, 6509, 3652, 246, 1073, 40965, 2403, 2074, 1788, 1756, 404, 4027, 1258, 12841, 9674, 2649, 9513, 14, 616, 2774, 804, 1964, 11800, 841, 3988, 344, 10085, 2170, 1327, 1224, 541, 719, 1690, 3992, 4123, 405, 8950, 1666, 1912, 1952, 3935, 884, 25, 62, 53, 3364, 1122, 1827, 1070, 1802, 1048, 758, 2248, 64, 962, 12784, 2553, 15514, 1380, 9985, 5844, 2663, 7555, 7342, 892, 19301, 3931, 1371, 1205, 6817, 3198, 361, 26038, 572, 5185, 3419, 5445, 10307, 1374, 463, 779, 2028, 1923, 8577, 20475, 13782, 12394, 2718, 748, 3869, 3938, 13213, 1272, 285, 3725, 849, 1912, 5691, 742, 1107, 867, 417, 6646, 251, 304, 303903, 1983, 1232, 585, 620, 997, 757, 59643, 458, 32803, 1309, 264, 2299, 859, 5344, 55822, 799, 5722, 2012, 733, 67253, 1832, 5962, 4844, 8977, 6979, 3363, 1231, 6088, 1644, 903, 6075, 785, 1683, 4225, 272, 706, 3318, 1430629, 10432, 11254, 5056, 872, 4711, 871, 2414, 1205, 7030, 3140, 955, 3659, 2279, 580, 1071, 697, 7728, 547, 705, 6746, 650, 17224, 168579, 2926, 502, 297639, 4276, 58250, 505, 152304, 3664, 89494, 1483, 222, 2812, 185, 1216, 20848, 34981, 528, 1266, 2807, 5300, 1443, 1417, 122, 2912, 3289, 370, 22638, 2601, 67406, 2920, 14952, 21786, 1368, 507, 3562, 426, 334, 963, 3771, 422, 1615, 3584, 76924, 1827, 1714, 18291, 331, 962, 335, 94448, 22957, 196512, 2054, 1010, 2270, 404, 36138, 758, 3047, 752, 608, 79, 5165, 50, 74, 351, 1997, 62658, 1745, 569, 1844, 706, 3949, 17114, 2765, 729, 3611, 192, 1408, 9544, 7248, 5665, 1980, 515, 2281, 796, 2792, 2797, 1596, 3540, 2203, 21801, 19579, 5241, 179, 5752, 424, 203019, 879, 3840, 4304, 9013, 1568, 260, 46, 1235, 1213, 5693, 1181, 11346, 352, 15775, 1730, 750, 24628, 2841, 14591, 2519, 1481, 2552, 7749, 1726, 1168, 559, 412, 2312, 519, 3970, 133, 1535, 7022, 548, 12267, 2282, 127963, 5109, 3149, 3224, 3745, 1625, 833, 2394, 12705, 407, 2339, 2628, 12817, 2422, 7383, 93, 13657, 57700, 1580, 15369, 327485, 3536, 1673, 53738, 1932, 2068, 296, 646, 7504, 5588, 298, 739, 1118, 417, 8504, 11743, 1894, 276, 120312, 5094, 16232, 969, 3660, 1720, 731, 28791, 4547, 2777, 3170, 1467, 158, 499, 660, 15848, 2523, 488, 69461, 11113, 7207, 1819, 2217, 117951, 1675, 176, 782, 770, 1520, 853, 115, 640, 428, 2527, 1648, 2502, 2279, 84, 3643, 472, 249, 1166, 275, 3121, 6708, 29790, 2080, 1589, 6732, 2534, 1913, 997, 68306, 2330, 48314, 659, 2737, 614, 565, 3300, 1068, 9169, 32669, 5840, 3966, 5874, 11031, 1547, 2527, 6179, 49186, 10568, 46543, 6448, 5923, 5408, 4153, 4892, 372925, 26072, 10053, 15177, 2256, 93315, 12487, 6499, 16820, 21643, 225524, 3597, 9034, 2081, 41369, 935, 2753, 10857, 3349, 2277, 12929, 23067, 6731, 10385, 14143, 25082, 6662, 5386, 2628, 10282, 7965, 1381, 1962, 1888, 145441, 8139, 10367, 2240, 13577, 4514, 3909, 38382, 14616, 4053, 4018, 2240, 2178, 8670, 2971, 2041, 2421, 2131, 6389, 4828, 8193, 41605, 8298, 15804, 2716, 26428, 1864, 1303, 7720, 1067, 8380, 1971, 2278, 53644, 23475, 71282, 8105, 29381, 24525, 3994, 10362, 2862, 2115, 53819, 3170, 2397, 1385, 2572, 12547, 5469, 2327, 3590, 2569, 1957, 2868, 1420, 3582, 2693, 1570, 5699, 8438, 5185, 1097, 1247, 2807, 8417, 4183, 83877, 28713, 3488, 1913, 43632, 1724, 1298, 1595, 4625, 2413, 2747, 5419, 17799, 979, 6153, 7721, 8635, 6290, 1829, 11175, 1349, 1010, 13259, 3508, 16924, 22517, 4965, 2780, 151430, 24044, 2453, 4427, 2716, 1285, 2541, 6991, 6883, 6747, 1210, 19458, 2224, 857, 4765, 990, 2072, 2629, 6627, 1749, 91233, 4278, 4798, 6338, 6150, 16481, 9457, 12303, 5776, 4267, 4706, 2337, 3739, 7834, 3023, 11280, 4415, 6187, 5184, 1615, 30220, 23722, 4053, 6764, 8752, 1906, 6107, 4053, 6017, 3907, 4057, 2704, 1230, 529, 2734, 751, 4952, 158220, 446, 4239, 1393, 7247, 2464, 1875, 143306, 4349, 8058, 348, 2301, 7681, 2254, 2678, 3498, 514, 2340, 1554, 180504, 4298, 1474, 10802, 3003, 565, 35781, 15206, 7786, 2398, 6667, 7916, 1486, 9655, 11251, 1614, 1189, 1625, 41450, 4247, 1311, 9301, 2335, 103429, 4553, 4209, 3333, 4500, 7674, 5220, 3737, 64684, 5978, 6240, 2578, 63584, 4097, 9261, 4087, 3962, 6827, 2010, 14089, 2934, 7794, 4135, 8601, 5137, 127725, 39338, 59223, 32694, 17234, 171021, 8130, 8839, 308, 3031, 2900, 2947, 1117, 1263, 2941, 6269, 3605, 3949, 2324, 3230, 1083, 3521, 2044, 1897, 10204, 5101, 3749, 106065, 19781, 22857, 10626, 9350, 8767, 9551, 69208, 4085, 27024, 23004, 2038, 4559, 12214, 1953, 11201, 2586, 2073, 47339, 13908, 2104, 39300, 5538, 8724, 4646, 5837, 8858, 2531, 9130, 2744, 2221, 5261, 4252, 15525, 12910, 2177, 3500, 32073, 901, 3800, 6226, 2450, 5023, 17282, 5735, 13457, 1621, 4341, 14687, 63686, 8205, 7291, 40952, 5928, 4859, 4239, 9902, 1579, 615, 2369, 1450, 4224, 4990, 3454, 10342, 21990, 7736, 103313, 49887, 15036, 5740, 3275, 6712, 2949, 6939, 2070, 823, 1360, 955, 7731, 8831, 45497, 2081, 2168, 2453, 2312, 8251, 27968, 2087, 1245, 2913, 11642, 1639, 3061, 12257, 41018, 134866, 2155, 8465, 2228, 1415, 2550, 1466, 4160, 1019, 30934, 6793, 3251, 5494, 17974, 4577, 5955, 2374, 35404, 39832, 5902, 9354, 2305, 4725, 241884, 4419, 35328, 7614, 1323, 4001, 2242, 6759, 2734, 1033, 13269, 4576, 5270, 46264, 12510, 3557, 5054, 3553, 9988, 3054, 198807, 69354, 176612, 11913, 1476, 4872, 16498, 2767, 85086, 3085, 114962, 6160, 44434, 7903, 191085, 19849, 8296, 1820, 22150, 4930, 3721, 160458, 9334, 2318, 4912, 4762, 6122, 24614, 40357, 4882, 49596, 6361, 4049, 1911, 14746, 1509, 1856, 4198, 5183, 2763, 5954, 39578, 11130, 284480, 10774, 2066, 7521, 3928, 1536, 2198, 6853, 27888, 2597, 2545, 4668, 5194, 4447, 26814, 2486, 5407, 12198, 6987, 3861, 1559, 4883, 1922, 3326, 9061, 9880, 41121, 2381, 5599, 33462, 1405, 5333, 1101, 1233, 909, 2768, 3165, 30687, 787, 73750, 973, 3407, 1536, 5957, 10464, 9875, 2741, 1782, 2338, 3303, 16598, 6499, 20385, 4840, 3190, 4930, 5812, 4260, 45644, 1848, 24633, 3825, 9635, 18531, 1220, 7239, 8051, 7136, 2324, 179663, 5211, 6825, 1109, 2506, 13102, 4856, 3510, 6218, 6359, 8458, 4732, 5348, 6166, 3812, 9095, 6370, 5597, 5383, 7263, 4275, 4171, 2009, 47902, 2980, 4076, 5428, 1744, 2234, 63127, 3303, 3120, 192795, 3665, 18821, 16730, 13463, 1858, 2014, 3828, 2303, 4050, 4832, 4361, 1971, 5987, 5552, 37655, 42273, 16873, 2300, 3368, 110805, 6676, 2256, 6924, 2262, 24867, 6759, 2111, 3449, 2861, 5437, 5867, 3116, 2992, 15387, 7500, 3814, 1753, 1534, 2089, 1780, 1970, 27678, 224554, 3798, 2955, 2852, 2422, 1297, 4174, 1882, 3910, 3554, 5281, 3689, 3090, 2566, 1306, 3355, 11943, 3856, 1023, 2195, 4306, 2040, 3736, 1669, 9285, 6567, 1394, 26287, 10905, 8207, 3819, 3213, 5562, 3752, 14027, 3570, 100198, 13355, 7092, 14662, 10314, 2113, 7847, 2065, 3887, 8857, 9814, 4714, 50673, 85879, 10413, 2416, 3779, 1853, 3207, 47569, 29779, 3121, 51915, 175368, 25444, 8722, 5930, 4899, 18446, 7042, 3449, 5821, 5819, 2366, 9321, 2843, 13619, 8204, 5108, 120208, 2113, 5254, 4754, 2437, 6652, 17705, 6318, 43690, 4792, 7006, 48008, 760, 7521, 2335, 6286, 1206, 6788, 3897, 1744, 4629, 2749, 1404, 2897, 2118, 3016, 5546, 29651, 13284, 3631, 4997, 8415, 5396, 3915, 2271, 1217, 3644, 11580, 6793, 9779, 2927, 3956, 11278, 960, 2244, 5715, 1873, 52142, 6635, 1631, 2362, 2478, 4124, 14361, 4076, 1496, 17232, 2801, 6188, 7951, 25081, 700, 4924, 1540, 2351, 2937, 69496, 132599, 4334, 3604, 11025, 72147, 5347, 3274, 2646, 6765, 10008, 37383, 5572, 13283, 116121, 4335, 1153289, 3627, 1776, 108102, 12715, 2878, 2149, 19525, 12044, 15540, 5329, 23727, 10482, 6300, 4275, 4651, 6530, 3381, 17976, 5028, 4655, 5602, 7458, 8774, 3213, 27964, 5049, 13188, 2332, 6343, 8871, 341357, 7449, 6005, 26359, 1390, 576, 7656, 30738, 1438, 1943, 12943, 11991, 4378, 5954, 3215, 8379, 5658, 748, 1884, 2596, 1090, 26831, 15879, 8797, 16977, 24860, 2146, 5509, 412988, 4331, 3405, 6596, 4258, 1582, 3215, 1160, 360, 2709, 1409, 5745, 6703, 5011, 4220, 7055, 2747, 8437, 2551, 1977, 6054, 1494, 1365, 26727, 2152, 2790, 4141, 103574, 6385, 19879, 2249, 5703, 23772, 7349, 4842, 8142, 19205, 4428, 144207, 19407, 3348, 8373, 11945, 3854, 6311, 4058, 5374, 3798, 2227, 45704, 3573, 20571, 15504, 23191, 98837, 18327, 8529, 6092, 28881, 47579, 2277, 2129, 1938, 3110, 3235, 4315, 2754, 2280, 8438, 4294, 2956, 17154, 57354, 3824, 29564, 3251, 15890, 10144, 145201, 77641, 81092, 120414, 12919, 94243, 8045, 4825, 20832, 4972, 1444, 6611, 29441, 5542, 3019, 3372, 3526, 3174, 8791, 2652, 34273, 10053, 4690, 1379, 6136, 3152, 9203, 15529, 4317, 19341, 6573, 6367, 13418, 2841, 3565, 9471, 1402, 16277, 865, 2074, 1537, 21145, 30391, 822, 2087, 1265, 64783, 3072, 248276, 44407, 85993, 6621, 7003, 13029, 8669, 12719, 1071, 5912, 4961, 3611, 3658, 2007, 1842, 2322, 10281, 196310, 15145, 9572, 11603, 35852, 3653, 2444, 3179, 11525, 908, 4842, 1869, 7303, 3053, 10074, 9668, 3030, 8379, 5058, 1886, 4890, 1801, 3955, 15814, 3825, 6302, 4119, 2597, 3443, 1402, 4623, 3897, 1636, 1413, 53405, 34822, 38902, 6156, 38567, 3502, 32450, 8164, 4047, 32454, 891, 2834, 2926, 1676, 7651, 3380, 14314, 3493, 17460, 2222, 4543, 2859, 16750, 5168, 10226, 2903, 216620, 2121, 1858, 3163, 8614, 2851, 1566, 2987, 546, 60174, 4720, 48568, 14187, 18993, 49120, 4453, 2350, 17089, 10945, 14850, 43959, 13418, 143664, 2183, 4611, 2186, 303587, 10485, 164858, 11832, 10868, 3492, 977, 2571, 2618, 4864, 1927, 2382, 13406, 4769, 1929, 8781, 5792, 2005, 3230, 2125, 818, 12032, 2361, 4462, 11481, 4284, 4066, 5735, 2704, 1807, 3815, 2069, 5409, 17555, 4540, 4122, 2293, 4282, 7651, 1055, 3877, 2956, 3106, 6123, 1065, 5277, 14153, 6488, 9818, 4312, 7566, 9353, 15601, 3129, 4523, 5486, 2868, 13358, 4690, 13532, 4441, 5657, 1574, 15231, 3592, 13655, 2962, 857, 997, 1998, 4502, 1631, 11336, 2753, 9779, 3213, 5345, 2398, 1737, 4074, 5354, 2306, 4831, 1262, 7145, 1012, 4249, 24139, 4287, 2531, 46377, 3170, 1059, 7360, 2663, 1394, 5285, 2048, 13868, 5846, 2896, 23183, 5524, 3620, 3677, 43571, 5327, 23003, 5509, 13516, 16547, 4402, 1228, 2543, 11910, 16783, 432232, 3196, 2725, 4710, 2784, 2661, 1440, 1334, 936, 9470, 1949, 7584, 3487, 8721, 5284, 7045, 8776, 1194, 1336, 3404, 2517, 1576, 3267, 3652, 2466, 3585, 3195, 3354, 1894, 3704, 10761, 4609, 3761, 4444, 19942, 1765, 1844, 1834, 4181, 1641, 12670, 1710, 9120, 1650, 5281, 11957, 1260, 2434, 1355, 2247, 1830, 8301, 2279, 17361, 12096, 10783, 7564, 2808, 2327, 13461, 3822, 10272, 964, 14980, 1620, 7620, 912, 1664, 1272, 5940, 1927, 54995, 6233, 20440, 11470, 16173, 42317, 6048, 3001, 3076, 8321, 6551, 3442, 3162, 5338, 939, 1741, 4730, 3848, 4475, 145586, 4055, 20839, 2922, 169892, 3769, 2232, 20772, 15052, 8769, 14481, 261828, 1114, 3372, 4769, 6564, 4870, 7131, 7162, 8150, 4686, 8433, 2211, 75084, 10827, 2163, 3472, 9467, 27835, 4176, 3396, 398190, 2824, 5044, 2898, 1843, 2255, 1821, 1781, 124448, 7398, 5392, 9744, 3969, 4202, 4952, 1586, 6172, 10047, 10041, 2596, 73106, 504466, 5510, 22815, 5644, 2050, 2913, 2967, 3497, 4883, 1410, 1882, 7011, 2679, 7419, 1425, 1524, 915, 22022, 9889, 2995, 7431, 6104, 2750, 14805, 8950, 4719, 3576, 9931, 3992, 8943, 6544, 4732, 10507, 2172, 9544, 2992, 6929, 8851, 4948, 2162, 23647, 3261, 20716, 9603, 4260, 5990, 27890, 21329, 5303, 42259, 6835, 40936, 28749, 1347, 5749, 4402, 115946, 57508, 45410, 24493, 2385, 4627, 3914, 115469, 13813, 5550, 4171, 906, 6743, 13261, 5618, 2292, 2175, 3209, 3491, 44203, 394131, 100190, 44399, 19156, 1591, 1478, 1796, 4237, 1598, 8029, 2239, 922, 5965, 19211, 2948, 6622, 6002, 1186, 14447, 8050, 31658, 11678, 4565, 895, 2117, 19728, 2692, 105050, 3609, 41844, 24984, 5734, 2044, 2996, 4223, 6071, 3495, 6405, 3307, 3783, 5515, 15725, 3828, 3078, 4399, 6940, 3692, 4688, 1868, 3917, 2889, 3675, 2871, 5895, 5641, 4618, 5632, 72716, 3346, 6397, 55744, 104911, 5072, 2902, 8668, 2481, 4646, 3169, 3588, 18907, 1858, 6729, 10044, 15041, 11547, 12649, 8168, 1103, 1909, 6759, 7300, 2676, 5976, 12994, 6885, 2868, 4994, 10840, 5989, 12760, 19701, 9498, 3746, 1225, 1553, 6240, 2818, 4304, 13230, 3195, 14267, 2504, 1737, 1434, 3245, 6195, 137903, 10426, 14070, 1704, 4408, 1602, 1734, 1995, 3027, 52222, 170150, 9688, 54377, 30007, 22077, 3316, 3970, 1172, 9957, 2204, 2080, 2841, 3385, 7018, 2640, 7792, 1689, 4960, 3728, 1106, 6843, 4987, 8049, 2735, 1496, 3856, 9847, 11142, 22839, 5150, 5441, 3356, 3525, 32739, 2277, 4522, 13593, 6015, 1926, 2156, 14126, 5340, 106072, 18951, 5566, 5780, 5880, 25958, 1551, 6057, 2517, 3371, 1445, 2045, 5015, 4787, 2775, 5061, 1273, 1698, 61158, 12625, 4143, 109347, 2641, 3658, 10336, 4263, 2990, 22708, 31240, 11107, 24256, 53568, 3935, 2375, 22624, 7562, 19402, 11595, 43186, 1944, 8218, 4964, 4821, 3092, 4989, 4804, 8369, 18610, 73437, 112050, 55604, 15244, 8881, 10345, 16159, 1668, 17476, 3871, 802, 3913, 3855, 1248, 2779, 3486, 2135, 2850, 1649, 2692, 3052, 1459, 8300, 1951, 2696, 9631, 15600, 1648, 10867, 1859, 2782, 6853, 6220, 178323, 203549, 172337, 37695, 37375, 1072, 2135, 753, 1480, 15366, 7667, 11999, 5900, 9392, 4613, 13814, 8685, 5207, 2204, 28674, 4233, 10317, 1462, 2239, 6974, 9019, 12728, 17122, 647, 6202, 1603, 1092, 3487, 14308, 2606, 85912, 7587, 3819, 45573, 3233, 3552, 1795, 1089, 3006, 4451, 129709, 15542, 9689, 2803, 133878, 1053, 1614, 6041, 1806, 285126, 3802, 2120, 202, 4722, 485, 18022, 3654, 11535, 1775, 452, 4195, 11773, 4343, 1096, 418, 360, 880, 1507, 1101, 1805, 1107, 2700, 2480, 1578, 5437, 3178, 8790, 8052, 1555, 1039, 1619, 10519, 1759, 1300, 470, 928, 3745, 973, 1114, 493, 11199, 1187, 1282, 5957, 2118, 235, 664, 300, 11376, 670, 151, 5614, 8561, 4892, 1875, 2080, 3351, 888, 3388, 2420, 3472, 992, 674, 7970, 8334, 1197, 35961, 52254, 1280, 21874, 116, 1059, 2317, 366, 1132, 7913, 1135, 4520, 4436, 1681, 6369, 8611, 2814, 5432, 10476, 333, 5200, 1191, 1277, 4594, 2186, 10706, 2927, 9009, 1394, 7741, 13627, 10088, 4810, 10331, 1806, 5095, 4689, 22992, 67709, 7732, 9275, 3517, 60736, 2759, 953, 637, 14657, 587, 553, 544, 434, 1573, 3232, 6450, 15168, 4880, 2292, 107, 2981, 6723, 7619, 941, 489, 416, 10679, 21693, 2741, 2187, 4336, 5728, 4531, 18295, 3663, 120893, 2126, 1724, 956, 321, 1636, 429, 4226, 7114, 2229, 4226, 3231, 1194, 1725, 7262, 25676, 29074, 15542, 1840, 534, 460, 6532, 3449, 8006, 5911, 63756, 3810, 2333, 2092, 71727, 109624, 45522, 5591, 924, 510, 15707, 150, 2115, 5137, 469, 1188, 11384, 2941, 8413, 24012, 1488, 743, 3913, 18054, 76619, 4967, 1321, 4379, 539, 1090, 10942, 159878, 390, 1316, 603, 2453, 1854, 123, 393, 252, 1003, 3095, 2890, 562, 1199, 2123, 7491, 3523, 3808, 8025, 3895, 14082, 8065, 497, 4961, 12157, 5775, 444, 8774, 5018, 1866, 705, 1123, 236, 952, 259, 620, 3589, 649, 1822, 2082, 3331, 1674, 391, 171, 1979, 10452, 1601, 3253, 6850, 2773, 452, 5294, 6166, 4074, 3349, 20783, 8595, 13078, 3054, 1903, 11554, 3625, 9647, 7145, 417846, 44167, 5707, 3214, 6027, 1426, 48637, 12585, 1740, 658, 2564, 652, 62, 1185, 671, 128, 827, 463, 11156, 6006, 8038, 5590, 939, 1026, 197, 874, 281, 955, 2705, 379, 2299, 2741, 10551, 24238, 3018, 572, 962, 8660, 1319, 4019, 45119, 1169, 10976, 7536, 20298, 869, 6877, 7179, 1655, 13741, 13968, 1643, 2584, 1816, 1205, 2771, 508, 128970, 684, 2419, 278, 24175, 6773, 45854, 5039, 521, 1028, 2008, 20722, 1368, 16462, 2554, 2544, 1735, 2992, 13276, 4479, 6691, 10936, 2794, 868, 50072, 12300, 9553, 24281, 18617, 5697, 54749, 4925, 83493, 38238, 37838, 112328, 9407, 17068, 2273, 13598, 5342, 6897, 1794, 4303, 18775, 12492, 20636, 12776, 7277, 2997, 3956, 1974, 1243, 1180, 2912, 3070, 284, 635, 803, 12420, 1438, 2607, 2399, 309, 2788, 20419, 6772, 55543, 1564, 1314, 537, 5457, 3720, 5105, 1015, 3240, 2547, 17211, 1357, 3817, 1534, 1628, 4579, 10972, 1913, 4042, 3984, 2053, 483, 2259, 1114, 6446, 6749, 454, 6221, 17205, 5062, 1641, 651, 815, 3455, 117, 6118, 6220, 4465, 299, 3269, 8017, 1164, 3568, 4352, 4714, 1846, 8380, 6469, 2824, 4983, 10552, 17041, 2741, 2960, 2027, 2504, 3832, 3183, 3468, 2679, 1487, 2555, 2769, 8012, 7198, 4997, 30257, 1652, 1585, 15901, 12987, 12256, 2666, 12821, 9931, 28815, 14650, 13580, 2619, 5848, 3705, 15386, 2666, 7800, 7893, 36299, 5593, 21798, 42823, 3081, 1120, 4311, 2681, 5540, 8494, 7759, 7191, 77297],
            sen_d2006: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 703, 0, 61, 667, 605, 0, 815, 0, 0, 0, 0, 0, 0, 0, 118, 773, 0, 0, 900, 0, 0, 0, 0, 0, 0, 0, 872, 930, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344, 0, 0, 0, 0, 0, 561, 0, 0, 0, 0, 0, 54, 0, 0, 0, 976, 207, 0, 963, 0, 478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 73, 0, 551, 282, 836, 0, 0, 588, 0, 825, 0, 0, 0, 0, 163, 0, 0, 518, 729, 0, 0, 0, 282, 825, 0, 0, 119, 0, 0, 91, 0, 0, 0, 0, 0, 824, 947, 0, 0, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 848, 0, 0, 0, 0, 626, 0, 77, 131, 960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 131, 748, 266, 0, 35, 0, 724, 0, 0, 0, 0, 0, 257, 0, 0, 0, 0, 0, 0, 570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 284, 0, 580, 0, 332, 0, 0, 0, 0, 0, 0, 197, 0, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 293, 0, 210, 0, 0, 0, 486, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 455, 0, 0, 0, 435, 202, 0, 179, 0, 0, 0, 0, 0, 253, 0, 0, 0, 392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 577, 0, 641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 479, 555, 178, 994, 0, 0, 0, 0, 0, 603, 0, 200, 491, 0, 223, 0, 707, 623, 0, 0, 0, 0, 0, 0, 0, 823, 0, 266, 0, 0, 0, 0, 919, 0, 0, 0, 0, 0, 0, 0, 0, 202, 0, 429, 100, 918, 0, 0, 0, 452, 0, 0, 0, 942, 0, 0, 0, 0, 39, 225, 0, 244, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 11, 249, 0, 173, 0, 0, 0, 0, 209, 0, 905, 830, 634, 216, 280, 929, 0, 0, 0, 0, 661, 0, 0, 0, 0, 95, 158, 150, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 574, 0, 0, 780, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 627, 227, 597, 995, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 675, 128, 0, 435, 0, 0, 384, 533, 0, 0, 0, 0, 0, 0, 0, 0, 0, 924, 0, 0, 0, 0, 0, 0, 0, 0, 577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 478, 0, 539, 418, 0, 251, 583, 0, 107, 281, 0, 0, 0, 0, 0, 353, 0, 508, 0, 806, 0, 0, 289, 0, 0, 838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 969, 0, 0, 0, 475, 25, 0, 0, 378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 0, 117, 242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 107, 0, 0, 0, 0, 0, 0, 96, 15, 612, 383, 0, 446, 0, 675, 0, 863, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 415, 450, 0, 0, 0, 0, 0, 0, 0, 984, 0, 0, 99, 0, 0, 0, 0, 185, 0, 0, 0, 0, 0, 996, 133, 0, 808, 543, 0, 624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 635, 462, 0, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 966, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 850, 0, 537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 703, 0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 853, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 940, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 948, 0, 0, 777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 991, 0, 795, 0, 0, 0, 0, 848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 720, 0, 0, 0, 900, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 868, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 820, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 981, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 0, 0, 0, 0, 715, 591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 975, 0, 0, 0, 0, 0, 0, 989, 0, 0, 0, 481, 0, 689, 0, 784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 939, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 961, 865, 0, 757, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 667, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 424, 0, 98, 0, 0, 565, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 394, 0, 842, 0, 0, 247, 692, 467, 0, 0, 0, 823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 502, 0, 0, 0, 0, 0, 0, 0, 579, 0, 248, 0, 213, 826, 0, 0, 0, 0, 0, 0, 330, 162, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 0, 670, 74, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 165, 759, 272, 0, 0, 401, 0, 0, 0, 0, 0, 631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544, 0, 281, 0, 276, 0, 191, 0, 0, 0, 0, 244, 938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 524, 624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            hispanic: [3, 4, 8, 7, 1, 15, 5, 0, 1, 3, 1, 1, 2, 1, 4, 1, 3, 2, 0, 6, 5, 4, 0, 3, 0, 5, 19, 92, 92, 52, 35, 45, 60, 33, 45, 17, 24, 53, 24, 87, 98, 53, 93, 35, 22, 76, 23, 10, 9, 0, 8, 11, 95, 28, 31, 85, 37, 49, 90, 18, 45, 46, 34, 40, 87, 95, 27, 13, 69, 51, 16, 61, 22, 38, 78, 92, 56, 58, 43, 79, 68, 63, 23, 24, 36, 86, 23, 20, 48, 27, 79, 15, 3, 3, 11, 23, 26, 43, 18, 5, 8, 1, 0, 0, 0, 11, 9, 11, 41, 20, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 16, 24, 48, 10, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 25, 29, 2, 7, 16, 16, 6, 7, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 5, 11, 5, 11, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 3, 6, 8, 0, 0, 0, 0, 0, 0, 8, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 24, 5, 4, 0, 0, 0, 2, 4, 0, 0, 1, 5, 0, 0, 0, 0, 0, 5, 9, 0, 0, 0, 0, 20, 64, 11, 10, 14, 0, 0, 0, 0, 3, 13, 18, 77, 39, 34, 2, 50, 2, 5, 4, 4, 15, 4, 22, 16, 10, 7, 52, 56, 19, 54, 10, 65, 10, 52, 4, 8, 37, 18, 37, 21, 2, 3, 3, 7, 2, 1, 4, 1, 20, 5, 27, 17, 15, 10, 3, 6, 4, 2, 2, 2, 1, 4, 24, 5, 2, 19, 9, 28, 13, 29, 13, 11, 9, 9, 4, 21, 12, 35, 48, 27, 38, 56, 11, 3, 10, 45, 32, 48, 31, 15, 6, 2, 8, 6, 16, 6, 17, 41, 9, 30, 5, 29, 8, 22, 7, 5, 5, 5, 1, 1, 4, 1, 3, 3, 9, 9, 5, 10, 12, 3, 2, 41, 1, 4, 0, 49, 2, 5, 0, 7, 2, 0, 14, 2, 4, 7, 1, 5, 6, 36, 1, 0, 4, 1, 12, 2, 1, 2, 12, 5, 2, 6, 13, 3, 20, 2, 58, 38, 29, 49, 14, 60, 1, 15, 13, 2, 9, 12, 6, 7, 1, 3, 6, 8, 6, 7, 10, 17, 57, 19, 34, 82, 26, 31, 6, 24, 2, 24, 15, 50, 14, 5, 1, 4, 46, 4, 9, 2, 2, 1, 2, 0, 0, 1, 1, 1, 21, 7, 7, 2, 1, 2, 0, 2, 2, 12, 20, 10, 6, 0, 3, 72, 48, 43, 65, 34, 38, 6, 4, 3, 8, 6, 9, 6, 2, 79, 9, 38, 10, 14, 16, 16, 7, 9, 12, 23, 19, 11, 14, 28, 10, 23, 5, 19, 2, 22, 2, 2, 25, 39, 24, 15, 44, 36, 12, 9, 12, 9, 56, 20, 6, 7, 4, 13, 15, 30, 2, 1, 1, 10, 4, 3, 31, 2, 33, 2, 1, 16, 3, 0, 1, 36, 8, 24, 51, 23, 17, 2, 8, 3, 8, 2, 5, 7, 11, 5, 3, 2, 13, 84, 34, 41, 71, 41, 7, 12, 34, 20, 7, 3, 4, 4, 2, 0, 4, 4, 3, 3, 31, 51, 23, 22, 5, 13, 14, 27, 1, 24, 12, 14, 19, 15, 14, 35, 30, 0, 3, 9, 0, 7, 1, 6, 2, 2, 3, 4, 1, 2, 3, 38, 47, 17, 50, 36, 46, 5, 15, 9, 24, 5, 30, 3, 13, 22, 19, 13, 35, 3, 51, 14, 31, 10, 46, 29, 23, 34, 11, 28, 8, 26, 8, 30, 4, 8, 26, 6, 2, 2, 2, 5, 0, 4, 3, 5, 2, 5, 2, 7, 3, 2, 14, 39, 33, 19, 11, 13, 39, 4, 12, 17, 2, 17, 10, 9, 3, 2, 3, 15, 13, 5, 11, 3, 3, 36, 0, 50, 7, 72, 23, 23, 4, 18, 22, 10, 42, 4, 38, 50, 25, 4, 11, 19, 30, 10, 7, 3, 1, 7, 2, 1, 5, 0, 1, 2, 1, 2, 1, 4, 2, 2, 0, 3, 4, 29, 11, 3, 4, 5, 2, 3, 3, 5, 8, 4, 6, 2, 6, 3, 19, 7, 0, 19, 14, 5, 10, 23, 21, 1, 3, 9, 18, 13, 32, 6, 9, 19, 22, 30, 21, 47, 7, 38, 5, 19, 3, 8, 56, 3, 2, 10, 5, 26, 22, 3, 2, 2, 13, 3, 0, 12, 12, 10, 54, 3, 3, 2, 16, 14, 4, 26, 7, 4, 38, 14, 5, 9, 6, 5, 2, 28, 16, 46, 45, 6, 27, 49, 4, 9, 44, 17, 47, 16, 52, 16, 51, 8, 3, 8, 12, 55, 21, 14, 3, 5, 1, 4, 1, 9, 1, 1, 6, 2, 13, 44, 2, 10, 26, 9, 31, 44, 24, 18, 14, 33, 6, 7, 7, 6, 8, 12, 2, 0, 1, 15, 2, 31, 2, 17, 15, 36, 21, 18, 14, 9, 21, 54, 13, 4, 1, 13, 5, 2, 2, 4, 2, 13, 10, 21, 6, 10, 4, 6, 27, 49, 12, 23, 53, 5, 6, 13, 17, 0, 12, 2, 1, 0, 7, 0, 3, 2, 4, 48, 34, 5, 5, 18, 8, 13, 15, 11, 41, 1, 39, 4, 6, 3, 11, 17, 3, 4, 5, 11, 24, 8, 7, 13, 29, 82, 1, 9, 43, 21, 3, 18, 16, 10, 9, 12, 10, 7, 35, 15, 47, 19, 3, 16, 25, 20, 9, 36, 79, 2, 2, 2, 5, 55, 62, 27, 5, 5, 9, 13, 16, 8, 10, 1, 58, 12, 28, 10, 22, 1, 3, 1, 1, 15, 5, 60, 6, 49, 17, 24, 16, 20, 6, 54, 25, 8, 33, 3, 2, 41, 2, 2, 1, 0, 4, 8, 4, 0, 2, 1, 28, 4, 5, 2, 32, 29, 7, 42, 6, 41, 8, 41, 20, 2, 8, 23, 5, 4, 23, 5, 18, 3, 7, 6, 10, 17, 12, 16, 4, 6, 3, 9, 2, 2, 0, 3, 6, 4, 1, 2, 85, 1, 1, 0, 3, 1, 4, 12, 21, 4, 3, 1, 5, 20, 7, 17, 18, 45, 37, 8, 5, 7, 21, 13, 8, 57, 59, 4, 2, 1, 5, 1, 1, 20, 12, 4, 11, 7, 2, 1, 1, 3, 27, 3, 3, 2, 2, 19, 5, 15, 8, 8, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 2, 3, 1, 2, 1, 2, 7, 1, 1, 5, 3, 0, 0, 2, 4, 1, 5, 3, 3, 2, 14, 3, 7, 1, 1, 1, 5, 1, 3, 0, 1, 3, 8, 3, 5, 7, 3, 2, 2, 2, 2, 2, 31, 1, 1, 3, 2, 2, 2, 5, 4, 2, 2, 7, 25, 9, 5, 19, 12, 1, 1, 1, 1, 0, 3, 3, 6, 1, 2, 4, 6, 3, 3, 5, 6, 2, 11, 0, 1, 1, 2, 7, 4, 0, 2, 6, 0, 1, 0, 2, 1, 3, 12, 4, 0, 2, 7, 6, 17, 4, 12, 1, 1, 3, 2, 7, 2, 1, 1, 2, 8, 1, 1, 1, 1, 2, 5, 1, 7, 2, 6, 13, 0, 8, 1, 1, 1, 2, 0, 3, 2, 1, 1, 2, 3, 3, 4, 1, 0, 1, 0, 0, 3, 2, 5, 2, 2, 1, 2, 7, 6, 14, 3, 4, 4, 1, 3, 4, 8, 2, 4, 0, 5, 5, 1, 2, 9, 0, 13, 2, 4, 9, 4, 8, 2, 6, 0, 2, 2, 2, 1, 6, 1, 5, 1, 3, 11, 1, 9, 4, 12, 5, 10, 2, 0, 4, 5, 2, 1, 3, 1, 3, 2, 6, 4, 4, 6, 1, 11, 5, 6, 2, 3, 15, 8, 2, 16, 2, 2, 1, 7, 1, 4, 3, 2, 2, 2, 5, 2, 6, 16, 5, 1, 6, 3, 2, 5, 3, 16, 1, 1, 30, 3, 4, 4, 11, 2, 4, 1, 1, 12, 1, 4, 1, 2, 0, 4, 3, 9, 18, 3, 5, 4, 9, 3, 10, 2, 7, 1, 8, 2, 1, 5, 4, 0, 5, 0, 1, 10, 1, 1, 3, 1, 3, 1, 0, 5, 1, 2, 1, 1, 2, 4, 4, 4, 1, 7, 2, 3, 0, 3, 1, 1, 5, 11, 2, 2, 2, 3, 1, 1, 1, 1, 3, 1, 5, 9, 0, 2, 10, 2, 6, 1, 1, 7, 1, 1, 4, 15, 1, 2, 1, 1, 5, 1, 8, 22, 6, 0, 4, 3, 2, 15, 1, 6, 2, 5, 15, 1, 2, 2, 4, 3, 1, 2, 3, 18, 1, 6, 1, 0, 1, 0, 0, 1, 2, 5, 1, 1, 2, 2, 2, 1, 5, 2, 3, 3, 2, 1, 3, 13, 5, 5, 1, 1, 1, 8, 1, 14, 2, 1, 1, 10, 2, 3, 3, 1, 4, 1, 16, 15, 14, 11, 1, 3, 7, 1, 6, 1, 13, 1, 16, 2, 15, 6, 2, 6, 3, 1, 1, 2, 4, 1, 2, 6, 1, 4, 1, 1, 5, 4, 1, 3, 1, 1, 11, 10, 3, 11, 1, 1, 1, 1, 6, 4, 3, 8, 6, 6, 7, 4, 2, 1, 1, 1, 4, 5, 13, 1, 3, 1, 1, 1, 2, 2, 2, 5, 2, 4, 1, 2, 20, 1, 1, 5, 4, 1, 2, 4, 13, 0, 12, 1, 10, 0, 9, 9, 6, 2, 4, 3, 1, 14, 6, 2, 2, 1, 4, 1, 2, 4, 1, 3, 4, 3, 3, 0, 2, 2, 4, 3, 5, 5, 3, 6, 1, 6, 3, 12, 2, 2, 8, 1, 2, 7, 2, 4, 2, 4, 3, 2, 1, 3, 3, 29, 4, 0, 5, 1, 1, 15, 0, 3, 4, 2, 2, 3, 2, 0, 1, 5, 1, 1, 2, 2, 3, 3, 6, 6, 6, 4, 2, 1, 9, 2, 8, 3, 2, 6, 4, 3, 1, 13, 0, 5, 0, 4, 2, 0, 3, 1, 2, 1, 6, 0, 7, 4, 4, 6, 4, 2, 0, 1, 1, 6, 5, 4, 12, 4, 11, 3, 2, 4, 1, 0, 0, 1, 2, 1, 1, 2, 4, 0, 4, 3, 3, 1, 1, 4, 2, 3, 2, 16, 10, 3, 2, 3, 0, 2, 2, 1, 2, 1, 1, 12, 36, 9, 1, 1, 4, 4, 5, 3, 1, 4, 19, 25, 11, 2, 0, 5, 1, 4, 3, 1, 1, 4, 1, 2, 2, 1, 3, 2, 2, 3, 1, 1, 1, 1, 4, 1, 10, 4, 0, 1, 1, 1, 1, 2, 3, 3, 8, 1, 1, 2, 2, 1, 1, 3, 4, 1, 1, 2, 3, 1, 2, 5, 5, 9, 5, 9, 9, 4, 3, 1, 1, 1, 2, 6, 2, 0, 6, 2, 3, 7, 1, 1, 7, 0, 2, 4, 7, 1, 1, 2, 1, 1, 2, 4, 0, 1, 1, 5, 3, 1, 2, 8, 3, 4, 1, 10, 42, 0, 23, 2, 0, 26, 10, 2, 2, 6, 6, 1, 3, 2, 2, 1, 1, 2, 3, 1, 3, 13, 2, 2, 3, 2, 6, 11, 2, 6, 1, 8, 1, 4, 1, 1, 1, 5, 4, 9, 4, 0, 7, 1, 2, 30, 1, 9, 2, 1, 33, 1, 1, 1, 6, 2, 2, 2, 2, 1, 8, 12, 2, 2, 2, 4, 3, 1, 0, 0, 3, 2, 2, 2, 4, 2, 4, 1, 8, 5, 5, 1, 1, 0, 3, 4, 1, 3, 9, 6, 5, 0, 1, 3, 3, 0, 2, 4, 3, 4, 2, 0, 3, 4, 3, 2, 2, 3, 1, 1, 7, 1, 1, 5, 8, 8, 5, 6, 1, 3, 8, 1, 4, 1, 1, 4, 1, 0, 1, 2, 1, 4, 2, 4, 5, 3, 5, 4, 3, 18, 14, 11, 9, 3, 8, 5, 2, 1, 5, 1, 1, 1, 1, 2, 0, 1, 3, 3, 1, 4, 1, 1, 1, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 3, 1, 0, 1, 1, 0, 1, 2, 1, 1, 0, 1, 6, 2, 53, 3, 5, 1, 2, 2, 16, 1, 0, 1, 1, 1, 5, 1, 2, 1, 3, 21, 3, 2, 2, 8, 3, 1, 2, 10, 4, 3, 4, 9, 1, 3, 1, 6, 3, 1, 1, 1, 9, 4, 10, 4, 1, 3, 5, 3, 16, 4, 2, 1, 0, 3, 11, 2, 1, 11, 2, 7, 2, 2, 5, 1, 15, 2, 0, 7, 1, 4, 1, 3, 2, 1, 2, 3, 6, 2, 0, 12, 0, 1, 9, 2, 1, 0, 1, 0, 5, 0, 17, 8, 1, 8, 2, 0, 2, 1, 1, 10, 2, 4, 2, 1, 0, 14, 10, 7, 2, 3, 1, 6, 4, 3, 2, 2, 1, 2, 0, 1, 1, 2, 2, 4, 2, 4, 4, 1, 10, 2, 1, 2, 3, 5, 1, 1, 2, 6, 5, 4, 2, 2, 2, 1, 1, 3, 1, 1, 2, 1, 1, 3, 1, 3, 3, 3, 12, 8, 2, 2, 8, 6, 5, 2, 11, 2, 2, 1, 4, 2, 3, 2, 4, 7, 1, 2, 0, 1, 1, 2, 3, 19, 6, 1, 0, 7, 3, 1, 1, 3, 0, 1, 2, 2, 0, 4, 1, 7, 5, 0, 1, 1, 1, 1, 1, 2, 4, 3, 2, 2, 5, 1, 1, 2, 1, 12, 1, 1, 2, 2, 5, 20, 1, 2, 3, 2, 2, 4, 1, 11, 4, 5, 0, 1, 1, 0, 1, 2, 1, 6, 3, 3, 9, 2, 1, 1, 11, 1, 1, 0, 0, 3, 1, 2, 1, 12, 2, 1, 1, 4, 1, 2, 2, 2, 0, 2, 2, 2, 1, 1, 1, 3, 3, 0, 8, 5, 10, 5, 1, 2, 7, 1, 2, 3, 4, 1, 1, 0, 2, 3, 3, 1, 17, 4, 2, 3, 11, 1, 0, 1, 1, 4, 0, 1, 2, 0, 0, 2, 2, 1, 2, 19, 3, 2, 2, 9, 2, 10, 4, 13, 1, 1, 15, 2, 2, 3, 1, 2, 3, 3, 15, 2, 6, 0, 5, 3, 1, 1, 2, 5, 1, 7, 6, 0, 2, 1, 1, 1, 1, 1, 8, 4, 2, 1, 3, 1, 6, 4, 6, 5, 5, 1, 4, 5, 2, 6, 2, 1, 1, 1, 2, 1, 1, 1, 2, 0, 2, 4, 1, 2, 5, 4, 1, 1, 3, 1, 7, 2, 0, 5, 4, 3, 2, 12, 5, 1, 1, 4, 4, 2, 2, 2, 2, 1, 2, 1, 2, 4, 1, 3, 1, 2, 4, 2, 6, 3, 1, 1, 1, 3, 3, 1, 4, 1, 1, 0, 2, 1, 0, 3, 0, 2, 1, 3, 1, 2, 0, 2, 2, 26, 4, 4, 3, 1, 0, 0, 1, 3, 1, 0, 1, 2, 5, 2, 2, 3, 1, 9, 4, 5, 5, 1, 0, 2, 3, 3, 20, 1, 5, 3, 3, 1, 1, 2, 2, 2, 2, 2, 9, 2, 3, 0, 2, 1, 3, 1, 3, 2, 2, 1, 1, 3, 5, 4, 3, 3, 4, 14, 1, 8, 6, 1, 4, 2, 2, 2, 2, 2, 5, 1, 1, 4, 1, 8, 1, 3, 4, 2, 6, 2, 3, 6, 1, 2, 0, 0, 1, 0, 6, 2, 5, 6, 3, 3, 5, 1, 2, 1, 2, 2, 3, 2, 4, 5, 7, 9, 2, 1, 1, 2, 1, 2, 3, 13, 4, 15, 2, 8, 4, 9, 4, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 6, 1, 1, 2, 6, 2, 3, 1, 3, 14, 6, 6, 5, 5, 2, 3, 6, 9, 3, 6, 6, 1, 0, 1, 1, 2, 3, 4, 2, 2, 2, 2, 1, 7, 1, 2, 1, 1, 2, 5, 1, 7, 1, 1, 3, 4, 1, 6, 0, 1, 2, 3, 5, 4, 11, 1, 2, 3, 1, 9, 1, 1, 1, 1, 3, 0, 1, 3, 5, 1, 1, 7, 3, 2, 1, 2, 1, 2, 1, 1, 1, 3, 2, 2, 0, 0, 2, 1, 3, 3, 1, 1, 0, 0, 1, 0, 1, 5, 3, 8, 2, 0, 3, 1, 3, 2, 2, 14, 15, 16, 4, 4, 2, 1, 1, 1, 2, 1, 3, 2, 3, 3, 3, 10, 1, 3, 7, 4, 6, 1, 3, 6, 4, 3, 2, 0, 3, 2, 1, 3, 4, 2, 9, 3, 5, 15, 4, 1, 1, 0, 2, 1, 13, 4, 2, 1, 7, 2, 3, 2, 1, 6, 2, 1, 0, 2, 10, 1, 28, 2, 2, 1, 3, 1, 0, 2, 1, 1, 0, 3, 2, 2, 3, 1, 1, 1, 1, 4, 1, 1, 1, 2, 1, 3, 1, 0, 2, 2, 1, 3, 0, 0, 4, 0, 2, 1, 1, 1, 3, 0, 3, 0, 2, 1, 1, 1, 4, 1, 1, 0, 1, 1, 1, 6, 3, 1, 1, 3, 1, 7, 1, 3, 0, 1, 1, 1, 3, 1, 2, 4, 2, 3, 5, 2, 2, 2, 4, 1, 3, 3, 3, 3, 1, 1, 1, 11, 1, 3, 4, 7, 17, 8, 2, 8, 1, 5, 7, 7, 4, 2, 1, 1, 2, 2, 4, 2, 1, 0, 5, 2, 1, 1, 1, 1, 2, 0, 3, 1, 1, 0, 2, 1, 1, 2, 3, 0, 1, 1, 3, 16, 5, 9, 3, 5, 2, 1, 0, 1, 2, 1, 1, 1, 0, 4, 0, 4, 43, 7, 2, 1, 1, 0, 2, 1, 1, 1, 3, 1, 3, 1, 4, 8, 7, 3, 3, 0, 3, 0, 2, 1, 2, 2, 2, 1, 1, 2, 2, 4, 27, 7, 15, 14, 2, 4, 3, 2, 12, 10, 0, 1, 0, 4, 2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 3, 2, 2, 2, 1, 8, 37, 5, 50, 5, 8, 5, 22, 1, 1, 1, 1, 2, 2, 0, 2, 2, 0, 3, 8, 2, 1, 0, 11, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 3, 17, 24, 14, 3, 2, 4, 1, 1, 3, 8, 6, 7, 10, 5, 30, 23, 5, 56, 2, 2, 2, 3, 5, 2, 0, 2, 1, 1, 2, 19, 2, 0, 2, 2, 2, 6, 2, 2, 0, 1, 3, 2, 3, 2, 0, 0, 3, 2, 4, 3, 2, 1, 1, 2, 0, 17, 4, 19, 5, 22, 42, 20, 65, 83, 10, 56, 33, 58, 17, 46, 22, 31, 16, 5, 23, 18, 21, 19, 2, 6, 3, 3, 8, 3, 3, 8, 5, 4, 4, 5, 5, 2, 2, 4, 3, 2, 2, 3, 3, 2, 4, 7, 9, 5, 2, 4, 5, 2, 5, 3, 5, 2, 2, 4, 3, 2, 6, 0, 1, 2, 8, 1, 1, 2, 0, 3, 8, 7, 3, 1, 2, 14, 3, 2, 3, 15, 1, 5, 15, 2, 2, 5, 3, 6, 2, 5, 1, 1, 2, 3, 3, 13, 6, 8, 1, 7, 12, 2, 6, 1, 2, 15, 6, 1, 2, 3, 4, 49, 2, 3, 6, 1, 2, 6, 3, 2, 7, 2, 4, 4, 2, 5, 11, 8, 7, 9, 3, 1, 4, 2, 2, 7, 3, 1, 19, 7, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 8, 3, 3, 2, 1, 1, 4, 2, 3, 1, 2, 3, 2, 1, 2, 7, 2, 1, 2, 1, 3, 3, 1, 1, 6],
            tv1996: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2450, 3193, 430, 3612, 3249, 93168, 2635, 5182, 8068, 26057, 16983, 6775, 4660, 7260, 1013, 3488, 24403, 80089, 4092, 92856, 34867, 21020, 0, 255256, 48977, 6586, 4640, 6164, 2991, 12494, 10377, 84727, 7831, 6113, 7821, 26840, 855893, 56493, 24777, 8622, 10419, 8999, 1256, 5673, 9254, 8001, 9067, 10572, 1812, 8766, 362489, 24119, 10600, 7333, 208, 16775, 7440, 12234, 5411, 1447, 8781, 4334, 65638, 2184, 6855, 74468, 34596, 184466, 9941, 231126, 46491, 397354, 189911, 25152, 4148, 0, 0, 0, 73923, 2322, 43972, 6206, 3431, 4795, 5992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29400, 376272, 33714, 308271, 8899, 58066, 0, 0, 0, 0, 0, 0, 0, 0, 3462, 7997, 72517, 7492, 3800, 148986, 114904, 73906, 15400, 11065, 165951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10212, 29965, 7169, 48549, 160158, 22569, 133471, 0, 0, 0, 0, 0, 0, 0, 150173, 0, 0, 0, 0, 0, 36361, 4570, 20079, 0, 0, 0, 0, 0, 0, 195133, 8248, 74516, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47092, 505098, 63027, 49600, 0, 0, 0, 22661, 10797, 0, 0, 10743, 17051, 0, 0, 0, 0, 0, 21393, 30892, 0, 0, 0, 0, 32544, 553782, 54656, 90171, 96878, 0, 0, 0, 0, 2989, 79550, 32553, 9647, 5869, 26448, 7668, 42446, 4341, 614, 3240, 16766, 39627, 13613, 12502, 19458, 605, 4828, 5083, 2454, 3351, 9746, 35411, 5048, 73647, 4176, 3515, 7737, 555953, 6646, 1634, 20443, 5264, 2316, 2626, 9391, 4274, 1858, 570, 1569, 18814, 3276, 1344, 1581, 6904, 546, 3635, 32821, 3159, 9843, 2411, 1387, 1716, 23816, 1249, 1297, 2433, 4409, 2440, 53390, 788, 2199, 121354, 0, 6515, 1176, 4160, 109266, 3495, 1650, 6364, 4805, 4655, 10053, 4236, 12359, 881, 3091, 5391, 413355, 884151, 290385, 69147, 7165, 13936, 11320, 6517, 4911, 1531, 1944, 3031, 1472, 22500, 484, 3251, 8824, 45282, 10972, 27638, 42769, 1955, 418, 6507, 4703, 7043, 6735, 14688, 2845, 1101, 179721, 6790, 3095, 1626, 2664, 6527, 3458, 1909, 25815, 10955, 14365, 5941, 14110, 4997, 3506, 1815, 3054, 8548, 4091, 2800, 3966, 3311, 3538, 3911, 1534, 5011, 4276, 12398, 2556, 885, 2729, 14452, 5068, 7691, 3512, 4913, 13308, 9061, 4869, 1952, 616, 6411, 14666, 9932, 6326, 8505, 2488, 22896, 4003, 4128, 5679, 19514, 14316, 3291, 2808, 33761, 249658, 426, 8988, 26855, 8655, 2888, 6012, 5864, 134710, 1916, 7055, 1224, 1562, 4235, 4779, 12297, 1032, 220253, 25180, 5352, 11952, 9457, 9835, 1854, 3696, 3496, 4159, 9685, 2404, 640, 6865, 4779, 8790, 7965, 39877, 117743, 6709, 4051, 5207, 3132, 2490, 6370, 3452, 100500, 3084, 31377, 798, 4722, 1736, 10928, 18998, 43564, 1093, 882, 4408, 2301, 11939, 21841, 1996, 2545, 9767, 5839, 898, 7439, 9857, 14550, 9929, 1735, 56242, 1142, 25020, 4242, 29766, 3279, 3154, 6596, 6125, 7403, 892, 968, 11787, 3557, 1119, 4357, 1832, 49654, 251194, 15470, 37478, 1773, 3194, 6097, 26394, 7582, 2094, 1754, 13221, 1305, 28215, 6536, 33869, 6026, 9892, 1847, 2740, 5657, 14504, 991, 3575, 8065, 5383, 5985, 4215, 1364, 53643, 1169, 729, 5118, 1143, 26300, 181297, 32686, 117279, 2377, 1960, 1707, 1550, 4789, 6614, 9774, 9439, 3304, 12277, 11122, 4904, 15526, 2394, 16337, 4176, 11305, 150745, 2733, 14244, 26245, 8582, 2646, 4805, 5012, 3767, 3846, 2806, 10977, 3907, 4751, 3384, 48319, 2648, 1849, 573, 3561, 15534, 7018, 2936, 1726, 3323, 2943, 15634, 1546, 3645, 132925, 1431, 58079, 1766, 1342, 4975, 2941, 15856, 3436, 1587, 1145, 1672, 2717, 2443, 768, 2989, 8826, 12447, 182543, 1524, 18519, 6880, 5166, 37800, 1778, 2517, 1327, 15598, 1043, 10517, 2487, 690, 9803, 21876, 32808, 6821, 2287, 41533, 74489, 24938, 3393, 817432, 63083, 264552, 9319, 669, 917, 409644, 1585, 1053, 21753, 6231, 5166, 3892, 4035, 5572, 4113, 97708, 3263, 4401, 1888, 3823, 534, 1784, 3938, 190894, 1438, 2284, 544, 7437, 8707, 12239, 7831, 4836, 2450, 4102, 17321, 8889, 886, 3432, 97450, 7498, 4010, 3854, 4791, 818, 9879, 2698, 30278, 22457, 5486, 37320, 77, 1815, 5310, 1241, 4493, 40328, 3120, 9473, 1438, 22772, 6950, 6127, 2592, 1336, 1962, 4160, 9312, 11049, 2184, 21972, 4695, 5198, 4238, 12496, 3370, 258, 406, 378, 7528, 3357, 3488, 2326, 3935, 3676, 2392, 7700, 429, 2114, 35516, 4425, 35346, 1991, 24308, 11504, 6006, 13337, 15183, 4159, 70981, 9380, 4122, 2276, 13696, 5379, 1455, 69783, 1273, 12694, 9699, 15024, 21655, 2572, 1809, 2436, 3657, 5513, 17411, 38522, 31923, 18684, 6626, 2033, 7567, 9296, 40021, 3567, 737, 7928, 1743, 3662, 10839, 2730, 2501, 2653, 1991, 17206, 1164, 1554, 462044, 5460, 3635, 1724, 2202, 3552, 2469, 166599, 2384, 75663, 5573, 1420, 5943, 2908, 14513, 173441, 1789, 14138, 4890, 1933, 145140, 4537, 11335, 9670, 30536, 15804, 7674, 3008, 14567, 3732, 2197, 13722, 1537, 4574, 8229, 936, 2066, 9875, 2411014, 21335, 30662, 12968, 2103, 12161, 3174, 7218, 3966, 13906, 6715, 2086, 7655, 6505, 1569, 4578, 3082, 22541, 1989, 4238, 19607, 2787, 37464, 391613, 6538, 1471, 523291, 8796, 103062, 1206, 251532, 9598, 209723, 2776, 833, 6021, 547, 7728, 62961, 94427, 2128, 2978, 7101, 13944, 2767, 3763, 584, 5175, 12796, 963, 57049, 7569, 116140, 7949, 32692, 46938, 4303, 1491, 7646, 2059, 1315, 4177, 9043, 1812, 5018, 11100, 207356, 3659, 7464, 98031, 1781, 3652, 1486, 208393, 63196, 352602, 5612, 3051, 4411, 2037, 111596, 3024, 12649, 2890, 2392, 448, 14804, 322, 333, 1623, 7744, 171391, 4652, 1794, 5241, 2185, 6985, 46612, 7586, 2203, 6042, 447, 6091, 25554, 17776, 12124, 5973, 2611, 4373, 2663, 6521, 6551, 7326, 9750, 5893, 59495, 36895, 8167, 796, 15026, 1204, 407414, 2959, 8217, 14881, 33350, 6177, 515, 182, 3655, 2405, 13400, 4001, 25421, 1541, 39950, 4268, 2289, 55757, 8866, 26400, 4799, 3562, 5140, 19558, 3186, 1641, 1371, 1562, 7695, 1357, 8419, 370, 2743, 18293, 1972, 27671, 7763, 262710, 16100, 11857, 7137, 9956, 5045, 3544, 6697, 29389, 1168, 4565, 9267, 32473, 5410, 17993, 334, 29270, 108558, 4091, 43219, 864576, 12883, 6389, 117007, 5500, 5772, 1572, 1523, 15880, 15499, 1127, 1489, 4090, 1844, 24745, 29010, 6758, 807, 194814, 11341, 51975, 1952, 7837, 4301, 2715, 50301, 13541, 8597, 13365, 4590, 688, 1783, 2215, 33018, 5175, 1643, 139787, 32111, 22360, 5362, 5566, 281177, 4165, 717, 3048, 2103, 4025, 2583, 514, 2731, 1960, 6897, 5375, 7146, 3546, 398, 8587, 1277, 988, 2723, 1036, 12099, 19416, 62004, 4933, 3732, 20694, 5291, 4675, 3437, 162996, 4943, 94214, 2219, 6172, 1655, 1569, 9211, 2318, 18545, 85846, 18085, 8461, 10127, 26617, 3339, 5758, 12392, 80910, 17278, 112033, 13026, 12524, 9652, 9450, 14377, 511296, 52529, 21446, 35967, 6025, 204764, 22548, 17672, 35241, 42491, 462278, 6727, 17726, 4658, 102246, 1980, 6629, 29342, 7656, 5674, 24939, 54382, 15108, 22778, 39089, 61782, 17907, 12466, 6305, 33881, 20442, 3339, 3385, 5943, 183323, 16152, 20574, 5166, 29565, 10341, 8745, 78744, 40013, 5903, 7773, 4946, 5021, 13176, 5930, 4934, 5111, 5755, 11633, 7317, 18163, 120420, 16352, 36070, 5598, 46731, 5420, 3190, 21817, 2122, 17260, 3586, 3909, 113248, 42843, 146635, 10890, 56200, 57594, 7752, 32219, 6185, 4015, 162945, 9108, 4363, 3831, 5280, 23622, 10089, 5214, 8908, 4948, 5028, 7479, 4088, 6752, 6566, 3802, 17633, 21769, 14739, 2501, 3227, 4102, 16924, 8214, 156106, 62686, 7438, 4764, 92664, 4450, 2015, 4519, 17596, 6309, 8031, 15641, 35916, 1781, 11501, 20850, 18925, 14630, 3715, 32119, 3377, 1663, 34840, 8117, 35619, 60242, 10953, 5878, 306028, 54596, 6619, 7930, 7722, 4540, 5937, 13803, 13956, 12800, 3289, 56739, 5198, 1933, 8854, 2106, 4032, 5451, 18595, 3313, 122003, 7897, 11535, 12631, 14238, 42142, 19829, 27286, 9611, 7564, 6456, 6192, 4647, 13695, 6969, 50773, 8950, 20489, 11324, 2499, 93305, 54653, 6468, 16354, 17957, 4569, 12266, 8324, 14536, 10553, 6919, 7740, 2052, 823, 7126, 1357, 11369, 185726, 1221, 10820, 2756, 18586, 6361, 4843, 243168, 7164, 21602, 1008, 6771, 21714, 7643, 5678, 9507, 797, 5146, 3030, 300471, 9550, 3911, 38677, 6326, 1082, 71277, 27346, 22109, 5074, 15513, 12789, 4371, 14384, 20367, 2710, 2346, 4144, 110645, 12637, 3900, 25558, 5130, 212845, 12278, 10675, 7030, 8552, 15386, 11654, 8941, 128007, 13052, 12424, 7428, 116815, 10676, 21452, 10420, 11616, 14855, 5391, 31228, 6204, 22970, 9992, 31693, 7702, 198213, 60774, 110737, 65202, 32695, 291442, 18173, 18883, 743, 8848, 5857, 5873, 2538, 1886, 5842, 16439, 9915, 11571, 4810, 9815, 2474, 6801, 2852, 4810, 20991, 13519, 6644, 174056, 44666, 52044, 32676, 20069, 21739, 16103, 147587, 9090, 95416, 49931, 4951, 12737, 22011, 3619, 21897, 6026, 4698, 103821, 33734, 5971, 97164, 12095, 19394, 10356, 14674, 21161, 9084, 19449, 6927, 4160, 13524, 8282, 31329, 27403, 5274, 7250, 66102, 2071, 6032, 11536, 4770, 10172, 32016, 11284, 27516, 3532, 7450, 36930, 143329, 19549, 17067, 77745, 16334, 8231, 8064, 26089, 2346, 886, 5447, 2653, 13280, 11619, 6715, 26197, 60591, 21008, 227363, 121718, 40691, 11205, 8549, 13092, 5788, 18169, 5099, 1826, 3357, 1475, 20738, 15662, 83035, 4275, 4209, 4159, 6804, 20124, 45399, 4474, 2568, 5084, 29406, 4161, 6631, 21671, 71526, 212122, 3542, 16229, 3968, 4370, 6111, 4090, 7226, 2730, 65961, 14875, 6653, 10692, 38499, 12996, 16366, 4850, 66709, 85665, 13261, 24688, 3813, 9064, 505642, 9742, 63438, 17651, 2617, 9178, 4509, 14902, 5934, 2181, 38961, 12380, 15043, 99910, 25272, 7169, 13639, 7352, 23808, 8140, 334898, 148304, 240302, 23344, 2968, 10928, 33625, 5324, 163809, 5065, 189723, 12493, 83601, 15855, 362887, 45036, 15170, 3592, 35409, 11876, 7402, 372068, 29908, 4185, 9849, 12785, 11385, 59295, 76495, 10447, 128156, 13068, 10408, 4259, 26843, 2755, 3332, 10577, 11518, 7037, 18127, 74279, 25779, 538615, 29508, 4549, 11340, 10342, 4076, 4088, 18025, 45732, 7397, 5101, 8581, 9191, 7913, 67196, 5700, 10055, 25392, 11357, 8679, 3006, 9964, 4901, 8691, 20874, 34724, 101992, 3843, 13226, 78443, 3181, 12304, 2797, 2685, 1996, 6338, 5586, 55242, 1143, 200573, 1952, 8075, 3375, 23159, 25378, 33209, 6930, 6953, 5399, 7635, 50850, 15250, 44863, 13339, 9409, 8844, 21596, 12760, 93135, 4720, 56256, 13397, 19342, 39609, 2173, 15190, 14806, 20846, 5010, 326380, 10506, 13955, 2042, 5637, 37409, 7049, 5929, 18282, 10451, 15988, 9861, 8027, 23945, 6057, 26628, 13124, 12251, 10539, 14981, 8766, 9306, 4930, 114693, 7292, 9e3, 10173, 5184, 5538, 112241, 4847, 8627, 400515, 9607, 50684, 33449, 41415, 3912, 4203, 8173, 4405, 8576, 9624, 9747, 3598, 14784, 13730, 60124, 67078, 42523, 5725, 7067, 200382, 16347, 4342, 14600, 4224, 46248, 15443, 4612, 8573, 7124, 10128, 21707, 7279, 8813, 39421, 15440, 9652, 2938, 3103, 3792, 3407, 4121, 54288, 410234, 8275, 7013, 5102, 6055, 2297, 10680, 3099, 8977, 10077, 8122, 8823, 4398, 3968, 2292, 6360, 21227, 7676, 2522, 4503, 15090, 4658, 9095, 3969, 21109, 14805, 3647, 52443, 25801, 17980, 9211, 5633, 8644, 11294, 28685, 5675, 163860, 27975, 17314, 30375, 22641, 3513, 14854, 5770, 8792, 15706, 17358, 8401, 112929, 152951, 18063, 4506, 7463, 4764, 6998, 95508, 78191, 9786, 100495, 254196, 46533, 23300, 10198, 9294, 51727, 17501, 8596, 13639, 12447, 5514, 18888, 6410, 30436, 15558, 9072, 260906, 4283, 10143, 9333, 4498, 19632, 30639, 15366, 122398, 11790, 18099, 110831, 2154, 14020, 5781, 12194, 4297, 18902, 7285, 4118, 10761, 5358, 3368, 8335, 3435, 7343, 10279, 53109, 24582, 6160, 8951, 14236, 13039, 6913, 4757, 1868, 8486, 29390, 21228, 21451, 12313, 8684, 39259, 4351, 6266, 8570, 3482, 125943, 10609, 4154, 4263, 7385, 11130, 38790, 8642, 3187, 45586, 4298, 13359, 16301, 65303, 1581, 10721, 3636, 4663, 6480, 129610, 269968, 9968, 7952, 26001, 171685, 9921, 7412, 7787, 18335, 23566, 74102, 11226, 32961, 166009, 7384, 1726666, 8693, 4469, 190241, 28527, 6589, 3411, 54183, 25992, 40005, 10401, 59086, 24674, 17653, 9465, 11104, 20946, 7209, 37561, 10482, 9519, 11374, 13829, 19385, 5302, 53717, 10830, 29774, 5056, 15893, 23032, 561892, 19451, 14330, 46532, 2649, 1170, 22696, 56869, 2383, 4767, 31446, 28955, 10960, 15071, 6164, 20372, 11483, 1838, 3513, 5071, 2057, 56290, 31894, 19279, 35813, 56629, 6817, 14244, 533277, 9182, 11642, 15051, 9615, 6456, 6304, 4650, 850, 6109, 5276, 13262, 15505, 8281, 6698, 16547, 5592, 14770, 5781, 4054, 12078, 3634, 3308, 49932, 6269, 4532, 6339, 225755, 11635, 39377, 4045, 16009, 53720, 17222, 6607, 19102, 43154, 12210, 279913, 52180, 7664, 15940, 28601, 8150, 11683, 8620, 15142, 7207, 4441, 93188, 6970, 53837, 35382, 52012, 179546, 39252, 20794, 11834, 60118, 87794, 5225, 5465, 3831, 8739, 5249, 7850, 5649, 6995, 21686, 11067, 8070, 48767, 165472, 8830, 65247, 8177, 35823, 24460, 258386, 131726, 195745, 248961, 33214, 202976, 20682, 14204, 51451, 16158, 2386, 17133, 58238, 10787, 6637, 5473, 4424, 8983, 28063, 6490, 67625, 17440, 8916, 3896, 12616, 7882, 19215, 43948, 10381, 38722, 19773, 15941, 23954, 7282, 6030, 14758, 2725, 32560, 2595, 3577, 2218, 46826, 59275, 2231, 4219, 2524, 158366, 7977, 289350, 86814, 140991, 17703, 15532, 31643, 17324, 31591, 2858, 15636, 14425, 9969, 11724, 4614, 2787, 5687, 23012, 344863, 35997, 22544, 26791, 73851, 7449, 5539, 7282, 32970, 1513, 12877, 3722, 20021, 7127, 24238, 18893, 6258, 25607, 10008, 3570, 7613, 4235, 11730, 41861, 9942, 12435, 7824, 7709, 8607, 3054, 13160, 9440, 3749, 4054, 94429, 60955, 88105, 11665, 77568, 7222, 60320, 15453, 11499, 66429, 2021, 5667, 6799, 3013, 16073, 5312, 43074, 7100, 45769, 3273, 11913, 6119, 34444, 14159, 20318, 5461, 371380, 4131, 5765, 7664, 35423, 7877, 2619, 7237, 873, 116817, 6411, 106110, 40735, 36259, 155286, 13041, 4811, 55409, 25977, 40548, 91002, 32400, 293961, 5811, 14515, 3445, 544664, 21166, 309994, 26988, 25138, 6253, 1821, 7476, 3791, 10924, 3448, 5092, 26820, 8536, 5080, 18206, 12803, 6513, 4553, 4544, 1502, 24123, 4223, 8129, 21595, 8194, 9327, 15821, 6756, 3845, 8698, 4015, 11940, 38011, 10030, 8770, 4012, 10079, 18395, 2720, 8782, 6797, 4578, 21428, 2311, 12862, 61619, 13528, 26478, 8158, 20876, 18396, 46354, 7883, 9573, 15440, 7062, 33242, 9778, 33162, 10397, 11215, 4650, 45376, 6635, 29543, 4700, 2245, 2297, 4052, 8985, 2960, 28411, 4304, 21130, 6970, 13009, 6576, 4241, 7131, 14278, 5568, 10118, 2864, 18125, 2538, 9788, 53678, 14075, 3119, 82681, 6153, 2045, 21837, 4866, 2453, 14495, 3696, 30583, 16457, 7984, 49343, 15598, 7774, 9607, 96688, 13718, 45779, 14869, 39241, 39065, 10185, 3612, 6506, 26626, 34127, 539833, 6726, 6385, 12593, 7425, 6403, 4252, 2939, 1972, 21624, 5166, 10875, 9076, 18700, 10433, 13785, 16585, 2255, 2463, 5792, 3668, 3815, 4553, 6141, 3845, 6833, 6992, 7035, 3759, 7497, 18574, 8461, 8323, 8604, 49330, 4469, 4893, 3595, 8807, 2936, 25287, 4795, 17472, 3267, 11566, 31216, 4149, 5155, 2427, 3458, 3460, 13347, 3650, 27671, 28959, 37535, 12801, 7975, 7374, 39273, 9120, 21616, 2201, 44730, 4868, 13736, 1759, 4179, 2455, 15831, 3110, 114538, 15268, 45673, 24126, 38432, 82979, 8922, 4996, 6047, 20576, 10332, 5918, 8435, 9500, 2537, 3024, 8982, 5863, 9464, 199392, 7282, 38051, 5710, 291617, 6887, 4733, 37124, 28244, 21282, 38171, 505213, 4851, 6796, 15320, 11386, 8299, 20333, 18571, 17232, 7427, 18840, 3575, 127733, 20754, 6889, 6591, 23120, 49603, 11625, 9698, 627977, 5716, 11844, 6653, 3695, 3742, 6538, 5230, 282214, 19952, 11159, 20485, 9188, 6271, 8960, 6159, 15215, 20888, 22023, 4047, 124028, 731597, 11888, 51594, 12611, 4176, 6130, 5891, 10161, 11176, 3060, 3796, 15252, 6815, 14647, 2764, 2814, 2054, 47003, 20285, 7220, 14837, 13844, 6228, 37701, 19298, 7476, 7486, 26987, 7061, 18194, 18143, 14330, 17654, 4447, 26553, 6942, 13379, 16428, 9030, 5453, 46001, 6460, 43629, 18023, 9543, 14893, 57802, 64174, 14521, 100858, 11332, 92971, 78985, 3625, 13013, 9455, 234748, 108791, 84509, 44507, 5971, 12275, 6967, 230957, 32972, 8549, 9579, 2131, 17598, 32672, 15020, 3331, 5513, 6277, 8035, 89444, 492899, 194939, 94929, 41439, 3308, 3171, 3481, 10306, 3298, 18809, 5477, 2051, 22102, 36206, 5536, 11495, 10155, 2566, 41310, 22931, 69067, 28291, 8715, 2159, 4559, 32742, 5166, 172239, 6739, 65309, 51920, 10569, 5047, 6715, 10420, 14815, 6693, 15297, 9089, 9079, 11097, 36911, 7770, 4384, 8421, 16299, 5608, 12155, 2817, 6418, 4161, 6020, 6392, 14182, 14788, 12345, 12035, 118178, 8937, 17145, 106445, 181747, 13421, 6338, 24834, 5371, 10074, 12774, 5908, 62720, 3123, 18362, 23511, 31328, 25413, 25797, 18519, 2054, 4939, 19258, 16987, 6663, 18412, 22107, 18416, 6173, 8235, 15056, 8208, 32678, 27677, 29074, 9492, 2540, 3234, 11628, 5113, 6500, 27229, 7330, 25884, 5296, 4668, 4306, 6797, 13966, 207229, 18915, 26023, 4297, 10278, 4260, 4510, 4460, 7222, 95230, 365263, 17517, 103095, 58625, 42746, 8555, 5441, 2677, 27622, 5868, 4515, 6058, 6444, 8203, 5714, 15763, 3237, 8225, 7771, 4873, 16260, 10896, 16056, 6125, 5946, 7838, 26479, 28262, 54769, 12675, 11785, 8017, 12620, 66479, 5645, 10820, 42207, 10323, 4612, 4239, 23495, 18829, 194011, 35096, 14694, 14343, 13137, 49832, 4281, 15265, 6781, 5677, 3989, 5568, 15422, 8953, 6301, 15327, 1982, 5359, 140045, 29422, 8710, 192302, 4296, 7060, 21521, 9007, 4930, 53435, 83256, 21075, 47235, 100573, 7697, 4284, 57967, 20068, 34623, 23926, 97736, 3166, 14421, 10962, 12855, 6612, 15003, 11232, 27900, 30315, 158346, 215195, 94745, 34755, 20763, 23616, 29701, 3533, 34772, 8166, 1382, 6868, 10152, 2844, 7131, 7171, 2646, 6953, 3312, 5533, 7447, 2780, 15476, 3160, 5781, 26477, 27872, 3273, 24298, 5267, 5264, 11713, 16258, 325891, 356841, 352227, 71786, 81398, 3976, 6401, 2662, 3404, 34930, 18688, 33206, 13885, 35306, 10054, 29072, 24049, 7499, 4790, 46765, 7822, 25191, 3655, 4276, 14964, 16280, 28241, 52997, 1728, 18301, 3796, 2311, 8072, 32841, 4394, 223379, 16931, 8472, 75376, 7435, 8302, 3841, 3103, 7133, 7570, 324486, 36931, 16410, 5529, 228213, 2106, 4568, 12955, 3562, 524306, 8711, 4592, 970, 11055, 1040, 34792, 7574, 26547, 4801, 1338, 10840, 23111, 8920, 2756, 1426, 1328, 2385, 3883, 2758, 4083, 2459, 5762, 6040, 3514, 12029, 6124, 16206, 13915, 3041, 3157, 3001, 25850, 4380, 4042, 1781, 2703, 10070, 2310, 1979, 1389, 17677, 2435, 3800, 13671, 3997, 924, 1744, 1369, 25836, 1571, 785, 11591, 16150, 12580, 3722, 4247, 8320, 2011, 6029, 4465, 6730, 1350, 1880, 15e3, 16413, 2817, 70517, 112730, 3519, 44382, 507, 2172, 5468, 1152, 3657, 16447, 2229, 10701, 8186, 3683, 13587, 17733, 5915, 10308, 21319, 1022, 16240, 3294, 2615, 12046, 4333, 20473, 5948, 18532, 2749, 16290, 39186, 20750, 13075, 27644, 5033, 9111, 10996, 55882, 145146, 15405, 18476, 7111, 100196, 6909, 2665, 1340, 32847, 1743, 1281, 2144, 1382, 4661, 6059, 15464, 26758, 10184, 4095, 746, 5954, 13885, 16917, 2483, 1473, 1089, 29890, 50471, 5624, 3871, 8875, 13288, 9639, 41118, 7354, 239073, 4996, 3789, 2242, 1025, 3669, 1407, 10098, 13492, 4231, 10445, 6996, 3870, 3531, 15895, 59360, 64510, 34874, 3533, 1702, 1692, 13259, 6892, 15848, 13374, 124022, 7404, 5154, 3965, 159232, 220960, 87280, 16022, 1836, 1312, 35006, 765, 5329, 9986, 1782, 3326, 23213, 6643, 18216, 51449, 3919, 1955, 10925, 33515, 159755, 9952, 4297, 11345, 1300, 2349, 25331, 269961, 1256, 2893, 1966, 4239, 4762, 445, 690, 941, 2067, 8705, 7069, 1354, 2435, 4774, 16696, 7390, 6798, 17191, 7340, 26250, 21866, 1255, 12096, 28464, 11332, 1067, 21495, 10833, 6194, 2511, 2963, 1045, 2802, 780, 1225, 8593, 1387, 4042, 4939, 5010, 4207, 1088, 498, 7098, 32225, 3294, 7932, 15500, 6475, 1516, 14436, 12246, 8631, 7311, 53803, 23870, 31135, 5330, 4673, 28168, 7169, 21131, 14119, 741104, 91487, 12564, 7052, 14063, 3331, 107463, 29516, 4614, 1615, 7448, 2076, 290, 2246, 1974, 488, 1799, 1735, 24963, 13233, 19486, 12251, 2789, 2209, 613, 2482, 936, 3495, 7866, 1162, 3601, 5455, 23275, 55045, 7840, 1242, 2542, 21964, 3220, 10237, 88057, 2529, 18591, 15415, 40390, 2142, 16773, 17900, 8151, 29311, 38644, 3452, 5701, 3942, 1716, 6485, 1302, 246301, 1553, 4953, 519, 66522, 14585, 84426, 10640, 1563, 3316, 4804, 78202, 3031, 63044, 4456, 4809, 3673, 7861, 34095, 12144, 16326, 42410, 5587, 2164, 91717, 23927, 14879, 74526, 37591, 9798, 130103, 12499, 170647, 73661, 107925, 254123, 14199, 51694, 6637, 41625, 15518, 12943, 4158, 11377, 48235, 20736, 35453, 47119, 21167, 7851, 8238, 4473, 3545, 3837, 5959, 6327, 1289, 2316, 2268, 25261, 4839, 6989, 5309, 904, 7868, 43967, 13842, 99379, 4278, 4222, 1949, 11209, 8048, 11272, 3868, 12098, 7703, 34500, 3001, 8262, 3353, 3880, 9137, 29078, 3925, 8998, 8581, 3923, 930, 4297, 4835, 11835, 15814, 1382, 10520, 45768, 11477, 3378, 2787, 3309, 7277, 434, 13203, 14574, 12332, 874, 6188, 16010, 4019, 9442, 11799, 8787, 3623, 16328, 12506, 6679, 7551, 20607, 41325, 4632, 9176, 5222, 5355, 8002, 5112, 11889, 5521, 3468, 6195, 6647, 17279, 15189, 9186, 55654, 3725, 3093, 29928, 33329, 26448, 6095, 23320, 20318, 64889, 32500, 26091, 5555, 10794, 7279, 29060, 5721, 19243, 16986, 63860, 11799, 38477, 90837, 6785, 2449, 9046, 5557, 12861, 16394, 14596, 14137, 154266]
        },
        schema: {
            seniors: "INT",
            r2008: "INT",
            college: "INT",
            asian: "INT",
            d2008: "INT",
            r2000: "INT",
            hhi: "INT",
            d2004: "INT",
            r2004: "INT",
            d2000: "INT",
            hsgrad: "INT",
            other: "INT",
            black: "INT",
            sen_r2006: "INT",
            white: "INT",
            sen_tv2006: "INT",
            sen_i2006: "INT",
            tv2000: "INT",
            tv2004: "INT",
            tv2008: "INT",
            r1996: "INT",
            d1996: "INT",
            sen_d2006: "INT",
            hispanic: "INT",
            tv1996: "INT"
        }
    };
    VoteMap.prototype.initChangeData = function(geo) {
        this.initChangeDataByYear(geo, new DataTable(nytg.data.counties_supplement), [1996, 2e3, 2004, 2008])
    };
    Opts.copyAllParams(E, {
        PRES_2012_VIEW: "pres_2012_view",
        PRES_2008_VIEW: "pres_2008_view",
        PRES_2004_VIEW: "pres_2004_view",
        PRES_2000_VIEW: "pres_2000_view",
        PRES_1996_VIEW: "pres_1996_view",
        SENATE_2000_VIEW: "senate_2000_view",
        SENATE_2012_VIEW: "senate_2012_view",
        INCOME_VIEW: "income_view",
        WHITE_VIEW: "white_view",
        BLACK_VIEW: "black_view",
        HISPANIC_VIEW: "hispanic_view"
    });

    function SideBySidePanel(mainMap) {
        var mainOpts = mainMap._opts;
        var map = mainMap._map;
        var w = mainOpts.width;
        var h = mainOpts.height;
        var cont = El(map.div).child("div").addClass("nytg-double-map-wrapper");
        var leftEl = cont.child("div").addClass("nytg-side-map");
        var rightEl = cont.child("div").addClass("nytg-side-map");
        cont.hide();
        var halfWidth = w / 2;
        var sideOpts = {
            width: halfWidth,
            county_shapes: mainMap._countyShapeData,
            county_data: mainMap._countyData,
            state_shapes: mainMap._stateShapeData,
            state_data: mainMap._stateData
        };
        sideOpts.views = [E.PRES_2012_VIEW];
        Opts.copyNewParams(sideOpts, mainOpts);
        leftEl.css("background-color:#ffcccc").css("width", halfWidth).css("height", h);
        rightEl.css("background-color:#ffffcc").css("width", halfWidth).css("height", h);
        var leftOpts = Opts.copyNewParams(sideOpts, mainOpts);
        var rightOpts = Opts.copyAllParams({}, leftOpts);
        this.show = function() {
            cont.show()
        };
        this.hide = function() {
            cont.hide()
        }
    }

    function SideBySideMap(div, opts) {
        this._countyShapeData = opts.county_shapes;
        this._countyData = opts._countyData;
        this._stateShapeData = opts.state_shapes;
        this._stateData = opts.state_data;
        this.__super__(div, opts);
        this._loader.startWaiting()
    }
    Opts.inherit(SideBySideMap, BigMap);
    SideBySideMap.prototype.initView = function(name) {
        var map = this._map;
        var view = map.views.getView(name)
    };
    BigMap.prototype.initAdvancedFeatures = function(opts) {
        if (!E.USE_FLASH) {
            opts.views.push(E.COUNTY_COXA_CHANGE_VIEW);
            if (A.EXPERIMENTAL_FEATURES) {}
        }
    }
})();
